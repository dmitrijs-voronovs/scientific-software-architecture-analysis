id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1241,Security,access,accessed,1241,"/*******************************************************************************; Introduction. zstd, short for Zstandard, is a fast lossless compression algorithm, targeting; real-time compression scenarios at zlib-level and better compression ratios.; The zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed.; *******************************************************************************/; /*------ Version ------*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:780,Usability,Simpl,Simple,780,"/*******************************************************************************; Introduction. zstd, short for Zstandard, is a fast lossless compression algorithm, targeting; real-time compression scenarios at zlib-level and better compression ratios.; The zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed.; *******************************************************************************/; /*------ Version ------*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1092,Usability,Simpl,Simple,1092,"/*******************************************************************************; Introduction. zstd, short for Zstandard, is a fast lossless compression algorithm, targeting; real-time compression scenarios at zlib-level and better compression ratios.; The zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed.; *******************************************************************************/; /*------ Version ------*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:104,Deployability,RELEASE,RELEASE,104,"/*! ZSTD_versionNumber() :; * Return runtime library version, the value is (MAJOR*100*100 + MINOR*100 + RELEASE). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:373,Availability,error,error,373,"/***************************************; * Simple API; ***************************************/; /*! ZSTD_compress() :; * Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:195,Energy Efficiency,allocate,allocated,195,"/***************************************; * Simple API; ***************************************/; /*! ZSTD_compress() :; * Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:410,Testability,test,tested,410,"/***************************************; * Simple API; ***************************************/; /*! ZSTD_compress() :; * Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:44,Usability,Simpl,Simple,44,"/***************************************; * Simple API; ***************************************/; /*! ZSTD_compress() :; * Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:378,Availability,error,errorCode,378,"/*! ZSTD_decompress() :; * `compressedSize` : must be the _exact_ size of some number of compressed and/or skippable frames.; * `dstCapacity` is an upper bound of originalSize to regenerate.; * If user cannot imply a maximum upper bound, it's better to use streaming mode to decompress data.; * @return : the number of bytes decompressed into `dst` (<= `dstCapacity`),; * or an errorCode if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:414,Testability,test,tested,414,"/*! ZSTD_decompress() :; * `compressedSize` : must be the _exact_ size of some number of compressed and/or skippable frames.; * `dstCapacity` is an upper bound of originalSize to regenerate.; * If user cannot imply a maximum upper bound, it's better to use streaming mode to decompress data.; * @return : the number of bytes decompressed into `dst` (<= `dstCapacity`),; * or an errorCode if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:399,Availability,error,error,399,"/*! ZSTD_getFrameContentSize() : requires v1.3.0+; * `src` should point to the start of a ZSTD encoded frame.; * `srcSize` must be at least as large as the frame header.; * hint : any size >= `ZSTD_frameHeaderSize_max` is large enough.; * @return : - decompressed size of `src` frame content, if known; * - ZSTD_CONTENTSIZE_UNKNOWN if the size cannot be determined; * - ZSTD_CONTENTSIZE_ERROR if an error occurred (e.g. invalid magic number, srcSize too small); * note 1 : a 0 return value means the frame is valid but ""empty"".; * note 2 : decompressed size is an optional field, it may not be present, typically in streaming mode.; * When `return==ZSTD_CONTENTSIZE_UNKNOWN`, data to decompress could be any size.; * In which case, it's necessary to use streaming mode to decompress data.; * Optionally, application can rely on some implicit limit,; * as ZSTD_decompress() only needs an upper bound of decompressed size.; * (For example, data could be necessarily cut into blocks <= 16 KB).; * note 3 : decompressed size is always present when compression is completed using single-pass functions,; * such as ZSTD_compress(), ZSTD_compressCCtx() ZSTD_compress_usingDict() or ZSTD_compress_usingCDict().; * note 4 : decompressed size can be very large (64-bits value),; * potentially larger than what local system can handle as a single memory segment.; * In which case, it's necessary to use streaming mode to decompress data.; * note 5 : If source is untrusted, decompressed size could be wrong or intentionally modified.; * Always ensure return value fits within application's authorized limits.; * Each application can set its own limits.; * note 6 : This function replaces ZSTD_getDecompressedSize() */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1579,Security,authoriz,authorized,1579,"/*! ZSTD_getFrameContentSize() : requires v1.3.0+; * `src` should point to the start of a ZSTD encoded frame.; * `srcSize` must be at least as large as the frame header.; * hint : any size >= `ZSTD_frameHeaderSize_max` is large enough.; * @return : - decompressed size of `src` frame content, if known; * - ZSTD_CONTENTSIZE_UNKNOWN if the size cannot be determined; * - ZSTD_CONTENTSIZE_ERROR if an error occurred (e.g. invalid magic number, srcSize too small); * note 1 : a 0 return value means the frame is valid but ""empty"".; * note 2 : decompressed size is an optional field, it may not be present, typically in streaming mode.; * When `return==ZSTD_CONTENTSIZE_UNKNOWN`, data to decompress could be any size.; * In which case, it's necessary to use streaming mode to decompress data.; * Optionally, application can rely on some implicit limit,; * as ZSTD_decompress() only needs an upper bound of decompressed size.; * (For example, data could be necessarily cut into blocks <= 16 KB).; * note 3 : decompressed size is always present when compression is completed using single-pass functions,; * such as ZSTD_compress(), ZSTD_compressCCtx() ZSTD_compress_usingDict() or ZSTD_compress_usingCDict().; * note 4 : decompressed size can be very large (64-bits value),; * potentially larger than what local system can handle as a single memory segment.; * In which case, it's necessary to use streaming mode to decompress data.; * note 5 : If source is untrusted, decompressed size could be wrong or intentionally modified.; * Always ensure return value fits within application's authorized limits.; * Each application can set its own limits.; * note 6 : This function replaces ZSTD_getDecompressedSize() */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:215,Availability,error,error,215,"/*! ZSTD_getDecompressedSize() :; * NOTE: This function is now obsolete, in favor of ZSTD_getFrameContentSize().; * Both functions work the same way, but ZSTD_getDecompressedSize() blends; * ""empty"", ""unknown"" and ""error"" results to the same return value (0),; * while ZSTD_getFrameContentSize() gives them separate return values.; * @return : decompressed size of `src` frame content _if known and not empty_, 0 otherwise. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:295,Availability,error,error,295,"/*! ZSTD_findFrameCompressedSize() :; * `src` should point to the start of a ZSTD frame or skippable frame.; * `srcSize` must be >= first frame size; * @return : the compressed size of the first frame starting at `src`,; * suitable to pass as `srcSize` to `ZSTD_decompress` or similar,; * or an error code if input is invalid */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:47,Availability,error,error,47,/*!< tells if a `size_t` function result is an error code */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:38,Availability,error,error,38,/*!< provides readable string from an error code */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:31,Availability,avail,available,31,"/*!< maximum compression level available */; /***************************************; * Explicit context; ***************************************/; /*= Compression context; * When compressing many times,; * it is recommended to allocate a context just once,; * and re-use it for each successive compression operation.; * This will make workload friendlier for system's memory.; * Note : re-using context is just a speed / resource optimization.; * It doesn't change the compression ratio, which remains identical.; * Note 2 : In multi-threaded environments,; * use one different context per thread for parallel execution.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:229,Energy Efficiency,allocate,allocate,229,"/*!< maximum compression level available */; /***************************************; * Explicit context; ***************************************/; /*= Compression context; * When compressing many times,; * it is recommended to allocate a context just once,; * and re-use it for each successive compression operation.; * This will make workload friendlier for system's memory.; * Note : re-using context is just a speed / resource optimization.; * It doesn't change the compression ratio, which remains identical.; * Note 2 : In multi-threaded environments,; * use one different context per thread for parallel execution.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:432,Performance,optimiz,optimization,432,"/*!< maximum compression level available */; /***************************************; * Explicit context; ***************************************/; /*= Compression context; * When compressing many times,; * it is recommended to allocate a context just once,; * and re-use it for each successive compression operation.; * This will make workload friendlier for system's memory.; * Note : re-using context is just a speed / resource optimization.; * It doesn't change the compression ratio, which remains identical.; * Note 2 : In multi-threaded environments,; * use one different context per thread for parallel execution.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:530,Performance,multi-thread,multi-threaded,530,"/*!< maximum compression level available */; /***************************************; * Explicit context; ***************************************/; /*= Compression context; * When compressing many times,; * it is recommended to allocate a context just once,; * and re-use it for each successive compression operation.; * This will make workload friendlier for system's memory.; * Note : re-using context is just a speed / resource optimization.; * It doesn't change the compression ratio, which remains identical.; * Note 2 : In multi-threaded environments,; * use one different context per thread for parallel execution.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:84,Energy Efficiency,allocate,allocate,84,"/*= Decompression context; * When decompressing many times,; * it is recommended to allocate a context only once,; * and re-use it for each successive compression operation.; * This will make workload friendlier for system's memory.; * Use one context per thread for parallel execution. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:73,Energy Efficiency,allocate,allocated,73,"/*! ZSTD_decompressDCtx() :; * Same as ZSTD_decompress(),; * requires an allocated ZSTD_DCtx.; * Compatible with sticky parameters.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:763,Availability,redundant,redundant,763,"/***************************************; * Advanced compression API; ***************************************/; /* API design :; * Parameters are pushed one by one into an existing context,; * using ZSTD_CCtx_set*() functions.; * Pushed parameters are sticky : they are valid for next compressed frame, and any subsequent frame.; * ""sticky"" parameters are applicable to `ZSTD_compress2()` and `ZSTD_compressStream*()` !; * __They do not apply to ""simple"" one-shot variants such as ZSTD_compressCCtx()__ .; *; * It's possible to reset all parameters to ""default"" using ZSTD_CCtx_reset().; *; * This API supercedes all other ""advanced"" API entry points in the experimental section.; * In the future, we expect to remove from experimental API entry points which are redundant with this API.; */; /* Compression strategies, listed from fastest to strongest */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:763,Safety,redund,redundant,763,"/***************************************; * Advanced compression API; ***************************************/; /* API design :; * Parameters are pushed one by one into an existing context,; * using ZSTD_CCtx_set*() functions.; * Pushed parameters are sticky : they are valid for next compressed frame, and any subsequent frame.; * ""sticky"" parameters are applicable to `ZSTD_compress2()` and `ZSTD_compressStream*()` !; * __They do not apply to ""simple"" one-shot variants such as ZSTD_compressCCtx()__ .; *; * It's possible to reset all parameters to ""default"" using ZSTD_CCtx_reset().; *; * This API supercedes all other ""advanced"" API entry points in the experimental section.; * In the future, we expect to remove from experimental API entry points which are redundant with this API.; */; /* Compression strategies, listed from fastest to strongest */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:447,Usability,simpl,simple,447,"/***************************************; * Advanced compression API; ***************************************/; /* API design :; * Parameters are pushed one by one into an existing context,; * using ZSTD_CCtx_set*() functions.; * Pushed parameters are sticky : they are valid for next compressed frame, and any subsequent frame.; * ""sticky"" parameters are applicable to `ZSTD_compress2()` and `ZSTD_compressStream*()` !; * __They do not apply to ""simple"" one-shot variants such as ZSTD_compressCCtx()__ .; *; * It's possible to reset all parameters to ""default"" using ZSTD_CCtx_reset().; *; * This API supercedes all other ""advanced"" API entry points in the experimental section.; * In the future, we expect to remove from experimental API entry points which are redundant with this API.; */; /* Compression strategies, listed from fastest to strongest */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:718,Availability,down,down,718,"/* Set compression parameters according to pre-defined cLevel table.; * Note that exact compression parameters are dynamically determined,; * depending on both compression level and srcSize (when known).; * Default level is ZSTD_CLEVEL_DEFAULT==3.; * Special: value 0 means default, which is controlled by ZSTD_CLEVEL_DEFAULT.; * Note 1 : it's possible to pass a negative compression level.; * Note 2 : setting a level does not automatically set all other compression parameters; * to default. Setting this will however eventually dynamically impact the compression; * parameters which have not been manually set. The manually set; * ones will 'stick'. */; /* Advanced compression parameters :; * It's possible to pin down compression parameters to some specific values.; * In which case, these values are no longer dynamically selected by the compressor */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:142,Integrability,depend,depending,142,"/* Set compression parameters according to pre-defined cLevel table.; * Note that exact compression parameters are dynamically determined,; * depending on both compression level and srcSize (when known).; * Default level is ZSTD_CLEVEL_DEFAULT==3.; * Special: value 0 means default, which is controlled by ZSTD_CLEVEL_DEFAULT.; * Note 1 : it's possible to pass a negative compression level.; * Note 2 : setting a level does not automatically set all other compression parameters; * to default. Setting this will however eventually dynamically impact the compression; * parameters which have not been manually set. The manually set; * ones will 'stick'. */; /* Advanced compression parameters :; * It's possible to pin down compression parameters to some specific values.; * In which case, these values are no longer dynamically selected by the compressor */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:57,Energy Efficiency,power,power,57,"/* Maximum allowed back-reference distance, expressed as power of 2.; * This will set a memory budget for streaming decompression,; * with larger values requiring more memory; * and typically compressing more.; * Must be clamped between ZSTD_WINDOWLOG_MIN and ZSTD_WINDOWLOG_MAX.; * Special: value 0 means ""use default windowLog"".; * Note: Using a windowLog greater than ZSTD_WINDOWLOG_LIMIT_DEFAULT; * requires explicitly allowing such size at streaming decompression stage. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:41,Energy Efficiency,power,power,41,"/* Size of the initial probe table, as a power of 2.; * Resulting memory usage is (1 << (hashLog+2)).; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX.; * Larger tables improve compression ratio of strategies <= dFast,; * and improve speed of strategies > dFast.; * Special: value 0 means ""use default hashLog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:89,Security,hash,hashLog,89,"/* Size of the initial probe table, as a power of 2.; * Resulting memory usage is (1 << (hashLog+2)).; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX.; * Larger tables improve compression ratio of strategies <= dFast,; * and improve speed of strategies > dFast.; * Special: value 0 means ""use default hashLog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:318,Security,hash,hashLog,318,"/* Size of the initial probe table, as a power of 2.; * Resulting memory usage is (1 << (hashLog+2)).; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX.; * Larger tables improve compression ratio of strategies <= dFast,; * and improve speed of strategies > dFast.; * Special: value 0 means ""use default hashLog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:46,Energy Efficiency,power,power,46,"/* Size of the multi-probe search table, as a power of 2.; * Resulting memory usage is (1 << (chainLog+2)).; * Must be clamped between ZSTD_CHAINLOG_MIN and ZSTD_CHAINLOG_MAX.; * Larger tables result in better and slower compression.; * This parameter is useless for ""fast"" strategy.; * It's still useful when using ""dfast"" strategy,; * in which case it defines a secondary probe table.; * Special: value 0 means ""use default chainLog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:35,Energy Efficiency,power,power,35,"/* Number of search attempts, as a power of 2.; * More attempts result in better and slower compression.; * This parameter is useless for ""fast"" and ""dFast"" strategies.; * Special: value 0 means ""use default searchLog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:24,Integrability,depend,depends,24,"/* Impact of this field depends on strategy.; * For strategies btopt, btultra & btultra2:; * Length of Match considered ""good enough"" to stop search.; * Larger values make compression stronger, and slower.; * For strategy fast:; * Distance between match sampling.; * Larger values make compression faster, and weaker.; * Special: value 0 means ""use default targetLength"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:54,Energy Efficiency,power,power,54,"/* Size of the table for long distance matching, as a power of 2.; * Larger values increase memory usage and compression ratio,; * but decrease compression speed.; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX; * default: windowlog - 7.; * Special: value 0 means ""automatically determine hashlog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:306,Security,hash,hashlog,306,"/* Size of the table for long distance matching, as a power of 2.; * Larger values increase memory usage and compression ratio,; * but decrease compression speed.; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX; * default: windowlog - 7.; * Special: value 0 means ""automatically determine hashlog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:38,Security,hash,hash,38,"/* Log size of each bucket in the LDM hash table for collision resolution.; * Larger values improve collision resolution but decrease compression speed.; * The maximum value is ZSTD_LDM_BUCKETSIZELOG_MAX.; * Special: value 0 means ""use default value"" (default: 3). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3,Testability,Log,Log,3,"/* Log size of each bucket in the LDM hash table for collision resolution.; * Larger values improve collision resolution but decrease compression speed.; * The maximum value is ZSTD_LDM_BUCKETSIZELOG_MAX.; * Special: value 0 means ""use default value"" (default: 3). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:192,Performance,optimiz,optimizing,192,"/* Frequency of inserting/looking up entries into the LDM hash table.; * Must be clamped between 0 and (ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN).; * Default is MAX(0, (windowLog - ldmHashLog)), optimizing hash table usage.; * Larger values improve compression speed.; * Deviating far from default value will likely result in a compression ratio decrease.; * Special: value 0 means ""automatically determine hashRateLog"". */; /* frame parameters */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:58,Security,hash,hash,58,"/* Frequency of inserting/looking up entries into the LDM hash table.; * Must be clamped between 0 and (ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN).; * Default is MAX(0, (windowLog - ldmHashLog)), optimizing hash table usage.; * Larger values improve compression speed.; * Deviating far from default value will likely result in a compression ratio decrease.; * Special: value 0 means ""automatically determine hashRateLog"". */; /* frame parameters */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:203,Security,hash,hash,203,"/* Frequency of inserting/looking up entries into the LDM hash table.; * Must be clamped between 0 and (ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN).; * Default is MAX(0, (windowLog - ldmHashLog)), optimizing hash table usage.; * Larger values improve compression speed.; * Deviating far from default value will likely result in a compression ratio decrease.; * Special: value 0 means ""automatically determine hashRateLog"". */; /* frame parameters */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:404,Security,hash,hashRateLog,404,"/* Frequency of inserting/looking up entries into the LDM hash table.; * Must be clamped between 0 and (ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN).; * Default is MAX(0, (windowLog - ldmHashLog)), optimizing hash table usage.; * Larger values improve compression speed.; * Deviating far from default value will likely result in a compression ratio decrease.; * Special: value 0 means ""automatically determine hashRateLog"". */; /* frame parameters */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:13,Security,checksum,checksum,13,/* A 32-bits checksum of content is written at end of frame (default:0) */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:318,Availability,error,error,318,"/* When applicable, dictionary's ID is written into frame header (default:1) */; /* multi-threading parameters */; /* These parameters are only active if multi-threading is enabled (compiled with build macro ZSTD_MULTITHREAD).; * Otherwise, trying to set any other value than default (0) will be a no-op and return an error.; * In a situation where it's unknown if the linked library supports multi-threading or not,; * setting ZSTD_c_nbWorkers to any value >= 1 and consulting the return value provides a quick way to check this property.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:84,Performance,multi-thread,multi-threading,84,"/* When applicable, dictionary's ID is written into frame header (default:1) */; /* multi-threading parameters */; /* These parameters are only active if multi-threading is enabled (compiled with build macro ZSTD_MULTITHREAD).; * Otherwise, trying to set any other value than default (0) will be a no-op and return an error.; * In a situation where it's unknown if the linked library supports multi-threading or not,; * setting ZSTD_c_nbWorkers to any value >= 1 and consulting the return value provides a quick way to check this property.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:154,Performance,multi-thread,multi-threading,154,"/* When applicable, dictionary's ID is written into frame header (default:1) */; /* multi-threading parameters */; /* These parameters are only active if multi-threading is enabled (compiled with build macro ZSTD_MULTITHREAD).; * Otherwise, trying to set any other value than default (0) will be a no-op and return an error.; * In a situation where it's unknown if the linked library supports multi-threading or not,; * setting ZSTD_c_nbWorkers to any value >= 1 and consulting the return value provides a quick way to check this property.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:393,Performance,multi-thread,multi-threading,393,"/* When applicable, dictionary's ID is written into frame header (default:1) */; /* multi-threading parameters */; /* These parameters are only active if multi-threading is enabled (compiled with build macro ZSTD_MULTITHREAD).; * Otherwise, trying to set any other value than default (0) will be a no-op and return an error.; * In a situation where it's unknown if the linked library supports multi-threading or not,; * setting ZSTD_c_nbWorkers to any value >= 1 and consulting the return value provides a quick way to check this property.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:299,Performance,perform,performed,299,"/* Select how many threads will be spawned to compress in parallel.; * When nbWorkers >= 1, triggers asynchronous mode when invoking ZSTD_compressStream*() :; * ZSTD_compressStream*() consumes input and flush output if possible, but immediately gives back control to caller,; * while compression is performed in parallel, within worker thread(s).; * (note : a strong exception to this rule is when first invocation of ZSTD_compressStream2() sets ZSTD_e_end :; * in which case, ZSTD_compressStream2() delegates to ZSTD_compress2(), which is always a blocking call).; * More workers improve speed, but also increase memory usage.; * Default value is `0`, aka ""single-threaded mode"" : no worker is spawned,; * compression is performed inside Caller's thread, and all invocations are blocking */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:722,Performance,perform,performed,722,"/* Select how many threads will be spawned to compress in parallel.; * When nbWorkers >= 1, triggers asynchronous mode when invoking ZSTD_compressStream*() :; * ZSTD_compressStream*() consumes input and flush output if possible, but immediately gives back control to caller,; * while compression is performed in parallel, within worker thread(s).; * (note : a strong exception to this rule is when first invocation of ZSTD_compressStream2() sets ZSTD_e_end :; * in which case, ZSTD_compressStream2() delegates to ZSTD_compress2(), which is always a blocking call).; * More workers improve speed, but also increase memory usage.; * Default value is `0`, aka ""single-threaded mode"" : no worker is spawned,; * compression is performed inside Caller's thread, and all invocations are blocking */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:859,Availability,avail,available,859,"/* Control the overlap size, as a fraction of window size.; * The overlap size is an amount of data reloaded from previous job at the beginning of a new job.; * It helps preserve compression ratio, while each job is compressed in parallel.; * This value is enforced only when nbWorkers >= 1.; * Larger values increase compression ratio, but decrease speed.; * Possible values range from 0 to 9 :; * - 0 means ""default"" : value will be determined by the library, depending on strategy; * - 1 means ""no overlap""; * - 9 means ""full overlap"", using a full window size.; * Each intermediate rank increases/decreases load size by a factor 2 :; * 9: full window; 8: w/2; 7: w/4; 6: w/8; 5:w/16; 4: w/32; 3:w/64; 2:w/128; 1:no overlap; 0:default; * default value varies between 6 and 9, depending on strategy */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_c_rsyncable; * ZSTD_c_format; * ZSTD_c_forceMaxWindow; * ZSTD_c_forceAttachDict; * ZSTD_c_literalCompressionMode; * ZSTD_c_targetCBlockSize; * ZSTD_c_srcSizeHint; * ZSTD_c_enableDedicatedDictSearch; * ZSTD_c_stableInBuffer; * ZSTD_c_stableOutBuffer; * ZSTD_c_blockDelimiters; * ZSTD_c_validateSequences; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly;; * also, the enums values themselves are unstable and can still change.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:462,Integrability,depend,depending,462,"/* Control the overlap size, as a fraction of window size.; * The overlap size is an amount of data reloaded from previous job at the beginning of a new job.; * It helps preserve compression ratio, while each job is compressed in parallel.; * This value is enforced only when nbWorkers >= 1.; * Larger values increase compression ratio, but decrease speed.; * Possible values range from 0 to 9 :; * - 0 means ""default"" : value will be determined by the library, depending on strategy; * - 1 means ""no overlap""; * - 9 means ""full overlap"", using a full window size.; * Each intermediate rank increases/decreases load size by a factor 2 :; * 9: full window; 8: w/2; 7: w/4; 6: w/8; 5:w/16; 4: w/32; 3:w/64; 2:w/128; 1:no overlap; 0:default; * default value varies between 6 and 9, depending on strategy */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_c_rsyncable; * ZSTD_c_format; * ZSTD_c_forceMaxWindow; * ZSTD_c_forceAttachDict; * ZSTD_c_literalCompressionMode; * ZSTD_c_targetCBlockSize; * ZSTD_c_srcSizeHint; * ZSTD_c_enableDedicatedDictSearch; * ZSTD_c_stableInBuffer; * ZSTD_c_stableOutBuffer; * ZSTD_c_blockDelimiters; * ZSTD_c_validateSequences; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly;; * also, the enums values themselves are unstable and can still change.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:779,Integrability,depend,depending,779,"/* Control the overlap size, as a fraction of window size.; * The overlap size is an amount of data reloaded from previous job at the beginning of a new job.; * It helps preserve compression ratio, while each job is compressed in parallel.; * This value is enforced only when nbWorkers >= 1.; * Larger values increase compression ratio, but decrease speed.; * Possible values range from 0 to 9 :; * - 0 means ""default"" : value will be determined by the library, depending on strategy; * - 1 means ""no overlap""; * - 9 means ""full overlap"", using a full window size.; * Each intermediate rank increases/decreases load size by a factor 2 :; * 9: full window; 8: w/2; 7: w/4; 6: w/8; 5:w/16; 4: w/32; 3:w/64; 2:w/128; 1:no overlap; 0:default; * default value varies between 6 and 9, depending on strategy */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_c_rsyncable; * ZSTD_c_format; * ZSTD_c_forceMaxWindow; * ZSTD_c_forceAttachDict; * ZSTD_c_literalCompressionMode; * ZSTD_c_targetCBlockSize; * ZSTD_c_srcSizeHint; * ZSTD_c_enableDedicatedDictSearch; * ZSTD_c_stableInBuffer; * ZSTD_c_stableOutBuffer; * ZSTD_c_blockDelimiters; * ZSTD_c_validateSequences; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly;; * also, the enums values themselves are unstable and can still change.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:611,Performance,load,load,611,"/* Control the overlap size, as a fraction of window size.; * The overlap size is an amount of data reloaded from previous job at the beginning of a new job.; * It helps preserve compression ratio, while each job is compressed in parallel.; * This value is enforced only when nbWorkers >= 1.; * Larger values increase compression ratio, but decrease speed.; * Possible values range from 0 to 9 :; * - 0 means ""default"" : value will be determined by the library, depending on strategy; * - 1 means ""no overlap""; * - 9 means ""full overlap"", using a full window size.; * Each intermediate rank increases/decreases load size by a factor 2 :; * 9: full window; 8: w/2; 7: w/4; 6: w/8; 5:w/16; 4: w/32; 3:w/64; 2:w/128; 1:no overlap; 0:default; * default value varies between 6 and 9, depending on strategy */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_c_rsyncable; * ZSTD_c_format; * ZSTD_c_forceMaxWindow; * ZSTD_c_forceAttachDict; * ZSTD_c_literalCompressionMode; * ZSTD_c_targetCBlockSize; * ZSTD_c_srcSizeHint; * ZSTD_c_enableDedicatedDictSearch; * ZSTD_c_stableInBuffer; * ZSTD_c_stableOutBuffer; * ZSTD_c_blockDelimiters; * ZSTD_c_validateSequences; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly;; * also, the enums values themselves are unstable and can still change.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1359,Security,access,access,1359,"/* Control the overlap size, as a fraction of window size.; * The overlap size is an amount of data reloaded from previous job at the beginning of a new job.; * It helps preserve compression ratio, while each job is compressed in parallel.; * This value is enforced only when nbWorkers >= 1.; * Larger values increase compression ratio, but decrease speed.; * Possible values range from 0 to 9 :; * - 0 means ""default"" : value will be determined by the library, depending on strategy; * - 1 means ""no overlap""; * - 9 means ""full overlap"", using a full window size.; * Each intermediate rank increases/decreases load size by a factor 2 :; * 9: full window; 8: w/2; 7: w/4; 6: w/8; 5:w/16; 4: w/32; 3:w/64; 2:w/128; 1:no overlap; 0:default; * default value varies between 6 and 9, depending on strategy */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_c_rsyncable; * ZSTD_c_format; * ZSTD_c_forceMaxWindow; * ZSTD_c_forceAttachDict; * ZSTD_c_literalCompressionMode; * ZSTD_c_targetCBlockSize; * ZSTD_c_srcSizeHint; * ZSTD_c_enableDedicatedDictSearch; * ZSTD_c_stableInBuffer; * ZSTD_c_stableOutBuffer; * ZSTD_c_blockDelimiters; * ZSTD_c_validateSequences; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly;; * also, the enums values themselves are unstable and can still change.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:145,Availability,error,error,145,"/*! ZSTD_cParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - lower and upper bounds, both inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:242,Availability,error,error,242,"/*! ZSTD_cParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - lower and upper bounds, both inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:276,Testability,test,tested,276,"/*! ZSTD_cParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - lower and upper bounds, both inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:259,Availability,error,error,259,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:727,Availability,error,error,727,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:500,Deployability,update,updated,500,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:266,Integrability,depend,depending,266,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:426,Performance,multi-thread,multi-threading,426,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:574,Security,hash,hashLog,574,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:752,Testability,test,tested,752,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:270,Availability,error,error,270,"/*! ZSTD_CCtx_setPledgedSrcSize() :; * Total input data size to be compressed as a single frame.; * Value will be written in frame header, unless if explicitly forbidden using ZSTD_c_contentSizeFlag.; * This value will also be controlled at end of frame, and trigger an error if not respected.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : pledgedSrcSize==0 actually means zero, aka an empty frame.; * In order to mean ""unknown content size"", pass constant ZSTD_CONTENTSIZE_UNKNOWN.; * ZSTD_CONTENTSIZE_UNKNOWN is default value for any new frame.; * Note 2 : pledgedSrcSize is only valid once, for the next frame.; * It's discarded at the end of the frame, and replaced by ZSTD_CONTENTSIZE_UNKNOWN.; * Note 3 : Whenever all input data is provided and consumed in a single round,; * for example with ZSTD_compress2(),; * or invoking immediately ZSTD_compressStream2(,,,ZSTD_e_end),; * this value is automatically overridden by srcSize instead.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:316,Availability,error,error,316,"/*! ZSTD_CCtx_setPledgedSrcSize() :; * Total input data size to be compressed as a single frame.; * Value will be written in frame header, unless if explicitly forbidden using ZSTD_c_contentSizeFlag.; * This value will also be controlled at end of frame, and trigger an error if not respected.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : pledgedSrcSize==0 actually means zero, aka an empty frame.; * In order to mean ""unknown content size"", pass constant ZSTD_CONTENTSIZE_UNKNOWN.; * ZSTD_CONTENTSIZE_UNKNOWN is default value for any new frame.; * Note 2 : pledgedSrcSize is only valid once, for the next frame.; * It's discarded at the end of the frame, and replaced by ZSTD_CONTENTSIZE_UNKNOWN.; * Note 3 : Whenever all input data is provided and consumed in a single round,; * for example with ZSTD_compress2(),; * or invoking immediately ZSTD_compressStream2(,,,ZSTD_e_end),; * this value is automatically overridden by srcSize instead.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:341,Testability,test,tested,341,"/*! ZSTD_CCtx_setPledgedSrcSize() :; * Total input data size to be compressed as a single frame.; * Value will be written in frame header, unless if explicitly forbidden using ZSTD_c_contentSizeFlag.; * This value will also be controlled at end of frame, and trigger an error if not respected.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : pledgedSrcSize==0 actually means zero, aka an empty frame.; * In order to mean ""unknown content size"", pass constant ZSTD_CONTENTSIZE_UNKNOWN.; * ZSTD_CONTENTSIZE_UNKNOWN is default value for any new frame.; * Note 2 : pledgedSrcSize is only valid once, for the next frame.; * It's discarded at the end of the frame, and replaced by ZSTD_CONTENTSIZE_UNKNOWN.; * Note 3 : Whenever all input data is provided and consumed in a single round,; * for example with ZSTD_compress2(),; * or invoking immediately ZSTD_compressStream2(,,,ZSTD_e_end),; * this value is automatically overridden by srcSize instead.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:217,Availability,error,error,217,"/*! ZSTD_CCtx_reset() :; * There are 2 different things that can be reset, independently or jointly :; * - The session : will stop compressing current frame, and make CCtx ready to start a new one.; * Useful after an error, or to interrupt any ongoing compression.; * Any internal data not yet flushed is cancelled.; * Compression parameters and dictionary remain unchanged.; * They will be used to compress next frame.; * Resetting session never fails.; * - The parameters : changes all parameters back to ""default"".; * This removes any reference to any dictionary too.; * Parameters can only be changed between 2 sessions (i.e. no compression is currently ongoing); * otherwise the reset fails, and function returns an error value (which can be tested using ZSTD_isError()); * - Both : similar to resetting the session, followed by resetting parameters.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:721,Availability,error,error,721,"/*! ZSTD_CCtx_reset() :; * There are 2 different things that can be reset, independently or jointly :; * - The session : will stop compressing current frame, and make CCtx ready to start a new one.; * Useful after an error, or to interrupt any ongoing compression.; * Any internal data not yet flushed is cancelled.; * Compression parameters and dictionary remain unchanged.; * They will be used to compress next frame.; * Resetting session never fails.; * - The parameters : changes all parameters back to ""default"".; * This removes any reference to any dictionary too.; * Parameters can only be changed between 2 sessions (i.e. no compression is currently ongoing); * otherwise the reset fails, and function returns an error value (which can be tested using ZSTD_isError()); * - Both : similar to resetting the session, followed by resetting parameters.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:747,Testability,test,tested,747,"/*! ZSTD_CCtx_reset() :; * There are 2 different things that can be reset, independently or jointly :; * - The session : will stop compressing current frame, and make CCtx ready to start a new one.; * Useful after an error, or to interrupt any ongoing compression.; * Any internal data not yet flushed is cancelled.; * Compression parameters and dictionary remain unchanged.; * They will be used to compress next frame.; * Resetting session never fails.; * - The parameters : changes all parameters back to ""default"".; * This removes any reference to any dictionary too.; * Parameters can only be changed between 2 sessions (i.e. no compression is currently ongoing); * otherwise the reset fails, and function returns an error value (which can be tested using ZSTD_isError()); * - Both : similar to resetting the session, followed by resetting parameters.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:606,Availability,error,error,606,"/*! ZSTD_compress2() :; * Behave the same as ZSTD_compressCCtx(), but compression parameters are set using the advanced API.; * ZSTD_compress2() always starts a new frame.; * Should cctx hold data from a previously unfinished frame, everything about it is forgotten.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - The function is always blocking, returns when compression is completed.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:643,Testability,test,tested,643,"/*! ZSTD_compress2() :; * Behave the same as ZSTD_compressCCtx(), but compression parameters are set using the advanced API.; * ZSTD_compress2() always starts a new frame.; * Should cctx hold data from a previously unfinished frame, everything about it is forgotten.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - The function is always blocking, returns when compression is completed.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:510,Availability,avail,available,510,"/* Select a size limit (in power of 2) beyond which; * the streaming API will refuse to allocate memory buffer; * in order to protect the host from unreasonable memory requirements.; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).; * Special: value 0 means ""use default maximum windowLog"". */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_d_format; * ZSTD_d_stableOutBuffer; * ZSTD_d_forceIgnoreChecksum; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:27,Energy Efficiency,power,power,27,"/* Select a size limit (in power of 2) beyond which; * the streaming API will refuse to allocate memory buffer; * in order to protect the host from unreasonable memory requirements.; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).; * Special: value 0 means ""use default maximum windowLog"". */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_d_format; * ZSTD_d_stableOutBuffer; * ZSTD_d_forceIgnoreChecksum; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:88,Energy Efficiency,allocate,allocate,88,"/* Select a size limit (in power of 2) beyond which; * the streaming API will refuse to allocate memory buffer; * in order to protect the host from unreasonable memory requirements.; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).; * Special: value 0 means ""use default maximum windowLog"". */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_d_format; * ZSTD_d_stableOutBuffer; * ZSTD_d_forceIgnoreChecksum; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:262,Energy Efficiency,allocate,allocated,262,"/* Select a size limit (in power of 2) beyond which; * the streaming API will refuse to allocate memory buffer; * in order to protect the host from unreasonable memory requirements.; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).; * Special: value 0 means ""use default maximum windowLog"". */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_d_format; * ZSTD_d_stableOutBuffer; * ZSTD_d_forceIgnoreChecksum; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:772,Security,access,access,772,"/* Select a size limit (in power of 2) beyond which; * the streaming API will refuse to allocate memory buffer; * in order to protect the host from unreasonable memory requirements.; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).; * Special: value 0 means ""use default maximum windowLog"". */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_d_format; * ZSTD_d_stableOutBuffer; * ZSTD_d_forceIgnoreChecksum; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:145,Availability,error,error,145,"/*! ZSTD_dParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - both lower and upper bounds, inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:242,Availability,error,error,242,"/*! ZSTD_dParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - both lower and upper bounds, inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:276,Testability,test,tested,276,"/*! ZSTD_dParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - both lower and upper bounds, inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:259,Availability,error,error,259,"/*! ZSTD_DCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_dParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_dParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is only possible during frame initialization (before starting decompression).; * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:414,Availability,error,error,414,"/*! ZSTD_DCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_dParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_dParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is only possible during frame initialization (before starting decompression).; * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:266,Integrability,depend,depending,266,"/*! ZSTD_DCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_dParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_dParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is only possible during frame initialization (before starting decompression).; * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:439,Testability,test,tested,439,"/*! ZSTD_DCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_dParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_dParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is only possible during frame initialization (before starting decompression).; * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:217,Availability,error,error,217,"/*! ZSTD_DCtx_reset() :; * Return a DCtx to clean state.; * Session and parameters can be reset jointly or separately.; * Parameters can only be reset when no active frame is being decompressed.; * @return : 0, or an error code, which can be tested with ZSTD_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:242,Testability,test,tested,242,"/*! ZSTD_DCtx_reset() :; * Return a DCtx to clean state.; * Session and parameters can be reset jointly or separately.; * Parameters can only be reset when no active frame is being decompressed.; * @return : 0, or an error code, which can be tested with ZSTD_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:45,Deployability,update,updated,45,/**< position where reading stopped. Will be updated. Necessarily 0 <= pos <= size */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:45,Deployability,update,updated,45,/**< position where writing stopped. Will be updated. Necessarily 0 <= pos <= size */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2081,Availability,error,error,2081,"he pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * o",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3061,Availability,error,error,3061,"s a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider a frame completed.; * flush operation is the same, and follows same rules as calling ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_end until it returns 0, at which point you are free to; * start a new frame.; * note: ZSTD_e_end will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if frame fully completed and fully flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * **********",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3930,Availability,error,error,3930,"ernal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider a frame completed.; * flush operation is the same, and follows same rules as calling ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_end until it returns 0, at which point you are free to; * start a new frame.; * note: ZSTD_e_end will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if frame fully completed and fully flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * *******************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:239,Deployability,release,release,239,"/*-***********************************************************************; * Streaming compression - HowTo; *; * A ZSTD_CStream object is required to track streaming operation.; * Use ZSTD_createCStream() and ZSTD_freeCStream() to create/release resources.; * ZSTD_CStream objects can be reused multiple times on consecutive compression operations.; * It is recommended to re-use ZSTD_CStream since it will play nicer with system's memory, by re-using already allocated memory.; *; * For parallel execution, use one separate ZSTD_CStream per thread.; *; * note : since v1.3.0, ZSTD_CStream and ZSTD_CCtx are the same thing.; *; * Parameters are sticky : when starting a new compression on the same context,; * it will re-use the same sticky parameters as previous compression session.; * When in doubt, it's recommended to fully initialize the context before usage.; * Use ZSTD_CCtx_reset() to reset the context and ZSTD_CCtx_setParameter(),; * ZSTD_CCtx_setPledgedSrcSize(), or ZSTD_CCtx_loadDictionary() and friends to; * set more specific parameters, the pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides ",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1243,Deployability,update,update,1243,"es.; * ZSTD_CStream objects can be reused multiple times on consecutive compression operations.; * It is recommended to re-use ZSTD_CStream since it will play nicer with system's memory, by re-using already allocated memory.; *; * For parallel execution, use one separate ZSTD_CStream per thread.; *; * note : since v1.3.0, ZSTD_CStream and ZSTD_CCtx are the same thing.; *; * Parameters are sticky : when starting a new compression on the same context,; * it will re-use the same sticky parameters as previous compression session.; * When in doubt, it's recommended to fully initialize the context before usage.; * Use ZSTD_CCtx_reset() to reset the context and ZSTD_CCtx_setParameter(),; * ZSTD_CCtx_setPledgedSrcSize(), or ZSTD_CCtx_loadDictionary() and friends to; * set more specific parameters, the pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compr",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2309,Deployability,update,updated,2309,"* Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:461,Energy Efficiency,allocate,allocated,461,"/*-***********************************************************************; * Streaming compression - HowTo; *; * A ZSTD_CStream object is required to track streaming operation.; * Use ZSTD_createCStream() and ZSTD_freeCStream() to create/release resources.; * ZSTD_CStream objects can be reused multiple times on consecutive compression operations.; * It is recommended to re-use ZSTD_CStream since it will play nicer with system's memory, by re-using already allocated memory.; *; * For parallel execution, use one separate ZSTD_CStream per thread.; *; * note : since v1.3.0, ZSTD_CStream and ZSTD_CCtx are the same thing.; *; * Parameters are sticky : when starting a new compression on the same context,; * it will re-use the same sticky parameters as previous compression session.; * When in doubt, it's recommended to fully initialize the context before usage.; * Use ZSTD_CCtx_reset() to reset the context and ZSTD_CCtx_setParameter(),; * ZSTD_CCtx_setPledgedSrcSize(), or ZSTD_CCtx_loadDictionary() and friends to; * set more specific parameters, the pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides ",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1083,Performance,load,load,1083,"/*-***********************************************************************; * Streaming compression - HowTo; *; * A ZSTD_CStream object is required to track streaming operation.; * Use ZSTD_createCStream() and ZSTD_freeCStream() to create/release resources.; * ZSTD_CStream objects can be reused multiple times on consecutive compression operations.; * It is recommended to re-use ZSTD_CStream since it will play nicer with system's memory, by re-using already allocated memory.; *; * For parallel execution, use one separate ZSTD_CStream per thread.; *; * note : since v1.3.0, ZSTD_CStream and ZSTD_CCtx are the same thing.; *; * Parameters are sticky : when starting a new compression on the same context,; * it will re-use the same sticky parameters as previous compression session.; * When in doubt, it's recommended to fully initialize the context before usage.; * Use ZSTD_CCtx_reset() to reset the context and ZSTD_CCtx_setParameter(),; * ZSTD_CCtx_setPledgedSrcSize(), or ZSTD_CCtx_loadDictionary() and friends to; * set more specific parameters, the pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides ",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3208,Performance,perform,perform,3208,"ernal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider a frame completed.; * flush operation is the same, and follows same rules as calling ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_end until it returns 0, at which point you are free to; * start a new frame.; * note: ZSTD_e_end will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if frame fully completed and fully flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * *******************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2106,Testability,test,tested,2106,"he pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * o",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3086,Testability,test,tested,3086,"s a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider a frame completed.; * flush operation is the same, and follows same rules as calling ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_end until it returns 0, at which point you are free to; * start a new frame.; * note: ZSTD_e_end will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if frame fully completed and fully flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * **********",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3955,Testability,test,tested,3955,"ernal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider a frame completed.; * flush operation is the same, and follows same rules as calling ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_end until it returns 0, at which point you are free to; * start a new frame.; * note: ZSTD_e_end will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if frame fully completed and fully flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * *******************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:825,Availability,avail,available,825,"/*! ZSTD_compressStream2() :; * Behaves about the same as ZSTD_compressStream, with additional control on end directive.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - Compression parameters cannot be changed once compression is started (save a list of exceptions in multi-threading mode); * - output->pos must be <= dstCapacity, input->pos must be <= srcSize; * - output->pos and input->pos will be updated. They are guaranteed to remain below their respective limit.; * - endOp must be a valid directive; * - When nbWorkers==0 (default), function is blocking : it completes its job before returning to caller.; * - When nbWorkers>=1, function is non-blocking : it copies a portion of input, distributes jobs to internal worker threads, flush to output whatever is available,; * and then immediately returns, just indicating that there is some data remaining to be flushed.; * The function nonetheless guarantees forward progress : it will return only after it reads or write at least 1+ byte.; * - Exception : if the first call requests a ZSTD_e_end directive and provides enough dstCapacity, the function delegates to ZSTD_compress2() which is always blocking.; * - @return provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; * if @return != 0, flush is not fully completed, there is still some data left within internal buffers.; * This is useful for ZSTD_e_flush, since in this case more flushes are necessary to empty all buffers.; * For ZSTD_e_end, @return == 0 when internal buffers are fully flushed and frame is completed.; * - after a ZSTD_e_end directive, if internal buffer is not fully flushed (@return != 0),; * only ZSTD_e_end or ZSTD_e_flush operations are allowed.; * Before starting a new compression job, or changing compression parameters,; * it is required to fully flush internal buffers.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1325,Availability,error,error,1325,"/*! ZSTD_compressStream2() :; * Behaves about the same as ZSTD_compressStream, with additional control on end directive.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - Compression parameters cannot be changed once compression is started (save a list of exceptions in multi-threading mode); * - output->pos must be <= dstCapacity, input->pos must be <= srcSize; * - output->pos and input->pos will be updated. They are guaranteed to remain below their respective limit.; * - endOp must be a valid directive; * - When nbWorkers==0 (default), function is blocking : it completes its job before returning to caller.; * - When nbWorkers>=1, function is non-blocking : it copies a portion of input, distributes jobs to internal worker threads, flush to output whatever is available,; * and then immediately returns, just indicating that there is some data remaining to be flushed.; * The function nonetheless guarantees forward progress : it will return only after it reads or write at least 1+ byte.; * - Exception : if the first call requests a ZSTD_e_end directive and provides enough dstCapacity, the function delegates to ZSTD_compress2() which is always blocking.; * - @return provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; * if @return != 0, flush is not fully completed, there is still some data left within internal buffers.; * This is useful for ZSTD_e_flush, since in this case more flushes are necessary to empty all buffers.; * For ZSTD_e_end, @return == 0 when internal buffers are fully flushed and frame is completed.; * - after a ZSTD_e_end directive, if internal buffer is not fully flushed (@return != 0),; * only ZSTD_e_end or ZSTD_e_flush operations are allowed.; * Before starting a new compression job, or changing compression parameters,; * it is required to fully flush internal buffers.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:459,Deployability,update,updated,459,"/*! ZSTD_compressStream2() :; * Behaves about the same as ZSTD_compressStream, with additional control on end directive.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - Compression parameters cannot be changed once compression is started (save a list of exceptions in multi-threading mode); * - output->pos must be <= dstCapacity, input->pos must be <= srcSize; * - output->pos and input->pos will be updated. They are guaranteed to remain below their respective limit.; * - endOp must be a valid directive; * - When nbWorkers==0 (default), function is blocking : it completes its job before returning to caller.; * - When nbWorkers>=1, function is non-blocking : it copies a portion of input, distributes jobs to internal worker threads, flush to output whatever is available,; * and then immediately returns, just indicating that there is some data remaining to be flushed.; * The function nonetheless guarantees forward progress : it will return only after it reads or write at least 1+ byte.; * - Exception : if the first call requests a ZSTD_e_end directive and provides enough dstCapacity, the function delegates to ZSTD_compress2() which is always blocking.; * - @return provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; * if @return != 0, flush is not fully completed, there is still some data left within internal buffers.; * This is useful for ZSTD_e_flush, since in this case more flushes are necessary to empty all buffers.; * For ZSTD_e_end, @return == 0 when internal buffers are fully flushed and frame is completed.; * - after a ZSTD_e_end directive, if internal buffer is not fully flushed (@return != 0),; * only ZSTD_e_end or ZSTD_e_flush operations are allowed.; * Before starting a new compression job, or changing compression parameters,; * it is required to fully flush internal buffers.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:326,Performance,multi-thread,multi-threading,326,"/*! ZSTD_compressStream2() :; * Behaves about the same as ZSTD_compressStream, with additional control on end directive.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - Compression parameters cannot be changed once compression is started (save a list of exceptions in multi-threading mode); * - output->pos must be <= dstCapacity, input->pos must be <= srcSize; * - output->pos and input->pos will be updated. They are guaranteed to remain below their respective limit.; * - endOp must be a valid directive; * - When nbWorkers==0 (default), function is blocking : it completes its job before returning to caller.; * - When nbWorkers>=1, function is non-blocking : it copies a portion of input, distributes jobs to internal worker threads, flush to output whatever is available,; * and then immediately returns, just indicating that there is some data remaining to be flushed.; * The function nonetheless guarantees forward progress : it will return only after it reads or write at least 1+ byte.; * - Exception : if the first call requests a ZSTD_e_end directive and provides enough dstCapacity, the function delegates to ZSTD_compress2() which is always blocking.; * - @return provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; * if @return != 0, flush is not fully completed, there is still some data left within internal buffers.; * This is useful for ZSTD_e_flush, since in this case more flushes are necessary to empty all buffers.; * For ZSTD_e_end, @return == 0 when internal buffers are fully flushed and frame is completed.; * - after a ZSTD_e_end directive, if internal buffer is not fully flushed (@return != 0),; * only ZSTD_e_end or ZSTD_e_flush operations are allowed.; * Before starting a new compression job, or changing compression parameters,; * it is required to fully flush internal buffers.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1350,Testability,test,tested,1350,"/*! ZSTD_compressStream2() :; * Behaves about the same as ZSTD_compressStream, with additional control on end directive.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - Compression parameters cannot be changed once compression is started (save a list of exceptions in multi-threading mode); * - output->pos must be <= dstCapacity, input->pos must be <= srcSize; * - output->pos and input->pos will be updated. They are guaranteed to remain below their respective limit.; * - endOp must be a valid directive; * - When nbWorkers==0 (default), function is blocking : it completes its job before returning to caller.; * - When nbWorkers>=1, function is non-blocking : it copies a portion of input, distributes jobs to internal worker threads, flush to output whatever is available,; * and then immediately returns, just indicating that there is some data remaining to be flushed.; * The function nonetheless guarantees forward progress : it will return only after it reads or write at least 1+ byte.; * - Exception : if the first call requests a ZSTD_e_end directive and provides enough dstCapacity, the function delegates to ZSTD_compress2() which is always blocking.; * - @return provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; * if @return != 0, flush is not fully completed, there is still some data left within internal buffers.; * This is useful for ZSTD_e_flush, since in this case more flushes are necessary to empty all buffers.; * For ZSTD_e_end, @return == 0 when internal buffers are fully flushed and frame is completed.; * - after a ZSTD_e_end directive, if internal buffer is not fully flushed (@return != 0),; * only ZSTD_e_end or ZSTD_e_flush operations are allowed.; * Before starting a new compression job, or changing compression parameters,; * it is required to fully flush internal buffers.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:644,Energy Efficiency,reduce,reduce,644,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:910,Energy Efficiency,reduce,reduce,910,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:459,Integrability,interface,interface,459,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:580,Integrability,interface,interface,580,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:665,Integrability,interface,interface,665,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:764,Integrability,interface,interface,764,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:323,Performance,perform,performance,323,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:621,Performance,perform,performance,621,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:721,Performance,perform,performance,721,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:323,Availability,redundant,redundant,323,"/**< recommended size for output buffer. Guarantee to successfully flush at least one complete compressed block. */; /* *****************************************************************************; * This following is a legacy streaming API.; * It can be replaced by ZSTD_CCtx_reset() and ZSTD_compressStream2().; * It is redundant, but remains fully supported.; * Advanced parameters and dictionary compression can only be used through the; * new API.; ******************************************************************************/; /*!; * Equivalent to:; *; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:323,Safety,redund,redundant,323,"/**< recommended size for output buffer. Guarantee to successfully flush at least one complete compressed block. */; /* *****************************************************************************; * This following is a legacy streaming API.; * It can be replaced by ZSTD_CCtx_reset() and ZSTD_compressStream2().; * It is redundant, but remains fully supported.; * Advanced parameters and dictionary compression can only be used through the; * new API.; ******************************************************************************/; /*!; * Equivalent to:; *; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:648,Usability,clear,clear,648,"/**< recommended size for output buffer. Guarantee to successfully flush at least one complete compressed block. */; /* *****************************************************************************; * This following is a legacy streaming API.; * It can be replaced by ZSTD_CCtx_reset() and ZSTD_compressStream2().; * It is redundant, but remains fully supported.; * Advanced parameters and dictionary compression can only be used through the; * new API.; ******************************************************************************/; /*!; * Equivalent to:; *; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:209,Availability,error,error,209,"/*!; * Alternative for ZSTD_compressStream2(zcs, output, input, ZSTD_e_continue).; * NOTE: The return value is different. ZSTD_compressStream() returns a hint for; * the next read size (if non-zero and not an error). ZSTD_compressStream2(); * returns the minimum nb of bytes left to flush (if non-zero and not an error).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:313,Availability,error,error,313,"/*!; * Alternative for ZSTD_compressStream2(zcs, output, input, ZSTD_e_continue).; * NOTE: The return value is different. ZSTD_compressStream() returns a hint for; * the next read size (if non-zero and not an error). ZSTD_compressStream2(); * returns the minimum nb of bytes left to flush (if non-zero and not an error).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1275,Availability,error,error,1275,"/*-***************************************************************************; * Streaming decompression - HowTo; *; * A ZSTD_DStream object is required to track streaming operations.; * Use ZSTD_createDStream() and ZSTD_freeDStream() to create/release resources.; * ZSTD_DStream objects can be re-used multiple times.; *; * Use ZSTD_initDStream() to start a new decompression operation.; * @return : recommended first input size; * Alternatively, use advanced API to set specific properties.; *; * Use ZSTD_decompressStream() repetitively to consume your input.; * The function will update both `pos` fields.; * If `input.pos < input.size`, some input has not been consumed.; * It's up to the caller to present again remaining data.; * The function tries to flush all data decoded immediately, respecting output buffer size.; * If `output.pos < output.size`, decoder has flushed everything it could.; * But if `output.pos == output.size`, there might be some data left within internal buffers.,; * In which case, call ZSTD_decompressStream() again to flush whatever remains in the buffer.; * Note : with no additional input provided, amount of data flushed is necessarily <= ZSTD_BLOCKSIZE_MAX.; * @return : 0 when a frame is completely decoded and fully flushed,; * or an error code, which can be tested using ZSTD_isError(),; * or any other value > 0, which means there is still some decoding or flushing to do to complete current frame :; * the return value is a suggested next input size (just a hint for better latency); * that will never request more than the remaining frame size.; * *******************************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:246,Deployability,release,release,246,"/*-***************************************************************************; * Streaming decompression - HowTo; *; * A ZSTD_DStream object is required to track streaming operations.; * Use ZSTD_createDStream() and ZSTD_freeDStream() to create/release resources.; * ZSTD_DStream objects can be re-used multiple times.; *; * Use ZSTD_initDStream() to start a new decompression operation.; * @return : recommended first input size; * Alternatively, use advanced API to set specific properties.; *; * Use ZSTD_decompressStream() repetitively to consume your input.; * The function will update both `pos` fields.; * If `input.pos < input.size`, some input has not been consumed.; * It's up to the caller to present again remaining data.; * The function tries to flush all data decoded immediately, respecting output buffer size.; * If `output.pos < output.size`, decoder has flushed everything it could.; * But if `output.pos == output.size`, there might be some data left within internal buffers.,; * In which case, call ZSTD_decompressStream() again to flush whatever remains in the buffer.; * Note : with no additional input provided, amount of data flushed is necessarily <= ZSTD_BLOCKSIZE_MAX.; * @return : 0 when a frame is completely decoded and fully flushed,; * or an error code, which can be tested using ZSTD_isError(),; * or any other value > 0, which means there is still some decoding or flushing to do to complete current frame :; * the return value is a suggested next input size (just a hint for better latency); * that will never request more than the remaining frame size.; * *******************************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:585,Deployability,update,update,585,"/*-***************************************************************************; * Streaming decompression - HowTo; *; * A ZSTD_DStream object is required to track streaming operations.; * Use ZSTD_createDStream() and ZSTD_freeDStream() to create/release resources.; * ZSTD_DStream objects can be re-used multiple times.; *; * Use ZSTD_initDStream() to start a new decompression operation.; * @return : recommended first input size; * Alternatively, use advanced API to set specific properties.; *; * Use ZSTD_decompressStream() repetitively to consume your input.; * The function will update both `pos` fields.; * If `input.pos < input.size`, some input has not been consumed.; * It's up to the caller to present again remaining data.; * The function tries to flush all data decoded immediately, respecting output buffer size.; * If `output.pos < output.size`, decoder has flushed everything it could.; * But if `output.pos == output.size`, there might be some data left within internal buffers.,; * In which case, call ZSTD_decompressStream() again to flush whatever remains in the buffer.; * Note : with no additional input provided, amount of data flushed is necessarily <= ZSTD_BLOCKSIZE_MAX.; * @return : 0 when a frame is completely decoded and fully flushed,; * or an error code, which can be tested using ZSTD_isError(),; * or any other value > 0, which means there is still some decoding or flushing to do to complete current frame :; * the return value is a suggested next input size (just a hint for better latency); * that will never request more than the remaining frame size.; * *******************************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1518,Performance,latency,latency,1518,"/*-***************************************************************************; * Streaming decompression - HowTo; *; * A ZSTD_DStream object is required to track streaming operations.; * Use ZSTD_createDStream() and ZSTD_freeDStream() to create/release resources.; * ZSTD_DStream objects can be re-used multiple times.; *; * Use ZSTD_initDStream() to start a new decompression operation.; * @return : recommended first input size; * Alternatively, use advanced API to set specific properties.; *; * Use ZSTD_decompressStream() repetitively to consume your input.; * The function will update both `pos` fields.; * If `input.pos < input.size`, some input has not been consumed.; * It's up to the caller to present again remaining data.; * The function tries to flush all data decoded immediately, respecting output buffer size.; * If `output.pos < output.size`, decoder has flushed everything it could.; * But if `output.pos == output.size`, there might be some data left within internal buffers.,; * In which case, call ZSTD_decompressStream() again to flush whatever remains in the buffer.; * Note : with no additional input provided, amount of data flushed is necessarily <= ZSTD_BLOCKSIZE_MAX.; * @return : 0 when a frame is completely decoded and fully flushed,; * or an error code, which can be tested using ZSTD_isError(),; * or any other value > 0, which means there is still some decoding or flushing to do to complete current frame :; * the return value is a suggested next input size (just a hint for better latency); * that will never request more than the remaining frame size.; * *******************************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1300,Testability,test,tested,1300,"/*-***************************************************************************; * Streaming decompression - HowTo; *; * A ZSTD_DStream object is required to track streaming operations.; * Use ZSTD_createDStream() and ZSTD_freeDStream() to create/release resources.; * ZSTD_DStream objects can be re-used multiple times.; *; * Use ZSTD_initDStream() to start a new decompression operation.; * @return : recommended first input size; * Alternatively, use advanced API to set specific properties.; *; * Use ZSTD_decompressStream() repetitively to consume your input.; * The function will update both `pos` fields.; * If `input.pos < input.size`, some input has not been consumed.; * It's up to the caller to present again remaining data.; * The function tries to flush all data decoded immediately, respecting output buffer size.; * If `output.pos < output.size`, decoder has flushed everything it could.; * But if `output.pos == output.size`, there might be some data left within internal buffers.,; * In which case, call ZSTD_decompressStream() again to flush whatever remains in the buffer.; * Note : with no additional input provided, amount of data flushed is necessarily <= ZSTD_BLOCKSIZE_MAX.; * @return : 0 when a frame is completely decoded and fully flushed,; * or an error code, which can be tested using ZSTD_isError(),; * or any other value > 0, which means there is still some decoding or flushing to do to complete current frame :; * the return value is a suggested next input size (just a hint for better latency); * that will never request more than the remaining frame size.; * *******************************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:71,Availability,redundant,redundant,71,"/*===== Streaming decompression functions =====*/; /* This function is redundant with the advanced API and equivalent to:; *; * ZSTD_DCtx_reset(zds, ZSTD_reset_session_only);; * ZSTD_DCtx_refDDict(zds, NULL);; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:71,Safety,redund,redundant,71,"/*===== Streaming decompression functions =====*/; /* This function is redundant with the advanced API and equivalent to:; *; * ZSTD_DCtx_reset(zds, ZSTD_reset_session_only);; * ZSTD_DCtx_refDDict(zds, NULL);; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:478,Performance,load,loads,478,"/*!< recommended size for output buffer. Guarantee to successfully flush at least one complete block in all circumstances. */; /**************************; * Simple dictionary API; ***************************/; /*! ZSTD_compress_usingDict() :; * Compression at an explicit compression level using a Dictionary.; * A dictionary can be any arbitrary data segment (also called a prefix),; * or a buffer with specified information (see dictBuilder/zdict.h).; * Note : This function loads the dictionary, resulting in significant startup delay.; * It's intended for a dictionary used only once.; * Note 2 : When `dict == NULL || dictSize < 8` no dictionary is used. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:158,Usability,Simpl,Simple,158,"/*!< recommended size for output buffer. Guarantee to successfully flush at least one complete block in all circumstances. */; /**************************; * Simple dictionary API; ***************************/; /*! ZSTD_compress_usingDict() :; * Compression at an explicit compression level using a Dictionary.; * A dictionary can be any arbitrary data segment (also called a prefix),; * or a buffer with specified information (see dictBuilder/zdict.h).; * Note : This function loads the dictionary, resulting in significant startup delay.; * It's intended for a dictionary used only once.; * Note 2 : When `dict == NULL || dictSize < 8` no dictionary is used. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:169,Performance,load,loads,169,"/*! ZSTD_decompress_usingDict() :; * Decompression using a known Dictionary.; * Dictionary must be identical to the one used during compression.; * Note : This function loads the dictionary, resulting in significant startup delay.; * It's intended for a dictionary used only once.; * Note : When `dict == NULL || dictSize < 8` no dictionary is used. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:490,Deployability,release,released,490,"/*! ZSTD_createCDict() :; * When compressing multiple messages or blocks using the same dictionary,; * it's recommended to digest the dictionary only once, since it's a costly operation.; * ZSTD_createCDict() will create a state from digesting a dictionary.; * The resulting state can be used for future compression operations with very limited startup cost.; * ZSTD_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.; * @dictBuffer can be released after ZSTD_CDict creation, because its content is copied within CDict.; * Note 1 : Consider experimental function `ZSTD_createCDict_byReference()` if you prefer to not duplicate @dictBuffer content.; * Note 2 : A ZSTD_CDict can be created from an empty @dictBuffer,; * in which case the only thing that it transports is the @compressionLevel.; * This can be useful in a pipeline featuring ZSTD_compress_usingCDict() exclusively,; * expecting a ZSTD_CDict parameter with any data, including those without a known dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:869,Deployability,pipeline,pipeline,869,"/*! ZSTD_createCDict() :; * When compressing multiple messages or blocks using the same dictionary,; * it's recommended to digest the dictionary only once, since it's a costly operation.; * ZSTD_createCDict() will create a state from digesting a dictionary.; * The resulting state can be used for future compression operations with very limited startup cost.; * ZSTD_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.; * @dictBuffer can be released after ZSTD_CDict creation, because its content is copied within CDict.; * Note 1 : Consider experimental function `ZSTD_createCDict_byReference()` if you prefer to not duplicate @dictBuffer content.; * Note 2 : A ZSTD_CDict can be created from an empty @dictBuffer,; * in which case the only thing that it transports is the @compressionLevel.; * This can be useful in a pipeline featuring ZSTD_compress_usingCDict() exclusively,; * expecting a ZSTD_CDict parameter with any data, including those without a known dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:54,Integrability,message,messages,54,"/*! ZSTD_createCDict() :; * When compressing multiple messages or blocks using the same dictionary,; * it's recommended to digest the dictionary only once, since it's a costly operation.; * ZSTD_createCDict() will create a state from digesting a dictionary.; * The resulting state can be used for future compression operations with very limited startup cost.; * ZSTD_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.; * @dictBuffer can be released after ZSTD_CDict creation, because its content is copied within CDict.; * Note 1 : Consider experimental function `ZSTD_createCDict_byReference()` if you prefer to not duplicate @dictBuffer content.; * Note 2 : A ZSTD_CDict can be created from an empty @dictBuffer,; * in which case the only thing that it transports is the @compressionLevel.; * This can be useful in a pipeline featuring ZSTD_compress_usingCDict() exclusively,; * expecting a ZSTD_CDict parameter with any data, including those without a known dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:424,Performance,concurren,concurrently,424,"/*! ZSTD_createCDict() :; * When compressing multiple messages or blocks using the same dictionary,; * it's recommended to digest the dictionary only once, since it's a costly operation.; * ZSTD_createCDict() will create a state from digesting a dictionary.; * The resulting state can be used for future compression operations with very limited startup cost.; * ZSTD_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.; * @dictBuffer can be released after ZSTD_CDict creation, because its content is copied within CDict.; * Note 1 : Consider experimental function `ZSTD_createCDict_byReference()` if you prefer to not duplicate @dictBuffer content.; * Note 2 : A ZSTD_CDict can be created from an empty @dictBuffer,; * in which case the only thing that it transports is the @compressionLevel.; * This can be useful in a pipeline featuring ZSTD_compress_usingCDict() exclusively,; * expecting a ZSTD_CDict parameter with any data, including those without a known dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:48,Energy Efficiency,allocate,allocated,48,/*! ZSTD_freeCDict() :; * Function frees memory allocated by ZSTD_createCDict(). */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:275,Security,checksum,checksum,275,"/*! ZSTD_compress_usingCDict() :; * Compression using a digested Dictionary.; * Recommended when same dictionary is used multiple times.; * Note : compression level is _decided at dictionary creation time_,; * and frame parameters are hardcoded (dictID=yes, contentSize=yes, checksum=no) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:141,Deployability,release,released,141,"/*! ZSTD_createDDict() :; * Create a digested dictionary, ready to start decompression operation without startup delay.; * dictBuffer can be released after DDict creation, as its content is copied inside DDict. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:48,Energy Efficiency,allocate,allocated,48,/*! ZSTD_freeDDict() :; * Function frees memory allocated with ZSTD_createDDict() */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:283,Performance,load,loaded,283,"/********************************; * Dictionary helper functions; *******************************/; /*! ZSTD_getDictID_fromDict() :; * Provides the dictID stored within dictionary.; * if @return == 0, the dictionary is not conformant with Zstandard specification.; * It can still be loaded, but as a content-only dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:74,Performance,load,loaded,74,"/*! ZSTD_getDictID_fromDDict() :; * Provides the dictID of the dictionary loaded into `ddict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:230,Performance,load,loaded,230,"/*! ZSTD_getDictID_fromDDict() :; * Provides the dictID of the dictionary loaded into `ddict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:695,Availability,failure,failure,695,"/*! ZSTD_getDictID_fromFrame() :; * Provides the dictID required to decompressed the frame stored within `src`.; * If @return == 0, the dictID could not be decoded.; * This could for one of the following reasons :; * - The frame does not require a dictionary to be decoded (most common case).; * - The frame was built with dictID intentionally removed. Whatever dictionary is necessary is a hidden information.; * Note : this use case also happens when using a non-conformant dictionary.; * - `srcSize` is too small, and as a result, the frame header could not be decoded (only possible if `srcSize < ZSTD_FRAMEHEADERSIZE_MAX`).; * - This is not a Zstandard frame.; * When identifying the exact failure cause, it's possible to use ZSTD_getFrameHeader(), which will provide a more precise error code. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:788,Availability,error,error,788,"/*! ZSTD_getDictID_fromFrame() :; * Provides the dictID required to decompressed the frame stored within `src`.; * If @return == 0, the dictID could not be decoded.; * This could for one of the following reasons :; * - The frame does not require a dictionary to be decoded (most common case).; * - The frame was built with dictID intentionally removed. Whatever dictionary is necessary is a hidden information.; * Note : this use case also happens when using a non-conformant dictionary.; * - `srcSize` is too small, and as a result, the frame header could not be decoded (only possible if `srcSize < ZSTD_FRAMEHEADERSIZE_MAX`).; * - This is not a Zstandard frame.; * When identifying the exact failure cause, it's possible to use ZSTD_getFrameHeader(), which will provide a more precise error code. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:636,Availability,error,error,636,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1141,Integrability,depend,dependent,1141,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:702,Performance,Load,Loading,702,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:943,Performance,load,load,943,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1001,Performance,Load,Loading,1001,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1118,Performance,latency,latency,1118,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1256,Performance,load,loading,1256,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:661,Testability,test,tested,661,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:537,Availability,error,error,537,"/*! ZSTD_CCtx_refCDict() :; * Reference a prepared dictionary, to be used for all next compressed frames.; * Note that compression parameters are enforced from within CDict,; * and supersede any compression parameter previously set within CCtx.; * The parameters ignored are labled as ""superseded-by-cdict"" in the ZSTD_cParameter enum docs.; * The ignored parameters will be used again if the CCtx is returned to no-dictionary mode.; * The dictionary will remain valid for future compressed frames using same CCtx.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Referencing a NULL CDict means ""return to no-dictionary mode"".; * Note 1 : Currently, only one dictionary can be managed.; * Referencing a new dictionary effectively ""discards"" any previous one.; * Note 2 : CDict is just referenced, its lifetime must outlive its usage within CCtx. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:562,Testability,test,tested,562,"/*! ZSTD_CCtx_refCDict() :; * Reference a prepared dictionary, to be used for all next compressed frames.; * Note that compression parameters are enforced from within CDict,; * and supersede any compression parameter previously set within CCtx.; * The parameters ignored are labled as ""superseded-by-cdict"" in the ZSTD_cParameter enum docs.; * The ignored parameters will be used again if the CCtx is returned to no-dictionary mode.; * The dictionary will remain valid for future compressed frames using same CCtx.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Referencing a NULL CDict means ""return to no-dictionary mode"".; * Note 1 : Currently, only one dictionary can be managed.; * Referencing a new dictionary effectively ""discards"" any previous one.; * Note 2 : CDict is just referenced, its lifetime must outlive its usage within CCtx. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:487,Availability,error,error,487,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1037,Integrability,depend,dependent,1037,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:311,Performance,perform,performing,311,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:356,Performance,perform,performs,356,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1139,Performance,latency,latency,1139,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1218,Performance,load,loadDictionary,1218,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:512,Testability,test,tested,512,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:227,Availability,error,error,227,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:676,Deployability,release,released,676,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:423,Performance,Load,Loading,423,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:524,Performance,latency,latency,524,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:557,Performance,load,load,557,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:691,Performance,load,loading,691,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:887,Performance,load,loaded,887,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:252,Testability,test,tested,252,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:208,Availability,error,error,208,"/*! ZSTD_DCtx_refDDict() :; * Reference a prepared dictionary, to be used to decompress next frames.; * The dictionary remains active for decompression of future frames using same DCtx.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : Currently, only one dictionary can be managed.; * Referencing a new dictionary effectively ""discards"" any previous one.; * Special: referencing a NULL DDict means ""return to no-dictionary mode"".; * Note 2 : DDict is just referenced, its lifetime must outlive its usage from DCtx.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:233,Testability,test,tested,233,"/*! ZSTD_DCtx_refDDict() :; * Reference a prepared dictionary, to be used to decompress next frames.; * The dictionary remains active for decompression of future frames using same DCtx.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : Currently, only one dictionary can be managed.; * Referencing a new dictionary effectively ""discards"" any previous one.; * Special: referencing a NULL DDict means ""return to no-dictionary mode"".; * Note 2 : DDict is just referenced, its lifetime must outlive its usage from DCtx.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:391,Availability,error,error,391,"/*! ZSTD_DCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) to decompress next frame.; * This is the reverse operation of ZSTD_CCtx_refPrefix(),; * and must use the same prefix as the one used during compression.; * Prefix is **only used once**. Reference is discarded at end of frame.; * End of frame is reached when ZSTD_decompressStream() returns 0.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : Adding any prefix (including NULL) invalidates any previously set prefix or dictionary; * Note 2 : Prefix buffer is referenced. It **must** outlive decompression.; * Prefix buffer must remain unmodified up to the end of frame,; * reached when ZSTD_decompressStream() returns 0.; * Note 3 : By default, the prefix is treated as raw content (ZSTD_dct_rawContent).; * Use ZSTD_CCtx_refPrefix_advanced() to alter dictMode (Experimental section); * Note 4 : Referencing a raw content prefix has almost no cpu nor memory cost.; * A full dictionary is more costly, as it requires building tables.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:416,Testability,test,tested,416,"/*! ZSTD_DCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) to decompress next frame.; * This is the reverse operation of ZSTD_CCtx_refPrefix(),; * and must use the same prefix as the one used during compression.; * Prefix is **only used once**. Reference is discarded at end of frame.; * End of frame is reached when ZSTD_decompressStream() returns 0.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : Adding any prefix (including NULL) invalidates any previously set prefix or dictionary; * Note 2 : Prefix buffer is referenced. It **must** outlive decompression.; * Prefix buffer must remain unmodified up to the end of frame,; * reached when ZSTD_decompressStream() returns 0.; * Note 3 : By default, the prefix is treated as raw content (ZSTD_dct_rawContent).; * Use ZSTD_CCtx_refPrefix_advanced() to alter dictMode (Experimental section); * Note 4 : Referencing a raw content prefix has almost no cpu nor memory cost.; * A full dictionary is more costly, as it requires building tables.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:163,Modifiability,evolve,evolve,163,/* === Memory management === */; /*! ZSTD_sizeof_*() :; * These functions give the _current_ memory usage of selected object.; * Note that object memory usage can evolve (increase or decrease) over time. */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:75,Testability,test,test,75,/* note : comparing this constant to an unsigned results in a tautological test */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:386,Energy Efficiency,allocate,allocated,386,"/* by default, the streaming decoder will refuse any frame; * requiring larger than (1<<ZSTD_WINDOWLOG_LIMIT_DEFAULT) window size,; * to preserve host's memory from unreasonable requirements.; * This limit can be overridden using ZSTD_DCtx_setParameter(,ZSTD_d_windowLogMax,).; * The limit does not apply for one-pass decoders (such as ZSTD_decompress()), since no additional memory is allocated */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:79,Availability,error,error,79,"/**< 1: generate a 32-bits checksum using XXH64 algorithm at end of frame, for error detection */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:85,Safety,detect,detection,85,"/**< 1: generate a 32-bits checksum using XXH64 algorithm at end of frame, for error detection */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:27,Security,checksum,checksum,27,"/**< 1: generate a 32-bits checksum using XXH64 algorithm at end of frame, for error detection */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:32,Performance,load,loaded,32,"/* ensures dictionary is always loaded as rawContent, even if it starts with ZSTD_MAGIC_DICTIONARY */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:14,Performance,load,load,14,"/* refuses to load a dictionary if it does not respect Zstandard's specification, starting with ZSTD_MAGIC_DICTIONARY */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:154,Modifiability,evolve,evolve,154,"/* Note: this enum and the behavior it controls are effectively internal; * implementation details of the compressor. They are expected to continue; * to evolve and should be considered only in the context of extremely; * advanced performance tuning.; *; * Zstd currently supports the use of a CDict in three ways:; *; * - The contents of the CDict can be copied into the working context. This; * means that the compression can search both the dictionary and input; * while operating on a single set of internal tables. This makes; * the compression faster per-byte of input. However, the initial copy of; * the CDict's tables incurs a fixed cost at the beginning of the; * compression. For small compressions (< 8 KB), that copy can dominate; * the cost of the compression.; *; * - The CDict's tables can be used in-place. In this model, compression is; * slower per input byte, because the compressor has to search two sets of; * tables. However, this model incurs no start-up cost (as long as the; * working context's tables can be reused). For small inputs, this can be; * faster than copying the CDict's tables.; *; * - The CDict's tables are not used at all, and instead we use the working; * context alone to reload the dictionary and use params based on the source; * size. See ZSTD_compress_insertDictionary() and ZSTD_compress_usingDict().; * This method is effective when the dictionary sizes are very small relative; * to the input size, and the input size is fairly large to begin with.; *; * Zstd has a simple internal heuristic that selects which strategy to use; * at the beginning of a compression. However, if experimentation shows that; * Zstd is making poor choices, it is possible to override that choice with; * this enum.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:231,Performance,perform,performance,231,"/* Note: this enum and the behavior it controls are effectively internal; * implementation details of the compressor. They are expected to continue; * to evolve and should be considered only in the context of extremely; * advanced performance tuning.; *; * Zstd currently supports the use of a CDict in three ways:; *; * - The contents of the CDict can be copied into the working context. This; * means that the compression can search both the dictionary and input; * while operating on a single set of internal tables. This makes; * the compression faster per-byte of input. However, the initial copy of; * the CDict's tables incurs a fixed cost at the beginning of the; * compression. For small compressions (< 8 KB), that copy can dominate; * the cost of the compression.; *; * - The CDict's tables can be used in-place. In this model, compression is; * slower per input byte, because the compressor has to search two sets of; * tables. However, this model incurs no start-up cost (as long as the; * working context's tables can be reused). For small inputs, this can be; * faster than copying the CDict's tables.; *; * - The CDict's tables are not used at all, and instead we use the working; * context alone to reload the dictionary and use params based on the source; * size. See ZSTD_compress_insertDictionary() and ZSTD_compress_usingDict().; * This method is effective when the dictionary sizes are very small relative; * to the input size, and the input size is fairly large to begin with.; *; * Zstd has a simple internal heuristic that selects which strategy to use; * at the beginning of a compression. However, if experimentation shows that; * Zstd is making poor choices, it is possible to override that choice with; * this enum.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1517,Usability,simpl,simple,1517,"/* Note: this enum and the behavior it controls are effectively internal; * implementation details of the compressor. They are expected to continue; * to evolve and should be considered only in the context of extremely; * advanced performance tuning.; *; * Zstd currently supports the use of a CDict in three ways:; *; * - The contents of the CDict can be copied into the working context. This; * means that the compression can search both the dictionary and input; * while operating on a single set of internal tables. This makes; * the compression faster per-byte of input. However, the initial copy of; * the CDict's tables incurs a fixed cost at the beginning of the; * compression. For small compressions (< 8 KB), that copy can dominate; * the cost of the compression.; *; * - The CDict's tables can be used in-place. In this model, compression is; * slower per input byte, because the compressor has to search two sets of; * tables. However, this model incurs no start-up cost (as long as the; * working context's tables can be reused). For small inputs, this can be; * faster than copying the CDict's tables.; *; * - The CDict's tables are not used at all, and instead we use the working; * context alone to reload the dictionary and use params based on the source; * size. See ZSTD_compress_insertDictionary() and ZSTD_compress_usingDict().; * This method is effective when the dictionary sizes are very small relative; * to the input size, and the input size is fairly large to begin with.; *; * Zstd has a simple internal heuristic that selects which strategy to use; * at the beginning of a compression. However, if experimentation shows that; * Zstd is making poor choices, it is possible to override that choice with; * this enum.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:74,Performance,load,loaded,74,"/*! ZSTD_getDictID_fromCDict() :; * Provides the dictID of the dictionary loaded into `cdict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:230,Performance,load,loaded,230,"/*! ZSTD_getDictID_fromCDict() :; * Provides the dictID of the dictionary loaded into `cdict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:228,Security,checksum,checksum,228,"/*! ZSTD_getParams() :; * same as ZSTD_getCParams(), but @return a full `ZSTD_parameters` object instead of sub-component `ZSTD_compressionParameters`.; * All fields of `ZSTD_frameParameters` are set to default : contentSize=1, checksum=0, noDictID=0 */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:112,Availability,error,error,112,"/*! ZSTD_checkCParams() :; * Ensure param values remain within authorized range.; * @return 0 on success, or an error code (can be checked with ZSTD_isError()) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:63,Security,authoriz,authorized,63,"/*! ZSTD_checkCParams() :; * Ensure param values remain within authorized range.; * @return 0 on success, or an error code (can be checked with ZSTD_isError()) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:345,Integrability,contract,contract,345,"/*! ZSTD_adjustCParams() :; * optimize params for a given `srcSize` and `dictSize`.; * `srcSize` can be unknown, in which case use ZSTD_CONTENTSIZE_UNKNOWN.; * `dictSize` must be `0` when there is no dictionary.; * cPar can be invalid : all parameters will be clamped within valid range in the @return struct.; * This function never fails (wide contract) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:30,Performance,optimiz,optimize,30,"/*! ZSTD_adjustCParams() :; * optimize params for a given `srcSize` and `dictSize`.; * `srcSize` can be unknown, in which case use ZSTD_CONTENTSIZE_UNKNOWN.; * `dictSize` must be `0` when there is no dictionary.; * cPar can be invalid : all parameters will be clamped within valid range in the @return struct.; * This function never fails (wide contract) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:73,Availability,REDUNDANT,REDUNDANT,73,"/*! ZSTD_compress_usingCDict_advanced() :; * Note : this function is now REDUNDANT.; * It can be replaced by ZSTD_compress2(), in combination with ZSTD_CCtx_loadDictionary() and other parameter setters.; * This prototype will be marked as deprecated and generate compilation warning in some future version */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:73,Safety,REDUND,REDUNDANT,73,"/*! ZSTD_compress_usingCDict_advanced() :; * Note : this function is now REDUNDANT.; * It can be replaced by ZSTD_compress2(), in combination with ZSTD_CCtx_loadDictionary() and other parameter setters.; * This prototype will be marked as deprecated and generate compilation warning in some future version */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:120,Performance,load,load,120,"/*! ZSTD_CCtx_loadDictionary_advanced() :; * Same as ZSTD_CCtx_loadDictionary(), but gives finer control over; * how to load the dictionary (by copy ? by reference ?); * and how to interpret it (automatic ? force raw mode ? full mode only ?) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:262,Integrability,synchroniz,synchronization,262,"/* === experimental parameters === */; /* these parameters can be used with ZSTD_setParameter(); * they are not guaranteed to remain supported in the future */; /* Enables rsyncable mode,; * which makes compressed files more rsync friendly; * by adding periodic synchronization points to the compressed data.; * The target average block size is ZSTD_c_jobSize / 2.; * It's possible to modify the job size to increase or decrease; * the granularity of the synchronization point.; * Once the jobSize is smaller than the window size,; * it will result in compression ratio degradation.; * NOTE 1: rsyncable mode only works when multithreading is enabled.; * NOTE 2: rsyncable performs poorly in combination with long range mode,; * since it will decrease the effectiveness of synchronization points,; * though mileage may vary.; * NOTE 3: Rsyncable mode limits maximum compression speed to ~400 MB/s.; * If the selected compression level is already running significantly slower,; * the overall speed won't be significantly impacted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:455,Integrability,synchroniz,synchronization,455,"/* === experimental parameters === */; /* these parameters can be used with ZSTD_setParameter(); * they are not guaranteed to remain supported in the future */; /* Enables rsyncable mode,; * which makes compressed files more rsync friendly; * by adding periodic synchronization points to the compressed data.; * The target average block size is ZSTD_c_jobSize / 2.; * It's possible to modify the job size to increase or decrease; * the granularity of the synchronization point.; * Once the jobSize is smaller than the window size,; * it will result in compression ratio degradation.; * NOTE 1: rsyncable mode only works when multithreading is enabled.; * NOTE 2: rsyncable performs poorly in combination with long range mode,; * since it will decrease the effectiveness of synchronization points,; * though mileage may vary.; * NOTE 3: Rsyncable mode limits maximum compression speed to ~400 MB/s.; * If the selected compression level is already running significantly slower,; * the overall speed won't be significantly impacted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:773,Integrability,synchroniz,synchronization,773,"/* === experimental parameters === */; /* these parameters can be used with ZSTD_setParameter(); * they are not guaranteed to remain supported in the future */; /* Enables rsyncable mode,; * which makes compressed files more rsync friendly; * by adding periodic synchronization points to the compressed data.; * The target average block size is ZSTD_c_jobSize / 2.; * It's possible to modify the job size to increase or decrease; * the granularity of the synchronization point.; * Once the jobSize is smaller than the window size,; * it will result in compression ratio degradation.; * NOTE 1: rsyncable mode only works when multithreading is enabled.; * NOTE 2: rsyncable performs poorly in combination with long range mode,; * since it will decrease the effectiveness of synchronization points,; * though mileage may vary.; * NOTE 3: Rsyncable mode limits maximum compression speed to ~400 MB/s.; * If the selected compression level is already running significantly slower,; * the overall speed won't be significantly impacted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:673,Performance,perform,performs,673,"/* === experimental parameters === */; /* these parameters can be used with ZSTD_setParameter(); * they are not guaranteed to remain supported in the future */; /* Enables rsyncable mode,; * which makes compressed files more rsync friendly; * by adding periodic synchronization points to the compressed data.; * The target average block size is ZSTD_c_jobSize / 2.; * It's possible to modify the job size to increase or decrease; * the granularity of the synchronization point.; * Once the jobSize is smaller than the window size,; * it will result in compression ratio degradation.; * NOTE 1: rsyncable mode only works when multithreading is enabled.; * NOTE 2: rsyncable performs poorly in combination with long range mode,; * since it will decrease the effectiveness of synchronization points,; * though mileage may vary.; * NOTE 3: Rsyncable mode limits maximum compression speed to ~400 MB/s.; * If the selected compression level is already running significantly slower,; * the overall speed won't be significantly impacted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1650,Performance,optimiz,optimized,1650,"sed into a CCtx, such as via; * ZSTD_CCtx_loadDictionary(), this param can be set on the CCtx to control; * whether the CDict that is created internally can use the feature or not.; *; * What it does:; *; * Normally, the internal data structures of the CDict are analogous to what; * would be stored in a CCtx after compressing the contents of a dictionary.; * To an approximation, a compression using a dictionary can then use those; * data structures to simply continue what is effectively a streaming; * compression where the simulated compression of the dictionary left off.; * Which is to say, the search structures in the CDict are normally the same; * format as in the CCtx.; *; * It is possible to do better, since the CDict is not like a CCtx: the search; * structures are written once during CDict creation, and then are only read; * after that, while the search structures in the CCtx are both read and; * written as the compression goes along. This means we can choose a search; * structure for the dictionary that is read-optimized.; *; * This feature enables the use of that different structure.; *; * Note that some of the members of the ZSTD_compressionParameters struct have; * different semantics and constraints in the dedicated search structure. It is; * highly recommended that you simply set a compression level in the CCtxParams; * you pass into the CDict creation call, and avoid messing with the cParams; * directly.; *; * Effects:; *; * This will only have any effect when the selected ZSTD_strategy; * implementation supports this feature. Currently, that's limited to; * ZSTD_greedy, ZSTD_lazy, and ZSTD_lazy2.; *; * Note that this means that the CDict tables can no longer be copied into the; * CCtx, so the dict attachment mode ZSTD_dictForceCopy will no longer be; * useable. The dictionary can only be attached or reloaded.; *; * In general, you should expect compression to be faster--sometimes very much; * so--and CDict creation to be slightly slower. Eventually, w",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2013,Safety,avoid,avoid,2013,"ionary(), this param can be set on the CCtx to control; * whether the CDict that is created internally can use the feature or not.; *; * What it does:; *; * Normally, the internal data structures of the CDict are analogous to what; * would be stored in a CCtx after compressing the contents of a dictionary.; * To an approximation, a compression using a dictionary can then use those; * data structures to simply continue what is effectively a streaming; * compression where the simulated compression of the dictionary left off.; * Which is to say, the search structures in the CDict are normally the same; * format as in the CCtx.; *; * It is possible to do better, since the CDict is not like a CCtx: the search; * structures are written once during CDict creation, and then are only read; * after that, while the search structures in the CCtx are both read and; * written as the compression goes along. This means we can choose a search; * structure for the dictionary that is read-optimized.; *; * This feature enables the use of that different structure.; *; * Note that some of the members of the ZSTD_compressionParameters struct have; * different semantics and constraints in the dedicated search structure. It is; * highly recommended that you simply set a compression level in the CCtxParams; * you pass into the CDict creation call, and avoid messing with the cParams; * directly.; *; * Effects:; *; * This will only have any effect when the selected ZSTD_strategy; * implementation supports this feature. Currently, that's limited to; * ZSTD_greedy, ZSTD_lazy, and ZSTD_lazy2.; *; * Note that this means that the CDict tables can no longer be copied into the; * CCtx, so the dict attachment mode ZSTD_dictForceCopy will no longer be; * useable. The dictionary can only be attached or reloaded.; *; * In general, you should expect compression to be faster--sometimes very much; * so--and CDict creation to be slightly slower. Eventually, we will probably; * make this mode the default.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1071,Usability,simpl,simply,1071,"ture"" can be used. This feature is still rough around the edges, be; * prepared for surprising behavior!; *; * How to use it:; *; * When using a CDict, whether to use this feature or not is controlled at; * CDict creation, and it must be set in a CCtxParams set passed into that; * construction (via ZSTD_createCDict_advanced2()). A compression will then; * use the feature or not based on how the CDict was constructed; the value of; * this param, set in the CCtx, will have no effect.; *; * However, when a dictionary buffer is passed into a CCtx, such as via; * ZSTD_CCtx_loadDictionary(), this param can be set on the CCtx to control; * whether the CDict that is created internally can use the feature or not.; *; * What it does:; *; * Normally, the internal data structures of the CDict are analogous to what; * would be stored in a CCtx after compressing the contents of a dictionary.; * To an approximation, a compression using a dictionary can then use those; * data structures to simply continue what is effectively a streaming; * compression where the simulated compression of the dictionary left off.; * Which is to say, the search structures in the CDict are normally the same; * format as in the CCtx.; *; * It is possible to do better, since the CDict is not like a CCtx: the search; * structures are written once during CDict creation, and then are only read; * after that, while the search structures in the CCtx are both read and; * written as the compression goes along. This means we can choose a search; * structure for the dictionary that is read-optimized.; *; * This feature enables the use of that different structure.; *; * Note that some of the members of the ZSTD_compressionParameters struct have; * different semantics and constraints in the dedicated search structure. It is; * highly recommended that you simply set a compression level in the CCtxParams; * you pass into the CDict creation call, and avoid messing with the cParams; * directly.; *; * Effects:; *; * This ",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1918,Usability,simpl,simply,1918,"ionary(), this param can be set on the CCtx to control; * whether the CDict that is created internally can use the feature or not.; *; * What it does:; *; * Normally, the internal data structures of the CDict are analogous to what; * would be stored in a CCtx after compressing the contents of a dictionary.; * To an approximation, a compression using a dictionary can then use those; * data structures to simply continue what is effectively a streaming; * compression where the simulated compression of the dictionary left off.; * Which is to say, the search structures in the CDict are normally the same; * format as in the CCtx.; *; * It is possible to do better, since the CDict is not like a CCtx: the search; * structures are written once during CDict creation, and then are only read; * after that, while the search structures in the CCtx are both read and; * written as the compression goes along. This means we can choose a search; * structure for the dictionary that is read-optimized.; *; * This feature enables the use of that different structure.; *; * Note that some of the members of the ZSTD_compressionParameters struct have; * different semantics and constraints in the dedicated search structure. It is; * highly recommended that you simply set a compression level in the CCtxParams; * you pass into the CDict creation call, and avoid messing with the cParams; * directly.; *; * Effects:; *; * This will only have any effect when the selected ZSTD_strategy; * implementation supports this feature. Currently, that's limited to; * ZSTD_greedy, ZSTD_lazy, and ZSTD_lazy2.; *; * Note that this means that the CDict tables can no longer be copied into the; * CCtx, so the dict attachment mode ZSTD_dictForceCopy will no longer be; * useable. The dictionary can only be attached or reloaded.; *; * In general, you should expect compression to be faster--sometimes very much; * so--and CDict creation to be slightly slower. Eventually, we will probably; * make this mode the default.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:445,Availability,error,error,445,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1024,Availability,error,error,1024,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:660,Energy Efficiency,allocate,allocate,660,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:810,Energy Efficiency,allocate,allocate,810,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:915,Safety,avoid,avoid,915,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1232,Safety,safe,safe,1232,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1253,Security,access,access,1253,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:827,Availability,error,error,827,"/* ZSTD_c_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells he compressor that the ZSTD_outBuffer will not be resized between; * calls. Specifically: (out.size - out.pos) will never grow. This gives the; * compressor the freedom to say: If the compressed data doesn't fit in the; * output buffer then return ZSTD_error_dstSizeTooSmall. This allows us to; * always decompress directly into the output buffer, instead of decompressing; * into an internal buffer and copying to the output buffer.; *; * When this flag is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer. It will still allocate the; * input window buffer (see ZSTD_c_stableInBuffer).; *; * Zstd will check that (out.size - out.pos) never grows and return an error; * if it does. While not strictly necessary, this should prevent surprises.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:591,Energy Efficiency,allocate,allocate,591,"/* ZSTD_c_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells he compressor that the ZSTD_outBuffer will not be resized between; * calls. Specifically: (out.size - out.pos) will never grow. This gives the; * compressor the freedom to say: If the compressed data doesn't fit in the; * output buffer then return ZSTD_error_dstSizeTooSmall. This allows us to; * always decompress directly into the output buffer, instead of decompressing; * into an internal buffer and copying to the output buffer.; *; * When this flag is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer. It will still allocate the; * input window buffer (see ZSTD_c_stableInBuffer).; *; * Zstd will check that (out.size - out.pos) never grows and return an error; * if it does. While not strictly necessary, this should prevent surprises.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:688,Energy Efficiency,allocate,allocate,688,"/* ZSTD_c_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells he compressor that the ZSTD_outBuffer will not be resized between; * calls. Specifically: (out.size - out.pos) will never grow. This gives the; * compressor the freedom to say: If the compressed data doesn't fit in the; * output buffer then return ZSTD_error_dstSizeTooSmall. This allows us to; * always decompress directly into the output buffer, instead of decompressing; * into an internal buffer and copying to the output buffer.; *; * When this flag is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer. It will still allocate the; * input window buffer (see ZSTD_c_stableInBuffer).; *; * Zstd will check that (out.size - out.pos) never grows and return an error; * if it does. While not strictly necessary, this should prevent surprises.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:642,Availability,error,error,642,"/* ZSTD_c_validateSequences; * Default is 0 == disabled. Set to 1 to enable sequence validation.; *; * For use with sequence compression API: ZSTD_compressSequences().; * Designates whether or not we validate sequences provided to ZSTD_compressSequences(); * during function execution.; *; * Without validation, providing a sequence that does not conform to the zstd spec will cause; * undefined behavior, and may produce a corrupted block.; *; * With validation enabled, a if sequence is invalid (see doc/zstd_compression_format.md for; * specifics regarding offset/matchlength requirements) then the function will bail out and; * return an error.; *; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:85,Security,validat,validation,85,"/* ZSTD_c_validateSequences; * Default is 0 == disabled. Set to 1 to enable sequence validation.; *; * For use with sequence compression API: ZSTD_compressSequences().; * Designates whether or not we validate sequences provided to ZSTD_compressSequences(); * during function execution.; *; * Without validation, providing a sequence that does not conform to the zstd spec will cause; * undefined behavior, and may produce a corrupted block.; *; * With validation enabled, a if sequence is invalid (see doc/zstd_compression_format.md for; * specifics regarding offset/matchlength requirements) then the function will bail out and; * return an error.; *; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:200,Security,validat,validate,200,"/* ZSTD_c_validateSequences; * Default is 0 == disabled. Set to 1 to enable sequence validation.; *; * For use with sequence compression API: ZSTD_compressSequences().; * Designates whether or not we validate sequences provided to ZSTD_compressSequences(); * during function execution.; *; * Without validation, providing a sequence that does not conform to the zstd spec will cause; * undefined behavior, and may produce a corrupted block.; *; * With validation enabled, a if sequence is invalid (see doc/zstd_compression_format.md for; * specifics regarding offset/matchlength requirements) then the function will bail out and; * return an error.; *; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:300,Security,validat,validation,300,"/* ZSTD_c_validateSequences; * Default is 0 == disabled. Set to 1 to enable sequence validation.; *; * For use with sequence compression API: ZSTD_compressSequences().; * Designates whether or not we validate sequences provided to ZSTD_compressSequences(); * during function execution.; *; * Without validation, providing a sequence that does not conform to the zstd spec will cause; * undefined behavior, and may produce a corrupted block.; *; * With validation enabled, a if sequence is invalid (see doc/zstd_compression_format.md for; * specifics regarding offset/matchlength requirements) then the function will bail out and; * return an error.; *; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:452,Security,validat,validation,452,"/* ZSTD_c_validateSequences; * Default is 0 == disabled. Set to 1 to enable sequence validation.; *; * For use with sequence compression API: ZSTD_compressSequences().; * Designates whether or not we validate sequences provided to ZSTD_compressSequences(); * during function execution.; *; * Without validation, providing a sequence that does not conform to the zstd spec will cause; * undefined behavior, and may produce a corrupted block.; *; * With validation enabled, a if sequence is invalid (see doc/zstd_compression_format.md for; * specifics regarding offset/matchlength requirements) then the function will bail out and; * return an error.; *; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:170,Availability,error,error,170,"/*! ZSTD_CCtx_getParameter() :; * Get the requested compression parameter value, selected by enum ZSTD_cParameter,; * and store it into int* value.; * @return : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:195,Testability,test,tested,195,"/*! ZSTD_CCtx_getParameter() :; * Get the requested compression parameter value, selected by enum ZSTD_cParameter,; * and store it into int* value.; * @return : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:283,Availability,failure,failure,283,"/*! ZSTD_CCtxParams_setParameter() :; * Similar to ZSTD_CCtx_setParameter.; * Set one compression parameter, selected by enum ZSTD_cParameter.; * Parameters must be applied to a ZSTD_CCtx using; * ZSTD_CCtx_setParametersUsingCCtxParams().; * @result : a code representing success or failure (which can be tested with; * ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:305,Testability,test,tested,305,"/*! ZSTD_CCtxParams_setParameter() :; * Similar to ZSTD_CCtx_setParameter.; * Set one compression parameter, selected by enum ZSTD_cParameter.; * Parameters must be applied to a ZSTD_CCtx using; * ZSTD_CCtx_setParametersUsingCCtxParams().; * @result : a code representing success or failure (which can be tested with; * ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:188,Availability,error,error,188,"/*! ZSTD_CCtxParams_getParameter() :; * Similar to ZSTD_CCtx_getParameter.; * Get the requested value of one compression parameter, selected by enum ZSTD_cParameter.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:213,Testability,test,tested,213,"/*! ZSTD_CCtxParams_getParameter() :; * Similar to ZSTD_CCtx_getParameter.; * Get the requested value of one compression parameter, selected by enum ZSTD_cParameter.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:410,Deployability,update,updated,410,"/*! ZSTD_CCtx_setParametersUsingCCtxParams() :; * Apply a set of ZSTD_CCtx_params to the compression context.; * This can be done even after compression is started,; * if nbWorkers==0, this will have no impact until a new compression is started.; * if nbWorkers>=1, new parameters will be picked up at next job,; * with a few restrictions (windowLog, pledgedSrcSize, nbWorkers, jobSize, and overlapLog are not updated).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:278,Security,access,accessible,278,"/*! ZSTD_createDDict_byReference() :; * Create a digested dictionary, ready to start decompression operation without startup delay.; * Dictionary content is referenced, and therefore stays in dictBuffer.; * It is important that dictBuffer outlives DDict,; * it must remain read accessible throughout the lifetime of DDict */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:248,Security,access,accessible,248,"/*! ZSTD_DCtx_loadDictionary_byReference() :; * Same as ZSTD_DCtx_loadDictionary(),; * but references `dict` content instead of copying it into `dctx`.; * This saves memory if `dict` remains around.,; * However, it's imperative that `dict` remains accessible (and unmodified) while being used, so it must outlive decompression. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:124,Performance,load,load,124,"/*! ZSTD_DCtx_loadDictionary_advanced() :; * Same as ZSTD_DCtx_loadDictionary(),; * but gives direct control over; * how to load the dictionary (by copy ? by reference ?); * and how to interpret it (automatic ? force raw mode ? full mode only ?). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:479,Availability,error,error,479,"/*! ZSTD_DCtx_setMaxWindowSize() :; * Refuses allocating internal buffers for frames requiring a window size larger than provided limit.; * This protects a decoder context from reserving too much memory for itself (potential attack scenario).; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts all window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT); * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:323,Energy Efficiency,allocate,allocated,323,"/*! ZSTD_DCtx_setMaxWindowSize() :; * Refuses allocating internal buffers for frames requiring a window size larger than provided limit.; * This protects a decoder context from reserving too much memory for itself (potential attack scenario).; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts all window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT); * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:225,Security,attack,attack,225,"/*! ZSTD_DCtx_setMaxWindowSize() :; * Refuses allocating internal buffers for frames requiring a window size larger than provided limit.; * This protects a decoder context from reserving too much memory for itself (potential attack scenario).; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts all window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT); * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:504,Testability,test,tested,504,"/*! ZSTD_DCtx_setMaxWindowSize() :; * Refuses allocating internal buffers for frames requiring a window size larger than provided limit.; * This protects a decoder context from reserving too much memory for itself (potential attack scenario).; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts all window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT); * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:172,Availability,error,error,172,"/*! ZSTD_DCtx_getParameter() :; * Get the requested decompression parameter value, selected by enum ZSTD_dParameter,; * and store it into int* value.; * @return : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:197,Testability,test,tested,197,"/*! ZSTD_DCtx_getParameter() :; * Get the requested decompression parameter value, selected by enum ZSTD_dParameter,; * and store it into int* value.; * @return : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:713,Energy Efficiency,allocate,allocate,713,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:814,Energy Efficiency,allocate,allocate,814,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:902,Safety,avoid,avoid,902,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:994,Safety,avoid,avoid,994,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1175,Safety,safe,safe,1175,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1196,Security,access,access,1196,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:283,Performance,perform,performance,283,"/* ZSTD_d_forceIgnoreChecksum; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable; *; * Tells the decompressor to skip checksum validation during decompression, regardless; * of whether checksumming was specified during compression. This offers some; * slight performance benefits, and may be useful for debugging.; * Param has values of type ZSTD_forceIgnoreChecksum_e; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:142,Security,checksum,checksum,142,"/* ZSTD_d_forceIgnoreChecksum; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable; *; * Tells the decompressor to skip checksum validation during decompression, regardless; * of whether checksumming was specified during compression. This offers some; * slight performance benefits, and may be useful for debugging.; * Param has values of type ZSTD_forceIgnoreChecksum_e; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:151,Security,validat,validation,151,"/* ZSTD_d_forceIgnoreChecksum; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable; *; * Tells the decompressor to skip checksum validation during decompression, regardless; * of whether checksumming was specified during compression. This offers some; * slight performance benefits, and may be useful for debugging.; * Param has values of type ZSTD_forceIgnoreChecksum_e; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:209,Security,checksum,checksumming,209,"/* ZSTD_d_forceIgnoreChecksum; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable; *; * Tells the decompressor to skip checksum validation during decompression, regardless; * of whether checksumming was specified during compression. This offers some; * slight performance benefits, and may be useful for debugging.; * Param has values of type ZSTD_forceIgnoreChecksum_e; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:245,Availability,error,error,245,"/*! ZSTD_DCtx_setFormat() :; * Instruct the decoder context about what kind of data to decode next.; * This instruction is mandatory to decode data without a fully-formed header,; * such ZSTD_f_zstd1_magicless for example.; * @return : 0, or an error code (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:270,Testability,test,tested,270,"/*! ZSTD_DCtx_setFormat() :; * Instruct the decoder context about what kind of data to decode next.; * This instruction is mandatory to decode data without a fully-formed header,; * such ZSTD_f_zstd1_magicless for example.; * @return : 0, or an error code (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:147,Availability,redundant,redundant,147,"/********************************************************************; * Advanced streaming functions; * Warning : most of these functions are now redundant with the Advanced API.; * Once Advanced API reaches ""stable"" status,; * redundant functions will be deprecated, and then at some point removed.; ********************************************************************/; /*===== Advanced Streaming compression functions =====*/; /*! ZSTD_initCStream_srcSize() :; * This function is deprecated, and equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * pledgedSrcSize must be correct. If it is not known at init time, use; * ZSTD_CONTENTSIZE_UNKNOWN. Note that, for compatibility with older programs,; * ""0"" also disables frame content size field. It may be enabled in the future.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:229,Availability,redundant,redundant,229,"/********************************************************************; * Advanced streaming functions; * Warning : most of these functions are now redundant with the Advanced API.; * Once Advanced API reaches ""stable"" status,; * redundant functions will be deprecated, and then at some point removed.; ********************************************************************/; /*===== Advanced Streaming compression functions =====*/; /*! ZSTD_initCStream_srcSize() :; * This function is deprecated, and equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * pledgedSrcSize must be correct. If it is not known at init time, use; * ZSTD_CONTENTSIZE_UNKNOWN. Note that, for compatibility with older programs,; * ""0"" also disables frame content size field. It may be enabled in the future.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:147,Safety,redund,redundant,147,"/********************************************************************; * Advanced streaming functions; * Warning : most of these functions are now redundant with the Advanced API.; * Once Advanced API reaches ""stable"" status,; * redundant functions will be deprecated, and then at some point removed.; ********************************************************************/; /*===== Advanced Streaming compression functions =====*/; /*! ZSTD_initCStream_srcSize() :; * This function is deprecated, and equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * pledgedSrcSize must be correct. If it is not known at init time, use; * ZSTD_CONTENTSIZE_UNKNOWN. Note that, for compatibility with older programs,; * ""0"" also disables frame content size field. It may be enabled in the future.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:229,Safety,redund,redundant,229,"/********************************************************************; * Advanced streaming functions; * Warning : most of these functions are now redundant with the Advanced API.; * Once Advanced API reaches ""stable"" status,; * redundant functions will be deprecated, and then at some point removed.; ********************************************************************/; /*===== Advanced Streaming compression functions =====*/; /*! ZSTD_initCStream_srcSize() :; * This function is deprecated, and equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * pledgedSrcSize must be correct. If it is not known at init time, use; * ZSTD_CONTENTSIZE_UNKNOWN. Note that, for compatibility with older programs,; * ""0"" also disables frame content size field. It may be enabled in the future.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:602,Usability,clear,clear,602,"/********************************************************************; * Advanced streaming functions; * Warning : most of these functions are now redundant with the Advanced API.; * Once Advanced API reaches ""stable"" status,; * redundant functions will be deprecated, and then at some point removed.; ********************************************************************/; /*===== Advanced Streaming compression functions =====*/; /*! ZSTD_initCStream_srcSize() :; * This function is deprecated, and equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * pledgedSrcSize must be correct. If it is not known at init time, use; * ZSTD_CONTENTSIZE_UNKNOWN. Note that, for compatibility with older programs,; * ""0"" also disables frame content size field. It may be enabled in the future.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:423,Performance,load,loaded,423,"/*! ZSTD_initCStream_usingDict() :; * This function is deprecated, and is equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_loadDictionary(zcs, dict, dictSize);; *; * Creates of an internal CDict (incompatible with static CCtx), except if; * dict == NULL or dictSize < 8, in which case no dict is used.; * Note: dict is loaded with ZSTD_dct_auto (treated as a full zstd dictionary if; * it begins with ZSTD_MAGIC_DICTIONARY, else as raw content) and ZSTD_dlm_byCopy.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:423,Performance,load,loaded,423,"/*! ZSTD_initCStream_advanced() :; * This function is deprecated, and is approximately equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * // Pseudocode: Set each zstd parameter and leave the rest as-is.; * for ((param, value) : params) {; * ZSTD_CCtx_setParameter(zcs, param, value);; * }; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; * ZSTD_CCtx_loadDictionary(zcs, dict, dictSize);; *; * dict is loaded with ZSTD_dct_auto and ZSTD_dlm_byCopy.; * pledgedSrcSize must be correct.; * If srcSize is not known at init time, use value ZSTD_CONTENTSIZE_UNKNOWN.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:865,Availability,error,error,865,"/*! ZSTD_resetCStream() :; * This function is deprecated, and is equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * start a new frame, using same parameters from previous frame.; * This is typically useful to skip dictionary loading stage, since it will re-use it in-place.; * Note that zcs must be init at least once before using ZSTD_resetCStream().; * If pledgedSrcSize is not known at reset time, use macro ZSTD_CONTENTSIZE_UNKNOWN.; * If pledgedSrcSize > 0, its value must be correct, as it will be written in header, and controlled at the end.; * For the time being, pledgedSrcSize==0 is interpreted as ""srcSize unknown"" for compatibility with older programs,; * but it will change to mean ""empty"" in future version, so use macro ZSTD_CONTENTSIZE_UNKNOWN instead.; * @return : 0, or an error code (which can be tested using ZSTD_isError()); * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:298,Performance,load,loading,298,"/*! ZSTD_resetCStream() :; * This function is deprecated, and is equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * start a new frame, using same parameters from previous frame.; * This is typically useful to skip dictionary loading stage, since it will re-use it in-place.; * Note that zcs must be init at least once before using ZSTD_resetCStream().; * If pledgedSrcSize is not known at reset time, use macro ZSTD_CONTENTSIZE_UNKNOWN.; * If pledgedSrcSize > 0, its value must be correct, as it will be written in header, and controlled at the end.; * For the time being, pledgedSrcSize==0 is interpreted as ""srcSize unknown"" for compatibility with older programs,; * but it will change to mean ""empty"" in future version, so use macro ZSTD_CONTENTSIZE_UNKNOWN instead.; * @return : 0, or an error code (which can be tested using ZSTD_isError()); * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:890,Testability,test,tested,890,"/*! ZSTD_resetCStream() :; * This function is deprecated, and is equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * start a new frame, using same parameters from previous frame.; * This is typically useful to skip dictionary loading stage, since it will re-use it in-place.; * Note that zcs must be init at least once before using ZSTD_resetCStream().; * If pledgedSrcSize is not known at reset time, use macro ZSTD_CONTENTSIZE_UNKNOWN.; * If pledgedSrcSize > 0, its value must be correct, as it will be written in header, and controlled at the end.; * For the time being, pledgedSrcSize==0 is interpreted as ""srcSize unknown"" for compatibility with older programs,; * but it will change to mean ""empty"" in future version, so use macro ZSTD_CONTENTSIZE_UNKNOWN instead.; * @return : 0, or an error code (which can be tested using ZSTD_isError()); * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:675,Performance,concurren,concurrent,675,"/*! ZSTD_toFlushNow() :; * Tell how many bytes are ready to be flushed immediately.; * Useful for multithreading scenarios (nbWorkers >= 1).; * Probe the oldest active job, defined as oldest job not yet entirely flushed,; * and check its output buffer.; * @return : amount of data stored in oldest job and ready to be flushed immediately.; * if @return == 0, it means either :; * + there is no active job (could be checked with ZSTD_frameProgression()), or; * + oldest job is still actively compressing data,; * but everything it has produced has also been flushed so far,; * therefore flush speed is limited by production speed of oldest job; * irrespective of the speed of concurrent (and newer) jobs.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:186,Performance,load,loading,186,"/*!; * This function is deprecated, and is equivalent to:; *; * ZSTD_DCtx_reset(zds, ZSTD_reset_session_only);; *; * re-use decompression parameters from previous init; saves dictionary loading; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1573,Availability,recover,recover,1573,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1276,Integrability,Interface,Interface,1276,"ted below.; * Prefer normal streaming API for an easier experience.; ********************************************************************* */; /**; Buffer-less streaming compression (synchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinish",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1573,Safety,recover,recover,1573,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1909,Safety,detect,detects,1909,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1669,Security,access,accessible,1669,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2151,Security,checksum,checksum,2151,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:751,Availability,error,errorCode,751,"/**; Buffer-less streaming decompression (synchronous mode). A ZSTD_DCtx object is required to track streaming operations.; Use ZSTD_createDCtx() / ZSTD_freeDCtx() to manage it.; A ZSTD_DCtx object can be re-used multiple times. First typical operation is to retrieve frame parameters, using ZSTD_getFrameHeader().; Frame header is extracted from the beginning of compressed frame, so providing only the frame's beginning is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determin",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2069,Availability,error,error,2069,"uption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding another full block,; which maximum size is provided in `ZSTD_frameHeader` structure, field `blockSizeMax`.; At which point, decoding can resume from the beginning of the buffer.; Note that already decoded data stored in the buffer should be flushed before being overwritten. There are alternatives possible, for example using two or more buffers of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decom",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3666,Availability,error,error,3666," of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() is the number of bytes regenerated within 'dst' (necessarily <= dstCapacity).; It can be zero : it just means ZSTD_decompressContinue() has decoded some metadata item.; It can also be an error code, which can be tested with ZSTD_isError(). A frame is fully decoded when ZSTD_nextSrcSizeToDecompress() returns zero.; Context can then be reset to start a new decompression. Note : it's possible to know if next input to present is a header or a block, using ZSTD_nextInputType().; This information is not required to properly decode a frame. == Special case : skippable frames ==. Skippable frames allow integration of user-defined data into a flow of concatenated frames.; Skippable frames will be ignored (skipped) by decompressor.; The format of skippable frames is as follows :; a) Skippable frame ID - 4 Bytes, Little endian format, any value from 0x184D2A50 to 0x184D2A5F; b) Frame Size - 4 Bytes, Little endian format, unsigned 32-bits; c) Frame Content - any content (User Data) of length equal to Frame Size; For skippable frames ZSTD_getFrameHeader() returns zfhPtr->frameType==ZSTD_skippableFrame.; For skippable frames ZSTD_decompressContinue() always returns 0 : it only skips the content.; *",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:4081,Deployability,integrat,integration,4081,"ally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() is the number of bytes regenerated within 'dst' (necessarily <= dstCapacity).; It can be zero : it just means ZSTD_decompressContinue() has decoded some metadata item.; It can also be an error code, which can be tested with ZSTD_isError(). A frame is fully decoded when ZSTD_nextSrcSizeToDecompress() returns zero.; Context can then be reset to start a new decompression. Note : it's possible to know if next input to present is a header or a block, using ZSTD_nextInputType().; This information is not required to properly decode a frame. == Special case : skippable frames ==. Skippable frames allow integration of user-defined data into a flow of concatenated frames.; Skippable frames will be ignored (skipped) by decompressor.; The format of skippable frames is as follows :; a) Skippable frame ID - 4 Bytes, Little endian format, any value from 0x184D2A50 to 0x184D2A5F; b) Frame Size - 4 Bytes, Little endian format, unsigned 32-bits; c) Frame Content - any content (User Data) of length equal to Frame Size; For skippable frames ZSTD_getFrameHeader() returns zfhPtr->frameType==ZSTD_skippableFrame.; For skippable frames ZSTD_decompressContinue() always returns 0 : it only skips the content.; */; /*===== Buffer-less streaming decompression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1227,Energy Efficiency,allocate,allocate,1227,"n is to retrieve frame parameters, using ZSTD_getFrameHeader().; Frame header is extracted from the beginning of compressed frame, so providing only the frame's beginning is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1914,Energy Efficiency,efficient,efficient,1914,"t size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding another full block,; which maximum size is provided in `ZSTD_frameHeader` structure, field `blockSizeMax`.; At which point, decoding can resume from the beginning of the buffer.; Note that already decoded data stored in the buffer should be flushed before being overwritten. There are alternatives possible, for example using two or more buffers of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes,",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1341,Integrability,depend,depending,1341,"racted from the beginning of compressed frame, so providing only the frame's beginning is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1388,Integrability,interoperab,interoperability,1388,"ng is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding another full block,; which maximum size is provided in `ZSTD_frameHeader` structur",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:4081,Integrability,integrat,integration,4081,"ally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() is the number of bytes regenerated within 'dst' (necessarily <= dstCapacity).; It can be zero : it just means ZSTD_decompressContinue() has decoded some metadata item.; It can also be an error code, which can be tested with ZSTD_isError(). A frame is fully decoded when ZSTD_nextSrcSizeToDecompress() returns zero.; Context can then be reset to start a new decompression. Note : it's possible to know if next input to present is a header or a block, using ZSTD_nextInputType().; This information is not required to properly decode a frame. == Special case : skippable frames ==. Skippable frames allow integration of user-defined data into a flow of concatenated frames.; Skippable frames will be ignored (skipped) by decompressor.; The format of skippable frames is as follows :; a) Skippable frame ID - 4 Bytes, Little endian format, any value from 0x184D2A50 to 0x184D2A5F; b) Frame Size - 4 Bytes, Little endian format, unsigned 32-bits; c) Frame Content - any content (User Data) of length equal to Frame Size; For skippable frames ZSTD_getFrameHeader() returns zfhPtr->frameType==ZSTD_skippableFrame.; For skippable frames ZSTD_decompressContinue() always returns 0 : it only skips the content.; */; /*===== Buffer-less streaming decompression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1379,Modifiability,extend,extended,1379,"ng is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding another full block,; which maximum size is provided in `ZSTD_frameHeader` structur",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:775,Testability,test,tested,775,"/**; Buffer-less streaming decompression (synchronous mode). A ZSTD_DCtx object is required to track streaming operations.; Use ZSTD_createDCtx() / ZSTD_freeDCtx() to manage it.; A ZSTD_DCtx object can be re-used multiple times. First typical operation is to retrieve frame parameters, using ZSTD_getFrameHeader().; Frame header is extracted from the beginning of compressed frame, so providing only the frame's beginning is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determin",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3691,Testability,test,tested,3691," of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() is the number of bytes regenerated within 'dst' (necessarily <= dstCapacity).; It can be zero : it just means ZSTD_decompressContinue() has decoded some metadata item.; It can also be an error code, which can be tested with ZSTD_isError(). A frame is fully decoded when ZSTD_nextSrcSizeToDecompress() returns zero.; Context can then be reset to start a new decompression. Note : it's possible to know if next input to present is a header or a block, using ZSTD_nextInputType().; This information is not required to properly decode a frame. == Special case : skippable frames ==. Skippable frames allow integration of user-defined data into a flow of concatenated frames.; Skippable frames will be ignored (skipped) by decompressor.; The format of skippable frames is as follows :; a) Skippable frame ID - 4 Bytes, Little endian format, any value from 0x184D2A50 to 0x184D2A5F; b) Frame Size - 4 Bytes, Little endian format, unsigned 32-bits; c) Frame Content - any content (User Data) of length equal to Frame Size; For skippable frames ZSTD_getFrameHeader() returns zfhPtr->frameType==ZSTD_skippableFrame.; For skippable frames ZSTD_decompressContinue() always returns 0 : it only skips the content.; *",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2474,Usability,resume,resume,2474,"essContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding another full block,; which maximum size is provided in `ZSTD_frameHeader` structure, field `blockSizeMax`.; At which point, decoding can resume from the beginning of the buffer.; Note that already decoded data stored in the buffer should be flushed before being overwritten. There are alternatives possible, for example using two or more buffers of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() ",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:62,Availability,avail,available,62,"/* if == ZSTD_CONTENTSIZE_UNKNOWN, it means this field is not available. 0 means ""empty"" */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:202,Availability,error,error,202,"/*! ZSTD_getFrameHeader() :; * decode Frame Header, or requires larger `srcSize`.; * @return : 0, `zfhPtr` is correctly filled,; * >0, `srcSize` is too small, value is wanted `srcSize` amount,; * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:227,Testability,test,tested,227,"/*! ZSTD_getFrameHeader() :; * decode Frame Header, or requires larger `srcSize`.; * @return : 0, `zfhPtr` is correctly filled,; * >0, `srcSize` is too small, value is wanted `srcSize` amount,; * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:319,Energy Efficiency,charge,charge,319,"/* ============================ */; /** Block level API */; /* ============================ */; /*!; Block functions produce and decode raw zstd blocks, without frame metadata.; Frame metadata cost is typically ~12 bytes, which can be non-negligible for very small blocks (< 100 bytes).; But users will have to take in charge needed metadata to regenerate data, such as compressed and content sizes. A few rules to respect :; - Compressing and decompressing require a context structure; + Use ZSTD_createCCtx() and ZSTD_createDCtx(); - It is necessary to init context before starting; + compression : any ZSTD_compressBegin*() variant, including with dictionary; + decompression : any ZSTD_decompressBegin*() variant, including with dictionary; + copyCCtx() and copyDCtx() can be used too; - Block size is limited, it must be <= ZSTD_getBlockSize() <= ZSTD_BLOCKSIZE_MAX == 128 KB; + If input is larger than a block size, it's necessary to split input data into multiple blocks; + For inputs larger than a single block, consider using regular ZSTD_compress() instead.; Frame metadata is not that costly, and quickly becomes negligible as source size grows larger than a block.; - When a block is considered not compressible enough, ZSTD_compressBlock() result will be 0 (zero) !; ===> In which case, nothing is produced into `dst` !; + User __must__ test for such outcome and deal directly with uncompressed data; + A block cannot be declared incompressible if ZSTD_compressBlock() return value was != 0.; Doing so would mess up with statistics history, leading to potential data corruption.; + ZSTD_decompressBlock() _doesn't accept uncompressed data as input_ !!; + In case of multiple successive blocks, should some of them be uncompressed,; decoder must be informed of their existence in order to follow proper history.; Use ZSTD_insertBlock() for such a case.; */; /*===== Raw zstd block functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1350,Testability,test,test,1350,"/* ============================ */; /** Block level API */; /* ============================ */; /*!; Block functions produce and decode raw zstd blocks, without frame metadata.; Frame metadata cost is typically ~12 bytes, which can be non-negligible for very small blocks (< 100 bytes).; But users will have to take in charge needed metadata to regenerate data, such as compressed and content sizes. A few rules to respect :; - Compressing and decompressing require a context structure; + Use ZSTD_createCCtx() and ZSTD_createDCtx(); - It is necessary to init context before starting; + compression : any ZSTD_compressBegin*() variant, including with dictionary; + decompression : any ZSTD_decompressBegin*() variant, including with dictionary; + copyCCtx() and copyDCtx() can be used too; - Block size is limited, it must be <= ZSTD_getBlockSize() <= ZSTD_BLOCKSIZE_MAX == 128 KB; + If input is larger than a block size, it's necessary to split input data into multiple blocks; + For inputs larger than a single block, consider using regular ZSTD_compress() instead.; Frame metadata is not that costly, and quickly becomes negligible as source size grows larger than a block.; - When a block is considered not compressible enough, ZSTD_compressBlock() result will be 0 (zero) !; ===> In which case, nothing is produced into `dst` !; + User __must__ test for such outcome and deal directly with uncompressed data; + A block cannot be declared incompressible if ZSTD_compressBlock() return value was != 0.; Doing so would mess up with statistics history, leading to potential data corruption.; + ZSTD_decompressBlock() _doesn't accept uncompressed data as input_ !!; + In case of multiple successive blocks, should some of them be uncompressed,; decoder must be informed of their existence in order to follow proper history.; Use ZSTD_insertBlock() for such a case.; */; /*===== Raw zstd block functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:8,Integrability,depend,dependency,8,/*===== dependency =====*/,MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:83,Performance,load,load,83,"/* It isn't required but allows to generate better code, saving a function pointer load from the IAT and an indirect jump.*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:52,Availability,Error,Error,52,"/*-*********************************************; * Error codes list; *-*********************************************; * Error codes _values_ are pinned down since v1.3.1 only.; * Therefore, don't rely on values if you may link to any version < v1.3.1.; *; * Only values < 100 are considered stable.; *; * note 1 : this API shall be used with static linking only.; * dynamic linking is not yet officially supported.; * note 2 : Prefer relying on the enum than on its value whenever possible; * This is the only supported way to use the error list < v1.3.1; * note 3 : ZSTD_isError() is always correct, whatever the library version.; **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:121,Availability,Error,Error,121,"/*-*********************************************; * Error codes list; *-*********************************************; * Error codes _values_ are pinned down since v1.3.1 only.; * Therefore, don't rely on values if you may link to any version < v1.3.1.; *; * Only values < 100 are considered stable.; *; * note 1 : this API shall be used with static linking only.; * dynamic linking is not yet officially supported.; * note 2 : Prefer relying on the enum than on its value whenever possible; * This is the only supported way to use the error list < v1.3.1; * note 3 : ZSTD_isError() is always correct, whatever the library version.; **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:153,Availability,down,down,153,"/*-*********************************************; * Error codes list; *-*********************************************; * Error codes _values_ are pinned down since v1.3.1 only.; * Therefore, don't rely on values if you may link to any version < v1.3.1.; *; * Only values < 100 are considered stable.; *; * note 1 : this API shall be used with static linking only.; * dynamic linking is not yet officially supported.; * note 2 : Prefer relying on the enum than on its value whenever possible; * This is the only supported way to use the error list < v1.3.1; * note 3 : ZSTD_isError() is always correct, whatever the library version.; **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:536,Availability,error,error,536,"/*-*********************************************; * Error codes list; *-*********************************************; * Error codes _values_ are pinned down since v1.3.1 only.; * Therefore, don't rely on values if you may link to any version < v1.3.1.; *; * Only values < 100 are considered stable.; *; * note 1 : this API shall be used with static linking only.; * dynamic linking is not yet officially supported.; * note 2 : Prefer relying on the enum than on its value whenever possible; * This is the only supported way to use the error list < v1.3.1; * note 3 : ZSTD_isError() is always correct, whatever the library version.; **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:13,Availability,error,error,13,"/* following error codes are __NOT STABLE__, they can be removed or changed in future versions */",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:135,Availability,avail,available,135,"/*; * This API consists of small unitary functions, which must be inlined for best performance.; * Since link-time-optimization is not available for all compilers,; * these functions are defined into a .h to be included.; */; /*-****************************************; * Dependencies; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:273,Integrability,Depend,Dependencies,273,"/*; * This API consists of small unitary functions, which must be inlined for best performance.; * Since link-time-optimization is not available for all compilers,; * these functions are defined into a .h to be included.; */; /*-****************************************; * Dependencies; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:83,Performance,perform,performance,83,"/*; * This API consists of small unitary functions, which must be inlined for best performance.; * Since link-time-optimization is not available for all compilers,; * these functions are defined into a .h to be included.; */; /*-****************************************; * Dependencies; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:115,Performance,optimiz,optimization,115,"/*; * This API consists of small unitary functions, which must be inlined for best performance.; * Since link-time-optimization is not available for all compilers,; * these functions are defined into a .h to be included.; */; /*-****************************************; * Dependencies; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:20,Integrability,rout,routines,20,/* unaligned access routines */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:13,Security,access,access,13,/* unaligned access routines */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:3,Testability,assert,assert,3,"/* assert(), DEBUGLOG(), RAWLOG() */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:3,Availability,error,error,3,/* error codes and messages */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:19,Integrability,message,messages,19,/* error codes and messages */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:210,Availability,error,error,210,"/* Start with initCStream, providing the size of buffer to write into.; * bitStream will never write outside of this buffer.; * `dstCapacity` must be >= sizeof(bitD->bitContainer), otherwise @return will be an error code.; *; * bits are first added to a local register.; * Local register is size_t, hence 64-bits on 64-bits systems, or 32-bits on 32-bits systems.; * Writing data into memory is an explicit operation, performed by the flushBits function.; * Hence keep track how many bits are potentially stored into local register to avoid register overflow.; * After a flushBits, a maximum of 7 bits might still be stored into local register.; *; * Avoid storing elements of more than 24 bits if you want compatibility with 32-bits bitstream readers.; *; * Last operation is to close the bitStream.; * The function returns the final size of CStream in bytes.; * If data couldn't fit into `dstBuffer`, it will return a 0 ( == not storable); */; /*-********************************************; * bitStream decoding API (read backward); **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:418,Performance,perform,performed,418,"/* Start with initCStream, providing the size of buffer to write into.; * bitStream will never write outside of this buffer.; * `dstCapacity` must be >= sizeof(bitD->bitContainer), otherwise @return will be an error code.; *; * bits are first added to a local register.; * Local register is size_t, hence 64-bits on 64-bits systems, or 32-bits on 32-bits systems.; * Writing data into memory is an explicit operation, performed by the flushBits function.; * Hence keep track how many bits are potentially stored into local register to avoid register overflow.; * After a flushBits, a maximum of 7 bits might still be stored into local register.; *; * Avoid storing elements of more than 24 bits if you want compatibility with 32-bits bitstream readers.; *; * Last operation is to close the bitStream.; * The function returns the final size of CStream in bytes.; * If data couldn't fit into `dstBuffer`, it will return a 0 ( == not storable); */; /*-********************************************; * bitStream decoding API (read backward); **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:535,Safety,avoid,avoid,535,"/* Start with initCStream, providing the size of buffer to write into.; * bitStream will never write outside of this buffer.; * `dstCapacity` must be >= sizeof(bitD->bitContainer), otherwise @return will be an error code.; *; * bits are first added to a local register.; * Local register is size_t, hence 64-bits on 64-bits systems, or 32-bits on 32-bits systems.; * Writing data into memory is an explicit operation, performed by the flushBits function.; * Hence keep track how many bits are potentially stored into local register to avoid register overflow.; * After a flushBits, a maximum of 7 bits might still be stored into local register.; *; * Avoid storing elements of more than 24 bits if you want compatibility with 32-bits bitstream readers.; *; * Last operation is to close the bitStream.; * The function returns the final size of CStream in bytes.; * If data couldn't fit into `dstBuffer`, it will return a 0 ( == not storable); */; /*-********************************************; * bitStream decoding API (read backward); **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:651,Safety,Avoid,Avoid,651,"/* Start with initCStream, providing the size of buffer to write into.; * bitStream will never write outside of this buffer.; * `dstCapacity` must be >= sizeof(bitD->bitContainer), otherwise @return will be an error code.; *; * bits are first added to a local register.; * Local register is size_t, hence 64-bits on 64-bits systems, or 32-bits on 32-bits systems.; * Writing data into memory is an explicit operation, performed by the flushBits function.; * Hence keep track how many bits are potentially stored into local register to avoid register overflow.; * After a flushBits, a maximum of 7 bits might still be stored into local register.; *; * Avoid storing elements of more than 24 bits if you want compatibility with 32-bits bitstream readers.; *; * Last operation is to close the bitStream.; * The function returns the final size of CStream in bytes.; * If data couldn't fit into `dstBuffer`, it will return a 0 ( == not storable); */; /*-********************************************; * bitStream decoding API (read backward); **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:99,Availability,down,down,99,"/* result of BIT_reloadDStream() */; /* 1,2,4,8 would be better for bitmap combinations, but slows down performance a bit ... :( */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:104,Performance,perform,performance,104,"/* result of BIT_reloadDStream() */; /* 1,2,4,8 would be better for bitmap combinations, but slows down performance a bit ... :( */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:606,Performance,perform,performed,606,"/* Start by invoking BIT_initDStream().; * A chunk of the bitStream is then stored into a local register.; * Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; * You can then retrieve bitFields stored into the local register, **in reverse order**.; * Local register is explicitly reloaded from memory by the BIT_reloadDStream() method.; * A reload guarantee a minimum of ((8*sizeof(bitD->bitContainer))-7) bits when its result is BIT_DStream_unfinished.; * Otherwise, it can be less than that, so proceed accordingly.; * Checking if DStream has reached its end can be performed with BIT_endOfDStream().; */; /*-****************************************; * unsafe API; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:693,Safety,unsafe,unsafe,693,"/* Start by invoking BIT_initDStream().; * A chunk of the bitStream is then stored into a local register.; * Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; * You can then retrieve bitFields stored into the local register, **in reverse order**.; * Local register is explicitly reloaded from memory by the BIT_reloadDStream() method.; * A reload guarantee a minimum of ((8*sizeof(bitD->bitContainer))-7) bits when its result is BIT_DStream_unfinished.; * Otherwise, it can be less than that, so proceed accordingly.; * Checking if DStream has reached its end can be performed with BIT_endOfDStream().; */; /*-****************************************; * unsafe API; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:3,Safety,unsafe,unsafe,3,/* unsafe version; does not check buffer overflow */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:265,Availability,error,error,265,"/*-**************************************************************; * bitStream encoding; ****************************************************************/; /*! BIT_initCStream() :; * `dstCapacity` must be > sizeof(size_t); * @return : 0 if success,; * otherwise an error code (can be tested using ERR_isError()) */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:284,Testability,test,tested,284,"/*-**************************************************************; * bitStream encoding; ****************************************************************/; /*! BIT_initCStream() :; * `dstCapacity` must be > sizeof(size_t); * @return : 0 if success,; * otherwise an error code (can be tested using ERR_isError()) */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:77,Safety,unsafe,unsafe,77,/*! BIT_flushBitsFast() :; * assumption : bitContainer has not overflowed; * unsafe version; does not check buffer overflow */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:73,Safety,safe,safe,73,"/*! BIT_flushBits() :; * assumption : bitContainer has not overflowed; * safe version; check for buffer overflow, and prevents it.; * note : does not signal buffer overflow.; * overflow will be revealed later on using BIT_closeCStream() */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:12,Safety,detect,detected,12,/* overflow detected */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:384,Availability,error,errorCode,384,"/*-********************************************************; * bitStream decoding; **********************************************************/; /*! BIT_initDStream() :; * Initialize a BIT_DStream_t.; * `bitD` : a pointer to an already allocated BIT_DStream_t structure.; * `srcSize` must be the *exact* size of the bitStream, in bytes.; * @return : size of stream (== srcSize), or an errorCode if a problem is detected; */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:235,Energy Efficiency,allocate,allocated,235,"/*-********************************************************; * bitStream decoding; **********************************************************/; /*! BIT_initDStream() :; * Initialize a BIT_DStream_t.; * `bitD` : a pointer to an already allocated BIT_DStream_t structure.; * `srcSize` must be the *exact* size of the bitStream, in bytes.; * @return : size of stream (== srcSize), or an errorCode if a problem is detected; */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:410,Safety,detect,detected,410,"/*-********************************************************; * bitStream decoding; **********************************************************/; /*! BIT_initDStream() :; * Initialize a BIT_DStream_t.; * `bitD` : a pointer to an already allocated BIT_DStream_t structure.; * `srcSize` must be the *exact* size of the bitStream, in bytes.; * @return : size of stream (== srcSize), or an errorCode if a problem is detected; */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:44,Availability,mask,mask,44,/* arbitrate between double-shift and shift+mask */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:28,Safety,unsafe,unsafe,28,/*! BIT_lookBitsFast() :; * unsafe version; only works if nbBits >= 1 */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:75,Deployability,update,update,75,/*! BIT_readBits() :; * Read (consume) next n bits from local register and update.; * Pay attention to not read more than nbBits contained into local register.; * @return : extracted value. */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:28,Safety,unsafe,unsafe,28,/*! BIT_readBitsFast() :; * unsafe version; only works only if nbBits >= 1 */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:113,Safety,safe,safe,113,"/*! BIT_reloadDStream() :; * Refill `bitD` from buffer previously set in BIT_initDStream() .; * This function is safe, it guarantees it will not read beyond src buffer.; * @return : status of `BIT_DStream_t` internal register.; * when status == BIT_DStream_unfinished, internal register is filled with at least 25 or 57 bits */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:12,Safety,detect,detected,12,"/* overflow detected, like end of stream */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:154,Performance,perform,performance,154,"/**; * HINT_INLINE is used to help the compiler generate better code. It is *not*; * used for ""templates"", so it can be tweaked based on the compilers; * performance.; *; * gcc-4.8 and gcc-4.9 have been shown to benefit from leaving off the; * always_inline attribute.; *; * clang up to 5.0.0 (trunk) benefit tremendously from the always_inline; * attribute.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:3,Safety,detect,detects,3,/* detects whether we are being compiled under msan */,MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:47,Security,sanitiz,sanitizers,47,"/* Not all platforms that support msan provide sanitizers/msan_interface.h.; * We therefore declare the functions we need ourselves, rather than trying to; * include the header file... */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:117,Deployability,update,update,117,/* Make memory region fully uninitialized (without changing its contents).; This is a legacy interface that does not update origin information. Use; __msan_allocated_memory() instead. */,MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:93,Integrability,interface,interface,93,/* Make memory region fully uninitialized (without changing its contents).; This is a legacy interface that does not update origin information. Use; __msan_allocated_memory() instead. */,MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:3,Safety,detect,detects,3,/* detects whether we are being compiled under asan */,MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:47,Security,sanitiz,sanitizers,47,"/* Not all platforms that support asan provide sanitizers/asan_interface.h.; * We therefore declare the functions we need ourselves, rather than trying to; * include the header file... */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:111,Energy Efficiency,allocate,allocated,111,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as unaddressable.; *; * This memory must be previously allocated by your program. Instrumented; * code is forbidden from accessing addresses in this region until it is; * unpoisoned. This function is not guaranteed to poison the entire region -; * it could poison only a subregion of <c>[addr, addr+size)</c> due to ASan; * alignment restrictions.; *; * \note This function is not thread-safe because no two threads can poison or; * unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:444,Safety,safe,safe,444,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as unaddressable.; *; * This memory must be previously allocated by your program. Instrumented; * code is forbidden from accessing addresses in this region until it is; * unpoisoned. This function is not guaranteed to poison the entire region -; * it could poison only a subregion of <c>[addr, addr+size)</c> due to ASan; * alignment restrictions.; *; * \note This function is not thread-safe because no two threads can poison or; * unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:177,Security,access,accessing,177,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as unaddressable.; *; * This memory must be previously allocated by your program. Instrumented; * code is forbidden from accessing addresses in this region until it is; * unpoisoned. This function is not guaranteed to poison the entire region -; * it could poison only a subregion of <c>[addr, addr+size)</c> due to ASan; * alignment restrictions.; *; * \note This function is not thread-safe because no two threads can poison or; * unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:109,Energy Efficiency,allocate,allocated,109,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as addressable.; *; * This memory must be previously allocated by your program. Accessing; * addresses in this region is allowed until this region is poisoned again.; * This function could unpoison a super-region of <c>[addr, addr+size)</c> due; * to ASan alignment restrictions.; *; * \note This function is not thread-safe because no two threads can; * poison or unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:376,Safety,safe,safe,376,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as addressable.; *; * This memory must be previously allocated by your program. Accessing; * addresses in this region is allowed until this region is poisoned again.; * This function could unpoison a super-region of <c>[addr, addr+size)</c> due; * to ASan alignment restrictions.; *; * \note This function is not thread-safe because no two threads can; * poison or unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:136,Security,Access,Accessing,136,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as addressable.; *; * This memory must be previously allocated by your program. Accessing; * addresses in this region is allowed until this region is poisoned again.; * This function could unpoison a super-region of <c>[addr, addr+size)</c> due; * to ASan alignment restrictions.; *; * \note This function is not thread-safe because no two threads can; * poison or unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/cpu.h:166,Safety,avoid,avoid,166,"/* The following block like the normal cpuid branch below, but gcc; * reserves ebx for use of its pic register so we must specially; * handle the save and restore to avoid clobbering the register; */",MatchSource.CODE_COMMENT,builtins/zstd/common/cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/cpu.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/cpu.h:13,Modifiability,Extend,Extended,13,/* cpuid(7): Extended Features. */,MatchSource.CODE_COMMENT,builtins/zstd/common/cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/cpu.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:1097,Modifiability,variab,variable,1097,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * The purpose of this header is to enable debug functions.; * They regroup assert(), DEBUGLOG() and RAWLOG() for run-time,; * and DEBUG_STATIC_ASSERT() for compile-time.; *; * By default, DEBUGLEVEL==0, which means run-time debug is disabled.; *; * Level 1 enables assert() only.; * Starting level 2, traces can be generated and pushed to stderr.; * The higher the level, the more verbose the traces.; *; * It's possible to dynamically adjust level using variable g_debug_level,; * which is only declared if DEBUGLEVEL>=2,; * and is a global variable, not multi-thread protected (use with care); */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:1184,Modifiability,variab,variable,1184,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * The purpose of this header is to enable debug functions.; * They regroup assert(), DEBUGLOG() and RAWLOG() for run-time,; * and DEBUG_STATIC_ASSERT() for compile-time.; *; * By default, DEBUGLEVEL==0, which means run-time debug is disabled.; *; * Level 1 enables assert() only.; * Starting level 2, traces can be generated and pushed to stderr.; * The higher the level, the more verbose the traces.; *; * It's possible to dynamically adjust level using variable g_debug_level,; * which is only declared if DEBUGLEVEL>=2,; * and is a global variable, not multi-thread protected (use with care); */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:1198,Performance,multi-thread,multi-thread,1198,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * The purpose of this header is to enable debug functions.; * They regroup assert(), DEBUGLOG() and RAWLOG() for run-time,; * and DEBUG_STATIC_ASSERT() for compile-time.; *; * By default, DEBUGLEVEL==0, which means run-time debug is disabled.; *; * Level 1 enables assert() only.; * Starting level 2, traces can be generated and pushed to stderr.; * The higher the level, the more verbose the traces.; *; * It's possible to dynamically adjust level using variable g_debug_level,; * which is only declared if DEBUGLEVEL>=2,; * and is a global variable, not multi-thread protected (use with care); */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:717,Testability,assert,assert,717,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * The purpose of this header is to enable debug functions.; * They regroup assert(), DEBUGLOG() and RAWLOG() for run-time,; * and DEBUG_STATIC_ASSERT() for compile-time.; *; * By default, DEBUGLEVEL==0, which means run-time debug is disabled.; *; * Level 1 enables assert() only.; * Starting level 2, traces can be generated and pushed to stderr.; * The higher the level, the more verbose the traces.; *; * It's possible to dynamically adjust level using variable g_debug_level,; * which is only declared if DEBUGLEVEL>=2,; * and is a global variable, not multi-thread protected (use with care); */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:907,Testability,assert,assert,907,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * The purpose of this header is to enable debug functions.; * They regroup assert(), DEBUGLOG() and RAWLOG() for run-time,; * and DEBUG_STATIC_ASSERT() for compile-time.; *; * By default, DEBUGLEVEL==0, which means run-time debug is disabled.; *; * Level 1 enables assert() only.; * Starting level 2, traces can be generated and pushed to stderr.; * The higher the level, the more verbose the traces.; *; * It's possible to dynamically adjust level using variable g_debug_level,; * which is only declared if DEBUGLEVEL>=2,; * and is a global variable, not multi-thread protected (use with care); */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:10,Testability,assert,assert,10,"/* static assert is triggered at compile time, leaving no runtime artefact.; * static assert only works with compile-time constants.; * Also, this variant can only be used inside a function. */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:86,Testability,assert,assert,86,"/* static assert is triggered at compile time, leaving no runtime artefact.; * static assert only works with compile-time constants.; * Also, this variant can only be used inside a function. */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:46,Deployability,release,release,46,"/* recommended values for DEBUGLEVEL :; * 0 : release mode, no debug, all run-time checks disabled; * 1 : enables assert() only, no display; * 2 : reserved, for currently active debug path; * 3 : events once per object lifetime (CCtx, CDict, etc.); * 4 : events once per frame; * 5 : events once per block; * 6 : events once per sequence (verbose); * 7+: events at every position (*very* verbose); *; * It's generally inconvenient to output traces > 5.; * In which case, it's possible to selectively trigger high verbosity levels; * by modifying g_debug_level.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:114,Testability,assert,assert,114,"/* recommended values for DEBUGLEVEL :; * 0 : release mode, no debug, all run-time checks disabled; * 1 : enables assert() only, no display; * 2 : reserved, for currently active debug path; * 3 : events once per object lifetime (CCtx, CDict, etc.); * 4 : events once per frame; * 5 : events once per block; * 6 : events once per sequence (verbose); * 7+: events at every position (*very* verbose); *; * It's generally inconvenient to output traces > 5.; * In which case, it's possible to selectively trigger high verbosity levels; * by modifying g_debug_level.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:3,Testability,assert,assert,3,"/* assert may be already defined, due to prior #include <assert.h> */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:57,Testability,assert,assert,57,"/* assert may be already defined, due to prior #include <assert.h> */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:11,Testability,assert,assert,11,/* disable assert (default) */,MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:7,Modifiability,variab,variable,7,"/* the variable is only declared,; it actually lives in debug.c,; and is shared by the whole process.; It's not thread-safe.; It's useful when enabling very verbose levels; on selective conditions (such as position in src) */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:119,Safety,safe,safe,119,"/* the variable is only declared,; it actually lives in debug.c,; and is shared by the whole process.; It's not thread-safe.; It's useful when enabling very verbose levels; on selective conditions (such as position in src) */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h:446,Security,expose,expose,446,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* Note : this module is expected to remain private, do not expose it */",MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h:47,Integrability,Depend,Dependencies,47,/* ****************************************; * Dependencies; ******************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h:47,Availability,Error,Error,47,/*-****************************************; * Error codes handling; ******************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h:21,Availability,error,error,21,/* check and forward error code */,MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h:47,Availability,Error,Error,47,/*-****************************************; * Error Strings; ******************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:48,Integrability,Depend,Dependencies,48,/*-*****************************************; * Dependencies; ******************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:83,Performance,load,load,83,"/* It isn't required but allows to generate better code, saving a function pointer load from the IAT and an indirect jump.*/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:320,Energy Efficiency,allocate,allocated,320,"/**< library version number; to be used when checking dll version */; /*-****************************************; * FSE simple functions; ******************************************/; /*! FSE_compress() :; Compress content of buffer 'src', of size 'srcSize', into destination buffer 'dst'.; 'dst' buffer must be already allocated. Compression runs faster is dstCapacity >= FSE_compressBound(srcSize).; @return : size of compressed data (<= dstCapacity).; Special values : if return == 0, srcData is not compressible => Nothing is stored within dst !!!; if return == 1, srcData is a single byte symbol * srcSize times. Use RLE compression instead.; if FSE_isError(return), compression failed (more details using FSE_getErrorName()); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:121,Usability,simpl,simple,121,"/**< library version number; to be used when checking dll version */; /*-****************************************; * FSE simple functions; ******************************************/; /*! FSE_compress() :; Compress content of buffer 'src', of size 'srcSize', into destination buffer 'dst'.; 'dst' buffer must be already allocated. Compression runs faster is dstCapacity >= FSE_compressBound(srcSize).; @return : size of compressed data (<= dstCapacity).; Special values : if return == 0, srcData is not compressible => Nothing is stored within dst !!!; if return == 1, srcData is a single byte symbol * srcSize times. Use RLE compression instead.; if FSE_isError(return), compression failed (more details using FSE_getErrorName()); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:216,Availability,error,error,216,"/*! FSE_decompress():; Decompress FSE data from buffer 'cSrc', of size 'cSrcSize',; into already allocated destination buffer 'dst', of size 'dstCapacity'.; @return : size of regenerated data (<= maxDstSize),; or an error code, which can be tested using FSE_isError() . ** Important ** : FSE_decompress() does not decompress non-compressible nor RLE data !!!; Why ? : making this distinction requires a header.; Header management is intentionally delegated to the user layer, which can better manage special cases.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:97,Energy Efficiency,allocate,allocated,97,"/*! FSE_decompress():; Decompress FSE data from buffer 'cSrc', of size 'cSrcSize',; into already allocated destination buffer 'dst', of size 'dstCapacity'.; @return : size of regenerated data (<= maxDstSize),; or an error code, which can be tested using FSE_isError() . ** Important ** : FSE_decompress() does not decompress non-compressible nor RLE data !!!; Why ? : making this distinction requires a header.; Header management is intentionally delegated to the user layer, which can better manage special cases.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:241,Testability,test,tested,241,"/*! FSE_decompress():; Decompress FSE data from buffer 'cSrc', of size 'cSrcSize',; into already allocated destination buffer 'dst', of size 'dstCapacity'.; @return : size of regenerated data (<= maxDstSize),; or an error code, which can be tested using FSE_isError() . ** Important ** : FSE_decompress() does not decompress non-compressible nor RLE data !!!; Why ? : making this distinction requires a header.; Header management is intentionally delegated to the user layer, which can better manage special cases.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:34,Availability,Error,Error,34,/* maximum compressed size */; /* Error Management */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:33,Availability,error,error,33,/* tells if a return value is an error code */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:12,Availability,error,error,12,"/* provides error code string (useful for debugging) */; /*-*****************************************; * FSE advanced functions; ******************************************/; /*! FSE_compress2() :; Same as FSE_compress(), but allows the selection of 'maxSymbolValue' and 'tableLog'; Both parameters can be defined as '0' to mean : use default value; @return : size of compressed data; Special values : if return == 0, srcData is not compressible => Nothing is stored within cSrc !!!; if return == 1, srcData is a single byte symbol * srcSize times. Use RLE compression.; if FSE_isError(return), it's an error code.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:602,Availability,error,error,602,"/* provides error code string (useful for debugging) */; /*-*****************************************; * FSE advanced functions; ******************************************/; /*! FSE_compress2() :; Same as FSE_compress(), but allows the selection of 'maxSymbolValue' and 'tableLog'; Both parameters can be defined as '0' to mean : use default value; @return : size of compressed data; Special values : if return == 0, srcData is not compressible => Nothing is stored within cSrc !!!; if return == 1, srcData is a single byte symbol * srcSize times. Use RLE compression.; if FSE_isError(return), it's an error code.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:981,Availability,down,downsize,981,"/*-*****************************************; * FSE detailed API; ******************************************/; /*!; FSE_compress() does the following:; 1. count symbol occurrence from source[] into table count[] (see hist.h); 2. normalize counters so that sum(count[]) == Power_of_2 (2^tableLog); 3. save normalized counters to memory buffer using writeNCount(); 4. build encoding table 'CTable' from normalized counters; 5. encode the data stream using encoding table 'CTable'. FSE_decompress() does the following:; 1. read normalized counters with readNCount(); 2. build decoding table 'DTable' from normalized counters; 3. decode the data stream using decoding table 'DTable'. The following API allows targeting specific sub-functions for advanced tasks.; For example, it's possible to compress several blocks using the same 'CTable',; or to save and provide normalized distribution using external method.; */; /* *** COMPRESSION *** */; /*! FSE_optimalTableLog():; dynamically downsize 'tableLog' when conditions are met.; It saves CPU time, by using smaller tables, while preserving or even improving compression ratio.; @return : recommended tableLog (necessarily <= 'maxTableLog') */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:692,Availability,error,errorCode,692,"/*! FSE_normalizeCount():; normalize counts so that sum(count[]) == Power_of_2 (2^tableLog); 'normalizedCounter' is a table of short, of minimum size (maxSymbolValue+1).; useLowProbCount is a boolean parameter which trades off compressed size for; faster header decoding. When it is set to 1, the compressed data will be slightly; smaller. And when it is set to 0, FSE_readNCount() and FSE_buildDTable() will be; faster. If you are compressing a small amount of data (< 2 KB) then useLowProbCount=0; is a good default, since header deserialization makes a big speed difference.; Otherwise, useLowProbCount=1 is a good default, since the speed difference is small.; @return : tableLog,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:716,Testability,test,tested,716,"/*! FSE_normalizeCount():; normalize counts so that sum(count[]) == Power_of_2 (2^tableLog); 'normalizedCounter' is a table of short, of minimum size (maxSymbolValue+1).; useLowProbCount is a boolean parameter which trades off compressed size for; faster header decoding. When it is set to 1, the compressed data will be slightly; smaller. And when it is set to 0, FSE_readNCount() and FSE_buildDTable() will be; faster. If you are compressing a small amount of data (< 2 KB) then useLowProbCount=0; is a good default, since header deserialization makes a big speed difference.; Otherwise, useLowProbCount=1 is a good default, since the speed difference is small.; @return : tableLog,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:122,Availability,error,errorCode,122,"/*! FSE_writeNCount():; Compactly save 'normalizedCounter' into 'buffer'.; @return : size of the compressed table,; or an errorCode, which can be tested using FSE_isError(). */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:146,Testability,test,tested,146,"/*! FSE_writeNCount():; Compactly save 'normalizedCounter' into 'buffer'.; @return : size of the compressed table,; or an errorCode, which can be tested using FSE_isError(). */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:73,Integrability,depend,depends,73,/*! Constructor and Destructor of FSE_CTable.; Note that FSE_CTable size depends on 'tableLog' and 'maxSymbolValue' */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:9,Energy Efficiency,allocate,allocate,9,/* don't allocate that. It's only meant to be more restrictive than void* */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:116,Availability,error,errorCode,116,"/*! FSE_buildCTable():; Builds `ct`, which must be already allocated, using FSE_createCTable().; @return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:59,Energy Efficiency,allocate,allocated,59,"/*! FSE_buildCTable():; Builds `ct`, which must be already allocated, using FSE_createCTable().; @return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:140,Testability,test,tested,140,"/*! FSE_buildCTable():; Builds `ct`, which must be already allocated, using FSE_createCTable().; @return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:216,Availability,error,errorCode,216,"/*! FSE_compress_usingCTable():; Compress `src` using `ct` into `dst` which must be already allocated.; @return : size of compressed data (<= `dstCapacity`),; or 0 if compressed data could not fit into `dst`,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:92,Energy Efficiency,allocate,allocated,92,"/*! FSE_compress_usingCTable():; Compress `src` using `ct` into `dst` which must be already allocated.; @return : size of compressed data (<= `dstCapacity`),; or 0 if compressed data could not fit into `dst`,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:240,Testability,test,tested,240,"/*! FSE_compress_usingCTable():; Compress `src` using `ct` into `dst` which must be already allocated.; @return : size of compressed data (<= `dstCapacity`),; or 0 if compressed data could not fit into `dst`,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:642,Availability,error,error,642,"/*!; Tutorial :; ----------; The first step is to count all symbols. FSE_count() does this job very fast.; Result will be saved into 'count', a table of unsigned int, which must be already allocated, and have 'maxSymbolValuePtr[0]+1' cells.; 'src' is a table of bytes of size 'srcSize'. All values within 'src' MUST be <= maxSymbolValuePtr[0]; maxSymbolValuePtr[0] will be updated, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:677,Availability,Error,ErrorCode,677,"/*!; Tutorial :; ----------; The first step is to count all symbols. FSE_count() does this job very fast.; Result will be saved into 'count', a table of unsigned int, which must be already allocated, and have 'maxSymbolValuePtr[0]+1' cells.; 'src' is a table of bytes of size 'srcSize'. All values within 'src' MUST be <= maxSymbolValuePtr[0]; maxSymbolValuePtr[0] will be updated, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1565,Availability,error,error,1565,"essibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function r",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1629,Availability,Error,ErrorCode,1629,"essibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function r",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1977,Availability,error,error,1977,"g value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an erro",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2012,Availability,Error,ErrorCode,2012,"g value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an erro",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2327,Availability,error,error,2327,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2364,Availability,Error,ErrorCode,2364,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2776,Availability,error,error,2776,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2811,Availability,Error,ErrorCode,2811,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:3022,Availability,error,errorCode,3022,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:373,Deployability,update,updated,373,"/*!; Tutorial :; ----------; The first step is to count all symbols. FSE_count() does this job very fast.; Result will be saved into 'count', a table of unsigned int, which must be already allocated, and have 'maxSymbolValuePtr[0]+1' cells.; 'src' is a table of bytes of size 'srcSize'. All values within 'src' MUST be <= maxSymbolValuePtr[0]; maxSymbolValuePtr[0] will be updated, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:3128,Deployability,update,updated,3128,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:189,Energy Efficiency,allocate,allocated,189,"/*!; Tutorial :; ----------; The first step is to count all symbols. FSE_count() does this job very fast.; Result will be saved into 'count', a table of unsigned int, which must be already allocated, and have 'maxSymbolValuePtr[0]+1' cells.; 'src' is a table of bytes of size 'srcSize'. All values within 'src' MUST be <= maxSymbolValuePtr[0]; maxSymbolValuePtr[0] will be updated, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1369,Energy Efficiency,allocate,allocated,1369,"ted, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (wh",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1803,Energy Efficiency,allocate,allocated,1803,"nt() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2220,Energy Efficiency,allocate,allocated,2220,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:701,Testability,test,tested,701,"/*!; Tutorial :; ----------; The first step is to count all symbols. FSE_count() does this job very fast.; Result will be saved into 'count', a table of unsigned int, which must be already allocated, and have 'maxSymbolValuePtr[0]+1' cells.; 'src' is a table of bytes of size 'srcSize'. All values within 'src' MUST be <= maxSymbolValuePtr[0]; maxSymbolValuePtr[0] will be updated, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1653,Testability,test,tested,1653,"essibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function r",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2036,Testability,test,tested,2036,"g value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an erro",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2388,Testability,test,tested,2388,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2835,Testability,test,tested,2835,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:3046,Testability,test,tested,3046,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:66,Integrability,depend,depends,66,/*! Constructor and Destructor of FSE_DTable.; Note that its size depends on 'tableLog' */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:9,Energy Efficiency,allocate,allocate,9,/* don't allocate that. It's just a way to be more restrictive than void* */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:115,Availability,error,errorCode,115,"/*! FSE_buildDTable():; Builds 'dt', which must be already allocated, using FSE_createDTable().; return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:59,Energy Efficiency,allocate,allocated,59,"/*! FSE_buildDTable():; Builds 'dt', which must be already allocated, using FSE_createDTable().; return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:139,Testability,test,tested,139,"/*! FSE_buildDTable():; Builds 'dt', which must be already allocated, using FSE_createDTable().; return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:221,Availability,error,errorCode,221,"/*! FSE_decompress_usingDTable():; Decompress compressed source `cSrc` of size `cSrcSize` using `dt`; into `dst` which must be already allocated.; @return : size of regenerated data (necessarily <= `dstCapacity`),; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:135,Energy Efficiency,allocate,allocated,135,"/*! FSE_decompress_usingDTable():; Decompress compressed source `cSrc` of size `cSrcSize` using `dt`; into `dst` which must be already allocated.; @return : size of regenerated data (necessarily <= `dstCapacity`),; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:245,Testability,test,tested,245,"/*! FSE_decompress_usingDTable():; Decompress compressed source `cSrc` of size `cSrcSize` using `dt`; into `dst` which must be already allocated.; @return : size of regenerated data (necessarily <= `dstCapacity`),; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:864,Availability,error,error,864,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:899,Availability,error,error,899,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1200,Availability,error,error,1200,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1235,Availability,error,error,1235,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1562,Availability,error,error,1562,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1597,Availability,error,error,1597,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:389,Energy Efficiency,allocate,allocated,389,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1148,Energy Efficiency,allocate,allocated,1148,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:281,Performance,perform,performed,281,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1051,Performance,perform,performed,1051,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:924,Testability,test,tested,924,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1260,Testability,test,tested,1260,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1622,Testability,test,tested,1622,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:7,Integrability,Depend,Dependency,7,/* *** Dependency *** */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:32,Energy Efficiency,allocate,allocate,32,/* It is possible to statically allocate FSE CTable/DTable as a table of FSE_CTable/FSE_DTable using below macros */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:139,Energy Efficiency,allocate,allocated,139,"/**< same as FSE_optimalTableLog(), which used `minus==2` */; /* FSE_compress_wksp() :; * Same as FSE_compress2(), but using an externally allocated scratch buffer (`workSpace`).; * FSE_COMPRESS_WKSP_SIZE_U32() provides the minimum size required for `workSpace` as a table of FSE_CTable.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:165,Energy Efficiency,allocate,allocated,165,"/**< build a fake FSE_CTable, designed to compress always the same symbolValue */; /* FSE_buildCTable_wksp() :; * Same as FSE_buildCTable(), but using an externally allocated scratch buffer (`workSpace`).; * `wkspSize` must be >= `FSE_BUILD_CTABLE_WORKSPACE_SIZE_U32(maxSymbolValue, tableLog)` of `unsigned`.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:52,Energy Efficiency,allocate,allocated,52,"/**< Same as FSE_buildDTable(), using an externally allocated `workspace` produced with `FSE_BUILD_DTABLE_WKSP_SIZE_U32(maxSymbolValue)` */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:51,Energy Efficiency,allocate,allocated,51,"/**< same as FSE_decompress(), using an externally allocated `workSpace` produced with `FSE_DECOMPRESS_WKSP_SIZE_U32(maxLog, maxSymbolValue)` */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:641,Availability,error,errorCode,641,"/**<; These functions are inner components of FSE_compress_usingCTable().; They allow the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* ***********************************",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:778,Availability,error,error,778,"/**<; These functions are inner components of FSE_compress_usingCTable().; They allow the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* ***********************************",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1839,Availability,error,error,1839," the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* *****************************************; * FSE symbol decompression API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1860,Availability,error,errorCode,1860," the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* *****************************************; * FSE symbol decompression API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:359,Modifiability,variab,variables,359,"/**<; These functions are inner components of FSE_compress_usingCTable().; They allow the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* ***********************************",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1471,Performance,perform,performed,1471," the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* *****************************************; * FSE symbol decompression API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:814,Testability,test,tested,814,"/**<; These functions are inner components of FSE_compress_usingCTable().; They allow the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* ***********************************",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1884,Testability,test,tested,1884," the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* *****************************************; * FSE symbol decompression API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:27,Integrability,depend,depending,27,"/* precise table may vary, depending on U16 */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:503,Availability,error,errorCode,503,"/**<; Let's now decompose FSE_decompress_usingDTable() into its unitary components.; You will decode FSE-encoded symbols from the bitStream,; and also any other bitFields you put in, **in reverse order**. You will need a few variables to track your bitStream. They are :. BIT_DStream_t DStream; // Stream context; FSE_DState_t DState; // State context. Multiple ones are possible; FSE_DTable* DTablePtr; // Decoding table, provided by FSE_buildDTable(). The first thing to do is to init the bitStream.; errorCode = BIT_initDStream(&DStream, srcBuffer, srcSize);. You should then retrieve your initial state(s); (in reverse flushing order if you have several ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbo",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:667,Availability,error,errorCode,667,"/**<; Let's now decompose FSE_decompress_usingDTable() into its unitary components.; You will decode FSE-encoded symbols from the bitStream,; and also any other bitFields you put in, **in reverse order**. You will need a few variables to track your bitStream. They are :. BIT_DStream_t DStream; // Stream context; FSE_DState_t DState; // State context. Multiple ones are possible; FSE_DTable* DTablePtr; // Decoding table, provided by FSE_buildDTable(). The first thing to do is to init the bitStream.; errorCode = BIT_initDStream(&DStream, srcBuffer, srcSize);. You should then retrieve your initial state(s); (in reverse flushing order if you have several ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbo",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1292,Integrability,depend,depends,1292,":. BIT_DStream_t DStream; // Stream context; FSE_DState_t DState; // State context. Multiple ones are possible; FSE_DTable* DTablePtr; // Decoding table, provided by FSE_buildDTable(). The first thing to do is to init the bitStream.; errorCode = BIT_initDStream(&DStream, srcBuffer, srcSize);. You should then retrieve your initial state(s); (in reverse flushing order if you have several ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:225,Modifiability,variab,variables,225,"/**<; Let's now decompose FSE_decompress_usingDTable() into its unitary components.; You will decode FSE-encoded symbols from the bitStream,; and also any other bitFields you put in, **in reverse order**. You will need a few variables to track your bitStream. They are :. BIT_DStream_t DStream; // Stream context; FSE_DState_t DState; // State context. Multiple ones are possible; FSE_DTable* DTablePtr; // Decoding table, provided by FSE_buildDTable(). The first thing to do is to init the bitStream.; errorCode = BIT_initDStream(&DStream, srcBuffer, srcSize);. You should then retrieve your initial state(s); (in reverse flushing order if you have several ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbo",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1360,Performance,perform,performed,1360,". Multiple ones are possible; FSE_DTable* DTablePtr; // Decoding table, provided by FSE_buildDTable(). The first thing to do is to init the bitStream.; errorCode = BIT_initDStream(&DStream, srcBuffer, srcSize);. You should then retrieve your initial state(s); (in reverse flushing order if you have several ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end i",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2353,Performance,perform,performed,2353,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2027,Safety,detect,detect,2027,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2596,Safety,unsafe,unsafe,2596,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2140,Testability,test,test,2140,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2133,Usability,simpl,simple,2133,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:30,Safety,unsafe,unsafe,30,"/*! FSE_decodeSymbolFast() :; unsafe, only works if no symbol has a probability > 50% */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:333,Energy Efficiency,Reduce,Reduced,333,"/* **************************************************************; * Tuning parameters; ****************************************************************/; /*!MEMORY_USAGE :; * Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.); * Increasing memory usage improves compression ratio; * Reduced memory usage can improve speed, due to cache effect; * Recommended max value is 14, for 16KB, which nicely fits into Intel x86 L1 cache */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:380,Performance,cache,cache,380,"/* **************************************************************; * Tuning parameters; ****************************************************************/; /*!MEMORY_USAGE :; * Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.); * Increasing memory usage improves compression ratio; * Reduced memory usage can improve speed, due to cache effect; * Recommended max value is 14, for 16KB, which nicely fits into Intel x86 L1 cache */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:471,Performance,cache,cache,471,"/* **************************************************************; * Tuning parameters; ****************************************************************/; /*!MEMORY_USAGE :; * Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.); * Increasing memory usage improves compression ratio; * Reduced memory usage can improve speed, due to cache effect; * Recommended max value is 14, for 16KB, which nicely fits into Intel x86 L1 cache */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:50,Security,authoriz,authorized,50,/*!FSE_MAX_SYMBOL_VALUE :; * Maximum symbol value authorized.; * Required for proper stack allocation */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:7,Integrability,Depend,Dependencies,7,/* *** Dependencies *** */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:264,Integrability,interface,interface,264,"/* *** library symbols visibility *** */; /* Note : when linking with -fvisibility=hidden on gcc, or by default on Visual,; * HUF symbols remain ""private"" (internal symbols for library only).; * Set macro FSE_DLL_EXPORT to 1 if you want HUF symbols visible on DLL interface */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:72,Performance,load,load,72,"/* not required, just to generate faster code (saves a function pointer load from IAT and an indirect jump) */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:230,Energy Efficiency,allocate,allocated,230,"/* ========================== */; /* *** simple functions *** */; /* ========================== */; /** HUF_compress() :; * Compress content from buffer 'src', of size 'srcSize', into buffer 'dst'.; * 'dst' buffer must be already allocated.; * Compression runs faster if `dstCapacity` >= HUF_compressBound(srcSize).; * `srcSize` must be <= `HUF_BLOCKSIZE_MAX` == 128 KB.; * @return : size of compressed data (<= `dstCapacity`).; * Special values : if return == 0, srcData is not compressible => Nothing is stored within dst !!!; * if HUF_isError(return), compression failed (more details using HUF_getErrorName()); */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:41,Usability,simpl,simple,41,"/* ========================== */; /* *** simple functions *** */; /* ========================== */; /** HUF_compress() :; * Compress content from buffer 'src', of size 'srcSize', into buffer 'dst'.; * 'dst' buffer must be already allocated.; * Compression runs faster if `dstCapacity` >= HUF_compressBound(srcSize).; * `srcSize` must be <= `HUF_BLOCKSIZE_MAX` == 128 KB.; * @return : size of compressed data (<= `dstCapacity`).; * Special values : if return == 0, srcData is not compressible => Nothing is stored within dst !!!; * if HUF_isError(return), compression failed (more details using HUF_getErrorName()); */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:486,Availability,error,error,486,"/** HUF_decompress() :; * Decompress HUF data from buffer 'cSrc', of size 'cSrcSize',; * into already allocated buffer 'dst', of minimum size 'dstSize'.; * `originalSize` : **must** be the ***exact*** size of original (uncompressed) data.; * Note : in contrast with FSE, HUF_decompress can regenerate; * RLE (cSrcSize==1) and uncompressed (cSrcSize==dstSize) data,; * because it knows size to regenerate (originalSize).; * @return : size of regenerated data (== originalSize),; * or an error code, which can be tested using HUF_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:102,Energy Efficiency,allocate,allocated,102,"/** HUF_decompress() :; * Decompress HUF data from buffer 'cSrc', of size 'cSrcSize',; * into already allocated buffer 'dst', of minimum size 'dstSize'.; * `originalSize` : **must** be the ***exact*** size of original (uncompressed) data.; * Note : in contrast with FSE, HUF_decompress can regenerate; * RLE (cSrcSize==1) and uncompressed (cSrcSize==dstSize) data,; * because it knows size to regenerate (originalSize).; * @return : size of regenerated data (== originalSize),; * or an error code, which can be tested using HUF_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:511,Testability,test,tested,511,"/** HUF_decompress() :; * Decompress HUF data from buffer 'cSrc', of size 'cSrcSize',; * into already allocated buffer 'dst', of minimum size 'dstSize'.; * `originalSize` : **must** be the ***exact*** size of original (uncompressed) data.; * Note : in contrast with FSE, HUF_decompress can regenerate; * RLE (cSrcSize==1) and uncompressed (cSrcSize==dstSize) data,; * because it knows size to regenerate (originalSize).; * @return : size of regenerated data (== originalSize),; * or an error code, which can be tested using HUF_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:49,Availability,Error,Error,49,/**< maximum compressed size (worst case) */; /* Error Management */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:35,Availability,error,error,35,/**< tells if a return value is an error code */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:14,Availability,error,error,14,"/**< provides error code string (useful for debugging) */; /* *** Advanced function *** */; /** HUF_compress2() :; * Same as HUF_compress(), but offers control over `maxSymbolValue` and `tableLog`.; * `maxSymbolValue` must be <= HUF_SYMBOLVALUE_MAX .; * `tableLog` must be `<= HUF_TABLELOG_MAX` . */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:76,Energy Efficiency,allocate,allocated,76,"/** HUF_compress4X_wksp() :; * Same as HUF_compress2(), but uses externally allocated `workSpace`.; * `workspace` must have minimum alignment of 4, and be at least as large as HUF_WORKSPACE_SIZE */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:7,Integrability,Depend,Dependencies,7,/* *** Dependencies *** */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:90,Security,expose,exposed,90,"/* static allocation of HUF's Compression Table */; /* this is a private definition, just exposed for allocation and strict aliasing purpose. never EVER access its members directly */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:153,Security,access,access,153,"/* static allocation of HUF's Compression Table */; /* this is a private definition, just exposed for allocation and strict aliasing purpose. never EVER access its members directly */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:39,Availability,error,errors,39,/**< considers RLE and uncompressed as errors */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:39,Availability,error,errors,39,/**< considers RLE and uncompressed as errors */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:231,Security,expose,exposed,231,"/* ****************************************; * HUF detailed API; * ****************************************/; /*! HUF_compress() does the following:; * 1. count symbol occurrence from source[] into table count[] using FSE_count() (exposed within ""fse.h""); * 2. (optional) refine tableLog using HUF_optimalTableLog(); * 3. build Huffman table from count using HUF_buildCTable(); * 4. save Huffman table to memory buffer using HUF_writeCTable(); * 5. encode the data stream using HUF_compress4X_usingCTable(); *; * The following API allows targeting specific sub-functions for advanced tasks.; * For example, it's possible to compress several blocks using the same 'CTable',; * or to save and regenerate 'CTable' using external methods.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:80,Energy Efficiency,allocate,allocated,80,"/** HUF_buildCTable_wksp() :; * Same as HUF_buildCTable(), but using externally allocated scratch buffer.; * `workSpace` must be aligned on 4-bytes boundaries, and its size must be >= HUF_CTABLE_WORKSPACE_SIZE.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:161,Availability,error,error,161,"/*! HUF_readStats() :; * Read compact Huffman tree, saved by HUF_writeCTable().; * `huffWeight` is destination buffer.; * @return : size read from `src` , or an error Code .; * Note : Needed by HUF_readCTable() and HUF_readDTableXn() . */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:26,Performance,Load,Loading,26,/** HUF_readCTable() :; * Loading a CTable saved with HUF_writeCTable() */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:247,Energy Efficiency,allocate,allocated,247,"/** HUF_getNbBits() :; * Read nbBits from CTable symbolTable, for symbol `symbolValue` presumed <= HUF_SYMBOLVALUE_MAX; * Note 1 : is not inlined, as HUF_CElt definition is private; * Note 2 : const void* used, so that it can provide a statically allocated table as argument (which uses type U32) */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:283,Availability,error,errors,283,"/**; * The minimum workspace size for the `workSpace` used in; * HUF_readDTableX1_wksp() and HUF_readDTableX2_wksp().; *; * The space used depends on HUF_TABLELOG_MAX, ranging from ~1500 bytes when; * HUF_TABLE_LOG_MAX=12 to ~1850 bytes when HUF_TABLE_LOG_MAX=15.; * Buffer overflow errors may potentially occur if code modifications result in; * a required workspace size greater than that specified in the following; * macro.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:139,Integrability,depend,depends,139,"/**; * The minimum workspace size for the `workSpace` used in; * HUF_readDTableX1_wksp() and HUF_readDTableX2_wksp().; *; * The space used depends on HUF_TABLELOG_MAX, ranging from ~1500 bytes when; * HUF_TABLE_LOG_MAX=12 to ~1850 bytes when HUF_TABLE_LOG_MAX=15.; * Buffer overflow errors may potentially occur if code modifications result in; * a required workspace size greater than that specified in the following; * macro.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:47,Integrability,Depend,Dependencies,47,/*-****************************************; * Dependencies; ******************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:175,Safety,detect,detection,175,/*-**************************************************************; * Memory I/O API; *****************************************************************/; /*=== Static platform detection ===*/,MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:571,Integrability,depend,depends,571,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:843,Integrability,depend,depending,843,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:282,Modifiability,portab,portable,282,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:522,Modifiability,portab,portable,522,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:612,Modifiability,portab,portable,612,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:769,Modifiability,portab,portable,769,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:460,Performance,perform,performance,460,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:933,Performance,perform,performance,933,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:273,Safety,safe,safe,273,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:513,Safety,Safe,Safe,513,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:641,Safety,safe,safe,641,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:208,Security,access,access,208,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:433,Security,access,access,433,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:746,Security,access,access,746,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:1014,Security,access,accessing-unaligned-memory,1014,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:22,Performance,perform,performance,22,/* don't use static : performance detrimental */,MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:102,Performance,perform,performance,102,"/* violates C standard, by lying on structure alignment.; Only use if no other choice to achieve best performance on target platform */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:27,Safety,safe,safer,27,"/* __pack instructions are safer, but compiler specific, hence potentially problematic for some compilers */; /* currently only defined for gcc and icc */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:19,Safety,safe,safe,19,"/* default method, safe and standard.; can sometimes prove slower */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:13,Testability,test,tested,13,/* code only tested on 32 and 64 bits systems */,MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:140,Performance,queue,queued,140,"/*! POOL_create() :; * Create a thread pool with at most `numThreads` threads.; * `numThreads` must be at least 1.; * The maximum number of queued jobs before blocking is `queueSize`.; * @return : POOL_ctx pointer on success, else NULL.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:172,Performance,queue,queueSize,172,"/*! POOL_create() :; * Create a thread pool with at most `numThreads` threads.; * `numThreads` must be at least 1.; * The maximum number of queued jobs before blocking is `queueSize`.; * @return : POOL_ctx pointer on success, else NULL.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:308,Availability,error,error,308,"/*! POOL_resize() :; * Expands or shrinks pool's number of threads.; * This is more efficient than releasing + creating a new context,; * since it tries to preserve and re-use existing threads.; * `numThreads` must be at least 1.; * @return : 0 when resize was successful,; * !0 (typically 1) if there is an error.; * note : only numThreads can be resized, queueSize remains unchanged.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:84,Energy Efficiency,efficient,efficient,84,"/*! POOL_resize() :; * Expands or shrinks pool's number of threads.; * This is more efficient than releasing + creating a new context,; * since it tries to preserve and re-use existing threads.; * `numThreads` must be at least 1.; * @return : 0 when resize was successful,; * !0 (typically 1) if there is an error.; * note : only numThreads can be resized, queueSize remains unchanged.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:357,Performance,queue,queueSize,357,"/*! POOL_resize() :; * Expands or shrinks pool's number of threads.; * This is more efficient than releasing + creating a new context,; * since it tries to preserve and re-use existing threads.; * `numThreads` must be at least 1.; * @return : 0 when resize was successful,; * !0 (typically 1) if there is an error.; * note : only numThreads can be resized, queueSize remains unchanged.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:138,Performance,queue,queue,138,"/*! POOL_add() :; * Add the job `function(opaque)` to the thread pool. `ctx` must be valid.; * Possibly blocks until there is room in the queue.; * Note : The function may be executed asynchronously,; * therefore, `opaque` must live until function has been completed.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:86,Availability,avail,available,86,"/*! POOL_tryAdd() :; * Add the job `function(opaque)` to thread pool _if_ a worker is available.; * Returns immediately even if not (does not block).; * @return : 1 if successful, 0 if not.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h:34,Integrability,Wrap,Wrapper,34,"/**; * Windows minimalist Pthread Wrapper, based on :; * http://www.cse.wustl.edu/~schmidt/win32-cv-1.html; */",MatchSource.CODE_COMMENT,builtins/zstd/common/threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h:13,Modifiability,variab,variable,13,/* condition variable */,MatchSource.CODE_COMMENT,builtins/zstd/common/threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h:21,Integrability,wrap,wrappers,21,/**; * add here more wrappers as required; */,MatchSource.CODE_COMMENT,builtins/zstd/common/threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h:33,Safety,detect,detection,33,/* posix assumed ; need a better detection method */,MatchSource.CODE_COMMENT,builtins/zstd/common/threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h:129,Modifiability,variab,variables,129,"/* DEBUGLEVEL >= 1 */; /* Debug implementation of threading.; * In this implementation we use pointers for mutexes and condition variables.; * This way, if we forget to init/destroy them the program will crash or ASAN; * will report leaks.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_deps.h:407,Integrability,depend,dependencies,407,"/*; * Copyright (c) 2016-2020, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* This file provides common libc dependencies that zstd requires.; * The purpose is to allow replacing this file with a custom implementation; * to compile zstd without libc support.; */; /* Need:; * NULL; * INT_MAX; * UINT_MAX; * ZSTD_memcpy(); * ZSTD_memset(); * ZSTD_memmove(); */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_deps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_deps.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_deps.h:41,Testability,assert,assert,41,/* ZSTD_DEPS_NEED_MATH64 */; /* Need:; * assert(); */,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_deps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_deps.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:267,Integrability,Depend,Dependencies,267,"/* this module contains definitions which must be identical; * across compression, decompression and dictBuilder.; * It also contains a few functions useful to at least 2 of them; * and which benefit from being inlined */; /*-*************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:3,Testability,assert,assert,3,"/* assert, DEBUGLOG, RAWLOG, g_debuglevel */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:14,Deployability,update,update,14,"/* XXH_reset, update, digest */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:15,Testability,assert,assert,15,/* ---- static assert (debug) --- */,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:28,Availability,error,error,28,"/**; * Return the specified error if the condition evaluates to true.; *; * In debug modes, prints additional information.; * In order to do that (particularly, printing the conditional that failed),; * this can't just wrap RETURN_ERROR().; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:219,Integrability,wrap,wrap,219,"/**; * Return the specified error if the condition evaluates to true.; *; * In debug modes, prints additional information.; * In order to do that (particularly, printing the conditional that failed),; * this can't just wrap RETURN_ERROR().; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:44,Availability,error,error,44,"/**; * Unconditionally return the specified error.; *; * In debug modes, prints additional information.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:50,Availability,error,error,50,"/**; * If the provided expression evaluates to an error code, returns that error code.; *; * In debug modes, prints additional information.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:75,Availability,error,error,75,"/**; * If the provided expression evaluates to an error code, returns that error code.; *; * In debug modes, prints additional information.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:43,Modifiability,variab,variable,43,/* C standard doesn't allow `static const` variable to be init using another `static const` variable */,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:92,Modifiability,variab,variable,92,/* C standard doesn't allow `static const` variable to be init using another `static const` variable */,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:163,Safety,detect,detection,163,"/*! ZSTD_wildcopy() :; * Custom version of ZSTD_memcpy(), can over read/write up to WILDCOPY_OVERLENGTH bytes (if length==0); * @param ovtype controls the overlap detection; * - ZSTD_no_overlap: The source and destination are guaranteed to be at least WILDCOPY_VECLEN bytes apart.; * - ZSTD_overlap_src_before_dst: The src and dst may overlap, but they MUST be at least 8 bytes apart.; * The src buffer must be before the dst buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:239,Availability,down,down,239,"/* when workspace is continuously too large; * during at least this number of times,; * context's memory usage is considered wasteful,; * because it's sized to handle a worst case scenario which rarely happens.; * In which case, resize it down to free some memory */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:21,Deployability,continuous,continuously,21,"/* when workspace is continuously too large; * during at least this number of times,; * context's memory usage is considered wasteful,; * because it's sized to handle a worst case scenario which rarely happens.; * In which case, resize it down to free some memory */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:144,Availability,error,errors,144,"/**; * Contains the compressed frame size and an upper-bound for the decompressed frame size.; * Note: before using `compressedSize`, check for errors using ZSTD_isError().; * similarly, before using `decompressedBound`, check for errors using:; * `decompressedBound != ZSTD_CONTENTSIZE_ERROR`; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:231,Availability,error,errors,231,"/**; * Contains the compressed frame size and an upper-bound for the decompressed frame size.; * Note: before using `compressedSize`, check for errors using ZSTD_isError().; * similarly, before using `decompressedBound`, check for errors using:; * `decompressedBound != ZSTD_CONTENTSIZE_ERROR`; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:752,Integrability,depend,dependencies,752,"/* ******************************************************************; * hist : Histogram functions; * part of Finite State Entropy project; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - FSE source repository : https://github.com/Cyan4973/FiniteStateEntropy; * - Public forum : https://groups.google.com/forum/#!forum/lz4c; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /* --- dependencies --- */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:361,Availability,error,error,361,"/* --- simple histogram functions --- */; /*! HIST_count():; * Provides the precise count of each byte within a table 'count'.; * 'count' is a table of unsigned int, of minimum size (*maxSymbolValuePtr+1).; * Updates *maxSymbolValuePtr with actual largest symbol value detected.; * @return : count of the most frequent symbol (which isn't identified).; * or an error code, which can be tested using HIST_isError().; * note : if return == srcSize, there is only one symbol.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:209,Deployability,Update,Updates,209,"/* --- simple histogram functions --- */; /*! HIST_count():; * Provides the precise count of each byte within a table 'count'.; * 'count' is a table of unsigned int, of minimum size (*maxSymbolValuePtr+1).; * Updates *maxSymbolValuePtr with actual largest symbol value detected.; * @return : count of the most frequent symbol (which isn't identified).; * or an error code, which can be tested using HIST_isError().; * note : if return == srcSize, there is only one symbol.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:269,Safety,detect,detected,269,"/* --- simple histogram functions --- */; /*! HIST_count():; * Provides the precise count of each byte within a table 'count'.; * 'count' is a table of unsigned int, of minimum size (*maxSymbolValuePtr+1).; * Updates *maxSymbolValuePtr with actual largest symbol value detected.; * @return : count of the most frequent symbol (which isn't identified).; * or an error code, which can be tested using HIST_isError().; * note : if return == srcSize, there is only one symbol.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:386,Testability,test,tested,386,"/* --- simple histogram functions --- */; /*! HIST_count():; * Provides the precise count of each byte within a table 'count'.; * 'count' is a table of unsigned int, of minimum size (*maxSymbolValuePtr+1).; * Updates *maxSymbolValuePtr with actual largest symbol value detected.; * @return : count of the most frequent symbol (which isn't identified).; * or an error code, which can be tested using HIST_isError().; * note : if return == srcSize, there is only one symbol.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:7,Usability,simpl,simple,7,"/* --- simple histogram functions --- */; /*! HIST_count():; * Provides the precise count of each byte within a table 'count'.; * 'count' is a table of unsigned int, of minimum size (*maxSymbolValuePtr+1).; * Updates *maxSymbolValuePtr with actual largest symbol value detected.; * @return : count of the most frequent symbol (which isn't identified).; * or an error code, which can be tested using HIST_isError().; * note : if return == srcSize, there is only one symbol.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:35,Availability,error,error,35,/**< tells if a return value is an error code */; /* --- advanced histogram functions --- */,MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:146,Safety,unsafe,unsafe,146,"/** HIST_countFast() :; * same as HIST_count(), but blindly trusts that all byte values within src are <= *maxSymbolValuePtr.; * This function is unsafe, and will segfault if any value within `src` is `> *maxSymbolValuePtr`; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:361,Availability,error,error,361,"/*! HIST_count_simple() :; * Same as HIST_countFast(), this function is unsafe,; * and will segfault if any value within `src` is `> *maxSymbolValuePtr`.; * It is also a bit slower for large inputs.; * However, it does not need any additional memory (not even on stack).; * @return : count of the most frequent symbol.; * Note this function doesn't produce any error (i.e. it must succeed).; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:72,Safety,unsafe,unsafe,72,"/*! HIST_count_simple() :; * Same as HIST_countFast(), this function is unsafe,; * and will segfault if any value within `src` is `> *maxSymbolValuePtr`.; * It is also a bit slower for large inputs.; * However, it does not need any additional memory (not even on stack).; * @return : count of the most frequent symbol.; * Note this function doesn't produce any error (i.e. it must succeed).; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:354,Integrability,Depend,Dependencies,354,"/* Note : This is an internal API.; * These APIs used to be exposed with ZSTDLIB_API,; * because it used to be the only way to invoke MT compression.; * Now, you must use ZSTD_compress2 and ZSTD_compressStream2() instead.; *; * This API requires ZSTD_MULTITHREAD to be defined during compilation,; * otherwise ZSTDMT_createCCtx*() will fail.; */; /* === Dependencies === */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:60,Security,expose,exposed,60,"/* Note : This is an internal API.; * These APIs used to be exposed with ZSTDLIB_API,; * because it used to be the only way to invoke MT compression.; * Now, you must use ZSTD_compress2 and ZSTD_compressStream2() instead.; *; * This API requires ZSTD_MULTITHREAD to be defined during compilation,; * otherwise ZSTDMT_createCCtx*() will fail.; */; /* === Dependencies === */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:75,Integrability,interface,interface,75,"/* ========================================================; * === Private interface, for use by ZSTD_compress.c ===; * === Not exposed in libzstd. Never invoke directly ===; * ======================================================== */; /* === Memory management === */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:128,Security,expose,exposed,128,"/* ========================================================; * === Private interface, for use by ZSTD_compress.c ===; * === Not exposed in libzstd. Never invoke directly ===; * ======================================================== */; /* === Memory management === */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:191,Availability,error,error,191,"/*! ZSTDMT_initCStream_internal() :; * Private use only. Init streaming operation.; * expects params to be valid.; * must receive dict, or cdict, or none, but not both.; * @return : 0, or an error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:251,Availability,error,error,251,/*! ZSTDMT_compressStream_generic() :; * Combines ZSTDMT_compressStream() with optional ZSTDMT_flushStream() or ZSTDMT_endStream(); * depending on flush directive.; * @return : minimum amount of data still to be flushed; * 0 if fully flushed; * or an error code; * note : needs to be init using any ZSTD_initCStream*() variant */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:134,Integrability,depend,depending,134,/*! ZSTDMT_compressStream_generic() :; * Combines ZSTDMT_compressStream() with optional ZSTDMT_flushStream() or ZSTDMT_endStream(); * depending on flush directive.; * @return : minimum amount of data still to be flushed; * 0 if fully flushed; * or an error code; * note : needs to be init using any ZSTD_initCStream*() variant */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:49,Deployability,Update,Updates,49,"/*! ZSTDMT_updateCParams_whileCompressing() :; * Updates only a selected set of compression parameters, to remain compatible with current frame.; * New parameters will be applied to next compression job. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:18,Energy Efficiency,allocate,allocated,18,/* All tables are allocated inside cctx->workspace by ZSTD_resetCCtx_internal() */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:69,Performance,load,loadedDictEnd,69,"/* index of end of dictionary, within context's referential.; * When loadedDictEnd != 0, a dictionary is in use, and still valid.; * This relies on a mechanism to set loadedDictEnd=0 when dictionary is no longer within distance.; * Such mechanism is provided within ZSTD_window_enforceMaxDist() and ZSTD_checkDictValidity().; * When dict referential is copied into active context (i.e. not attached),; * loadedDictEnd == dictSize, since referential starts from zero.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:167,Performance,load,loadedDictEnd,167,"/* index of end of dictionary, within context's referential.; * When loadedDictEnd != 0, a dictionary is in use, and still valid.; * This relies on a mechanism to set loadedDictEnd=0 when dictionary is no longer within distance.; * Such mechanism is provided within ZSTD_window_enforceMaxDist() and ZSTD_checkDictValidity().; * When dict referential is copied into active context (i.e. not attached),; * loadedDictEnd == dictSize, since referential starts from zero.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:404,Performance,load,loadedDictEnd,404,"/* index of end of dictionary, within context's referential.; * When loadedDictEnd != 0, a dictionary is in use, and still valid.; * This relies on a mechanism to set loadedDictEnd=0 when dictionary is no longer within distance.; * Such mechanism is provided within ZSTD_window_enforceMaxDist() and ZSTD_checkDictValidity().; * When dict referential is copied into active context (i.e. not attached),; * loadedDictEnd == dictSize, since referential starts from zero.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:38,Deployability,update,update,38,/* index from which to continue table update */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:23,Deployability,rolling,rolling,23,/* Used to compute the rolling hash.; * Depends on ldmParams.minMatchLength */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:40,Integrability,Depend,Depends,40,/* Used to compute the rolling hash.; * Depends on ldmParams.minMatchLength */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:31,Security,hash,hash,31,/* Used to compute the rolling hash.; * Depends on ldmParams.minMatchLength */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:15,Security,hash,hashTable,15,/* Log size of hashTable */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:3,Testability,Log,Log,3,/* Log size of hashTable */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:3,Testability,Log,Log,3,"/* Log bucket size for collision resolution, at most 8 */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:3,Testability,Log,Log,3,/* Log number of entries to skip */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:10,Testability,log,log,10,/* Window log for the LDM */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:135,Availability,avail,available,135,/* == 1 if cParams(except wlog) or compression level are changed in requestedParams. Triggers transmission of new params to ZSTDMT (if available) then reset to 0. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:34,Performance,Multi-thread,Multi-threading,34,/* single-usage dictionary */; /* Multi-threading */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:19,Security,validat,validated,19,/* impossible: pre-validated */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:518,Safety,safe,safe,518,"/* preemptive overflow correction:; * 1. correction is large enough:; * lowLimit > (3<<29) ==> current > 3<<29 + 1<<windowLog; * 1<<windowLog <= newCurrent < 1<<chainLog + 1<<windowLog; *; * current - newCurrent; * > (3<<29 + 1<<windowLog) - (1<<windowLog + 1<<chainLog); * > (3<<29) - (1<<chainLog); * > (3<<29) - (1<<30) (NOTE: chainLog <= 30); * > 1<<29; *; * 2. (ip+ZSTD_CHUNKSIZE_MAX - cctx->base) doesn't overflow:; * After correction, current is less than (1<<chainLog + 1<<windowLog).; * In 64-bit mode we are safe, because we have 64-bit ptrdiff_t.; * In 32-bit mode we are safe, because (chainLog <= 29), so; * ip+ZSTD_CHUNKSIZE_MAX - cctx->base < 1<<32.; * 3. (cctx->lowLimit + 1<<windowLog) < 1<<32:; * windowLog <= 31 ==> 3<<29 + 1<<windowLog < 7<<29 < 1<<32.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:583,Safety,safe,safe,583,"/* preemptive overflow correction:; * 1. correction is large enough:; * lowLimit > (3<<29) ==> current > 3<<29 + 1<<windowLog; * 1<<windowLog <= newCurrent < 1<<chainLog + 1<<windowLog; *; * current - newCurrent; * > (3<<29 + 1<<windowLog) - (1<<windowLog + 1<<chainLog); * > (3<<29) - (1<<chainLog); * > (3<<29) - (1<<30) (NOTE: chainLog <= 30); * > 1<<29; *; * 2. (ip+ZSTD_CHUNKSIZE_MAX - cctx->base) doesn't overflow:; * After correction, current is less than (1<<chainLog + 1<<windowLog).; * In 64-bit mode we are safe, because we have 64-bit ptrdiff_t.; * In 32-bit mode we are safe, because (chainLog <= 29), so; * ip+ZSTD_CHUNKSIZE_MAX - cctx->base < 1<<32.; * 3. (cctx->lowLimit + 1<<windowLog) < 1<<32:; * windowLog <= 31 ==> 3<<29 + 1<<windowLog < 7<<29 < 1<<32.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:35,Performance,load,loadedDictEnd,35,"/* - When there is no dictionary : loadedDictEnd == 0.; In which case, the test (blockEndIdx > maxDist) is merely to avoid; overflowing next operation `newLowLimit = blockEndIdx - maxDist`.; - When there is a standard dictionary :; Index referential is copied from the dictionary,; which means it starts from 0.; In which case, loadedDictEnd == dictSize,; and it makes sense to compare `blockEndIdx > maxDist + dictSize`; since `blockEndIdx` also starts from zero.; - When there is an attached dictionary :; loadedDictEnd is expressed within the referential of the context,; so it can be directly compared against blockEndIdx.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:328,Performance,load,loadedDictEnd,328,"/* - When there is no dictionary : loadedDictEnd == 0.; In which case, the test (blockEndIdx > maxDist) is merely to avoid; overflowing next operation `newLowLimit = blockEndIdx - maxDist`.; - When there is a standard dictionary :; Index referential is copied from the dictionary,; which means it starts from 0.; In which case, loadedDictEnd == dictSize,; and it makes sense to compare `blockEndIdx > maxDist + dictSize`; since `blockEndIdx` also starts from zero.; - When there is an attached dictionary :; loadedDictEnd is expressed within the referential of the context,; so it can be directly compared against blockEndIdx.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:508,Performance,load,loadedDictEnd,508,"/* - When there is no dictionary : loadedDictEnd == 0.; In which case, the test (blockEndIdx > maxDist) is merely to avoid; overflowing next operation `newLowLimit = blockEndIdx - maxDist`.; - When there is a standard dictionary :; Index referential is copied from the dictionary,; which means it starts from 0.; In which case, loadedDictEnd == dictSize,; and it makes sense to compare `blockEndIdx > maxDist + dictSize`; since `blockEndIdx` also starts from zero.; - When there is an attached dictionary :; loadedDictEnd is expressed within the referential of the context,; so it can be directly compared against blockEndIdx.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:117,Safety,avoid,avoid,117,"/* - When there is no dictionary : loadedDictEnd == 0.; In which case, the test (blockEndIdx > maxDist) is merely to avoid; overflowing next operation `newLowLimit = blockEndIdx - maxDist`.; - When there is a standard dictionary :; Index referential is copied from the dictionary,; which means it starts from 0.; In which case, loadedDictEnd == dictSize,; and it makes sense to compare `blockEndIdx > maxDist + dictSize`; since `blockEndIdx` also starts from zero.; - When there is an attached dictionary :; loadedDictEnd is expressed within the referential of the context,; so it can be directly compared against blockEndIdx.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:75,Testability,test,test,75,"/* - When there is no dictionary : loadedDictEnd == 0.; In which case, the test (blockEndIdx > maxDist) is merely to avoid; overflowing next operation `newLowLimit = blockEndIdx - maxDist`.; - When there is a standard dictionary :; Index referential is copied from the dictionary,; which means it starts from 0.; In which case, loadedDictEnd == dictSize,; and it makes sense to compare `blockEndIdx > maxDist + dictSize`; since `blockEndIdx` also starts from zero.; - When there is an attached dictionary :; loadedDictEnd is expressed within the referential of the context,; so it can be directly compared against blockEndIdx.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:65,Usability,simpl,simplification,65,"/* On reaching window size, dictionaries are invalidated.; * For simplification, if window size is reached anywhere within next block,; * the dictionary is invalidated for the full block.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:37,Energy Efficiency,reduce,reduce,37,/* if input and dictionary overlap : reduce dictionary (area presumed modified by input) */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:156,Performance,load,loadedDictEnd,156,/* When using a dictionary the entire dictionary is valid if a single byte of the dictionary; * is within the window. We invalidate the dictionary (and set loadedDictEnd to 0) when it isn't; * valid for the entire block. So this check is sufficient to find the lowest valid match index.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:76,Safety,predict,predicted,76,"/* display a table content,; * listing each element, its frequency, and its predicted bit cost */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.h:44,Integrability,Depend,Dependencies,44,/*-*************************************; * Dependencies; ***************************************/,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:44,Integrability,Depend,Dependencies,44,/*-*************************************; * Dependencies; ***************************************/,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:60,Energy Efficiency,allocate,allocated,60,"/**; * Used to describe whether the workspace is statically allocated (and will not; * necessarily ever be freed), or if it's dynamically allocated and we can; * expect a well-formed caller to free this.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:138,Energy Efficiency,allocate,allocated,138,"/**; * Used to describe whether the workspace is statically allocated (and will not; * necessarily ever be freed), or if it's dynamically allocated and we can; * expect a well-formed caller to free this.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:63,Deployability,continuous,continuous,63,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:943,Energy Efficiency,allocate,allocated,943,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:1487,Energy Efficiency,efficient,efficiently,1487," trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized s",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:2022,Energy Efficiency,allocate,allocated,2022,"will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized separately from the broader ZSTD_CCtx.; * Examples:; * - Entropy Workspace; * - 2 x ZSTD_compressedBlockState_t; * - CDict dictionary contents; *; * - Tables: these are any of several different datastructures (hash tables,; * chain tables, binary trees) that all respect a common format: they are; * uint32_t arrays, all of whose values are between 0 and (nextSrc - base).; * Their sizes depend on the cparams.; *; * - Aligned: these buffers are used for various purposes that require 4 by",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:2478,Energy Efficiency,allocate,allocated,2478,"le to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized separately from the broader ZSTD_CCtx.; * Examples:; * - Entropy Workspace; * - 2 x ZSTD_compressedBlockState_t; * - CDict dictionary contents; *; * - Tables: these are any of several different datastructures (hash tables,; * chain tables, binary trees) that all respect a common format: they are; * uint32_t arrays, all of whose values are between 0 and (nextSrc - base).; * Their sizes depend on the cparams.; *; * - Aligned: these buffers are used for various purposes that require 4 byte; * alignment, but don't require any initialization before they're used.; *; * - Buffers: these buffers are used for various purposes that don't require; * any alignment or initialization before they're used. This means they can; * be moved around at no cost for a new compression.; *; * Allocating Memory:; *; * The various types of objects must be allocated in order, so they can be; * correctly packed into the workspace buffer. Tha",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:3396,Energy Efficiency,allocate,allocated,3396," the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized separately from the broader ZSTD_CCtx.; * Examples:; * - Entropy Workspace; * - 2 x ZSTD_compressedBlockState_t; * - CDict dictionary contents; *; * - Tables: these are any of several different datastructures (hash tables,; * chain tables, binary trees) that all respect a common format: they are; * uint32_t arrays, all of whose values are between 0 and (nextSrc - base).; * Their sizes depend on the cparams.; *; * - Aligned: these buffers are used for various purposes that require 4 byte; * alignment, but don't require any initialization before they're used.; *; * - Buffers: these buffers are used for various purposes that don't require; * any alignment or initialization before they're used. This means they can; * be moved around at no cost for a new compression.; *; * Allocating Memory:; *; * The various types of objects must be allocated in order, so they can be; * correctly packed into the workspace buffer. That order is:; *; * 1. Objects; * 2. Buffers; * 3. Aligned; * 4. Tables; *; * Attempts to reserve objects of different types out of order will fail.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:2943,Integrability,depend,depend,2943," the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized separately from the broader ZSTD_CCtx.; * Examples:; * - Entropy Workspace; * - 2 x ZSTD_compressedBlockState_t; * - CDict dictionary contents; *; * - Tables: these are any of several different datastructures (hash tables,; * chain tables, binary trees) that all respect a common format: they are; * uint32_t arrays, all of whose values are between 0 and (nextSrc - base).; * Their sizes depend on the cparams.; *; * - Aligned: these buffers are used for various purposes that require 4 byte; * alignment, but don't require any initialization before they're used.; *; * - Buffers: these buffers are used for various purposes that don't require; * any alignment or initialization before they're used. This means they can; * be moved around at no cost for a new compression.; *; * Allocating Memory:; *; * The various types of objects must be allocated in order, so they can be; * correctly packed into the workspace buffer. That order is:; *; * 1. Objects; * 2. Buffers; * 3. Aligned; * 4. Tables; *; * Attempts to reserve objects of different types out of order will fail.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:110,Performance,perform,perform,110,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:198,Performance,perform,perform,198,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:284,Performance,optimiz,optimizations,284,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:1387,Performance,perform,perform,1387,"orkspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * requi",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:2765,Security,hash,hash,2765," the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized separately from the broader ZSTD_CCtx.; * Examples:; * - Entropy Workspace; * - 2 x ZSTD_compressedBlockState_t; * - CDict dictionary contents; *; * - Tables: these are any of several different datastructures (hash tables,; * chain tables, binary trees) that all respect a common format: they are; * uint32_t arrays, all of whose values are between 0 and (nextSrc - base).; * Their sizes depend on the cparams.; *; * - Aligned: these buffers are used for various purposes that require 4 byte; * alignment, but don't require any initialization before they're used.; *; * - Buffers: these buffers are used for various purposes that don't require; * any alignment or initialization before they're used. This means they can; * be moved around at no cost for a new compression.; *; * Allocating Memory:; *; * The various types of objects must be allocated in order, so they can be; * correctly packed into the workspace buffer. That order is:; *; * 1. Objects; * 2. Buffers; * 3. Aligned; * 4. Tables; *; * Attempts to reserve objects of different types out of order will fail.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:527,Usability,clear,cleared,527,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:819,Usability,clear,cleared,819,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:1198,Usability,clear,clear,1198,"it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:23,Energy Efficiency,power,power,23,/**; * Align must be a power of 2.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:83,Energy Efficiency,allocate,allocate,83,"/**; * Use this to determine how much space in the workspace we will consume to; * allocate this object. (Normally it should be exactly the size of the object,; * but under special conditions, like ASAN, where we pad each object, it might; * be larger.); *; * Since tables aren't currently redzoned, you don't need to call through this; * to figure out how much space you need for the matchState tables. Everything; * else is though.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:28,Availability,down,down,28,"/* If unaligned allocations down from a too-large top have left us; * unaligned, we need to realign our alloc ptr. Technically, this; * can consume space that is unaccounted for in the neededSpace; * calculation. However, I believe this can only happen when the; * workspace is too large, and specifically when it is too large; * by a larger margin than the space that will be consumed. */; /* TODO: cleaner, compiler warning friendly way to do this??? */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:50,Energy Efficiency,allocate,allocated,50,/**; * Returns whether this object/buffer/etc was allocated in this workspace.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:6,Security,validat,validate,6,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:74,Security,access,access,74,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:37,Testability,log,logic,37,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:28,Energy Efficiency,allocate,allocated,28,/**; * Zero the part of the allocated tables not already marked clean.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:53,Energy Efficiency,allocate,allocated,53,"/* We don't do this when the workspace is statically allocated, because; * when that is the case, we have no capability to hook into the end of the; * workspace's lifecycle to unpoison the memory.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:6,Security,validat,validate,6,"/* To validate that the context re-use logic is sound, and that we don't; * access stuff that this compression hasn't initialized, we re-""poison""; * the workspace (or at least the non-static, non-table parts of it); * every time we start a new compression. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:76,Security,access,access,76,"/* To validate that the context re-use logic is sound, and that we don't; * access stuff that this compression hasn't initialized, we re-""poison""; * the workspace (or at least the non-static, non-table parts of it); * every time we start a new compression. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:39,Testability,log,logic,39,"/* To validate that the context re-use logic is sound, and that we don't; * access stuff that this compression hasn't initialized, we re-""poison""; * the workspace (or at least the non-static, non-table parts of it); * every time we start a new compression. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:53,Energy Efficiency,allocate,allocated,53,"/* We don't do this when the workspace is statically allocated, because; * when that is the case, we have no capability to hook into the end of the; * workspace's lifecycle to unpoison the memory.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h:102,Security,hash,hashTable,102,"/**; * Dedicated Dictionary Search Structure bucket log. In the; * ZSTD_dedicatedDictSearch mode, the hashTable has; * 2 ** ZSTD_LAZY_DDSS_BUCKET_LOG entries in each bucket, rather than just; * one.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h:52,Testability,log,log,52,"/**; * Dedicated Dictionary Search Structure bucket log. In the; * ZSTD_dedicatedDictSearch mode, the hashTable has; * 2 ** ZSTD_LAZY_DDSS_BUCKET_LOG entries in each bucket, rather than just; * one.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:336,Availability,error,error,336,"/**; * ZSTD_ldm_generateSequences():; *; * Generates the sequences using the long distance match finder.; * Generates long range matching sequences in `sequences`, which parse a prefix; * of the source. `sequences` must be large enough to store every sequence,; * which can be checked with `ZSTD_ldm_getMaxNbSeq()`.; * @returns 0 or an error code.; *; * NOTE: The user must have called ZSTD_window_update() for all of the input; * they have, even if they pass it to ZSTD_ldm_generateSequences() in chunks.; * NOTE: This function returns an error if it runs out of space to store; * sequences.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:540,Availability,error,error,540,"/**; * ZSTD_ldm_generateSequences():; *; * Generates the sequences using the long distance match finder.; * Generates long range matching sequences in `sequences`, which parse a prefix; * of the source. `sequences` must be large enough to store every sequence,; * which can be checked with `ZSTD_ldm_getMaxNbSeq()`.; * @returns 0 or an error code.; *; * NOTE: The user must have called ZSTD_window_update() for all of the input; * they have, even if they pass it to ZSTD_ldm_generateSequences() in chunks.; * NOTE: This function returns an error if it runs out of space to store; * sequences.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:913,Availability,error,errors,913,"/**; * ZSTD_ldm_blockCompress():; *; * Compresses a block using the predefined sequences, along with a secondary; * block compressor. The literals section of every sequence is passed to the; * secondary block compressor, and those sequences are interspersed with the; * predefined sequences. Returns the length of the last literals.; * Updates `rawSeqStore.pos` to indicate how many sequences have been consumed.; * `rawSeqStore.seq` may also be updated to split the last sequence between two; * blocks.; * @return The length of the last literals.; *; * NOTE: The source must be at most the maximum block size, but the predefined; * sequences can be any size, and may be longer than the block. In the case that; * they are longer than the block, the last sequences may need to be split into; * two. We handle that case correctly, and update `rawSeqStore` appropriately.; * NOTE: This function does not return any errors.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:336,Deployability,Update,Updates,336,"/**; * ZSTD_ldm_blockCompress():; *; * Compresses a block using the predefined sequences, along with a secondary; * block compressor. The literals section of every sequence is passed to the; * secondary block compressor, and those sequences are interspersed with the; * predefined sequences. Returns the length of the last literals.; * Updates `rawSeqStore.pos` to indicate how many sequences have been consumed.; * `rawSeqStore.seq` may also be updated to split the last sequence between two; * blocks.; * @return The length of the last literals.; *; * NOTE: The source must be at most the maximum block size, but the predefined; * sequences can be any size, and may be longer than the block. In the case that; * they are longer than the block, the last sequences may need to be split into; * two. We handle that case correctly, and update `rawSeqStore` appropriately.; * NOTE: This function does not return any errors.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:446,Deployability,update,updated,446,"/**; * ZSTD_ldm_blockCompress():; *; * Compresses a block using the predefined sequences, along with a secondary; * block compressor. The literals section of every sequence is passed to the; * secondary block compressor, and those sequences are interspersed with the; * predefined sequences. Returns the length of the last literals.; * Updates `rawSeqStore.pos` to indicate how many sequences have been consumed.; * `rawSeqStore.seq` may also be updated to split the last sequence between two; * blocks.; * @return The length of the last literals.; *; * NOTE: The source must be at most the maximum block size, but the predefined; * sequences can be any size, and may be longer than the block. In the case that; * they are longer than the block, the last sequences may need to be split into; * two. We handle that case correctly, and update `rawSeqStore` appropriately.; * NOTE: This function does not return any errors.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:834,Deployability,update,update,834,"/**; * ZSTD_ldm_blockCompress():; *; * Compresses a block using the predefined sequences, along with a secondary; * block compressor. The literals section of every sequence is passed to the; * secondary block compressor, and those sequences are interspersed with the; * predefined sequences. Returns the length of the last literals.; * Updates `rawSeqStore.pos` to indicate how many sequences have been consumed.; * `rawSeqStore.seq` may also be updated to split the last sequence between two; * blocks.; * @return The length of the last literals.; *; * NOTE: The source must be at most the maximum block size, but the predefined; * sequences can be any size, and may be longer than the block. In the case that; * they are longer than the block, the last sequences may need to be split into; * two. We handle that case correctly, and update `rawSeqStore` appropriately.; * NOTE: This function does not return any errors.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:105,Safety,Avoid,Avoids,105,/**; * ZSTD_ldm_skipSequences():; *; * Skip past `srcSize` bytes worth of sequences in `rawSeqStore`.; * Avoids emitting matches less than `minMatch` bytes.; * Must be called for data with is not passed to ZSTD_ldm_blockCompress().; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:52,Security,hash,hashRateLog,52,"/** ZSTD_ldm_adjustParameters() :; * If the params->hashRateLog is not set, set it to its default value based on; * windowLog and params->hashLog.; *; * Ensures that params->bucketSizeLog is <= params->hashLog (setting it to; * params->hashLog if it is not).; *; * Ensures that the minMatchLength >= targetLength during optimal parsing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:138,Security,hash,hashLog,138,"/** ZSTD_ldm_adjustParameters() :; * If the params->hashRateLog is not set, set it to its default value based on; * windowLog and params->hashLog.; *; * Ensures that params->bucketSizeLog is <= params->hashLog (setting it to; * params->hashLog if it is not).; *; * Ensures that the minMatchLength >= targetLength during optimal parsing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:202,Security,hash,hashLog,202,"/** ZSTD_ldm_adjustParameters() :; * If the params->hashRateLog is not set, set it to its default value based on; * windowLog and params->hashLog.; *; * Ensures that params->bucketSizeLog is <= params->hashLog (setting it to; * params->hashLog if it is not).; *; * Ensures that the minMatchLength >= targetLength during optimal parsing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:236,Security,hash,hashLog,236,"/** ZSTD_ldm_adjustParameters() :; * If the params->hashRateLog is not set, set it to its default value based on; * windowLog and params->hashLog.; *; * Ensures that params->bucketSizeLog is <= params->hashLog (setting it to; * params->hashLog if it is not).; *; * Ensures that the minMatchLength >= targetLength during optimal parsing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.h:62,Integrability,Depend,Dependencies,62,/*-*******************************************************; * Dependencies; *********************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.h:62,Integrability,Interface,Interface,62,/*-*******************************************************; * Interface; *********************************************************/; /* note: several prototypes are already published in `zstd.h` :; * ZSTD_createDDict(); * ZSTD_createDDict_byReference(); * ZSTD_createDDict_advanced(); * ZSTD_freeDDict(); * ZSTD_initStaticDDict(); * ZSTD_sizeof_DDict(); * ZSTD_estimateDDictSize(); * ZSTD_getDictID_fromDict(); */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h:62,Integrability,Depend,Dependencies,62,/*-*******************************************************; * Dependencies; *********************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h:392,Availability,error,error,392,"/* === Prototypes === */; /* note: prototypes already published within `zstd.h` :; * ZSTD_decompressBlock(); */; /* note: prototypes already published within `zstd_internal.h` :; * ZSTD_getcBlockSize(); * ZSTD_decodeSeqHeaders(); */; /* ZSTD_decompressBlock_internal() :; * decompress block, starting at `src`,; * into destination buffer `dst`.; * @return : decompressed block size,; * or an error code (which can be tested using ZSTD_isError()); */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h:417,Testability,test,tested,417,"/* === Prototypes === */; /* note: prototypes already published within `zstd.h` :; * ZSTD_decompressBlock(); */; /* note: prototypes already published within `zstd_internal.h` :; * ZSTD_getcBlockSize(); * ZSTD_decodeSeqHeaders(); */; /* ZSTD_decompressBlock_internal() :; * decompress block, starting at `src`,; * into destination buffer `dst`.; * @return : decompressed block size,; * or an error code (which can be tested using ZSTD_isError()); */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h:213,Energy Efficiency,power,power,213,"/* ZSTD_buildFSETable() :; * generate FSE decoding table for one symbol (ll, ml or off); * this function must be called with valid parameters only; * (dt is large enough, normalizedCounter distribution total is a power of 2, max is within range, etc.); * in which case it cannot fail.; * The workspace must be 4-byte aligned and at least ZSTD_BUILD_FSE_TABLE_WKSP_SIZE bytes, which is; * defined in zstd_decompress_internal.h.; * Internal use only.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:62,Integrability,Depend,Dependencies,62,/*-*******************************************************; * Dependencies; *********************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:3,Safety,detect,detect,3,/* detect continuity */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:40,Security,checksum,checksums,40,"/* User specified: if == 1, will ignore checksums in compressed frame. Default == 0 */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:17,Security,validat,validate,17,"/* if == 1, will validate checksum. Is == 1 if (fParams.checksumFlag == 1) and (forceIgnoreChecksum == 0). */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:26,Security,checksum,checksum,26,"/* if == 1, will validate checksum. Is == 1 if (fParams.checksumFlag == 1) and (forceIgnoreChecksum == 0). */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:56,Security,checksum,checksumFlag,56,"/* if == 1, will validate checksum. Is == 1 if (fParams.checksumFlag == 1) and (forceIgnoreChecksum == 0). */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:86,Performance,cache,cache,86,"/* if == 1 : dictionary is ""new"" for working context, and presumed ""cold"" (not in cpu cache) */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:52,Integrability,Synchroniz,Synchronizing,52,/**; * COVER_best_t is used for two purposes:; * 1. Synchronizing threads.; * 2. Saving the best parameters and dictionary.; *; * All of the methods except COVER_best_init() are thread safe if zstd is; * compiled with multithreaded support.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:185,Safety,safe,safe,185,/**; * COVER_best_t is used for two purposes:; * 1. Synchronizing threads.; * 2. Saving the best parameters and dictionary.; *; * All of the methods except COVER_best_init() are thread safe if zstd is; * compiled with multithreaded support.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:56,Availability,error,error,56,"/**; * Called when a thread finishes executing, both on error or success.; * Decrements liveJobs and signals any waiting threads if liveJobs == 0.; * If this dictionary is the best so far save it and its parameters.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:7,Availability,Error,Error,7,/**; * Error function for COVER_selectDict function. Checks if the return; * value is an error.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:89,Availability,error,error,89,/**; * Error function for COVER_selectDict function. Checks if the return; * value is an error.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:7,Availability,Error,Error,7,/**; * Error function for COVER_selectDict function. Returns a struct where; * return.totalCompressedSize is a ZSTD error.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:116,Availability,error,error,116,/**; * Error function for COVER_selectDict function. Returns a struct where; * return.totalCompressedSize is a ZSTD error.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:144,Energy Efficiency,charge,charge,144,"/*; * divsufsort.h for libdivsufsort-lite; * Copyright (c) 2003-2008 Yuta Mori All Rights Reserved.; *; * Permission is hereby granted, free of charge, to any person; * obtaining a copy of this software and associated documentation; * files (the ""Software""), to deal in the Software without; * restriction, including without limitation the rights to use,; * copy, modify, merge, publish, distribute, sublicense, and/or sell; * copies of the Software, and to permit persons to whom the; * Software is furnished to do so, subject to the following; * conditions:; *; * The above copyright notice and this permission notice shall be; * included in all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,; * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES; * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT; * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING; * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR; * OTHER DEALINGS IN THE SOFTWARE.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:1047,Integrability,CONTRACT,CONTRACT,1047,"/*; * divsufsort.h for libdivsufsort-lite; * Copyright (c) 2003-2008 Yuta Mori All Rights Reserved.; *; * Permission is hereby granted, free of charge, to any person; * obtaining a copy of this software and associated documentation; * files (the ""Software""), to deal in the Software without; * restriction, including without limitation the rights to use,; * copy, modify, merge, publish, distribute, sublicense, and/or sell; * copies of the Software, and to permit persons to whom the; * Software is furnished to do so, subject to the following; * conditions:; *; * The above copyright notice and this permission notice shall be; * included in all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,; * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES; * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT; * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING; * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR; * OTHER DEALINGS IN THE SOFTWARE.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:274,Availability,error,error,274,"/*- Prototypes -*/; /**; * Constructs the suffix array of a given string.; * @param T [0..n-1] The input string.; * @param SA [0..n-1] The output array of suffixes.; * @param n The length of the given string.; * @param openMP enables OpenMP optimization.; * @return 0 if no error occurred, -1 or -2 otherwise.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:241,Performance,optimiz,optimization,241,"/*- Prototypes -*/; /**; * Constructs the suffix array of a given string.; * @param T [0..n-1] The input string.; * @param SA [0..n-1] The output array of suffixes.; * @param n The length of the given string.; * @param openMP enables OpenMP optimization.; * @return 0 if no error occurred, -1 or -2 otherwise.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:483,Availability,error,error,483,"/**; * Constructs the burrows-wheeler transformed string of a given string.; * @param T [0..n-1] The input string.; * @param U [0..n-1] The output string. (can be T); * @param A [0..n-1] The temporary array. (can be NULL); * @param n The length of the given string.; * @param num_indexes The length of secondary indexes array. (can be NULL); * @param indexes The secondary indexes array. (can be NULL); * @param openMP enables OpenMP optimization.; * @return The primary index if no error occurred, -1 or -2 otherwise.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:434,Performance,optimiz,optimization,434,"/**; * Constructs the burrows-wheeler transformed string of a given string.; * @param T [0..n-1] The input string.; * @param U [0..n-1] The output string. (can be T); * @param A [0..n-1] The temporary array. (can be NULL); * @param n The length of the given string.; * @param num_indexes The length of secondary indexes array. (can be NULL); * @param indexes The secondary indexes array. (can be NULL); * @param openMP enables OpenMP optimization.; * @return The primary index if no error occurred, -1 or -2 otherwise.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/cmake/unix/makepchinput.py:54,Testability,test,test,54,"# Make sure we don't get warnings from the old RooFit test statistics; # headers that are deprecated. This line can be removed once the deprecaded; # headers are gone (ROOT 6.32.00):",MatchSource.CODE_COMMENT,cmake/unix/makepchinput.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/unix/makepchinput.py
https://github.com/root-project/root/tree/v6-32-06/cmake/unix/rootmapcat.py:9,Energy Efficiency,reduce,reduce,9,"# Now we reduce the fwd declarations",MatchSource.CODE_COMMENT,cmake/unix/rootmapcat.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/unix/rootmapcat.py
https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h:27,Safety,safe,safe,27,/* local static not thread safe */,MatchSource.CODE_COMMENT,cmake/win/w32pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h
https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h:23,Performance,perform,performance,23,/*forcing int to bool (performance warning) */,MatchSource.CODE_COMMENT,cmake/win/w32pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h
https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h:27,Availability,error,error,27,/* check op precedence for error */,MatchSource.CODE_COMMENT,cmake/win/w32pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h
https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h:23,Integrability,interface,interface,23,/* X needs to have dll-interface to be used by clients of class Y */,MatchSource.CODE_COMMENT,cmake/win/w32pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h
https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h:16,Modifiability,variab,variable,16,/* loop control variable is used outside the for-loop scope */,MatchSource.CODE_COMMENT,cmake/win/w32pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h
https://github.com/root-project/root/tree/v6-32-06/config/__cplusplus.cxx:12,Integrability,message,message,12,"// `#pragma message` is supported in well-known compilers including gcc, clang, icc, and MSVC. But not nvc++.",MatchSource.CODE_COMMENT,config/__cplusplus.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/config/__cplusplus.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:392,Availability,avail,available,392,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:418,Energy Efficiency,reduce,reduces,418,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:183,Integrability,rout,routines,183,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:252,Integrability,rout,routines,252,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:487,Integrability,rout,routines,487,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:718,Integrability,rout,routines,718,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:699,Safety,safe,safe,699,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:136,Integrability,rout,routines,136,"//////////////////////////////////////////////////////////////////////////; // //; // Bytes //; // //; // A set of inline byte handling routines. //; // //; // The set of tobuf() and frombuf() routines take care of packing a //; // basic type value into a buffer in network byte order (i.e. they //; // perform byte swapping when needed). The buffer does not have to //; // start on a machine (long) word boundary. //; // //; // For __GNUC__ on linux on i486 processors and up //; // use the `bswap' opcode provided by the GNU C Library. //; // //; // The set of host2net() and net2host() routines convert a basic type //; // value from host to network byte order and vice versa. On BIG ENDIAN //; // machines this is a no op. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:193,Integrability,rout,routines,193,"//////////////////////////////////////////////////////////////////////////; // //; // Bytes //; // //; // A set of inline byte handling routines. //; // //; // The set of tobuf() and frombuf() routines take care of packing a //; // basic type value into a buffer in network byte order (i.e. they //; // perform byte swapping when needed). The buffer does not have to //; // start on a machine (long) word boundary. //; // //; // For __GNUC__ on linux on i486 processors and up //; // use the `bswap' opcode provided by the GNU C Library. //; // //; // The set of host2net() and net2host() routines convert a basic type //; // value from host to network byte order and vice versa. On BIG ENDIAN //; // machines this is a no op. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:589,Integrability,rout,routines,589,"//////////////////////////////////////////////////////////////////////////; // //; // Bytes //; // //; // A set of inline byte handling routines. //; // //; // The set of tobuf() and frombuf() routines take care of packing a //; // basic type value into a buffer in network byte order (i.e. they //; // perform byte swapping when needed). The buffer does not have to //; // start on a machine (long) word boundary. //; // //; // For __GNUC__ on linux on i486 processors and up //; // use the `bswap' opcode provided by the GNU C Library. //; // //; // The set of host2net() and net2host() routines convert a basic type //; // value from host to network byte order and vice versa. On BIG ENDIAN //; // machines this is a no op. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:303,Performance,perform,perform,303,"//////////////////////////////////////////////////////////////////////////; // //; // Bytes //; // //; // A set of inline byte handling routines. //; // //; // The set of tobuf() and frombuf() routines take care of packing a //; // basic type value into a buffer in network byte order (i.e. they //; // perform byte swapping when needed). The buffer does not have to //; // start on a machine (long) word boundary. //; // //; // For __GNUC__ on linux on i486 processors and up //; // use the `bswap' opcode provided by the GNU C Library. //; // //; // The set of host2net() and net2host() routines convert a basic type //; // value from host to network byte order and vice versa. On BIG ENDIAN //; // machines this is a no op. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:27,Performance,optimiz,optimization,27,"// To work around a stupid optimization bug in MSVC++ 6.0",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:27,Performance,optimiz,optimization,27,"// To work around a stupid optimization bug in MSVC++ 6.0",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:27,Performance,optimiz,optimization,27,"// To work around a stupid optimization bug in MSVC++ 6.0",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:27,Performance,optimiz,optimization,27,"// To work around a stupid optimization bug in MSVC++ 6.0",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:27,Performance,optimiz,optimization,27,"// To work around a stupid optimization bug in MSVC++ 6.0",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Byteswap.h:295,Safety,safe,safe,295,"/* Originally (mid-1990s), this file contained copy/pasted assembler from RH6.0's; * version of <bits/byteswap.h>. Hence, we keep a copy of the FSF copyright below.; * I believe all the original code has been excised, perhaps with exception of the; * R__bswap_constant_* functions. To be on the safe side, we are keeping the; * copyright below.; * -- Brian Bockelman, August 2018; */; /* Copyright (C) 1997 Free Software Foundation, Inc.; This file is part of the GNU C Library. The GNU C Library is free software; you can redistribute it and/or; modify it under the terms of the GNU Library General Public License as; published by the Free Software Foundation; either version 2 of the; License, or (at your option) any later version. The GNU C Library is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; Library General Public License for more details. You should have received a copy of the GNU Library General Public; License along with the GNU C Library; see the file COPYING.LIB. If not,; write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,; Boston, MA 02111-1307, USA. */",MatchSource.CODE_COMMENT,core/base/inc/Byteswap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Byteswap.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Byteswap.h:26,Safety,safe,safely,26,"// Signed integers can be safely byteswapped if they are reinterpret_cast'ed to unsigned",MatchSource.CODE_COMMENT,core/base/inc/Byteswap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Byteswap.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Match.h:122,Integrability,rout,routines,122,"//////////////////////////////////////////////////////////////////////////; // //; // Declarations for regular expression routines. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Match.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Match.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:86,Integrability,Message,MessageTypes,86,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:131,Integrability,message,message,131,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:146,Integrability,Message,Message,146,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:208,Integrability,message,message,208,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:242,Integrability,message,message,242,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:337,Integrability,message,message,337,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:383,Integrability,message,message,383,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:32,Integrability,message,message,32,"//OR with kMESS_ZIP to compress message",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:37,Integrability,message,message,37,"//OR with kMESS_ACK to force each; //message to be acknowledged",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:10,Integrability,message,message,10,"//generic message type",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:42,Integrability,message,message,42,"//TProcessID object follows; //---- PROOF message opcodes (1000 - 1999)",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:19,Availability,error,error,19,"//server got fatal error and died",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Testability,log,loglevel,2,"//loglevel follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Testability,log,log,2,"//log file length and content follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Testability,log,log,2,"//log file received, status follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:37,Integrability,Message,Message,37,"//print status of worker - (OBSOLETE Message)",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Availability,ping,ping,2,"//ping worker",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:22,Modifiability,config,config,22,"//ask master to print config",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:29,Integrability,message,messages,29,"//cache and package handling messages",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Performance,cache,cache,2,"//cache and package handling messages",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:10,Safety,abort,abort,10,"//stop or abort the current process call",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Security,validat,validate,2,"//validate a TDSet",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Integrability,message,message,2,"//message with unique session tag",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Integrability,message,message,2,"//message with max number of queries",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:4,Integrability,message,message,4,"//a message for the client follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:43,Integrability,message,messages,43,"//switch on/off real-time retrieval of log messages",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:39,Testability,log,log,39,"//switch on/off real-time retrieval of log messages",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:9,Availability,echo,echo,9,"//object echo request from client",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:39,Integrability,message,message,39,"//control output sending; //---- ROOTD message opcodes (2000 - 2099)",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Security,authoriz,authorization,2,"//authorization status (to client)",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Availability,error,error,2,"//error code and message follow",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:17,Integrability,message,message,17,"//error code and message follow",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:16,Integrability,protocol,protocol,16,"//returns rootd protocol",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:15,Integrability,message,message,15,"//an encrypted message follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:5,Security,encrypt,encrypted,5,"//an encrypted message follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:7,Security,Access,Access,7,"//test Access",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Testability,test,test,2,"//test Access",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RConfig.h:188,Safety,avoid,avoid,188,"/*************************************************************************; * *; * Old RConfig.h forwarding to ROOT/RConfig.hxx *; * *; * Please #include ROOT/RConfig.hxx instead, e.g. to avoid clashes with *; * R's Rconfig.h *; * *; *************************************************************************/",MatchSource.CODE_COMMENT,core/base/inc/RConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RConfig.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RQ_OBJECT.h:700,Performance,Load,Load,700,"//---- RQ_OBJECT macro -----------------------------------------------; //; // Macro is used to delegate TQObject methods to other classes; // Example:; //; // #include ""RQ_OBJECT.h""; //; // class A {; // RQ_OBJECT(""A""); // private:; // Int_t fValue;; // public:; // A() : fValue(0) { }; // ~A() { }; //; // void SetValue(Int_t value); // void PrintValue() const { printf(""value=%d\n"", fValue); }; // Int_t GetValue() const { return fValue; }; // };; //; // void A::SetValue(Int_t value); // {; // // Sets new value; //; // // to prevent infinite looping in the case; // // of cyclic connections; // if (value != fValue) {; // fValue = value;; // Emit(""SetValue(Int_t)"", fValue);; // }; // }; //; // Load this class into root session and try the following:; //; // a = new A();; // b = new A();; //; // Here is one way to connect two of these objects together:; //; // a->Connect(""SetValue(Int_t)"", ""A"", b, ""SetValue(Int_t)"");; //; // Calling a->SetValue(79) will make a emit a signal, which b; // will receive, i.e. b->SetValue(79) is invoked. b will in; // turn emit the same signal, which nobody receives, since no; // slot has been connected to it, so it disappears into hyperspace.; //",MatchSource.CODE_COMMENT,core/base/inc/RQ_OBJECT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RQ_OBJECT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:26,Integrability,interface,interface,26,"// This class defines the interface for the class registration and; // the TClass creation. To modify the default behavior, one would; // inherit from this class and overload ROOT::DefineBehavior().; // See TQObject.h and table/inc/Ttypes.h for examples.",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:138,Modifiability,inherit,inherit,138,"// This class defines the interface for the class registration and; // the TClass creation. To modify the default behavior, one would; // inherit from this class and overload ROOT::DefineBehavior().; // See TQObject.h and table/inc/Ttypes.h for examples.",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:327,Performance,load,load,327,"// We need a reference to the template instance static member in a concrete function in order; // to force its instantiation (even before the function is actually run); // Since we do have a reference to Dictionary (in T::Dictionary), using fgGenericInfo; // here will insure that it is initialized at process start or library load time.",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:281,Availability,redundant,redundant,281,"//---- ClassDefT macros for templates with one template argument ---------------; // ClassDefT corresponds to ClassDef; // ClassDefT2 goes in the same header as ClassDefT but must be; // outside the class scope; // ClassImpT corresponds to ClassImp; /// This ClassDefT is strictly redundant and is kept only for; /// backward compatibility. \deprecated",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:281,Safety,redund,redundant,281,"//---- ClassDefT macros for templates with one template argument ---------------; // ClassDefT corresponds to ClassDef; // ClassDefT2 goes in the same header as ClassDefT but must be; // outside the class scope; // ClassImpT corresponds to ClassImp; /// This ClassDefT is strictly redundant and is kept only for; /// backward compatibility. \deprecated",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:195,Availability,error,errors,195,"//---- Macro to load a library into the interpreter --------------; // Call as R__LOAD_LIBRARY(libEvent); // This macro intentionally does not take string as argument, to; // prevent compilation errors with complex diagnostics due to; // TString BAD_DO_NOT_TRY = ""lib"";; // R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:331,Availability,ERROR,ERROR,331,"//---- Macro to load a library into the interpreter --------------; // Call as R__LOAD_LIBRARY(libEvent); // This macro intentionally does not take string as argument, to; // prevent compilation errors with complex diagnostics due to; // TString BAD_DO_NOT_TRY = ""lib"";; // R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:16,Performance,load,load,16,"//---- Macro to load a library into the interpreter --------------; // Call as R__LOAD_LIBRARY(libEvent); // This macro intentionally does not take string as argument, to; // prevent compilation errors with complex diagnostics due to; // TString BAD_DO_NOT_TRY = ""lib"";; // R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:141,Integrability,message,message,141,"// No way to inform linker though preprocessor :-(; // We could even inform the user:; /*; # define R__LOAD_LIBRARY(LIBRARY) \; _R_PragmaStr(message ""Compiler cannot handle linking against "" #LIBRARY \; "". Use -L and -l instead.""); */",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h:44,Availability,down,down,44,"// this should never be used but help quiet down some compiler!",MatchSource.CODE_COMMENT,core/base/inc/RtypesImp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h:135,Availability,error,error,135,"// The STL GenerateInitInstance are not unique and hence are declared static; // (not accessible outside the dictionary and not linker error for duplicate)",MatchSource.CODE_COMMENT,core/base/inc/RtypesImp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h:86,Security,access,accessible,86,"// The STL GenerateInitInstance are not unique and hence are declared static; // (not accessible outside the dictionary and not linker error for duplicate)",MatchSource.CODE_COMMENT,core/base/inc/RtypesImp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h:19,Safety,avoid,avoid,19,/* Helper class to avoid compiler warning about casting function pointer; ** to void pointer.; */,MatchSource.CODE_COMMENT,core/base/inc/RtypesImp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h:185,Integrability,message,messages,185,"//////////////////////////////////////////////////////////////////////////; // //; // TBase64 //; // //; // This code implements the Base64 encoding and decoding. //; // Base64 encoded messages are typically used in authentication //; // protocols and to pack binary data in HTTP messages. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TBase64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h:238,Integrability,protocol,protocols,238,"//////////////////////////////////////////////////////////////////////////; // //; // TBase64 //; // //; // This code implements the Base64 encoding and decoding. //; // Base64 encoded messages are typically used in authentication //; // protocols and to pack binary data in HTTP messages. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TBase64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h:280,Integrability,message,messages,280,"//////////////////////////////////////////////////////////////////////////; // //; // TBase64 //; // //; // This code implements the Base64 encoding and decoding. //; // Base64 encoded messages are typically used in authentication //; // protocols and to pack binary data in HTTP messages. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TBase64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h:216,Security,authenticat,authentication,216,"//////////////////////////////////////////////////////////////////////////; // //; // TBase64 //; // //; // This code implements the Base64 encoding and decoding. //; // Base64 encoded messages are typically used in authentication //; // protocols and to pack binary data in HTTP messages. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TBase64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBenchmark.h:450,Testability,Benchmark,Benchmark,450,"// @(#)root/base:$Id$; // Author: Rene Brun 12/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; // ---------------------------------- Benchmark.h",MatchSource.CODE_COMMENT,core/base/inc/TBenchmark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBenchmark.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h:37,Modifiability,extend,extending,37,"//! Realloc function to be used when extending the buffer.",MatchSource.CODE_COMMENT,core/base/inc/TBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h:27,Performance,cache,cache,27,"//Stack of pointers to the cache where to temporarily store the value of 'missing' data members; // Default ctor",MatchSource.CODE_COMMENT,core/base/inc/TBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h:440,Usability,usab,usable,440,"// Read TObject derived classes from a TBuffer. Need to provide; // custom version for non-TObject derived classes.; // This operator has to be a templated and/or automatically; // generated if we want to be able to check the type of the; // incoming object. I.e. a operator>>(TBuffer &buf, TObject *&); // would not be sufficient to pass the information 'which class do we want'; // since the pointer could be zero (so typeid(*obj) is not usable).",MatchSource.CODE_COMMENT,core/base/inc/TBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h:146,Safety,avoid,avoid,146,"//TODO: Check on casing of enums - also clearer names would help; //TODO: Go through all shapes and check type is being set for each; // Scope to avoid clashes",MatchSource.CODE_COMMENT,core/base/inc/TBuffer3DTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h:40,Usability,clear,clearer,40,"//TODO: Check on casing of enums - also clearer names would help; //TODO: Go through all shapes and check type is being set for each; // Scope to avoid clashes",MatchSource.CODE_COMMENT,core/base/inc/TBuffer3DTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:130,Modifiability,extend,extends,130,"//////////////////////////////////////////////////////////////////////////; // //; // TColorGradient //; // //; // TColorGradient extends basic TColor. //; // Actually, this is not a simple color, but linear or radial gradient //; // for a filled area. By inheriting from TColor, gradients can be //; // placed inside gROOT's list of colors and use it in all TAttXXX //; // descendants without modifying any existing code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:256,Modifiability,inherit,inheriting,256,"//////////////////////////////////////////////////////////////////////////; // //; // TColorGradient //; // //; // TColorGradient extends basic TColor. //; // Actually, this is not a simple color, but linear or radial gradient //; // for a filled area. By inheriting from TColor, gradients can be //; // placed inside gROOT's list of colors and use it in all TAttXXX //; // descendants without modifying any existing code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:183,Usability,simpl,simple,183,"//////////////////////////////////////////////////////////////////////////; // //; // TColorGradient //; // //; // TColorGradient extends basic TColor. //; // Actually, this is not a simple color, but linear or radial gradient //; // for a filled area. By inheriting from TColor, gradients can be //; // placed inside gROOT's list of colors and use it in all TAttXXX //; // descendants without modifying any existing code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:23,Modifiability,inherit,inherited,23,"//With C++11 we'll use inherited constructors!!!",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:173,Modifiability,extend,extended,173,"//; //Radial gradient. Can be either ""simple"": you specify a center; //and radius in NDC coordinates (see comments about linear gradient; //and coordinate modes above), or ""extended"": you have two centers; //(start,end) and two radiuses (R1, R2) and interpolation between them;; //still start/end and radiuses are in NDC.; //",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:38,Usability,simpl,simple,38,"//; //Radial gradient. Can be either ""simple"": you specify a center; //and radius in NDC coordinates (see comments about linear gradient; //and coordinate modes above), or ""extended"": you have two centers; //(start,end) and two radiuses (R1, R2) and interpolation between them;; //still start/end and radiuses are in NDC.; //",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:23,Modifiability,inherit,inherited,23,"//With C++11 we'll use inherited constructors!!!",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:2,Modifiability,Extend,Extended,2,"//Extended gradient.",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:38,Modifiability,extend,extended,38,"//Simple radial gradient: the same as extended with; //start == end, r1 = 0, r2 = radius.",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:2,Usability,Simpl,Simple,2,"//Simple radial gradient: the same as extended with; //start == end, r1 = 0, r2 = radius.",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDatime.h:497,Modifiability,portab,portable,497,"//////////////////////////////////////////////////////////////////////////; // //; // TDatime //; // //; // This class stores the date and time with a precision of one second //; // in an unsigned 32 bit word (e.g. 950130 124559). The date is stored //; // with the origin being the 1st january 1995. //; // //; // This class has no support for time zones. The time is assumed //; // to be in the local time of the machine where the object was created. //; // As a result, TDatime objects are not portable between machines //; // operating in different time zones and unsuitable for storing the //; // date/time of data taking events and the like. If absolute time is //; // required, use TTimeStamp. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TDatime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDatime.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h:452,Safety,safe,safe,452,"/** \class TContext; \ingroup Base. TDirectory::TContext keeps track and restore the current directory.; With this tool C++ exceptions will be guaranteed to properly restore the; current directory pointer. For example code like:. ~~~ {.cpp}; TDirectory *sav = gDirectory;; mydirectory->cd();; if (...) {; ....; sav->cd();; return;; } else if (...) {; ....; sav->cd();; return;; }; sav->cd;; return;; ~~~. can be replaced with the simpler and exception safe:. ~~~ {.cpp}; TDirectory::TContext context(gDirectory, mydirectory);; if (...) {; ....; return;; } else if (...) {; ....; return;; }; return;; ~~~. */",MatchSource.CODE_COMMENT,core/base/inc/TDirectory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h:430,Usability,simpl,simpler,430,"/** \class TContext; \ingroup Base. TDirectory::TContext keeps track and restore the current directory.; With this tool C++ exceptions will be guaranteed to properly restore the; current directory pointer. For example code like:. ~~~ {.cpp}; TDirectory *sav = gDirectory;; mydirectory->cd();; if (...) {; ....; sav->cd();; return;; } else if (...) {; ....; sav->cd();; return;; }; sav->cd;; return;; ~~~. can be replaced with the simpler and exception safe:. ~~~ {.cpp}; TDirectory::TContext context(gDirectory, mydirectory);; if (...) {; ....; return;; } else if (...) {; ....; return;; }; return;; ~~~. */",MatchSource.CODE_COMMENT,core/base/inc/TDirectory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h:44,Security,access,access,44,"//! Set to true if a TDirectory might still access this object.",MatchSource.CODE_COMMENT,core/base/inc/TDirectory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TFileInfo.h:19,Security,access,access,19,"//! current URL to access the file, points to URL; // in the fUrlList or 0, if the list end is reached",MatchSource.CODE_COMMENT,core/base/inc/TFileInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TFileInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TInetAddress.h:147,Integrability,Protocol,Protocol,147,"//////////////////////////////////////////////////////////////////////////; // //; // TInetAddress //; // //; // This class represents an Internet Protocol (IP) address. //; // Objects of this class can not be created directly, but only via //; // the TSystem GetHostByName(), GetSockName(), and GetPeerName() //; // members and via members of the TServerSocket and TSocket classes. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TInetAddress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TInetAddress.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TInetAddress.h:25,Integrability,Protocol,Protocol,25,"//Represents an Internet Protocol (IP) address",MatchSource.CODE_COMMENT,core/base/inc/TInetAddress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TInetAddress.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h:233,Availability,avail,available,233,"//////////////////////////////////////////////////////////////////////////; // //; // TMath Base functions //; // //; // Define the functions Min, Max, Abs, Sign, Range for all types. //; // NB: These functions are unfortunately not available in a portable //; // way in std::. //; // //; // More functions are defined in TMath.h. TMathBase.h is designed to be //; // a stable file and used in place of TMath.h in the ROOT miniCore. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMathBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h:248,Modifiability,portab,portable,248,"//////////////////////////////////////////////////////////////////////////; // //; // TMath Base functions //; // //; // Define the functions Min, Max, Abs, Sign, Range for all types. //; // NB: These functions are unfortunately not available in a portable //; // way in std::. //; // //; // More functions are defined in TMath.h. TMathBase.h is designed to be //; // a stable file and used in place of TMath.h in the ROOT miniCore. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMathBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h:153,Availability,down,down,153,"/// Sort the n1 elements of the Short_t array defined by its; /// iterators. In output the array index contains the indices of; /// the sorted array. If down is false sort in increasing order; /// (default is decreasing order).; ///; /// NOTE that the array index must be created with a length bigger; /// or equal than the main array before calling this function.",MatchSource.CODE_COMMENT,core/base/inc/TMathBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h:169,Availability,down,down,169,"/// Sort the n elements of the array a of generic templated type Element.; /// In output the array index of type Index contains the indices of the sorted array.; /// If down is false sort in increasing order (default is decreasing order).; ///; /// NOTE that the array index must be created with a length >= n; /// before calling this function.; /// NOTE also that the size type for n must be the same type used for the index array; /// (templated type Index)",MatchSource.CODE_COMMENT,core/base/inc/TMathBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:382,Availability,avail,available,382,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:678,Deployability,Update,Update,678,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:134,Integrability,message,message-digest,134,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:607,Integrability,message,message,607,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:406,Security,Secur,Security,406,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:447,Testability,test,tested,447,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:2,Integrability,message,message,2,"//message digest",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:10,Integrability,message,message,10,"//true if message digest has been finalized",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:21,Security,hash,hash,21,"// MD5 cryptographic hash functions with a 128 bit output",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:27,Safety,avoid,avoid,27,"// Not inlined in order to avoid const casted away warning in user code.",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMemberInspector.h:141,Security,access,accessing,141,"//////////////////////////////////////////////////////////////////////////; // //; // TMemberInspector //; // //; // Abstract base class for accessing the datamembers of a class. //; // Classes derived from this class can be given as argument to the //; // ShowMembers() methods of ROOT classes. This feature facilitates //; // the writing of class browsers and inspectors. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMemberInspector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMemberInspector.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:489,Deployability,install,install,489,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:123,Integrability,message,messages,123,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:233,Integrability,message,messages,233,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:365,Integrability,message,message,365,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:424,Integrability,message,message,424,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:472,Integrability,message,message,472,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:511,Integrability,message,message,511,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:547,Integrability,message,message,547,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:410,Security,access,access,410,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:19,Integrability,message,message,19,"// class for which message has to be handled",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:21,Integrability,message,message,21,"// object generating message",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:3,Integrability,message,message,3,"// message id (often matching specific enum in fClass)",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:23,Integrability,message,messages,23,"// number of different messages handled",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:13,Integrability,message,message,13,"// count per message",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:3,Integrability,message,message,3,"// message ids",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:18,Integrability,message,messages,18,"// if true handle messages also for derived classes",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:11,Integrability,message,message,11,"// Generic message handler",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h:542,Performance,Load,LoadTree,542,"/** \class TNotifyLink; \ingroup Base. A node in a doubly linked list of subscribers to TChain notifications. TObject has a virtual TObject::Notify() method that takes no parameters and returns a boolean.; By default the method does nothing, and different objects in ROOT use this method for different purposes. `TChain` uses `Notify` to implement a callback mechanism that notifies interested parties (subscribers) when; the chain switches to a new sub-tree.; In practice it calls the Notify() method of its fNotify data member from TChain::LoadTree().; However there could be several different objects interested in knowing that a given TChain switched to a new tree.; TNotifyLink can be used to build a linked list of subscribers: calling TNotifyLink::Notify() on the head; node of the list propagates the call to all subscribers in the list. Example usage:; ~~~{.cpp}; TNotifyLink l(subscriber); // subscriber must implement `Notify()`; l.PrependLink(chain); // prepends `l` to the list of notify links of the chain; ~~~. \note TChain does not explicitly enforce that its fNotify data member be the head node of a list of; TNotifyLinks, but that is the case in practice at least when using TTreeReader or RDataFrame to process the chain. \note TChain does not take ownership of the TNotifyLink and the TNotifyLink does not take ownership of the; subscriber object.; **/; /// See TNotifyLink.",MatchSource.CODE_COMMENT,core/base/inc/TNotifyLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h:114,Integrability,depend,dependency,114,"/// Set this link as the head of the chain's list of notify subscribers.; /// Templated only to remove an include dependency from TChain: it expects; /// a TChain as input (in practice anything that implements SetNotify and; /// GetNotify will work, but in ROOT that is only TTree and its sub-classes).",MatchSource.CODE_COMMENT,core/base/inc/TNotifyLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h:308,Availability,error,error,308,"/// Remove this link from a chain's list of notify subscribers.; /// Templated only to remove an include dependency from TChain: it expects; /// a TChain as input (in practice anything that implements SetNotify and; /// GetNotify will work, but in ROOT that is only TTree and its sub-classes).; /// \note No error is emitted if the TNotifyLink is not part of the linked list; /// for the chain passed as argument. The TNotifyLink will still remove itself; /// from the doubly linked list.",MatchSource.CODE_COMMENT,core/base/inc/TNotifyLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h:105,Integrability,depend,dependency,105,"/// Remove this link from a chain's list of notify subscribers.; /// Templated only to remove an include dependency from TChain: it expects; /// a TChain as input (in practice anything that implements SetNotify and; /// GetNotify will work, but in ROOT that is only TTree and its sub-classes).; /// \note No error is emitted if the TNotifyLink is not part of the linked list; /// for the chain passed as argument. The TNotifyLink will still remove itself; /// from the doubly linked list.",MatchSource.CODE_COMMENT,core/base/inc/TNotifyLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:39,Testability,test,test,39,"//----- Private bits, clients can only test but not change them",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:20,Security,Hash,Hash,20,"///< class overload Hash but does call RecursiveRemove in destructor; // kCheckedHash = 0x10000000, ///< CheckedHash has check for the consistency of Hash/RecursiveRemove",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:150,Security,Hash,Hash,150,"///< class overload Hash but does call RecursiveRemove in destructor; // kCheckedHash = 0x10000000, ///< CheckedHash has check for the consistency of Hash/RecursiveRemove",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:7,Availability,error,error,7,"//---- error handling",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:284,Energy Efficiency,allocate,allocated,284,"////////////////////////////////////////////////////////////////////////////////; /// TObject constructor. It sets the two data words of TObject to their; /// initial values. The unique ID is set to 0 and the status word is; /// set depending if the object is created on the stack or allocated; /// on the heap. Depending on the ROOT environment variable ""Root.ObjStat""; /// (see TEnv) the object is added to the global TObjectTable for; /// bookkeeping.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:233,Integrability,depend,depending,233,"////////////////////////////////////////////////////////////////////////////////; /// TObject constructor. It sets the two data words of TObject to their; /// initial values. The unique ID is set to 0 and the status word is; /// set depending if the object is created on the stack or allocated; /// on the heap. Depending on the ROOT environment variable ""Root.ObjStat""; /// (see TEnv) the object is added to the global TObjectTable for; /// bookkeeping.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:312,Integrability,Depend,Depending,312,"////////////////////////////////////////////////////////////////////////////////; /// TObject constructor. It sets the two data words of TObject to their; /// initial values. The unique ID is set to 0 and the status word is; /// set depending if the object is created on the stack or allocated; /// on the heap. Depending on the ROOT environment variable ""Root.ObjStat""; /// (see TEnv) the object is added to the global TObjectTable for; /// bookkeeping.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:346,Modifiability,variab,variable,346,"////////////////////////////////////////////////////////////////////////////////; /// TObject constructor. It sets the two data words of TObject to their; /// initial values. The unique ID is set to 0 and the status word is; /// set depending if the object is created on the stack or allocated; /// on the heap. Depending on the ROOT environment variable ""Root.ObjStat""; /// (see TEnv) the object is added to the global TObjectTable for; /// bookkeeping.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:3,Testability,test,test,3,"// test uses fBits so don't move next line",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:266,Integrability,rout,routine,266,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:598,Safety,safe,safe,598,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:151,Security,Hash,Hash,151,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:210,Security,Hash,Hash,210,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:333,Security,Hash,Hash,333,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:514,Security,Hash,Hash,514,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:615,Security,Hash,Hash,615,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:423,Modifiability,variab,variable,423,"// Testing and recording whether we already called HasInconstistentTObjectHash; // for this object could save some cpu cycles in some circuntances (at the cost; // of reserving yet another bit).; // For each insert (CheckedHash is called only for insert in THashList/THashTable), it; // cost one memory fetch, one arithmetic operation and one branching.; // This save a virtual function call which itself contains a static variable memory; // fetch, a branching (of whether the static was already set or not).; // Given that a virtual function call is essentially 2 memory fetches (virtual table; // location and then content), one arithmetic operation and one function call/jump),; // we guess-estimate that the version recording-then-testing-prior-check would start; // saving cpu cycle when each object is inserted in average 1.5 times in a THashList/THashTable.; // if ( !fBits & kCheckedHash) {",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:3,Testability,Test,Testing,3,"// Testing and recording whether we already called HasInconstistentTObjectHash; // for this object could save some cpu cycles in some circuntances (at the cost; // of reserving yet another bit).; // For each insert (CheckedHash is called only for insert in THashList/THashTable), it; // cost one memory fetch, one arithmetic operation and one branching.; // This save a virtual function call which itself contains a static variable memory; // fetch, a branching (of whether the static was already set or not).; // Given that a virtual function call is essentially 2 memory fetches (virtual table; // location and then content), one arithmetic operation and one function call/jump),; // we guess-estimate that the version recording-then-testing-prior-check would start; // saving cpu cycle when each object is inserted in average 1.5 times in a THashList/THashTable.; // if ( !fBits & kCheckedHash) {",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:736,Testability,test,testing-prior-check,736,"// Testing and recording whether we already called HasInconstistentTObjectHash; // for this object could save some cpu cycles in some circuntances (at the cost; // of reserving yet another bit).; // For each insert (CheckedHash is called only for insert in THashList/THashTable), it; // cost one memory fetch, one arithmetic operation and one branching.; // This save a virtual function call which itself contains a static variable memory; // fetch, a branching (of whether the static was already set or not).; // Given that a virtual function call is essentially 2 memory fetches (virtual table; // location and then content), one arithmetic operation and one function call/jump),; // we guess-estimate that the version recording-then-testing-prior-check would start; // saving cpu cycle when each object is inserted in average 1.5 times in a THashList/THashTable.; // if ( !fBits & kCheckedHash) {",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:349,Integrability,rout,routine,349,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:182,Security,Hash,Hash,182,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:560,Security,Hash,Hash,560,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:619,Security,hash,hash,619,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:312,Testability,test,tested,312,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:102,Availability,error,error,102,"/// @brief Check if the TObject's memory has been deleted.; /// @warning This should be only used for error mitigation as the answer is only; /// sometimes correct. It actually just checks whether the object has been; /// deleted, so this will falsely return true for an object that has; /// been destructed but its memory has not been deleted. This will return an; /// undefined value if the memory is re-used between the deletion and the check.; /// i.e. This is useful to prevent a segmentation fault in case where the problem; /// can be detected when the deletion and the usage are 'close-by'; /// @warning In enviroment where delete taints (changes) the memory, this function; /// always returns false as the marker left by ~TObject will be overwritten.; /// @param obj The memory to check; /// @return true if the object has been destructed and it can be inferred that it has been deleted",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:498,Availability,fault,fault,498,"/// @brief Check if the TObject's memory has been deleted.; /// @warning This should be only used for error mitigation as the answer is only; /// sometimes correct. It actually just checks whether the object has been; /// deleted, so this will falsely return true for an object that has; /// been destructed but its memory has not been deleted. This will return an; /// undefined value if the memory is re-used between the deletion and the check.; /// i.e. This is useful to prevent a segmentation fault in case where the problem; /// can be detected when the deletion and the usage are 'close-by'; /// @warning In enviroment where delete taints (changes) the memory, this function; /// always returns false as the marker left by ~TObject will be overwritten.; /// @param obj The memory to check; /// @return true if the object has been destructed and it can be inferred that it has been deleted",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:542,Safety,detect,detected,542,"/// @brief Check if the TObject's memory has been deleted.; /// @warning This should be only used for error mitigation as the answer is only; /// sometimes correct. It actually just checks whether the object has been; /// deleted, so this will falsely return true for an object that has; /// been destructed but its memory has not been deleted. This will return an; /// undefined value if the memory is re-used between the deletion and the check.; /// i.e. This is useful to prevent a segmentation fault in case where the problem; /// can be detected when the deletion and the usage are 'close-by'; /// @warning In enviroment where delete taints (changes) the memory, this function; /// always returns false as the marker left by ~TObject will be overwritten.; /// @param obj The memory to check; /// @return true if the object has been destructed and it can be inferred that it has been deleted",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObjString.h:3,Integrability,wrap,wrapped,3,"// wrapped TString",MatchSource.CODE_COMMENT,core/base/inc/TObjString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObjString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TParameter.h:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,core/base/inc/TParameter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TParameter.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPluginManager.h:106,Modifiability,Plugin,PluginHandler,106,"// Fallback to slow path with type conversion for arguments.; // The fCallEnv object is shared, since the PluginHandler is a global; // resource ... and both SetParams and Execute ends up taking the lock; // individually anyway ...",MatchSource.CODE_COMMENT,core/base/inc/TPluginManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPluginManager.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPoint.h:448,Integrability,rout,routines,448,"//////////////////////////////////////////////////////////////////////////; // //; // TPoint //; // //; // TPoint implements a 2D screen (device) point (see also TPoints). //; // //; // Don't add in dictionary since that will add a virtual table pointer //; // and that will destroy the data layout of an array of TPoint's which //; // should match the layout of an array of XPoint's (so no extra copying //; // needs to be done in the X11 drawing routines). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPoint.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPoint.h:12,Security,access,access,12,"// for easy access",MatchSource.CODE_COMMENT,core/base/inc/TPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPoint.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPRegexp.h:3,Integrability,Wrap,Wrapper,3,"// Wrapper for Perl-like regular expression matching.",MatchSource.CODE_COMMENT,core/base/inc/TPRegexp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPRegexp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQClass.h:143,Modifiability,inherit,inheriting,143,"//---- Class Initialization Behavior --------------------------------------; //; // This Class and Function are automatically used for classes inheriting from; // TQObject. They make it possible to have a single connection from all; // objects of the same class.",MatchSource.CODE_COMMENT,core/base/inc/TQClass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQClass.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:134,Usability,Undo,Undo,134,"//////////////////////////////////////////////////////////////////////////; // //; // TQCommand, TQUndoManager - support for multiple Undo/Redo operations //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:3,Usability,undo,undo,3,"// undo action",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:3,Usability,undo,undo,3,"// undo values",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:13,Usability,undo,undo,13,"// number of undo arguments",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:6,Usability,undo,undoing,6,"// -1 undoing on, 1 redoing on, 0 nothing in progress",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:43,Usability,Undo,Undo,43,"// fStatus++ after Redo(), fStatus-- after Undo()",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:17,Usability,Undo,Undo,17,"// kTRUE if Redo/Undo methods are new/delete",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:19,Usability,undo,undo,19,"// object to which undo/redo actions applied",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:36,Usability,undo,undo,36,"// encapsulates the information for undo/redo a single action.",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:12,Testability,log,logging,12,"// kTRUE if logging is ON",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:30,Usability,undo,undo,30,"// recorder of operations for undo and redo",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQConnection.h:23,Integrability,interface,interface,23,"// slot-method calling interface",MatchSource.CODE_COMMENT,core/base/inc/TQConnection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQConnection.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQObject.h:24,Modifiability,variab,variable,24,"// Activate signal with variable argument list.; // For internal use and for var arg EmitVA() in RQ_OBJECT.h.",MatchSource.CODE_COMMENT,core/base/inc/TQObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h:203,Safety,safe,safe,203,"//////////////////////////////////////////////////////////////////////////; // //; // TRedirectOutputGuard //; // //; // This class provides output redirection to a file in a guaranteed //; // exception safe way. Use like this: //; // { //; // TRedirectOutputGuard guard(filelog, mode); //; // ... // do something //; // } //; // when guard goes out of scope output is automatically redirected to //; // the standard units in the TRedirectOutputGuard destructor. //; // The exception mechanism takes care of calling the dtors //; // of local objects so it is exception safe. //; // The 'mode' options follow the fopen write modes convention; default //; // is ""a"". //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TRedirectOutputGuard.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h:569,Safety,safe,safe,569,"//////////////////////////////////////////////////////////////////////////; // //; // TRedirectOutputGuard //; // //; // This class provides output redirection to a file in a guaranteed //; // exception safe way. Use like this: //; // { //; // TRedirectOutputGuard guard(filelog, mode); //; // ... // do something //; // } //; // when guard goes out of scope output is automatically redirected to //; // the standard units in the TRedirectOutputGuard destructor. //; // The exception mechanism takes care of calling the dtors //; // of local objects so it is exception safe. //; // The 'mode' options follow the fopen write modes convention; default //; // is ""a"". //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TRedirectOutputGuard.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h:13,Safety,safe,safe,13,"// Exception safe output redirection",MatchSource.CODE_COMMENT,core/base/inc/TRedirectOutputGuard.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRegexp.h:12,Usability,clear,clear,12,"// Return & clear status",MatchSource.CODE_COMMENT,core/base/inc/TRegexp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRegexp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRemoteObject.h:147,Integrability,protocol,protocol,147,"//////////////////////////////////////////////////////////////////////////; // //; // TRemoteObject //; // //; // The TRemoteObject class provides protocol for browsing ROOT objects //; // from a remote ROOT session. //; // It contains information on the real remote object as: //; // - Object Properties (i.e. file stat if the object is a TSystemFile) //; // - Object Name //; // - Class Name //; // - TKey Object Name (if the remote object is a TKey) //; // - TKey Class Name (if the remote object is a TKey) //; // - Remote object address //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TRemoteObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRemoteObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:196,Security,access,accessible,196,"//////////////////////////////////////////////////////////////////////////; // //; // TROOT //; // //; // The TROOT object is the entry point to the system. //; // The single instance of TROOT is accessible via the global gROOT. //; // Using the gROOT pointer one has access to basically every object //; // created in a ROOT based program. The TROOT object is essentially a //; // container of several lists pointing to the main ROOT objects. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:268,Security,access,access,268,"//////////////////////////////////////////////////////////////////////////; // //; // TROOT //; // //; // The TROOT object is the entry point to the system. //; // The single instance of TROOT is accessible via the global gROOT. //; // Using the gROOT pointer one has access to basically every object //; // created in a ROOT based program. The TROOT object is essentially a //; // container of several lists pointing to the main ROOT objects. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:30,Performance,multi-thread,multi-threading,30,"/// \brief Enable support for multi-threading within the ROOT code; /// in particular, enables the global mutex to make ROOT thread safe/aware.",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:132,Safety,safe,safe,132,"/// \brief Enable support for multi-threading within the ROOT code; /// in particular, enables the global mutex to make ROOT thread safe/aware.",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:34,Performance,multi-thread,multi-threading,34,"/// \brief Enable ROOT's implicit multi-threading for all objects and methods that provide an internal; /// parallelisation mechanism.",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:8,Integrability,synchroniz,synchronize,8,"///< To synchronize multi-threads",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:20,Performance,multi-thread,multi-threads,20,"///< To synchronize multi-threads",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:12,Modifiability,config,configure,12,"///< ROOT ./configure set build options",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:12,Modifiability,config,configure,12,"///< ROOT ./configure detected build features",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:22,Safety,detect,detected,22,"///< ROOT ./configure detected build features",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:20,Modifiability,variab,variables,20,"///< List of global variables",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:13,Integrability,message,message,13,"///< List of message handlers",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:13,Security,secur,security,13,"///< List of security contexts (TSecContext)",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:20,Modifiability,plugin,plugin,20,"///< Keeps track of plugin library handlers",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:22,Integrability,interface,interface,22,"///< Operating System interface",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:71,Testability,Test,TestBit,71,"/// \brief call RecursiveRemove for obj if gROOT is valid; /// and obj.TestBit(kMustCleanup) is true.; /// Note: this reset the kMustCleanup bit to allow; /// harmless multiple call to this function.",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRootIOCtor.h:566,Availability,avail,available,566,"//////////////////////////////////////////////////////////////////////////; // //; // TRootIOCtor //; // //; // Helper class used to mark a constructor to be used by ROOT instead //; // of the default constructor. //; // If rootcint sees in a class declaration of the class MyClass: //; // MyClass(TRootIOCtor*); //; // This constructor will be used instead of the default constructor. //; // //; // Also the pragma: //; // #pragma link C++ ioctortype MyMarker; //; // can be used to tell rootcint that a constuctor taking a MyMarker* //; // should be used whenever available. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TRootIOCtor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRootIOCtor.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:17,Energy Efficiency,allocate,allocated,17,"// largest block allocated",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:75,Testability,test,test,75,"// true if using ROOT's new/delete; //----- Private bits, clients can only test but not change them",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:264,Integrability,rout,routine,264,"//called by TObject's constructor to determine if object was created by call to new; // This technique is necessary as there is one stack per thread; // and we can not rely on comparison with the current stack memory position.; // Note that a false positive (this routine returning true for an object; // created on the stack) requires the previous stack value to have been; // set to exactly kObjectAllocMemValue at exactly the right position (i.e.; // where this object's fUniqueID is located.; // The consequence of a false positive will be visible if and only if; // the object is auto-added to a TDirectory (i.e. TTree, TH*, TGraph,; // TEventList) or explicitly added to the directory by the user; // and; // the TDirectory (or TFile) object is created on the stack *before*; // the object.; // The consequence would be that those objects would be deleted twice, once; // by the TDirectory and once automatically when going out of scope; // (and thus quite visible). A false negative (which is not possible with; // this implementation) would have been a silent memory leak.; // This will be reported by valgrind as uninitialized memory reads for; // object created on the stack, use $ROOTSYS/etc/valgrind-root.supp",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:136,Integrability,rout,routine,136,"// Assign the kIsOnHeap bit in 'bits' based on the pattern seen in uniqueID.; // See Storage::FilledByObjectAlloc for details.; // This routine is marked as inline with attribute noinline so that it never; // inlined and thus can be used in a valgrind suppression file to suppress; // the known/intentional uninitialized memory read but still be a 'quick'; // function call to avoid losing performance at object creation.; // Moving the function into the source file, results in doubling of the; // overhead (compared to inlining)",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:390,Performance,perform,performance,390,"// Assign the kIsOnHeap bit in 'bits' based on the pattern seen in uniqueID.; // See Storage::FilledByObjectAlloc for details.; // This routine is marked as inline with attribute noinline so that it never; // inlined and thus can be used in a valgrind suppression file to suppress; // the known/intentional uninitialized memory read but still be a 'quick'; // function call to avoid losing performance at object creation.; // Moving the function into the source file, results in doubling of the; // overhead (compared to inlining)",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:377,Safety,avoid,avoid,377,"// Assign the kIsOnHeap bit in 'bits' based on the pattern seen in uniqueID.; // See Storage::FilledByObjectAlloc for details.; // This routine is marked as inline with attribute noinline so that it never; // inlined and thus can be used in a valgrind suppression file to suppress; // the known/intentional uninitialized memory read but still be a 'quick'; // function call to avoid losing performance at object creation.; // Moving the function into the source file, results in doubling of the; // overhead (compared to inlining)",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:38,Safety,detect,detecting,38,"// Convert self to upper-case; // For detecting null substrings",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:12,Integrability,interface,interface,12,"// ROOT I/O interface",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:9,Integrability,interface,interface,9,"// C I/O interface",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:132,Availability,error,errors,132,"// Clang 5.0 support for explicit conversion is still inadequate even in c++17 mode.; // (It leads to extraneous ambiguous overload errors)",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:14,Security,hash,hash,14,"// Calculates hash index from any char string.",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:3,Security,Access,Access,3,"// Access to elements of sub-string with bounds checking",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:10,Testability,Log,Logical,10,"// String Logical operators",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:13,Testability,Log,Logical,13,"// SubString Logical operators; // Bool_t operator==(const TSubString &s1, const TSubString &s2);; // Bool_t operator==(const TSubString &s1, const char *s2);; // Bool_t operator==(const TSubString &s1, const TString &s2);",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStringLong.h:12,Integrability,interface,interface,12,"// ROOT I/O interface",MatchSource.CODE_COMMENT,core/base/inc/TStringLong.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStringLong.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:13,Testability,log,log,13,"///< True if log scale in X",MatchSource.CODE_COMMENT,core/base/inc/TStyle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:13,Testability,log,log,13,"///< True if log scale in y",MatchSource.CODE_COMMENT,core/base/inc/TStyle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:13,Testability,log,log,13,"///< True if log scale in z",MatchSource.CODE_COMMENT,core/base/inc/TStyle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:33,Availability,error,error,33,"///< Size of lines at the end of error bars",MatchSource.CODE_COMMENT,core/base/inc/TStyle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:31,Availability,error,errors,31,"///< Per cent of bin width for errors along X",MatchSource.CODE_COMMENT,core/base/inc/TStyle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSysEvtHandler.h:17,Availability,mask,mask,17,"//Event interest mask, either bit 1 (read), 2 (write) or both can be set",MatchSource.CODE_COMMENT,core/base/inc/TSysEvtHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSysEvtHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSysEvtHandler.h:12,Availability,mask,mask,12,"//Readiness mask, either bit 1 (read), 2 (write) or both can be set",MatchSource.CODE_COMMENT,core/base/inc/TSysEvtHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSysEvtHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Availability,mask,mask,3,"// mask for file owner permissions",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Availability,mask,mask,3,"// mask for group permissions",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Availability,mask,mask,3,"// mask for permissions for others (not in group)",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Security,password,password,3,"// password",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:11,Performance,cache,cache,11,"// level 2 cache size in KB",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:7,Performance,load,load,7,"// cpu load average over 1 m",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:7,Performance,load,load,7,"// cpu load average over 5 m",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:7,Performance,load,load,7,"// cpu load average over 15 m",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:12,Performance,load,load,12,"// cpu user load in percentage",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:11,Performance,load,load,11,"// cpu sys load in percentage",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:16,Performance,load,load,16,"// cpu user+sys load in percentage",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:7,Performance,load,load,7,"// CPU load information.",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Availability,avail,available,3,"// available RAM in MB",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Performance,cache,cached,3,"// cached RAM in MB",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Performance,cache,cached,3,"// cached swap in MB",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:7,Integrability,message,message,7,"// OOB message inline",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:15,Availability,alive,alive,15,"// keep socket alive",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:20,Integrability,message,message,20,"// peek at incoming message (receive only)",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,core/base/inc/TTask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,core/base/inc/TTask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,core/base/inc/TTask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:545,Safety,Timeout,Timeout,545,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:644,Safety,Timeout,Timeout,644,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:709,Safety,timeout,timeout,709,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:906,Safety,Timeout,Timeout,906,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:1048,Safety,Timeout,Timeout,1048,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:1098,Safety,timeout,timeout,1098,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUri.h:82,Modifiability,variab,variables,82,"// In order to represent the five basic components of an URI,; // we use 7 member variables (authority gets split in 3 parts); //; // foo://user:pass@example.com:8042/over/there?name=ferret#nose; // \_/ \________________________/\_________/ \_________/ \__/; // | | | | |; // scheme authority path query fragment; //; // In many cases we have to distinguish between empty; // TString and undefined value (i.e. delimiter not found).; // Therefore, we use a TString to hold the string value; // and a corresponding Bool_t to store if it is defined or not.; // The Bool_t has precedence.",MatchSource.CODE_COMMENT,core/base/inc/TUri.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUri.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUri.h:28,Security,password,password,28,"// authority/userinfo: user@password, ...",MatchSource.CODE_COMMENT,core/base/inc/TUri.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUri.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h:3,Integrability,protocol,protocol,3,"// protocol: http, ftp, news, root, proof, ...",MatchSource.CODE_COMMENT,core/base/inc/TUrl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h:3,Security,password,password,3,"// password",MatchSource.CODE_COMMENT,core/base/inc/TUrl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h:19,Integrability,protocol,protocols,19,"// list of special protocols",MatchSource.CODE_COMMENT,core/base/inc/TUrl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h:70,Safety,detect,detection,70,"// NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see ROOT-10300",MatchSource.CODE_COMMENT,core/base/inc/TUrl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h:186,Usability,GUID,GUIDs,186,"//////////////////////////////////////////////////////////////////////////; // //; // TUUID //; // //; // This class defines a UUID (Universally Unique IDentifier), also //; // known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits //; // long, and if generated according to this algorithm, is either //; // guaranteed to be different from all other UUIDs/GUIDs generated //; // until 3400 A.D. or extremely likely to be different. UUIDs were //; // originally used in the Network Computing System (NCS) and //; // later in the Open Software Foundation's (OSF) Distributed Computing //; // Environment (DCE). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TUUID.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h:365,Usability,GUID,GUIDs,365,"//////////////////////////////////////////////////////////////////////////; // //; // TUUID //; // //; // This class defines a UUID (Universally Unique IDentifier), also //; // known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits //; // long, and if generated according to this algorithm, is either //; // guaranteed to be different from all other UUIDs/GUIDs generated //; // until 3400 A.D. or extremely likely to be different. UUIDs were //; // originally used in the Network Computing System (NCS) and //; // later in the Open Software Foundation's (OSF) Distributed Computing //; // Environment (DCE). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TUUID.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h:27,Safety,avoid,avoid,27,"// Not inlined in order to avoid const casted away warning in user code.",MatchSource.CODE_COMMENT,core/base/inc/TUUID.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVersionCheck.h:80,Modifiability,plugin,plugin,80,/** \class TVersionCheck; \ingroup Base. Used to check if the shared library or plugin is compatible with; the current version of ROOT.; */,MatchSource.CODE_COMMENT,core/base/inc/TVersionCheck.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVersionCheck.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h:122,Integrability,interface,interface,122,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualAuth //; // //; // Abstract interface for client authentication code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualAuth.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h:143,Security,authenticat,authentication,143,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualAuth //; // //; // Abstract interface for client authentication code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualAuth.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h:15,Integrability,interface,interface,15,"// client auth interface",MatchSource.CODE_COMMENT,core/base/inc/TVirtualAuth.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:496,Availability,Avail,Available,496,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:977,Availability,redundant,redundant,977,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:1532,Availability,avail,available,1532,"ing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW really computes"" of the FFTW manual; //; // NOTE: FFTW computes unnormalized transforms, so doing a transform, followed by its; // inverse will give the original array, multiplied by normalization constant; // (transform size(N) for FFT, 2*(N-1) for DCT-I, 2*(N+1) for DST-I, 2*N for; // other sine/cosine transforms); //; // How to use it:; // Call to the static function FFT returns a pointer to a fast fourier transform; // with requested parameters. Call to the static function SineCosine returns a; // pointer to a sine or cosine transform with requested parameters. Example:; // {; // Int_t N = 10; Double_t *in = new Double_t[N];; // TVirtualFFT *fftr2c = TVirtualFFT::FFT(1, &N, ""R2C"");; // fftr2c->SetPoints(in);; // fftr2c->Transform();; // Double_t re, im;; // for (Int_t i=0; i<N; i++); // fftr2c->GetPointComplex(i, re, im);; // ...; // fftr2c->SetPoints(in2);; // ...; // fftr2c->SetPoints(in3);; // ...; // }; // Different options are explained in the ",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:262,Deployability,install,installed,262,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:393,Deployability,install,installation,393,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:121,Integrability,interface,interface,121,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:977,Safety,redund,redundant,977,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:997,Testability,log,logically,997,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:11,Integrability,interface,interface,11,"//abstract interface for FFT calculations",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:323,Availability,avail,available,323,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualGL //; // //; // The TVirtualGL class is an abstract base class defining the //; // OpenGL interface protocol. All interactions with OpenGL should be //; // done via the global pointer gVirtualGL. If the OpenGL library is //; // available this pointer is pointing to an instance of the TGLKernel //; // class which provides the actual interface to OpenGL. Using this //; // scheme of ABC we can use OpenGL in other parts of the framework //; // without having to link with the OpenGL library in case we don't //; // use the classes using OpenGL. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:185,Integrability,interface,interface,185,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualGL //; // //; // The TVirtualGL class is an abstract base class defining the //; // OpenGL interface protocol. All interactions with OpenGL should be //; // done via the global pointer gVirtualGL. If the OpenGL library is //; // available this pointer is pointing to an instance of the TGLKernel //; // class which provides the actual interface to OpenGL. Using this //; // scheme of ABC we can use OpenGL in other parts of the framework //; // without having to link with the OpenGL library in case we don't //; // use the classes using OpenGL. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:195,Integrability,protocol,protocol,195,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualGL //; // //; // The TVirtualGL class is an abstract base class defining the //; // OpenGL interface protocol. All interactions with OpenGL should be //; // done via the global pointer gVirtualGL. If the OpenGL library is //; // available this pointer is pointing to an instance of the TGLKernel //; // class which provides the actual interface to OpenGL. Using this //; // scheme of ABC we can use OpenGL in other parts of the framework //; // without having to link with the OpenGL library in case we don't //; // use the classes using OpenGL. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:429,Integrability,interface,interface,429,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualGL //; // //; // The TVirtualGL class is an abstract base class defining the //; // OpenGL interface protocol. All interactions with OpenGL should be //; // done via the global pointer gVirtualGL. If the OpenGL library is //; // available this pointer is pointing to an instance of the TGLKernel //; // class which provides the actual interface to OpenGL. Using this //; // scheme of ABC we can use OpenGL in other parts of the framework //; // without having to link with the OpenGL library in case we don't //; // use the classes using OpenGL. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:3,Integrability,Interface,Interface,3,"// Interface for OpenGL painter",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:2,Integrability,Interface,Interface,2,"//Interface for GL manipulator",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:3,Integrability,Interface,Interface,3,"// Interface for OpenGL manager",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMonitoring.h:2,Testability,log,loglevel,2,/*loglevel*/,MatchSource.CODE_COMMENT,core/base/inc/TVirtualMonitoring.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMonitoring.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:206,Availability,avail,available,206,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualMutex //; // //; // This class implements a mutex interface. The actual work is done via //; // TMutex which is available as soon as the thread library is loaded. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:144,Integrability,interface,interface,144,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualMutex //; // //; // This class implements a mutex interface. The actual work is done via //; // TMutex which is available as soon as the thread library is loaded. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:249,Performance,load,loaded,249,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualMutex //; // //; // This class implements a mutex interface. The actual work is done via //; // TMutex which is available as soon as the thread library is loaded. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:194,Safety,safe,safe,194,"//////////////////////////////////////////////////////////////////////////; // //; // TLockGuard //; // //; // This class provides mutex resource management in a guaranteed and //; // exception safe way. Use like this: //; // { //; // TLockGuard guard(mutex); //; // ... // do something //; // } //; // where mutex is a pointer to a TMutex object. //; // When guard goes out of scope the mutex is unlocked in the TLockGuard //; // destructor. The exception mechanism takes care of calling the dtors //; // of local objects so it is exception safe. //; // In contrast to std::lock_guard, TLockGuard constructor expects a //; // pointer, not the mutex object itself. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:542,Safety,safe,safe,542,"//////////////////////////////////////////////////////////////////////////; // //; // TLockGuard //; // //; // This class provides mutex resource management in a guaranteed and //; // exception safe way. Use like this: //; // { //; // TLockGuard guard(mutex); //; // ... // do something //; // } //; // where mutex is a pointer to a TMutex object. //; // When guard goes out of scope the mutex is unlocked in the TLockGuard //; // destructor. The exception mechanism takes care of calling the dtors //; // of local objects so it is exception safe. //; // In contrast to std::lock_guard, TLockGuard constructor expects a //; // pointer, not the mutex object itself. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:13,Safety,safe,safe,13,"// Exception safe locking/unlocking of mutex",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h:37,Integrability,interface,interface,37,"// methods related to the old editor interface",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadEditor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h:37,Integrability,interface,interface,37,"// methods related to the new editor interface; //static methods for both interfaces",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadEditor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h:74,Integrability,interface,interfaces,74,"// methods related to the new editor interface; //static methods for both interfaces",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadEditor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h:11,Integrability,interface,interface,11,"//Abstract interface for graphics pad editor",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadEditor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h:18,Integrability,interface,interface,18,"//This part is an interface to X11 pixmap management and to save sub-pads off-screens for OpenGL.; //Currently, must be implemented only for X11/GDI",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h:13,Usability,Clear,Clear,13,"//gVirtualX->Clear()",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h:10,Integrability,interface,interface,10,"//Painter interface for pad.",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPerfStats.h:131,Integrability,interface,interface,131,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualPerfStats //; // //; // Provides the interface for the PROOF internal performance measurment //; // and event tracing. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPerfStats.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPerfStats.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPerfStats.h:164,Performance,perform,performance,164,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualPerfStats //; // //; // Provides the interface for the PROOF internal performance measurment //; // and event tracing. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPerfStats.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPerfStats.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualQConnection.h:4,Integrability,Mediat,Mediates,4,"/// Mediates the link between the signal and the slot. It decouples the setting of; /// arguments and sending a signal.; ///; /// There are three different modes in argument setting required by TQObject's Emit/EmitVA:; /// setting integral types, setting array types and setting const char*.",MatchSource.CODE_COMMENT,core/base/inc/TVirtualQConnection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualQConnection.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h:58,Usability,simpl,simply,58,"// When they can, TPad::Paint() and TPad::PaintModified() simply; // call the following function:",MatchSource.CODE_COMMENT,core/base/inc/TVirtualViewer3D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h:3,Usability,Simpl,Simple,3,"// Simple object addition - buffer represents a unique single positioned object",MatchSource.CODE_COMMENT,core/base/inc/TVirtualViewer3D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h:75,Testability,log,logical,75,"// Complex object addition - for adding physical objects which have common logical; // shapes. In this case buffer describes template shape (aside from kCore).",MatchSource.CODE_COMMENT,core/base/inc/TVirtualViewer3D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h:12,Integrability,interface,interface,12,"// Abstract interface to 3D viewers",MatchSource.CODE_COMMENT,core/base/inc/TVirtualViewer3D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h:154,Integrability,interface,interface,154,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualX //; // //; // Semi-Abstract base class defining a generic interface to the //; // underlying, low level, graphics system (X11, Win32, MacOS). //; // An instance of TVirtualX itself defines a batch interface to the //; // graphics system. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h:293,Integrability,interface,interface,293,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualX //; // //; // Semi-Abstract base class defining a generic interface to the //; // underlying, low level, graphics system (X11, Win32, MacOS). //; // An instance of TVirtualX itself defines a batch interface to the //; // graphics system. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h:25,Integrability,interface,interface,25,"//ABC defining a generic interface to graphics system",MatchSource.CODE_COMMENT,core/base/inc/TVirtualX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:3,Energy Efficiency,Adapt,Adapted,3,"// Adapted from http://stackoverflow.com/questions/3758606/; // how-to-convert-byte-size-into-human-readable-format-in-java; // and http://agentzlerich.blogspot.com/2011/01/converting-to-and-from-human-readable.html; // However those sources use the 'conventional' 'legacy' nomenclature,; // rather than the official Standard Units. See; // http://physics.nist.gov/cuu/Units/binary.html; // and http://www.dr-lex.be/info-stuff/bytecalc.html for example.; ///////////////////////////////////////////////////////////////////////////////; /// Return the size expressed in 'human readable' format.; /// \param bytes the size in bytes to be converted; /// \param si whether to use the SI units or not.; /// \param coeff return the size expressed in the new unit.; /// \param units return a pointer to the string representation of the new unit",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:3,Modifiability,Adapt,Adapted,3,"// Adapted from http://stackoverflow.com/questions/3758606/; // how-to-convert-byte-size-into-human-readable-format-in-java; // and http://agentzlerich.blogspot.com/2011/01/converting-to-and-from-human-readable.html; // However those sources use the 'conventional' 'legacy' nomenclature,; // rather than the official Standard Units. See; // http://physics.nist.gov/cuu/Units/binary.html; // and http://www.dr-lex.be/info-stuff/bytecalc.html for example.; ///////////////////////////////////////////////////////////////////////////////; /// Return the size expressed in 'human readable' format.; /// \param bytes the size in bytes to be converted; /// \param si whether to use the SI units or not.; /// \param coeff return the size expressed in the new unit.; /// \param units return a pointer to the string representation of the new unit",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:58,Testability,log,log,58,"// On some 32bit platforms, the result of; // (int) (std::log(bytes) / std::log(unit); // in the case of bytes==unit ends up surprisingly to be zero; // rather than one, so 'hard code' the result",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:76,Testability,log,log,76,"// On some 32bit platforms, the result of; // (int) (std::log(bytes) / std::log(unit); // in the case of bytes==unit ends up surprisingly to be zero; // rather than one, so 'hard code' the result",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:662,Availability,failure,failure,662,"///////////////////////////////////////////////////////////////////////////////; /// Convert strings like the following into byte counts; /// 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB; /// with some amount of forgiveness baked into the parsing.; /// For this routine we use the official SI unit where the [i] is reserved; /// for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes.; /// \param str the string to be parsed; /// \param value will be updated with the result if and only if the parse is successful and does not overflow for the type of value.; /// \return return a EFromHumanReadableSize enum value indicating the success or failure of the parse.; ///",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:472,Deployability,update,updated,472,"///////////////////////////////////////////////////////////////////////////////; /// Convert strings like the following into byte counts; /// 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB; /// with some amount of forgiveness baked into the parsing.; /// For this routine we use the official SI unit where the [i] is reserved; /// for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes.; /// \param str the string to be parsed; /// \param value will be updated with the result if and only if the parse is successful and does not overflow for the type of value.; /// \return return a EFromHumanReadableSize enum value indicating the success or failure of the parse.; ///",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:349,Energy Efficiency,power,power,349,"///////////////////////////////////////////////////////////////////////////////; /// Convert strings like the following into byte counts; /// 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB; /// with some amount of forgiveness baked into the parsing.; /// For this routine we use the official SI unit where the [i] is reserved; /// for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes.; /// \param str the string to be parsed; /// \param value will be updated with the result if and only if the parse is successful and does not overflow for the type of value.; /// \return return a EFromHumanReadableSize enum value indicating the success or failure of the parse.; ///",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:265,Integrability,rout,routine,265,"///////////////////////////////////////////////////////////////////////////////; /// Convert strings like the following into byte counts; /// 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB; /// with some amount of forgiveness baked into the parsing.; /// For this routine we use the official SI unit where the [i] is reserved; /// for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes.; /// \param str the string to be parsed; /// \param value will be updated with the result if and only if the parse is successful and does not overflow for the type of value.; /// \return return a EFromHumanReadableSize enum value indicating the success or failure of the parse.; ///",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:105,Availability,error,error,105,"// Skip any remaining white space; // while (cur<size && isspace(str[cur])) ++cur;; // Do not:; // Parse error on anything but a null terminator; // if (cur<size) return -1;",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TErrorDefaultHandler.hxx:60,Availability,error,error,60,"/// Destructs resources that are taken by using the default error handler.; /// This function is called during the destruction of gROOT.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TErrorDefaultHandler.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TErrorDefaultHandler.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:791,Availability,avail,available,791,"//////////////////////////////////////////////////////////////////////////; ///; /// \class ROOT::TExecutorCRTP; /// \brief This class defines an interface to execute the same task; /// multiple times, possibly in parallel and with different arguments every; /// time.; ///; /// ###ROOT::TExecutorCRTP<SubC>::Map; /// The two possible usages of the Map method are:\n; /// * `Map(F func, unsigned nTimes)`: func is executed nTimes with no arguments; /// * `Map(F func, T& args)`: func is executed on each element of the collection of arguments args; ///; /// The Map function forwards the call to MapImpl, to be implemented by the child classes.; ///; /// For either signature, func is executed as many times as needed by a pool of; /// n workers, where n typically defaults to the number of available cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes; /// never delete what they return, they simply forget it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the argu",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:2049,Energy Efficiency,Reduce,Reduce,2049,"ver delete what they return, they simply forget it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of methods combine all elements from a std::vector into a single value.; /// \param redfunc; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes an std::vector and combines all its elements into a single result.\n; /// \endparblock; /// \param [args]; /// \parblock; /// a standard vector\n; /// \endparblock; ///; /// ### ROOT::TExecutorCRTP<SubC>::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects returned by the corresponding Map execution to ""squash"" them; /// into a single object. This function should be independent of the size of; /// the vector returned by Map due to optimization of the number of chunks.; ///; /// #### Examples:; /// ~~~{.cpp}; /// Generate 1 ten times and sum those tens; /// root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const s",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:3248,Energy Efficiency,Reduce,Reduce,3248,"ction to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of methods combine all elements from a std::vector into a single value.; /// \param redfunc; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes an std::vector and combines all its elements into a single result.\n; /// \endparblock; /// \param [args]; /// \parblock; /// a standard vector\n; /// \endparblock; ///; /// ### ROOT::TExecutorCRTP<SubC>::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects returned by the corresponding Map execution to ""squash"" them; /// into a single object. This function should be independent of the size of; /// the vector returned by Map due to optimization of the number of chunks.; ///; /// #### Examples:; /// ~~~{.cpp}; /// Generate 1 ten times and sum those tens; /// root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); /// root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ///; /// Create 10 histograms and merge them into one; /// root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ///; /// ~~~; ///; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:3503,Energy Efficiency,Reduce,ReduceObjects,3503,"ction to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of methods combine all elements from a std::vector into a single value.; /// \param redfunc; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes an std::vector and combines all its elements into a single result.\n; /// \endparblock; /// \param [args]; /// \parblock; /// a standard vector\n; /// \endparblock; ///; /// ### ROOT::TExecutorCRTP<SubC>::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects returned by the corresponding Map execution to ""squash"" them; /// into a single object. This function should be independent of the size of; /// the vector returned by Map due to optimization of the number of chunks.; ///; /// #### Examples:; /// ~~~{.cpp}; /// Generate 1 ten times and sum those tens; /// root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); /// root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ///; /// Create 10 histograms and merge them into one; /// root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ///; /// ~~~; ///; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:146,Integrability,interface,interface,146,"//////////////////////////////////////////////////////////////////////////; ///; /// \class ROOT::TExecutorCRTP; /// \brief This class defines an interface to execute the same task; /// multiple times, possibly in parallel and with different arguments every; /// time.; ///; /// ###ROOT::TExecutorCRTP<SubC>::Map; /// The two possible usages of the Map method are:\n; /// * `Map(F func, unsigned nTimes)`: func is executed nTimes with no arguments; /// * `Map(F func, T& args)`: func is executed on each element of the collection of arguments args; ///; /// The Map function forwards the call to MapImpl, to be implemented by the child classes.; ///; /// For either signature, func is executed as many times as needed by a pool of; /// n workers, where n typically defaults to the number of available cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes; /// never delete what they return, they simply forget it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the argu",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:1729,Integrability,wrap,wrapped,1729," func is executed as many times as needed by a pool of; /// n workers, where n typically defaults to the number of available cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes; /// never delete what they return, they simply forget it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of methods combine all elements from a std::vector into a single value.; /// \param redfunc; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes an std::vector and combines all its elements into a single result.\n; /// \endparblock; /// \param [args]; /// \parblock; /// a standard vector\n; /// \endparblock; ///; /// ### ROOT::TExecutorCRTP<SubC>::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects retu",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:2851,Performance,optimiz,optimization,2851,"ction to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of methods combine all elements from a std::vector into a single value.; /// \param redfunc; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes an std::vector and combines all its elements into a single result.\n; /// \endparblock; /// \param [args]; /// \parblock; /// a standard vector\n; /// \endparblock; ///; /// ### ROOT::TExecutorCRTP<SubC>::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects returned by the corresponding Map execution to ""squash"" them; /// into a single object. This function should be independent of the size of; /// the vector returned by Map due to optimization of the number of chunks.; ///; /// #### Examples:; /// ~~~{.cpp}; /// Generate 1 ten times and sum those tens; /// root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); /// root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ///; /// Create 10 histograms and merge them into one; /// root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ///; /// ~~~; ///; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:1108,Usability,simpl,simply,1108,"//; /// \class ROOT::TExecutorCRTP; /// \brief This class defines an interface to execute the same task; /// multiple times, possibly in parallel and with different arguments every; /// time.; ///; /// ###ROOT::TExecutorCRTP<SubC>::Map; /// The two possible usages of the Map method are:\n; /// * `Map(F func, unsigned nTimes)`: func is executed nTimes with no arguments; /// * `Map(F func, T& args)`: func is executed on each element of the collection of arguments args; ///; /// The Map function forwards the call to MapImpl, to be implemented by the child classes.; ///; /// For either signature, func is executed as many times as needed by a pool of; /// n workers, where n typically defaults to the number of available cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes; /// never delete what they return, they simply forget it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of meth",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:171,Energy Efficiency,Reduce,Reduce,171,"// MapReduce; // The trailing return types check at compile time that func is compatible with the type of the arguments.; // A static_assert check in TExecutorCRTP<SubC>::Reduce is used to check that redfunc is compatible with the type returned by func",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:392,Integrability,wrap,wrapping,392,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function without arguments several times.; ///; /// \param func Function to be executed.; /// \param nTimes Number of times function should be called.; /// \return A vector with the results of the function calls.; /// Functions that take arguments can be executed (with; /// fixed arguments) by wrapping them in a lambda or with std::bind.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:192,Energy Efficiency,Reduce,Reduce,192,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce).; ///; /// \param func Function to be executed.; /// \param nTimes Number of times function should be called.; /// \return A vector with the results of the function calls.; /// \param redfunc Reduction function to combine the results of the calls to `func`. Must return the same type as `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:187,Energy Efficiency,Reduce,Reduce,187,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce).; ///; /// \param func Function to be executed. Must take an element of the sequence passed assecond argument as a parameter.; /// \param args Sequence of indexes to execute `func` on.; /// \param redfunc Reduction function to combine the results of the calls to `func`. Must return the same type as `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:201,Energy Efficiency,Reduce,Reduce,201,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce).; ///; /// \param func Function to be executed on the elements of the initializer_list passed as second parameter.; /// \param args initializer_list for a vector to apply `func` on.; /// \param redfunc Reduction function to combine the results of the calls to `func`. Must return the same type as `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:190,Energy Efficiency,Reduce,Reduce,190,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Vector of elements passed as an argument to `func`.; /// \param redfunc Reduction function to combine the results of the calls to `func`. Must return the same type as `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:201,Energy Efficiency,Reduce,Reduce,201,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Immutable vector of elements passed as an argument to `func`.; /// \param redfunc Reduction function to combine the results of the calls to `func`. Must return the same type as `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:202,Energy Efficiency,Reduce,Reduce,202,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Vector of elements passed as an argument to `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:123,Modifiability,inherit,inheriting,123,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Vector of elements passed as an argument to `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:213,Energy Efficiency,Reduce,Reduce,213,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Immutable vector of elements passed as an argument to `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:123,Modifiability,inherit,inheriting,123,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Immutable vector of elements passed as an argument to `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:88,Energy Efficiency,Reduce,Reduce,88,"//////////////////////////////////////////////////////////////////////////; /// \brief ""Reduce"" an std::vector into a single object by using the object's Merge method.; ///; /// \param mergeObjs A vector of ROOT objects implementing the Merge method; /// \return An object result of merging the vector elements into one.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:88,Energy Efficiency,Reduce,Reduce,88,"//////////////////////////////////////////////////////////////////////////; /// \brief ""Reduce"" an std::vector into a single object by passing a; /// function as the second argument defining the reduction operation.; ///; /// \param objs A vector of elements to combine.; /// \param redfunc Reduction function to combine the elements of the vector `objs`; /// \return A value result of combining the vector elements into a single object of the same type.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:22,Energy Efficiency,reduce,reduce,22,"// check we can apply reduce to objs",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TSequentialExecutor.hxx:233,Energy Efficiency,Reduce,Reduce,233,"// MapReduce; // the late return types also check at compile-time whether redfunc is compatible with func,; // other than checking that func is compatible with the type of arguments.; // a static_assert check in TSequentialExecutor::Reduce is used to check that redfunc is compatible with the type returned by func",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TSequentialExecutor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TSequentialExecutor.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TSequentialExecutor.hxx:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce; //",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TSequentialExecutor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TSequentialExecutor.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx:54,Testability,test,test,54,"//; // Bitmap functions. Set bit b in the map and; // test bit b to see if it was set previously.; //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/src/Match.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx:8,Usability,simpl,simple,8,"// Do a simple match. Note that omatch() fails if there's still; // something in pat but we're at end of string.",MatchSource.CODE_COMMENT,core/base/src/Match.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx:184,Availability,failure,failure,184,"////////////////////////////////////////////////////////////////////////////////; /// Match one pattern element, pointed at by pat, against the character at; /// **strp. Return 0 on a failure, 1 on success. *strp is advanced to skip; /// over the matched character on a successful match. Closure is handled one; /// level up by patcmp().; ///; /// ""start"" points at the character at the left edge of the line. This might; /// not be the same thing as *strp if the search is starting in the middle; /// of the string. An end-of- line anchor matches end of string only.",MatchSource.CODE_COMMENT,core/base/src/Match.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/root-argparse.py:195,Availability,avail,available,195,"""""""ROOTs Object-Oriented Technologies.\n; root is an interactive interpreter of C++ code. It uses the ROOT framework. For more information on ROOT, please refer to\n; An extensive Users Guide is available from that site (see below).; """"""",MatchSource.CODE_COMMENT,core/base/src/root-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/root-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/base/src/root-argparse.py:186,Usability,Guid,Guide,186,"""""""ROOTs Object-Oriented Technologies.\n; root is an interactive interpreter of C++ code. It uses the ROOT framework. For more information on ROOT, please refer to\n; An extensive Users Guide is available from that site (see below).; """"""",MatchSource.CODE_COMMENT,core/base/src/root-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/root-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/base/src/Stringio.cxx:9,Availability,avail,available,9,"// Space available (+1 for terminator)",MatchSource.CODE_COMMENT,core/base/src/Stringio.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Stringio.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/Stringio.cxx:27,Availability,failure,failure,27,"// Check for EOF or stream failure",MatchSource.CODE_COMMENT,core/base/src/Stringio.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Stringio.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:515,Integrability,interface,interfaces,515,"// @(#)root/base:$Id$; // Author: Fons Rademakers 22/12/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TApplication; \ingroup Base. This class creates the ROOT Application Environment that interfaces; to the windowing system eventloop and eventhandlers.; This class must be instantiated exactly once in any given; application. Normally the specific application class inherits from; TApplication (see TRint).; */",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:693,Modifiability,inherit,inherits,693,"// @(#)root/base:$Id$; // Author: Fons Rademakers 22/12/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TApplication; \ingroup Base. This class creates the ROOT Application Environment that interfaces; to the windowing system eventloop and eventhandlers.; This class must be instantiated exactly once in any given; application. Normally the specific application class inherits from; TApplication (see TRint).; */",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:11,Availability,avail,available,11,"// List of available applications; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:88,Availability,down,down,88,"// Insure that the files, canvases and sockets are closed.; // If we get here, the tear down has started. We have no way to know what; // has or has not yet been done. In particular on Ubuntu, this was called; // after the function static in TSystem.cxx has been destructed. So we; // set gROOT in its end-of-life mode which prevents executing code, like; // autoloading libraries (!) that is pointless ...",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:886,Availability,avail,available,886,"////////////////////////////////////////////////////////////////////////////////; /// Create an application environment. The application environment; /// provides an interface to the graphics system and eventloop; /// (be it X, Windows, macOS or BeOS). After creating the application; /// object start the eventloop by calling its Run() method. The command; /// line options recognized by TApplication are described in the GetOptions(); /// method. The recognized options are removed from the argument array.; /// The original list of argument options can be retrieved via the Argc(); /// and Argv() methods. The appClassName ""proofserv"" is reserved for the; /// PROOF system. The ""options"" and ""numOptions"" arguments are not used,; /// except if you want to by-pass the argv processing by GetOptions(); /// in which case you should specify numOptions<0. All options will; /// still be available via the Argv() method for later use.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:166,Integrability,interface,interface,166,"////////////////////////////////////////////////////////////////////////////////; /// Create an application environment. The application environment; /// provides an interface to the graphics system and eventloop; /// (be it X, Windows, macOS or BeOS). After creating the application; /// object start the eventloop by calling its Run() method. The command; /// line options recognized by TApplication are described in the GetOptions(); /// method. The recognized options are removed from the argument array.; /// The original list of argument options can be retrieved via the Argc(); /// and Argv() methods. The appClassName ""proofserv"" is reserved for the; /// PROOF system. The ""options"" and ""numOptions"" arguments are not used,; /// except if you want to by-pass the argv processing by GetOptions(); /// in which case you should specify numOptions<0. All options will; /// still be available via the Argv() method for later use.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:45,Security,access,accessed,45,"// copy command line arguments, can be later accessed via Argc() and Argv()",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce the risk of the files or sockets being closed after the; // end of 'main' (or more exactly before the library start being; // unloaded).",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:14,Safety,risk,risk,14,"// Reduce the risk of the files or sockets being closed after the; // end of 'main' (or more exactly before the library start being; // unloaded).",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:198,Performance,load,loaded,198,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the graphics environment.; /// If @param only_web is specified, only web-related part of graphics is loaded",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:3,Performance,Load,Load,3,"// Load the graphics related libraries",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:10,Performance,load,load,10,"// Try to load TrueType font renderer. Only try to load if not in batch; // mode and Root.UseTTFonts is true and Root.TTFontPath exists. Abort silently; // if libttf or libGX11TTF are not found in $ROOTSYS/lib or $ROOTSYS/ttf/lib.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:51,Performance,load,load,51,"// Try to load TrueType font renderer. Only try to load if not in batch; // mode and Root.UseTTFonts is true and Root.TTFontPath exists. Abort silently; // if libttf or libGX11TTF are not found in $ROOTSYS/lib or $ROOTSYS/ttf/lib.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:137,Safety,Abort,Abort,137,"// Try to load TrueType font renderer. Only try to load if not in batch; // mode and Root.UseTTFonts is true and Root.TTFontPath exists. Abort silently; // if libttf or libGX11TTF are not found in $ROOTSYS/lib or $ROOTSYS/ttf/lib.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:13,Integrability,depend,dependent,13,"// Create WM dependent application environment",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:46,Energy Efficiency,allocate,allocated,46,"// Create the canvas colors early so they are allocated before; // any color table expensive bitmaps get allocated in GUI routines (like; // creation of XPM bitmaps).",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:105,Energy Efficiency,allocate,allocated,105,"// Create the canvas colors early so they are allocated before; // any color table expensive bitmaps get allocated in GUI routines (like; // creation of XPM bitmaps).",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:122,Integrability,rout,routines,122,"// Create the canvas colors early so they are allocated before; // any color table expensive bitmaps get allocated in GUI routines (like; // creation of XPM bitmaps).",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:40,Integrability,depend,dependent,40,"// Hook for further initializing the WM dependent application environment",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear list containing macro files passed as program arguments.; /// This method is called from TRint::Run() to ensure that the macro; /// files are only executed the first time Run() is called.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:60,Modifiability,config,configured,60,"// EnableImplicitMT() only enables thread safety if IMT was configured;; // enable thread safety even with IMT off:",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:42,Safety,safe,safety,42,"// EnableImplicitMT() only enables thread safety if IMT was configured;; // enable thread safety even with IMT off:",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:90,Safety,safe,safety,90,"// EnableImplicitMT() only enables thread safety if IMT was configured;; // enable thread safety even with IMT off:",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:89,Availability,down,down,89,"// used when started by front-end program to signal that; // splash screen can be popped down (TRint::PrintLogo())",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:189,Integrability,rout,routine,189,"////////////////////////////////////////////////////////////////////////////////; /// Handle idle timeout. When this timer expires the registered idle command; /// will be executed by this routine and a signal will be emitted.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:98,Safety,timeout,timeout,98,"////////////////////////////////////////////////////////////////////////////////; /// Handle idle timeout. When this timer expires the registered idle command; /// will be executed by this routine and a signal will be emitted.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:314,Integrability,message,message,314,"/////////////////////////////////////////////////////////////////////////////////; /// The function generates and executes a command that loads the Doxygen URL in; /// a browser. It works for Mac, Windows and Linux. In the case of Linux, the; /// function also checks if the DISPLAY is set. If it isn't, a warning message; /// and the URL will be displayed on the terminal.; ///; /// \param[in] url web page to be displayed in a browser",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:138,Performance,load,loads,138,"/////////////////////////////////////////////////////////////////////////////////; /// The function generates and executes a command that loads the Doxygen URL in; /// a browser. It works for Mac, Windows and Linux. In the case of Linux, the; /// function also checks if the DISPLAY is set. If it isn't, a warning message; /// and the URL will be displayed on the terminal.; ///; /// \param[in] url web page to be displayed in a browser",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:204,Usability,guid,guide,204,"////////////////////////////////////////////////////////////////////////////////; /// The function generates a URL address for class or namespace (scopeName).; /// This is the URL to the online reference guide, generated by Doxygen.; /// With the enumeration ""EUrl"" we pick which case we need - the one for; /// class (kURLforClass) or the one for namespace (kURLforNameSpace).; ///; /// \param[in] scopeName the name of the class or the namespace; /// \param[in] scopeType the enumerator for class or namespace",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:22,Deployability,patch,patches,22,"R""(.*/(v\d)-(\d\d)-00-patches)""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:401,Safety,avoid,avoid,401,"////////////////////////////////////////////////////////////////////////////////; /// The function returns a TString with the arguments of a method from the; /// scope (scopeName), but modified with respect to Doxygen syntax - spacing; /// around special symbols and adding the missing scopes (""std::"").; /// ""FormatMethodArgsForDoxygen"" works for functions defined inside namespaces; /// as well. We avoid looking up twice for the TFunction by passing ""func"".; ///; /// \param[in] scopeName the name of the class/namespace/struct; /// \param[in] func pointer to the method",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:228,Usability,guid,guide,228,"////////////////////////////////////////////////////////////////////////////////; /// The function generates a URL for ""dataMemberName"" defined in ""scopeName"".; /// It returns a TString with the URL used in the online reference guide,; /// generated with Doxygen. For data members the URL consist of 2 parts -; /// URL for ""scopeName"" and a part for ""dataMemberName"".; /// For enumerator, the URL could be separated into 3 parts - URL for; /// ""scopeName"", part for the enumeration and a part for the enumerator.; ///; /// \param[in] scopeName the name of the class/namespace/struct; /// \param[in] dataMemberName the name of the data member/enumerator; /// \param[in] dataMember pointer to the data member/enumerator; /// \param[in] scopeType enumerator to the scope type",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:53,Security,hash,hashed,53,"// If we work with data members, we have to append a hashed with MD5 text, consisting of:; // ""Type ClassName::DataMemberNameDataMemberName(arguments)"".; // We first get the type of the data member.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:31,Security,hash,hashed,31,"// Then we append ""#a"" and the hashed text.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:103,Security,hash,hashed,103,"// If the enumeration is not anonymous we put ""scopeName::Enumeration"" in a TString,; // which will be hashed with MD5 later.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:31,Security,hash,hashed,31,"// The next part of the URL is hashed ""@ scopeName::EnumeratorEnumerator"".",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:30,Security,hash,hashed,30,"// Then we have to append the hashed text for the enumerator.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:35,Security,hash,hashed,35,"// We append ""a"" and then the next hashed text.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:134,Security,hash,hashed,134,"////////////////////////////////////////////////////////////////////////////////; /// The function generates URL for enumeration. The hashed text consist of:; /// ""Class::EnumerationEnumeration"".; ///; /// \param[in] scopeName the name of the class/namespace/struct; /// \param[in] enumeration the name of the enumeration; /// \param[in] scopeType enumerator for class/namespace/struct",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:57,Security,hash,hashed,57,"// The URL consists of URL for the ""scopeName"", ""#a"" and hashed as MD5 text.; // The text is ""Class::EnumerationEnumeration.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:39,Security,hash,hashed,39,"// Then we have to append ""#a"" and the hashed text.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:321,Security,hash,hashed,321,"////////////////////////////////////////////////////////////////////////////////; /// The function generates URL for any member function (including Constructor/; /// Destructor) of ""scopeName"". Doxygen first generates the URL for the scope.; /// We do that with the help of ""UrlGenerator"". Then we append ""#a"" and a; /// hashed with MD5 text. It consists of:; /// ""ReturnType ScopeName::MethodNameMethodName(Method arguments)"".; /// For constructor/destructor of a class, the return type is not appended.; ///; /// \param[in] scopeName the name of the class/namespace/struct; /// \param[in] methodName the name of the method from the scope; /// \param[in] func pointer to the method; /// \param[in] methodType enumerator for method or constructor; /// \param[in] scopeType enumerator for class/namespace/struct",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:17,Security,hash,hashed,17,"// We append the hashed text.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:117,Deployability,install,installation,117,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// It gets the ROOT installation setup as TString; ///; /// \return a string with several lines; ///",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:77,Deployability,release,release,77,"// If branch and commit are identical - e.g. ""v5-34-18"" - then we have; // a release build. Else specify the git hash this build was made from.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:113,Security,hash,hash,113,"// If branch and commit are identical - e.g. ""v5-34-18"" - then we have; // a release build. Else specify the git hash this build was made from.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:31,Energy Efficiency,efficient,efficient,31,"R""(___; _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; )""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:103,Energy Efficiency,efficient,efficient-and-successful-posting,103,"R""(___; _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; )""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:259,Usability,clear,clear,259,"R""(___; _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; )""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:357,Usability,clear,clear,357,"R""(___; _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; )""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:85,Availability,down,download,85,"R""(; <!--; Please specify also how you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; <!--; Add any other context about the problem here.; -->)""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:67,Deployability,install,install,67,"R""(; <!--; Please specify also how you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; <!--; Add any other context about the problem here.; -->)""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:325,Availability,error,error,325,"////////////////////////////////////////////////////////////////////////////////; /// It opens the online reference guide, generated with Doxygen, for the; /// chosen scope (class/namespace/struct) or member (method/function/; /// data member/enumeration/enumerator. If the user types incorrect value,; /// it will return an error or warning.; ///; /// \param[in] strippedClass the scope or scope::member",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:116,Usability,guid,guide,116,"////////////////////////////////////////////////////////////////////////////////; /// It opens the online reference guide, generated with Doxygen, for the; /// chosen scope (class/namespace/struct) or member (method/function/; /// data member/enumeration/enumerator. If the user types incorrect value,; /// it will return an error or warning.; ///; /// \param[in] strippedClass the scope or scope::member",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:3,Availability,Error,Error,3,"// Error out if ""strippedClass"" is un-scoped (and it's not a class, see `TClass::GetClass(strippedClass)` above).; // TODO: Global functions.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:37,Availability,avail,available,37,"// We have enumerators for the three available cases - class, namespace and struct.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:11,Integrability,message,message,11,"// Warning message will appear if the user types the function name incorrectly; // or the function is not a member function of ""cl"" or any of its base classes.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:166,Usability,guid,guide,166,"////////////////////////////////////////////////////////////////////////////////; /// The function lists useful commands ("".help"") or opens the online reference; /// guide, generated with Doxygen ("".help scope"" or "".help scope::member"").; /// \note You can use "".?"" as the short version of "".help""; /// \param[in] line command from the command line",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:32,Modifiability,extend,extended,32,"// If the user wants to use the extended "".help scopeName"" command to access; // the online reference guide, we first check if the command starts correctly.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:70,Security,access,access,70,"// If the user wants to use the extended "".help scopeName"" command to access; // the online reference guide, we first check if the command starts correctly.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:102,Usability,guid,guide,102,"// If the user wants to use the extended "".help scopeName"" command to access; // the online reference guide, we first check if the command starts correctly.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:41,Modifiability,extend,extended,41,"// We call the function what handles the extended "".help scopeName"" command.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:4,Performance,Load,Load,4,"/// Load shared libs necessary for graphics. These libraries are only; /// loaded when gROOT->IsBatch() is kFALSE.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:75,Performance,load,loaded,75,"/// Load shared libs necessary for graphics. These libraries are only; /// loaded when gROOT->IsBatch() is kFALSE.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:260,Modifiability,variab,variable,260,"////////////////////////////////////////////////////////////////////////////////; /// Parse the content of a line starting with "".R"" (already stripped-off); /// The format is; /// ~~~ {.cpp}; /// [user@]host[:dir] [-l user] [-d dbg] [script]; /// ~~~; /// The variable 'dir' is the remote directory to be used as working dir.; /// The username can be specified in two ways, ""-l"" having the priority; /// (as in ssh).; /// A 'dbg' value > 0 gives increasing verbosity.; /// The last argument 'script' allows to specify an alternative script to; /// be executed remotely to startup the session.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:278,Modifiability,variab,variable,278,"////////////////////////////////////////////////////////////////////////////////; /// Process the content of a line starting with "".R"" (already stripped-off); /// The format is; /// ~~~ {.cpp}; /// [user@]host[:dir] [-l user] [-d dbg] [script] | [host] -close; /// ~~~; /// The variable 'dir' is the remote directory to be used as working dir.; /// The username can be specified in two ways, ""-l"" having the priority; /// (as in ssh).; /// A 'dbg' value > 0 gives increasing verbosity.; /// The last argument 'script' allows to specify an alternative script to; /// be executed remotely to startup the session.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:12,Performance,load,loaded,12,"// List the loaded libraries",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:37,Usability,simpl,simple,37,"// strip-off leading blanks; // very simple minded pre-processor parsing, only works in case macro file; // starts with ""#ifndef __CINT__"". In that case everything till next; // ""#else"" or ""#endif"" will be skipped.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:127,Integrability,depend,dependent,127,"////////////////////////////////////////////////////////////////////////////////; /// Main application eventloop. Calls system dependent eventloop via gSystem.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:98,Availability,echo,echo,98,"////////////////////////////////////////////////////////////////////////////////; /// Set console echo mode:; ///; /// - mode = kTRUE - echo input symbols; /// - mode = kFALSE - noecho input symbols",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:136,Availability,echo,echo,136,"////////////////////////////////////////////////////////////////////////////////; /// Set console echo mode:; ///; /// - mode = kTRUE - echo input symbols; /// - mode = kFALSE - noecho input symbols",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:91,Availability,avail,available,91,"////////////////////////////////////////////////////////////////////////////////; /// Show available sessions",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:122,Availability,avail,available,122,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning the list of available applications",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAtt3D.cxx:132,Integrability,interface,interface,132,"////////////////////////////////////////////////////////////////////////////////; /// Set total size of this 3D object (used by X3D interface).",MatchSource.CODE_COMMENT,core/base/src/TAtt3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAtt3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttAxis.cxx:206,Performance,optimiz,optimized,206,"////////////////////////////////////////////////////////////////////////////////; /// Set the number of divisions for this axis.; ///; /// - if optim = kTRUE (default), the number of divisions will be; /// optimized around the specified value.; /// - if optim = kFALSE, or n < 0, the axis will be forced to use; /// exactly n divisions.; ///~~~ {.cpp}; /// n = n1 + 100*n2 + 10000*n3; ///~~~; /// Where n1 is the number of primary divisions,; /// n2 is the number of second order divisions and; /// n3 is the number of third order divisions.; ///; /// If the number of divisions is ""optimized"" (see above) n1, n2, n3 are; /// maximum values.; ///; /// Examples:; ///; /// - ndiv = 0: no tick marks.; /// - ndiv = 2: 2 divisions, one tick mark in the middle of the axis.; /// - ndiv = 510: 10 primary divisions, 5 secondary divisions.; /// - ndiv = -10: exactly 10 primary divisions.",MatchSource.CODE_COMMENT,core/base/src/TAttAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttAxis.cxx:583,Performance,optimiz,optimized,583,"////////////////////////////////////////////////////////////////////////////////; /// Set the number of divisions for this axis.; ///; /// - if optim = kTRUE (default), the number of divisions will be; /// optimized around the specified value.; /// - if optim = kFALSE, or n < 0, the axis will be forced to use; /// exactly n divisions.; ///~~~ {.cpp}; /// n = n1 + 100*n2 + 10000*n3; ///~~~; /// Where n1 is the number of primary divisions,; /// n2 is the number of second order divisions and; /// n3 is the number of third order divisions.; ///; /// If the number of divisions is ""optimized"" (see above) n1, n2, n3 are; /// maximum values.; ///; /// Examples:; ///; /// - ndiv = 0: no tick marks.; /// - ndiv = 2: 2 divisions, one tick mark in the middle of the axis.; /// - ndiv = 510: 10 primary divisions, 5 secondary divisions.; /// - ndiv = -10: exactly 10 primary divisions.",MatchSource.CODE_COMMENT,core/base/src/TAttAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate and prepare for incremental filling.",MatchSource.CODE_COMMENT,core/base/src/TAttBBox.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox.cxx:86,Testability,Assert,Assert,86,"////////////////////////////////////////////////////////////////////////////////; /// Assert extents of all sides of the bounding-box are at least epsilon.",MatchSource.CODE_COMMENT,core/base/src/TAttBBox.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox2D.cxx:123,Modifiability,inherit,inheriting,123,"/** \class TAttBBox2D; \ingroup Base; \ingroup GraphicsAtt. Abstract base class for elements drawn in the editor.; Classes inheriting from TAttBBox2D implementing the TAttBBox2D; virtual classes, and using TPad::ShowGuideLines in ExecuteEvent; will automatically get the guide lines drawn when moved in the pad.; All methods work with pixel coordinates.; */; ////////////////////////////////////////////////////////////////////////////////; // TAttBBox2D destructor.",MatchSource.CODE_COMMENT,core/base/src/TAttBBox2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox2D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox2D.cxx:271,Usability,guid,guide,271,"/** \class TAttBBox2D; \ingroup Base; \ingroup GraphicsAtt. Abstract base class for elements drawn in the editor.; Classes inheriting from TAttBBox2D implementing the TAttBBox2D; virtual classes, and using TPad::ShowGuideLines in ExecuteEvent; will automatically get the guide lines drawn when moved in the pad.; All methods work with pixel coordinates.; */; ////////////////////////////////////////////////////////////////////////////////; // TAttBBox2D destructor.",MatchSource.CODE_COMMENT,core/base/src/TAttBBox2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox2D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx:1174,Availability,avail,available,1174,". It holds all the fill area; attributes. ## Fill Area attributes; Fill Area attributes are:. - [Fill Area color](\ref ATTFILL1); - [Fill Area style](\ref ATTFILL2). \anchor ATTFILL1; ## Fill Area color; The fill area color is a color index (integer) pointing in the ROOT; color table.; The fill area color of any class inheriting from `TAttFill` can; be changed using the method `SetFillColor` and retrieved using the; method `GetFillColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetFillColorAlpha()`, allows to set a transparent color.; In the following example the fill color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetFillColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag; `OpenGL.CanvasPreferGL` is set to `1` in `$ROOTSYS/etc/system.rootrc`, or on Mac; with the Cocoa backend.; On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. ### The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the Color Wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception; Touching color chips have the same hue, but with different brightness and vividness. Colors of slightly different hues _clash_. If you intend to display; colors of the same hue together, you sh",MatchSource.CODE_COMMENT,core/base/src/TAttFill.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx:130,Modifiability,inherit,inheritance,130,"/** \class TAttFill; \ingroup Base; \ingroup GraphicsAtt. Fill Area Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the fill area; attributes. ## Fill Area attributes; Fill Area attributes are:. - [Fill Area color](\ref ATTFILL1); - [Fill Area style](\ref ATTFILL2). \anchor ATTFILL1; ## Fill Area color; The fill area color is a color index (integer) pointing in the ROOT; color table.; The fill area color of any class inheriting from `TAttFill` can; be changed using the method `SetFillColor` and retrieved using the; method `GetFillColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetFillColorAlpha()`, allows to set a transparent color.; In the following example the fill color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetFillColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag; `OpenGL.CanvasPreferGL` is set to `1` in `$ROOTSYS/etc/system.rootrc`, or on Mac; with the Cocoa backend.; On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. ### The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the Color Wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception; Touch",MatchSource.CODE_COMMENT,core/base/src/TAttFill.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx:508,Modifiability,inherit,inheriting,508,"/** \class TAttFill; \ingroup Base; \ingroup GraphicsAtt. Fill Area Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the fill area; attributes. ## Fill Area attributes; Fill Area attributes are:. - [Fill Area color](\ref ATTFILL1); - [Fill Area style](\ref ATTFILL2). \anchor ATTFILL1; ## Fill Area color; The fill area color is a color index (integer) pointing in the ROOT; color table.; The fill area color of any class inheriting from `TAttFill` can; be changed using the method `SetFillColor` and retrieved using the; method `GetFillColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetFillColorAlpha()`, allows to set a transparent color.; In the following example the fill color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetFillColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag; `OpenGL.CanvasPreferGL` is set to `1` in `$ROOTSYS/etc/system.rootrc`, or on Mac; with the Cocoa backend.; On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. ### The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the Color Wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception; Touch",MatchSource.CODE_COMMENT,core/base/src/TAttFill.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx:3160,Modifiability,inherit,inheriting,3160," from the same group. Each color chip is identified by a mnemonic (eg kYellow) and a number.; The keywords, kRed, kBlue, kYellow, kPink, etc are defined in the header file __Rtypes.h__; that is included in all ROOT other header files. We strongly recommend to use these keywords; in your code instead of hardcoded color numbers, eg:; ~~~ {.cpp}; myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);; ~~~. Begin_Macro; {; TColorWheel *w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; w->SetCanvas(cw);; w->Draw();; }; End_Macro. ### Special case forcing black&white output.; If the current style fill area color is set to 0, then ROOT will force; a black&white output for all objects with a fill area defined and independently; of the object fill style. \anchor ATTFILL2; ## Fill Area style; The fill area style defines the pattern used to fill a polygon.; The fill area style of any class inheriting from `TAttFill` can; be changed using the method `SetFillStyle` and retrieved using the; method `GetFillStyle`.; ### Conventions for fill styles:. - 0 : hollow; - 1001 : Solid; - 3000+pattern_number (see below); - For TPad only:. - 4000 :the window is transparent.; - 4000 to 4100 the window is 100% transparent to 100% opaque. The pad transparency is visible in binary outputs files like gif, jpg, png etc ..; but not in vector graphics output files like PS, PDF and SVG. This convention; (fill style > 4000) is kept for backward compatibility. It is better to use; the color transparency instead. pattern_number can have any value from 1 to 25 (see table), or any; value from 100 to 999. For the latest the numbering convention is the following:; ~~~ {.cpp}; pattern_number = ijk (FillStyle = 3ijk). i (1-9) : specify the space between each hatch; 1 = 1/2mm 9 = 6mm. j (0-9) : specify angle between 0 and 90 degrees; 0 = 0; 1 = 10; 2 = 20; 3 = 30; 4 = 45; 5 = Not drawn; 6 = 60; 7 = 70; 8 = 80; 9 = 90. k (0-9) : specify angle betw",MatchSource.CODE_COMMENT,core/base/src/TAttFill.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:1159,Availability,avail,available,1159,"istograms). It holds all the line attributes. ## Line attributes; Line attributes are:. - [Line Color](\ref ATTLINE1); - [Line Width](\ref ATTLINE2); - [Line Style](\ref ATTLINE3). \anchor ATTLINE1; ## Line Color; The line color is a color index (integer) pointing in the ROOT; color table.; The line color of any class inheriting from `TAttLine` can; be changed using the method `SetLineColor` and retrieved using the; method `GetLineColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetLineColorAlpha()`, allows to set a transparent color.; In the following example the line color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetLineColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \ancho",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:125,Modifiability,inherit,inheritance,125,"/** \class TAttLine; \ingroup Base; \ingroup GraphicsAtt. Line Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the line attributes. ## Line attributes; Line attributes are:. - [Line Color](\ref ATTLINE1); - [Line Width](\ref ATTLINE2); - [Line Style](\ref ATTLINE3). \anchor ATTLINE1; ## Line Color; The line color is a color index (integer) pointing in the ROOT; color table.; The line color of any class inheriting from `TAttLine` can; be changed using the method `SetLineColor` and retrieved using the; method `GetLineColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetLineColorAlpha()`, allows to set a transparent color.; In the following example the line color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetLineColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:493,Modifiability,inherit,inheriting,493,"/** \class TAttLine; \ingroup Base; \ingroup GraphicsAtt. Line Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the line attributes. ## Line attributes; Line attributes are:. - [Line Color](\ref ATTLINE1); - [Line Width](\ref ATTLINE2); - [Line Style](\ref ATTLINE3). \anchor ATTLINE1; ## Line Color; The line color is a color index (integer) pointing in the ROOT; color table.; The line color of any class inheriting from `TAttLine` can; be changed using the method `SetLineColor` and retrieved using the; method `GetLineColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetLineColorAlpha()`, allows to set a transparent color.; In the following example the line color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetLineColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:1684,Modifiability,inherit,inheriting,1684,"lors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetLineColorAlpha()`, allows to set a transparent color.; In the following example the line color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetLineColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \anchor ATTLINE3; ## Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from `TAttLine` can be changed using the method; `SetLineStyle` and retrieved using the method `GetLineStyle`. The first 10 line styles are predefined as shown on the following picture:. Begin_Macro; {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; lh->SetLineWidth(3);; t.Dr",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:2277,Modifiability,inherit,inheriting,2277,"e file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \anchor ATTLINE3; ## Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from `TAttLine` can be changed using the method; `SetLineStyle` and retrieved using the method `GetLineStyle`. The first 10 line styles are predefined as shown on the following picture:. Begin_Macro; {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; lh->SetLineWidth(3);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. Some line styles can be accessed via the following enum:. ~~~ {.cpp}; kSolid = 1; kDashed = 2; kDotted = 3; kDashDotted = 4; ~~~. Additional line styles can be defined using `TStyle::SetLineStyleString`.; For example the line style number 11 can be defined as follow:; ~~~ {.cpp}; gStyle->SetLineStyleString(11,""400 200"");; ~~~; Existing line styles (1 to 10) can be redefined using the same method.; */; ////////////////////////////////////////////////////////////////////////////////; /// AttLine default constructor.",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:2815,Security,access,accessed,2815,"e file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \anchor ATTLINE3; ## Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from `TAttLine` can be changed using the method; `SetLineStyle` and retrieved using the method `GetLineStyle`. The first 10 line styles are predefined as shown on the following picture:. Begin_Macro; {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; lh->SetLineWidth(3);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. Some line styles can be accessed via the following enum:. ~~~ {.cpp}; kSolid = 1; kDashed = 2; kDotted = 3; kDashDotted = 4; ~~~. Additional line styles can be defined using `TStyle::SetLineStyleString`.; For example the line style number 11 can be defined as follow:; ~~~ {.cpp}; gStyle->SetLineStyleString(11,""400 200"");; ~~~; Existing line styles (1 to 10) can be redefined using the same method.; */; ////////////////////////////////////////////////////////////////////////////////; /// AttLine default constructor.",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:1921,Testability,test,test,1921,"ine color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetLineColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \anchor ATTLINE3; ## Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from `TAttLine` can be changed using the method; `SetLineStyle` and retrieved using the method `GetLineStyle`. The first 10 line styles are predefined as shown on the following picture:. Begin_Macro; {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; lh->SetLineWidth(3);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. Some line styles can be accessed via the following enum:. ~~~ {.cpp}; kSolid = 1; kDashed = 2; kDotted = 3; kDashDotted ",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:2523,Testability,test,test,2523,"e file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \anchor ATTLINE3; ## Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from `TAttLine` can be changed using the method; `SetLineStyle` and retrieved using the method `GetLineStyle`. The first 10 line styles are predefined as shown on the following picture:. Begin_Macro; {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; lh->SetLineWidth(3);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. Some line styles can be accessed via the following enum:. ~~~ {.cpp}; kSolid = 1; kDashed = 2; kDotted = 3; kDashDotted = 4; ~~~. Additional line styles can be defined using `TStyle::SetLineStyleString`.; For example the line style number 11 can be defined as follow:; ~~~ {.cpp}; gStyle->SetLineStyleString(11,""400 200"");; ~~~; Existing line styles (1 to 10) can be redefined using the same method.; */; ////////////////////////////////////////////////////////////////////////////////; /// AttLine default constructor.",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:1239,Availability,avail,available,1239,"marker attributes are:. - [Marker color](\ref ATTMARKER1); - [Marker style](\ref ATTMARKER2); - [Marker line width](\ref ATTMARKER21); - [Marker size](\ref M3). \anchor ATTMARKER1; ## Marker color; The marker color is a color index (integer) pointing in the ROOT color; table.; The marker color of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerColor` and retrieved using the; method `GetMarkerColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency. `SetMarkerColorAlpha()`, allows to set a transparent color.; In the following example the marker color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetMarkerColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTMARKER2; ## Marker style. The Marker style defines the markers' shape.; The marker style of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:2510,Availability,down,down,2510,"changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cross kFullCross; 35 open diamond cross kOpenDiamondCross; 36 open square diagonal kOpenSquareDiagonal; 37 open three triangle kOpenThreeTriangles; 38 octagon with cross kOctagonCross; 39 full three triangles kFullThreeTriangles; 40 open four triangleX kOpenFourTrianglesX; 41 full four triangleX kFullFourTrianglesX; 42 open double diamond kOpenDoubleDiamond; 43 full double diamond kFullDoubleDiamond; 44 open four triangle+ kOpenFourTrianglesPlus; 45 full four triangle+ kFullFourTrianglesPlus; 46 open cross X kOpenCrossX; 47 full cross X kFullCrossX; 48 four squares X kFourSquaresX; 49 four squares+ kFourSquaresPlus; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker types"",0,0,500,200);; TMarker marker;; marker.DisplayMarkerTypes();; }; End_Macro. \warning Non-symmetric symbols should be used carefully. See markerwarning.C. \anchor ATTMARKER21; ### Marker line width. The line width of a marker is not actually a marker attribute since it does; only apply to open marker sy",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:2754,Availability,down,down,2754,"changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cross kFullCross; 35 open diamond cross kOpenDiamondCross; 36 open square diagonal kOpenSquareDiagonal; 37 open three triangle kOpenThreeTriangles; 38 octagon with cross kOctagonCross; 39 full three triangles kFullThreeTriangles; 40 open four triangleX kOpenFourTrianglesX; 41 full four triangleX kFullFourTrianglesX; 42 open double diamond kOpenDoubleDiamond; 43 full double diamond kFullDoubleDiamond; 44 open four triangle+ kOpenFourTrianglesPlus; 45 full four triangle+ kFullFourTrianglesPlus; 46 open cross X kOpenCrossX; 47 full cross X kFullCrossX; 48 four squares X kFourSquaresX; 49 four squares+ kFourSquaresPlus; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker types"",0,0,500,200);; TMarker marker;; marker.DisplayMarkerTypes();; }; End_Macro. \warning Non-symmetric symbols should be used carefully. See markerwarning.C. \anchor ATTMARKER21; ### Marker line width. The line width of a marker is not actually a marker attribute since it does; only apply to open marker sy",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:129,Modifiability,inherit,inheritance,129,"/** \class TAttMarker; \ingroup Base; \ingroup GraphicsAtt. Marker Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the markers; attributes. ## Marker attributes; The marker attributes are:. - [Marker color](\ref ATTMARKER1); - [Marker style](\ref ATTMARKER2); - [Marker line width](\ref ATTMARKER21); - [Marker size](\ref M3). \anchor ATTMARKER1; ## Marker color; The marker color is a color index (integer) pointing in the ROOT color; table.; The marker color of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerColor` and retrieved using the; method `GetMarkerColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency. `SetMarkerColorAlpha()`, allows to set a transparent color.; In the following example the marker color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetMarkerColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTMARKER2; ## Marker style. The Marker style defines the markers' shape.; The marker style of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker ",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:561,Modifiability,inherit,inheriting,561,"/** \class TAttMarker; \ingroup Base; \ingroup GraphicsAtt. Marker Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the markers; attributes. ## Marker attributes; The marker attributes are:. - [Marker color](\ref ATTMARKER1); - [Marker style](\ref ATTMARKER2); - [Marker line width](\ref ATTMARKER21); - [Marker size](\ref M3). \anchor ATTMARKER1; ## Marker color; The marker color is a color index (integer) pointing in the ROOT color; table.; The marker color of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerColor` and retrieved using the; method `GetMarkerColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency. `SetMarkerColorAlpha()`, allows to set a transparent color.; In the following example the marker color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetMarkerColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTMARKER2; ## Marker style. The Marker style defines the markers' shape.; The marker style of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker ",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:1771,Modifiability,inherit,inheriting,1771,"00);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency. `SetMarkerColorAlpha()`, allows to set a transparent color.; In the following example the marker color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetMarkerColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTMARKER2; ## Marker style. The Marker style defines the markers' shape.; The marker style of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cro",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:4717,Modifiability,inherit,inheriting,4717,"since it does; only apply to open marker symbols and marker symbols consisting of lines. All; of these marker symbols are redefined with thicker lines by style numbers; starting from 50:. ~~~ {.cpp}; Marker numbers Line width; 50 - 67 2; 68 - 85 3; 86 - 103 4; 104 - 121 5; ...; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker line widths"",0,0,600,266);; TMarker marker;; marker.DisplayMarkerLineWidths();; }; End_Macro. \anchor M3; ## Marker size. Various marker sizes are shown in the figure below. The default marker size=1; is shown in the top left corner. Marker sizes smaller than 1 can be; specified. The marker size does not refer to any coordinate systems, it is an; absolute value. Therefore the marker size is not affected by any change; in TPad's scale. A marker size equal to 1 correspond to 8 pixels.; That is, a square marker with size 1 will be drawn with a side equal to 8; pixels on the screen. The marker size of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerSize` and retrieved using the; method `GetMarkerSize`. Begin_Macro; {; auto c = new TCanvas(""c"",""Marker sizes"",0,0,500,200);; TMarker marker;; marker.SetMarkerStyle(3);; Double_t x = 0;; Double_t dx = 1/6.0;; for (Int_t i=1; i<6; i++) {; x += dx;; marker.SetMarkerSize(i*0.2); marker.DrawMarker(x,.165);; marker.SetMarkerSize(i*0.8); marker.DrawMarker(x,.495);; marker.SetMarkerSize(i*1.0); marker.DrawMarker(x,.835);; }; }; End_Macro. Note that the marker styles number 1 6 and 7 (the dots), cannot be scaled. They; are meant to be very fast to draw and are always drawn with the same number of; pixels; therefore `SetMarkerSize` does not apply on them. To have a; ""scalable dot"" a filled circle should be used instead, i.e. the marker style; number 20. By default (if `SetMarkerStyle` is not specified), the marker; style used is 1. That's the most common one to draw scatter plots.; */; ////////////////////////////////////////////////////////////////////////////////; /// ",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:2344,Performance,scalab,scalable,2344,"changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cross kFullCross; 35 open diamond cross kOpenDiamondCross; 36 open square diagonal kOpenSquareDiagonal; 37 open three triangle kOpenThreeTriangles; 38 octagon with cross kOctagonCross; 39 full three triangles kFullThreeTriangles; 40 open four triangleX kOpenFourTrianglesX; 41 full four triangleX kFullFourTrianglesX; 42 open double diamond kOpenDoubleDiamond; 43 full double diamond kFullDoubleDiamond; 44 open four triangle+ kOpenFourTrianglesPlus; 45 full four triangle+ kFullFourTrianglesPlus; 46 open cross X kOpenCrossX; 47 full cross X kFullCrossX; 48 four squares X kFourSquaresX; 49 four squares+ kFourSquaresPlus; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker types"",0,0,500,200);; TMarker marker;; marker.DisplayMarkerTypes();; }; End_Macro. \warning Non-symmetric symbols should be used carefully. See markerwarning.C. \anchor ATTMARKER21; ### Marker line width. The line width of a marker is not actually a marker attribute since it does; only apply to open marker sy",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:2386,Performance,scalab,scalable,2386,"changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cross kFullCross; 35 open diamond cross kOpenDiamondCross; 36 open square diagonal kOpenSquareDiagonal; 37 open three triangle kOpenThreeTriangles; 38 octagon with cross kOctagonCross; 39 full three triangles kFullThreeTriangles; 40 open four triangleX kOpenFourTrianglesX; 41 full four triangleX kFullFourTrianglesX; 42 open double diamond kOpenDoubleDiamond; 43 full double diamond kFullDoubleDiamond; 44 open four triangle+ kOpenFourTrianglesPlus; 45 full four triangle+ kFullFourTrianglesPlus; 46 open cross X kOpenCrossX; 47 full cross X kFullCrossX; 48 four squares X kFourSquaresX; 49 four squares+ kFourSquaresPlus; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker types"",0,0,500,200);; TMarker marker;; marker.DisplayMarkerTypes();; }; End_Macro. \warning Non-symmetric symbols should be used carefully. See markerwarning.C. \anchor ATTMARKER21; ### Marker line width. The line width of a marker is not actually a marker attribute since it does; only apply to open marker sy",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:5456,Performance,scalab,scalable,5456,"e marker symbols are redefined with thicker lines by style numbers; starting from 50:. ~~~ {.cpp}; Marker numbers Line width; 50 - 67 2; 68 - 85 3; 86 - 103 4; 104 - 121 5; ...; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker line widths"",0,0,600,266);; TMarker marker;; marker.DisplayMarkerLineWidths();; }; End_Macro. \anchor M3; ## Marker size. Various marker sizes are shown in the figure below. The default marker size=1; is shown in the top left corner. Marker sizes smaller than 1 can be; specified. The marker size does not refer to any coordinate systems, it is an; absolute value. Therefore the marker size is not affected by any change; in TPad's scale. A marker size equal to 1 correspond to 8 pixels.; That is, a square marker with size 1 will be drawn with a side equal to 8; pixels on the screen. The marker size of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerSize` and retrieved using the; method `GetMarkerSize`. Begin_Macro; {; auto c = new TCanvas(""c"",""Marker sizes"",0,0,500,200);; TMarker marker;; marker.SetMarkerStyle(3);; Double_t x = 0;; Double_t dx = 1/6.0;; for (Int_t i=1; i<6; i++) {; x += dx;; marker.SetMarkerSize(i*0.2); marker.DrawMarker(x,.165);; marker.SetMarkerSize(i*0.8); marker.DrawMarker(x,.495);; marker.SetMarkerSize(i*1.0); marker.DrawMarker(x,.835);; }; }; End_Macro. Note that the marker styles number 1 6 and 7 (the dots), cannot be scaled. They; are meant to be very fast to draw and are always drawn with the same number of; pixels; therefore `SetMarkerSize` does not apply on them. To have a; ""scalable dot"" a filled circle should be used instead, i.e. the marker style; number 20. By default (if `SetMarkerStyle` is not specified), the marker; style used is 1. That's the most common one to draw scatter plots.; */; ////////////////////////////////////////////////////////////////////////////////; /// TAttMarker default constructor.; ///; /// Default text attributes are taking from the current style.",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:2123,Security,access,accessed,2123,"parency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetMarkerColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTMARKER2; ## Marker style. The Marker style defines the markers' shape.; The marker style of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cross kFullCross; 35 open diamond cross kOpenDiamondCross; 36 open square diagonal kOpenSquareDiagonal; 37 open three triangle kOpenThreeTriangles; 38 octagon with cross kOctagonCross; 39 full three triangles kFullThreeTriangles; 40 open four triangleX kOpenFou",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:1446,Availability,avail,available,1446," quality and speed](\ref ATTTEXT51); - [How to use True Type Fonts](\ref ATTTEXT52); - [List of the currently supported fonts](\ref ATTTEXT53). \anchor ATTTEXT1; ## Text Alignment. The text alignment is an integer number (`align`) allowing to control; the horizontal and vertical position of the text string with respect; to the text position.; The text alignment of any class inheriting from `TAttText` can; be changed using the method `SetTextAlign` and retrieved using the; method `GetTextAlign`. ~~~ {.cpp}; align = 10*HorizontalAlign + VerticalAlign; ~~~. For horizontal alignment the following convention applies:. ~~~ {.cpp}; 1=left adjusted, 2=centered, 3=right adjusted; ~~~. For vertical alignment the following convention applies:. ~~~ {.cpp}; 1=bottom adjusted, 2=centered, 3=top adjusted; ~~~. For example:. ~~~ {.cpp}; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; ~~~. Begin_Macro(source); textalign.C; End_Macro. Mnemonic constants are available:. ~~~ {.cpp}; kHAlignLeft = 10, kHAlignCenter = 20, kHAlignRight = 30,; kVAlignBottom = 1, kVAlignCenter = 2, kVAlignTop = 3; ~~~. They allow to write:. ~~~ {.cpp}; object->SetTextAlign(kHAlignLeft+kVAlignTop);; ~~~. \anchor ATTTEXT2; ## Text Angle. Text angle in degrees.; The text angle of any class inheriting from `TAttText` can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Color. The text color is a color index (integer) pointing in the ROOT; color table.; The text color of any class inheriting from `TAttText` can; be changed using the method `SetTextColor` and retrieved using the; method `GetTextColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; ",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:2770,Availability,avail,available,2770," can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Color. The text color is a color index (integer) pointing in the ROOT; color table.; The text color of any class inheriting from `TAttText` can; be changed using the method `SetTextColor` and retrieved using the; method `GetTextColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetTextColorAlpha()`, allows to set a transparent color.; In the following example the text color of the text `text`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; text->SetTextColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTTEXT4; ## Text Size. If the text precision (see next paragraph) is smaller than 3, the text; size (`textsize`) is a fraction of the current pad size. Therefore the; same `textsize` value can generate text outputs with different absolute; sizes in two different pads.; The text size in pixels (`charheight`) is computed the following way:. ~~~ {.cpp}; pad_width = gPad->XtoPixel(gPad->GetX2());; pad_height = gPad->YtoPixel(gPad->GetY1());; if (pad_width < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, ",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:6686,Availability,avail,available,6686,"t and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the following line; in the `.rootrc` file:. ~~~ {.cpp}; Unix.*.Root.UseTTFonts: false; ~~~. \anchor ATTTEXT53; ### List of the currently supported fonts. ~~~ {.cpp}; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Times-Italic""; 2 : ""Free Serif Bold"" ""Times-Bold""; 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 4 : ""Tex Gyre Regular"" ""Helvetica""; 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 8 : ""Free Mono"" ""Courier""; 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 10 : ""Free Mono Bold"" ""Courier-Bold""; 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOblique""; 12 : ""Symbol"" ""Symbol""; 13 : ""Free Serif"" ""Times-Roman""; 14 : ""Wingdings"" ""ZapfDingbats""; ~~~. The PostScript and PDF backends use the original PostScript-defined 13 fonts' styles; forming four type families (Courier, Helvetica, Times, Symbol) as listed in the; ""Core Font Set"" section of [this page](https://en.wikipedia.org/wiki/PostScript_fonts).; These fonts are always available and do not need to be loaded in the PS or PDF files; allowing to keep the files' sizes small. On screen, text is rendered using free TTF fonts similar to the PDF ones. The corresponding; font files are coming with the ROOT distribution in `$ROOTSYS/fonts/Free*`. Begin_Macro; fonts.C; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// AttText default constructor.; ///; /// Default text attributes are taken from the current style.",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:3806,Integrability,depend,depend,3806,"orms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTTEXT4; ## Text Size. If the text precision (see next paragraph) is smaller than 3, the text; size (`textsize`) is a fraction of the current pad size. Therefore the; same `textsize` value can generate text outputs with different absolute; sizes in two different pads.; The text size in pixels (`charheight`) is computed the following way:. ~~~ {.cpp}; pad_width = gPad->XtoPixel(gPad->GetX2());; pad_height = gPad->YtoPixel(gPad->GetY1());; if (pad_width < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given `textsize` value always generates the same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is give",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:5322,Integrability,depend,depending,5322,"d Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the following line; in the `.rootrc` file:. ~~~ {.cpp}; Unix.*.Root.UseTTFonts: false; ~~~. \anchor ATTTEXT53; ### List of the currently supported fonts. ~~~ {.cpp}; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Times-Italic""; 2 : ""Free Serif Bold"" ""Times-Bold""; 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 4 : ""Tex Gyre Regular"" ""Helvetica""; 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 8 : ""Free Mono"" ""Courier""; 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 10 : ""Free Mono Bold"" ""Courier-Bold""; 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOblique""; 12 : ""Symbol",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:125,Modifiability,inherit,inheritance,125,"/** \class TAttText; \ingroup Base; \ingroup GraphicsAtt. Text Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the text attributes. ## Text attributes; Text attributes are:. - [Text Alignment](\ref ATTTEXT1); - [Text Angle](\ref ATTTEXT2); - [Text Color](\ref ATTTEXT3); - [Text Size](\ref ATTTEXT4); - [Text Font and Precision](\ref ATTTEXT5); - [Font quality and speed](\ref ATTTEXT51); - [How to use True Type Fonts](\ref ATTTEXT52); - [List of the currently supported fonts](\ref ATTTEXT53). \anchor ATTTEXT1; ## Text Alignment. The text alignment is an integer number (`align`) allowing to control; the horizontal and vertical position of the text string with respect; to the text position.; The text alignment of any class inheriting from `TAttText` can; be changed using the method `SetTextAlign` and retrieved using the; method `GetTextAlign`. ~~~ {.cpp}; align = 10*HorizontalAlign + VerticalAlign; ~~~. For horizontal alignment the following convention applies:. ~~~ {.cpp}; 1=left adjusted, 2=centered, 3=right adjusted; ~~~. For vertical alignment the following convention applies:. ~~~ {.cpp}; 1=bottom adjusted, 2=centered, 3=top adjusted; ~~~. For example:. ~~~ {.cpp}; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; ~~~. Begin_Macro(source); textalign.C; End_Macro. Mnemonic constants are available:. ~~~ {.cpp}; kHAlignLeft = 10, kHAlignCenter = 20, kHAlignRight = 30,; kVAlignBottom = 1, kVAlignCenter = 2, kVAlignTop = 3; ~~~. They allow to write:. ~~~ {.cpp}; object->SetTextAlign(kHAlignLeft+kVAlignTop);; ~~~. \anchor ATTTEXT2; ## Text Angle. Text angle in degrees.; The text angle of any class inheriting from `TAttText` can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Col",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:816,Modifiability,inherit,inheriting,816,"/** \class TAttText; \ingroup Base; \ingroup GraphicsAtt. Text Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the text attributes. ## Text attributes; Text attributes are:. - [Text Alignment](\ref ATTTEXT1); - [Text Angle](\ref ATTTEXT2); - [Text Color](\ref ATTTEXT3); - [Text Size](\ref ATTTEXT4); - [Text Font and Precision](\ref ATTTEXT5); - [Font quality and speed](\ref ATTTEXT51); - [How to use True Type Fonts](\ref ATTTEXT52); - [List of the currently supported fonts](\ref ATTTEXT53). \anchor ATTTEXT1; ## Text Alignment. The text alignment is an integer number (`align`) allowing to control; the horizontal and vertical position of the text string with respect; to the text position.; The text alignment of any class inheriting from `TAttText` can; be changed using the method `SetTextAlign` and retrieved using the; method `GetTextAlign`. ~~~ {.cpp}; align = 10*HorizontalAlign + VerticalAlign; ~~~. For horizontal alignment the following convention applies:. ~~~ {.cpp}; 1=left adjusted, 2=centered, 3=right adjusted; ~~~. For vertical alignment the following convention applies:. ~~~ {.cpp}; 1=bottom adjusted, 2=centered, 3=top adjusted; ~~~. For example:. ~~~ {.cpp}; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; ~~~. Begin_Macro(source); textalign.C; End_Macro. Mnemonic constants are available:. ~~~ {.cpp}; kHAlignLeft = 10, kHAlignCenter = 20, kHAlignRight = 30,; kVAlignBottom = 1, kVAlignCenter = 2, kVAlignTop = 3; ~~~. They allow to write:. ~~~ {.cpp}; object->SetTextAlign(kHAlignLeft+kVAlignTop);; ~~~. \anchor ATTTEXT2; ## Text Angle. Text angle in degrees.; The text angle of any class inheriting from `TAttText` can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Col",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:1758,Modifiability,inherit,inheriting,1758,"f any class inheriting from `TAttText` can; be changed using the method `SetTextAlign` and retrieved using the; method `GetTextAlign`. ~~~ {.cpp}; align = 10*HorizontalAlign + VerticalAlign; ~~~. For horizontal alignment the following convention applies:. ~~~ {.cpp}; 1=left adjusted, 2=centered, 3=right adjusted; ~~~. For vertical alignment the following convention applies:. ~~~ {.cpp}; 1=bottom adjusted, 2=centered, 3=top adjusted; ~~~. For example:. ~~~ {.cpp}; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; ~~~. Begin_Macro(source); textalign.C; End_Macro. Mnemonic constants are available:. ~~~ {.cpp}; kHAlignLeft = 10, kHAlignCenter = 20, kHAlignRight = 30,; kVAlignBottom = 1, kVAlignCenter = 2, kVAlignTop = 3; ~~~. They allow to write:. ~~~ {.cpp}; object->SetTextAlign(kHAlignLeft+kVAlignTop);; ~~~. \anchor ATTTEXT2; ## Text Angle. Text angle in degrees.; The text angle of any class inheriting from `TAttText` can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Color. The text color is a color index (integer) pointing in the ROOT; color table.; The text color of any class inheriting from `TAttText` can; be changed using the method `SetTextColor` and retrieved using the; method `GetTextColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetTextColorAlpha()`, allows to set a transparent color.; In the following example the text color of the text `text`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; text->SetTextColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when th",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:2111,Modifiability,inherit,inheriting,2111,"ing convention applies:. ~~~ {.cpp}; 1=bottom adjusted, 2=centered, 3=top adjusted; ~~~. For example:. ~~~ {.cpp}; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; ~~~. Begin_Macro(source); textalign.C; End_Macro. Mnemonic constants are available:. ~~~ {.cpp}; kHAlignLeft = 10, kHAlignCenter = 20, kHAlignRight = 30,; kVAlignBottom = 1, kVAlignCenter = 2, kVAlignTop = 3; ~~~. They allow to write:. ~~~ {.cpp}; object->SetTextAlign(kHAlignLeft+kVAlignTop);; ~~~. \anchor ATTTEXT2; ## Text Angle. Text angle in degrees.; The text angle of any class inheriting from `TAttText` can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Color. The text color is a color index (integer) pointing in the ROOT; color table.; The text color of any class inheriting from `TAttText` can; be changed using the method `SetTextColor` and retrieved using the; method `GetTextColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetTextColorAlpha()`, allows to set a transparent color.; In the following example the text color of the text `text`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; text->SetTextColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, the",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:4169,Modifiability,inherit,inheriting,4169,"Size. If the text precision (see next paragraph) is smaller than 3, the text; size (`textsize`) is a fraction of the current pad size. Therefore the; same `textsize` value can generate text outputs with different absolute; sizes in two different pads.; The text size in pixels (`charheight`) is computed the following way:. ~~~ {.cpp}; pad_width = gPad->XtoPixel(gPad->GetX2());; pad_height = gPad->YtoPixel(gPad->GetY1());; if (pad_width < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given `textsize` value always generates the same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their siz",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:4846,Modifiability,inherit,inheriting,4846,"same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the following line; in the `.rootrc` file:. ~~~ {.cpp}; Unix.*.Root.UseTTFonts: false; ~~~. \anchor ATTTEXT53; ### List of the currently supported fonts. ~~~ {.cpp}; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Tim",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:4609,Performance,scalab,scalable,4609,"h < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given `textsize` value always generates the same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the f",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:4678,Performance,scalab,scalable,4678,"h < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given `textsize` value always generates the same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the f",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:4735,Performance,scalab,scalable,4735,"h < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given `textsize` value always generates the same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the f",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:5430,Performance,scalab,scalable,5430,"}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the following line; in the `.rootrc` file:. ~~~ {.cpp}; Unix.*.Root.UseTTFonts: false; ~~~. \anchor ATTTEXT53; ### List of the currently supported fonts. ~~~ {.cpp}; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Times-Italic""; 2 : ""Free Serif Bold"" ""Times-Bold""; 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 4 : ""Tex Gyre Regular"" ""Helvetica""; 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 8 : ""Free Mono"" ""Courier""; 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 10 : ""Free Mono Bold"" ""Courier-Bold""; 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOblique""; 12 : ""Symbol"" ""Symbol""; 13 : ""Free Serif"" ""Times-Roman""; 14 : ""Wingdings"" ""ZapfDingbats""; ~~~. The PostScri",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:6718,Performance,load,loaded,6718,"t and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the following line; in the `.rootrc` file:. ~~~ {.cpp}; Unix.*.Root.UseTTFonts: false; ~~~. \anchor ATTTEXT53; ### List of the currently supported fonts. ~~~ {.cpp}; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Times-Italic""; 2 : ""Free Serif Bold"" ""Times-Bold""; 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 4 : ""Tex Gyre Regular"" ""Helvetica""; 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 8 : ""Free Mono"" ""Courier""; 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 10 : ""Free Mono Bold"" ""Courier-Bold""; 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOblique""; 12 : ""Symbol"" ""Symbol""; 13 : ""Free Serif"" ""Times-Roman""; 14 : ""Wingdings"" ""ZapfDingbats""; ~~~. The PostScript and PDF backends use the original PostScript-defined 13 fonts' styles; forming four type families (Courier, Helvetica, Times, Symbol) as listed in the; ""Core Font Set"" section of [this page](https://en.wikipedia.org/wiki/PostScript_fonts).; These fonts are always available and do not need to be loaded in the PS or PDF files; allowing to keep the files' sizes small. On screen, text is rendered using free TTF fonts similar to the PDF ones. The corresponding; font files are coming with the ROOT distribution in `$ROOTSYS/fonts/Free*`. Begin_Macro; fonts.C; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// AttText default constructor.; ///; /// Default text attributes are taken from the current style.",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx:540,Integrability,message,messages,540,"// @(#)root/base:$Id$; // Author: Gerardo Ganis + Fons Rademakers 15/5/2009; /*************************************************************************; * Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBase64; \ingroup Base. This code implements the Base64 encoding and decoding. Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages.; */",MatchSource.CODE_COMMENT,core/base/src/TBase64.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx:587,Integrability,protocol,protocols,587,"// @(#)root/base:$Id$; // Author: Gerardo Ganis + Fons Rademakers 15/5/2009; /*************************************************************************; * Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBase64; \ingroup Base. This code implements the Base64 encoding and decoding. Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages.; */",MatchSource.CODE_COMMENT,core/base/src/TBase64.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx:629,Integrability,message,messages,629,"// @(#)root/base:$Id$; // Author: Gerardo Ganis + Fons Rademakers 15/5/2009; /*************************************************************************; * Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBase64; \ingroup Base. This code implements the Base64 encoding and decoding. Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages.; */",MatchSource.CODE_COMMENT,core/base/src/TBase64.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx:571,Security,authenticat,authentication,571,"// @(#)root/base:$Id$; // Author: Gerardo Ganis + Fons Rademakers 15/5/2009; /*************************************************************************; * Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBase64; \ingroup Base. This code implements the Base64 encoding and decoding. Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages.; */",MatchSource.CODE_COMMENT,core/base/src/TBase64.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:75,Testability,benchmark,benchmarking,75,"/** \class TBenchmark; \ingroup Base. This class is a ROOT utility to help benchmarking applications; */; ////////////////////////////////////////////////////////////////////////////////; /// Benchmark default constructor",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:192,Testability,Benchmark,Benchmark,192,"/** \class TBenchmark; \ingroup Base. This class is a ROOT utility to help benchmarking applications; */; ////////////////////////////////////////////////////////////////////////////////; /// Benchmark default constructor",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:86,Testability,Benchmark,Benchmark,86,"////////////////////////////////////////////////////////////////////////////////; /// Benchmark destructor.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:103,Testability,Benchmark,Benchmark,103,"////////////////////////////////////////////////////////////////////////////////; /// Returns index of Benchmark name.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:111,Testability,Benchmark,Benchmark,111,"////////////////////////////////////////////////////////////////////////////////; /// Returns Cpu time used by Benchmark name.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:111,Testability,Benchmark,Benchmark,111,"////////////////////////////////////////////////////////////////////////////////; /// Returns Realtime used by Benchmark name.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:107,Testability,Benchmark,Benchmark,107,"////////////////////////////////////////////////////////////////////////////////; /// Prints parameters of Benchmark name.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:96,Testability,Benchmark,Benchmarks,96,"////////////////////////////////////////////////////////////////////////////////; /// Reset all Benchmarks",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:92,Testability,Benchmark,Benchmark,92,"////////////////////////////////////////////////////////////////////////////////; /// Stops Benchmark name and Prints results",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:93,Testability,Benchmark,Benchmark,93,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:215,Testability,benchmark,benchmark,215,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:253,Testability,benchmark,benchmarks,253,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:270,Testability,Benchmark,Benchmark,270,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:416,Testability,benchmark,benchmark,416,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:481,Testability,benchmark,benchmark,481,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:534,Testability,benchmark,benchmarks,534,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:504,Usability,resume,resume,504,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:16,Testability,benchmark,benchmark,16,"// define a new benchmark to Start",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:23,Testability,benchmark,benchmark,23,"// Resume the existing benchmark",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:3,Usability,Resume,Resume,3,"// Resume the existing benchmark",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:97,Testability,Benchmark,Benchmark,97,"////////////////////////////////////////////////////////////////////////////////; /// Terminates Benchmark with specified name.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:110,Testability,benchmark,benchmarks,110,"////////////////////////////////////////////////////////////////////////////////; /// Prints a summary of all benchmarks.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:62,Safety,avoid,avoid,62,"/// Default streamer implementation used by ClassDefInline to avoid; /// requirement to include TBuffer.h",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:500,Availability,error,error,500,"////////////////////////////////////////////////////////////////////////////////; /// Create an I/O buffer object. Mode should be either TBuffer::kRead or; /// TBuffer::kWrite. By default the I/O buffer has a size of; /// TBuffer::kInitialSize (1024) bytes. An external buffer can be passed; /// to TBuffer via the buf argument. By default this buffer will be adopted; /// unless adopt is false.; ///; /// If the new buffer is _not_ adopted and no memory allocation routine; /// is provided, a Fatal error will be issued if the Buffer attempts to; /// expand.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:466,Integrability,rout,routine,466,"////////////////////////////////////////////////////////////////////////////////; /// Create an I/O buffer object. Mode should be either TBuffer::kRead or; /// TBuffer::kWrite. By default the I/O buffer has a size of; /// TBuffer::kInitialSize (1024) bytes. An external buffer can be passed; /// to TBuffer via the buf argument. By default this buffer will be adopted; /// unless adopt is false.; ///; /// If the new buffer is _not_ adopted and no memory allocation routine; /// is provided, a Fatal error will be issued if the Buffer attempts to; /// expand.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:271,Safety,avoid,avoiding,271,"////////////////////////////////////////////////////////////////////////////////; /// Automatically calculate a new size and expand the buffer to fit at least size_needed.; /// The goals is to minimize the number of memory allocation and the memory allocation; /// which avoiding too much memory wastage.; ///; /// If the size_needed is larger than the current size, the policy; /// is to expand to double the current size or the size_needed which ever is largest.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:580,Availability,error,error,580,"////////////////////////////////////////////////////////////////////////////////; /// Sets a new buffer in an existing TBuffer object. If newsiz=0 then the; /// new buffer is expected to have the same size as the previous buffer.; /// The current buffer position is reset to the start of the buffer.; /// If the TBuffer owned the previous buffer, it will be deleted prior; /// to accepting the new buffer. By default the new buffer will be; /// adopted unless adopt is false.; ///; /// If the new buffer is _not_ adopted and no memory allocation routine; /// is provided, a Fatal error will be issued if the Buffer attempts to; /// expand.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:546,Integrability,rout,routine,546,"////////////////////////////////////////////////////////////////////////////////; /// Sets a new buffer in an existing TBuffer object. If newsiz=0 then the; /// new buffer is expected to have the same size as the previous buffer.; /// The current buffer position is reset to the start of the buffer.; /// If the TBuffer owned the previous buffer, it will be deleted prior; /// to accepting the new buffer. By default the new buffer will be; /// adopted unless adopt is false.; ///; /// If the new buffer is _not_ adopted and no memory allocation routine; /// is provided, a Fatal error will be issued if the Buffer attempts to; /// expand.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:393,Availability,down,down,393,"////////////////////////////////////////////////////////////////////////////////; /// Expand (or shrink) the I/O buffer to newsize bytes.; /// If copy is true (the default), the existing content of the; /// buffer is preserved, otherwise the buffer is returned zero-ed out.; ///; /// In order to avoid losing data, if the current length is greater than; /// the requested size, we only shrink down to the current length.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:296,Safety,avoid,avoid,296,"////////////////////////////////////////////////////////////////////////////////; /// Expand (or shrink) the I/O buffer to newsize bytes.; /// If copy is true (the default), the existing content of the; /// buffer is preserved, otherwise the buffer is returned zero-ed out.; ///; /// In order to avoid losing data, if the current length is greater than; /// the requested size, we only shrink down to the current length.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:55,Deployability,release,release,55,"// We had reserved space for the free block count,; // release it,",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:102,Performance,cache,cache,102,"////////////////////////////////////////////////////////////////////////////////; /// Push a new data cache area onto the list of area to be used for; /// temporarily store 'missing' data members.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:112,Performance,cache,cache,112,"////////////////////////////////////////////////////////////////////////////////; /// Return the 'current' data cache area from the list of area to be used for; /// temporarily store 'missing' data members.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:120,Performance,cache,cache,120,"////////////////////////////////////////////////////////////////////////////////; /// Pop and Return the 'current' data cache area from the list of area to be used for; /// temporarily store 'missing' data members.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:8155,Energy Efficiency,efficient,efficient,8155,"ept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ### Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:203,Integrability,interface,interface,203,"/** \class TBuffer3D; \ingroup Base. Generic 3D primitive description class.; See TBuffer3DTypes for producer classes. ### Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNo",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5553,Integrability,interface,interface,5553,"n. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be ",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:563,Performance,perform,performance,563,"/** \class TBuffer3D; \ingroup Base. Generic 3D primitive description class.; See TBuffer3DTypes for producer classes. ### Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNo",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:1404,Performance,perform,performance,1404,"f points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNone. You must; fill the buffer and mark these sections valid, and pass the buffer again. A; typical code snippet would be:. ~~~ {.cpp}; TBuffer3DSphere sphereBuffer;; // Fill out kCore...; // Fill out kBoundingBox...; // Fill out kShapeSpecific for TBuffer3DSphere; // Try first add to viewer; Int_t reqSections = viewer-&gt;AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqS",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5171,Performance,cache,cached,5171," box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be ",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5269,Performance,perform,perform,5269,"penGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not a",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5325,Performance,perform,performance,5325,"penGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not a",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:6427,Performance,cache,cached,6427,"t be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to;",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:8177,Performance,cache,cache,8177,"ept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ### Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:7601,Safety,detect,detect,7601,"o be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descende",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:943,Testability,test,test,943,"/** \class TBuffer3D; \ingroup Base. Generic 3D primitive description class.; See TBuffer3DTypes for producer classes. ### Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNo",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:4544,Testability,Log,Logical,4544,"to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the inte",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:4736,Testability,log,logical,4736," need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaste",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:4923,Testability,log,logical,4923,"ce function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical obje",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5045,Testability,log,logical,5045,"contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5075,Testability,log,logical,5075,"contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5390,Testability,log,logical,5390,"ain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .;",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5779,Testability,log,logical,5779,"number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends pot",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5856,Testability,log,logical,5856,"number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends pot",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:7030,Testability,log,logical,7030,"ch can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSect",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:7929,Testability,log,logical,7929,"ept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ### Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:8188,Testability,log,logical,8188,"ept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ### Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:887,Usability,Clear,ClearSectionsValid,887,"/** \class TBuffer3D; \ingroup Base. Generic 3D primitive description class.; See TBuffer3DTypes for producer classes. ### Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNo",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:952,Usability,clear,clear,952,"/** \class TBuffer3D; \ingroup Base. Generic 3D primitive description class.; See TBuffer3DTypes for producer classes. ### Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNo",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:3254,Usability,clear,clear,3254,"ere; // Try first add to viewer; Int_t reqSections = viewer-&gt;AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqSections & TBuffer3D::kRawSizes) {; // Fill out kRawSizes...; }; if (reqSections & TBuffer3D::kRaw) {; // Fill out kRaw...; }; // Add second time to viewer - ignore return cannot do more; viewer-&gt;AddObject(buffer);; }; }; ~~~. `ShapeSpecific`: If the viewer can directly display the buffer without; filling of the kRaw/kRawSizes section it will not need to request client side; tessellation. Currently we provide the following various shape specific classes, which the; OpenGL viewer can take advantage of (see TBuffer3D.h and TBuffer3DTypes.h). - TBuffer3DSphere - solid, hollow and cut spheres*; - TBuffer3DTubeSeg - angle tube segment; - TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated. Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time. `BoundingBox:` You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster`",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:3906,Usability,simpl,simpler,3906,"f (see TBuffer3D.h and TBuffer3DTypes.h). - TBuffer3DSphere - solid, hollow and cut spheres*; - TBuffer3DTubeSeg - angle tube segment; - TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated. Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time. `BoundingBox:` You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placem",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:6640,Usability,simpl,simply,6640,"epeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D ",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:7901,Usability,simpl,simple,7901,"ept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ### Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear any sections marked valid.",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test if buffer represents a solid uncut sphere.",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4052,Availability,avail,available,4052,"etCanvas(cw);; w->Draw();; }; End_Macro. The complete list of predefined color names is the following:. ~~~ {.cpp}; kWhite = 0, kBlack = 1, kGray = 920, kRed = 632, kGreen = 416,; kBlue = 600, kYellow = 400, kMagenta = 616, kCyan = 432, kOrange = 800,; kSpring = 820, kTeal = 840, kAzure = 860, kViolet = 880, kPink = 900; ~~~. Note the special role of color `kWhite` (color number 0). It is the default; background color also. For instance in a PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Pet",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4766,Availability,avail,available,4766,"lorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(sour",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4916,Availability,avail,available,4916,"al objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro.",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:11747,Availability,down,downloaded,11747,"inbow-color-map),; which is misleading for colour-blinded people in a 2D plot (not so much in a 3D surfaces). The `kCMYK` palette, is also not great because it's dark, then lighter, then; half-dark again. Some others, like `kAquamarine`, have almost no contrast therefore it would; be almost impossible (for a color blind person) to see something with a such palette. Therefore the palettes are classified in two categories: those which are Colour Vision Deficiency; friendly and those which are not. An easy way to classify the palettes is to turn them into grayscale using TCanvas::SetGrayscale().; The grayscale version of a palette should be as proportional as possible, and monotonously; increasing or decreasing. Unless it is symmetrical, then it is fine to have white in the; borders and black in the centre (for example an axis that goes between; -40 degrees and +40 degrees, the 0 has a meaning in the perceptualcolormap.C example). A full set of colour-vision deficiency friendly and perceptually uniform colour maps can be; [downloaded](https://doi.org/10.5281/zenodo.4491293) and used with ROOT (since 6.26) via:; `gStyle->SetPalette(""filename.txt"")` or `TColor::CreateColorTableFromFile(""filename.txt"")`.; Remember to increase the number of contours for a smoother result, e.g.:; `gStyle->SetNumberContours(99)` if you are drawing with ""surf1z"" or `gStyle->SetNumberContours(256)`; if with ""colz"". \anchor C06a; ### Colour Vision Deficiency (CVD) friendly palettes. <table border=0>; <tr><td>; Begin_Macro; {; auto c = new TCanvas(""c"",""c"",0,0,300,300);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",0.999,3.002,0.999,3.002);; f2->SetContour(99); gStyle->SetPalette(kBird);; f2->Draw(""surf2Z""); f2->SetTitle(""kBird (default)"");; }; End_Macro; </td><td>; Begin_Macro; {; auto c = new TCanvas(""c"",""c"",0,0,300,300);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",0.999,3.002,0.999,3.002);; f2->SetContour(99); gStyle->SetPalette(kGreyScale);; f2->Draw(""surf2Z"")",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:31784,Availability,avail,available,31784,"nsparent one. The color transparency is defined via its alpha component. The; alpha value varies from `0.` (fully transparent) to `1.` (fully; opaque). To set the alpha value of an existing color it is enough to do:. ~~~ {.cpp}; TColor *col26 = gROOT->GetColor(26);; col26->SetAlpha(0.01);; ~~~. A new color can be created transparent the following way:. ~~~ {.cpp}; Int_t ci = 1756;; auto color = new TColor(ci, 0.1, 0.2, 0.3, """", 0.5); // alpha = 0.5; ~~~. An example of transparency usage with parallel coordinates can be found; in parallelcoordtrans.C. To ease the creation of a transparent color the static method; `GetColorTransparent(Int_t color, Float_t a)` is provided.; In the following example the `trans_red` color index point to; a red color 30% opaque (70% transparent). The alpha value of; the color index `kRed` is not modified. ~~~ {.cpp}; Int_t trans_red = GetColorTransparent(kRed, 0.3);; ~~~. This function is also used in the methods; `SetFillColorAlpha()`, `SetLineColorAlpha()`,; `SetMarkerColorAlpha()` and `SetTextColorAlpha()`.; In the following example the fill color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetFillColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. The following macro gives an example of transparency usage:. Begin_Macro(source); ../../../tutorials/graphics/transparency.C; End_Macro. */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5405,Deployability,toggle,toggle,5405,"tial for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. ~~~ {.cpp}; gStyle->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the col",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:6803,Deployability,continuous,continuous,6803,"vas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. ~~~ {.cpp}; gStyle->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; End_Macro. To define more a complex palette with a continuous gradient of color, one; should use the static function `TColor::CreateGradientColorTable()`.; The following example demonstrates how to proceed:. Begin_Macro(source); {; auto c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; const Int_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; End_Macro. The function `TColor::CreateGradientColorTable()` automatically; calls `gStyle->SetPalette()`, so there is not need to add one. After a call to `TColor::CreateGradientColorTable()` it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch b",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:662,Energy Efficiency,green,green,662,"/** \class TColor; \ingroup Base; \ingroup GraphicsAtt. The color creation and management class. - [Introduction](\ref C00); - [Basic colors](\ref C01); - [The color wheel](\ref C02); - [Bright and dark colors](\ref C03); - [Accessible Color Schemes](\ref C031); - [Gray scale view of of canvas with colors](\ref C04); - [Color palettes](\ref C05); - [High quality predefined palettes](\ref C06); - [Colour Vision Deficiency (CVD) friendly palettes](\ref C06a); - [Non Colour Vision Deficiency (CVD) friendly palettes](\ref C06b); - [Palette inversion](\ref C061); - [Color transparency](\ref C07). \anchor C00; ## Introduction. Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. ~~~ {.cpp}; TColor *color = gROOT->GetColor(10);; ~~~. Then it can be manipulated. For example its RGB components can be modified:. ~~~ {.cpp}; color->SetRGB(0.1, 0.2, 0.3);; ~~~. A new color can be created the following way:. ~~~ {.cpp}; Int_t ci = 1756; // color index; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. \since **6.07/07:**; TColor::GetFreeColorIndex() allows to make sure the new color is created with an; unused color index:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. Two sets of colors are initialized;. - The basic colors: colors with index from 0 to 50.; - The color wheel: colors with indices from 300 to 1000. \anchor C01; ## Basic colors; The following image displays the 50 basic colors. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. \anchor C02; ## The color wheel; The wheel contains the recommended 216 colors ",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:7182,Energy Efficiency,Green,Green,7182,"Style->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; End_Macro. To define more a complex palette with a continuous gradient of color, one; should use the static function `TColor::CreateGradientColorTable()`.; The following example demonstrates how to proceed:. Begin_Macro(source); {; auto c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; const Int_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; End_Macro. The function `TColor::CreateGradientColorTable()` automatically; calls `gStyle->SetPalette()`, so there is not need to add one. After a call to `TColor::CreateGradientColorTable()` it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. ~~~ {.cpp}; Int_t MyPalette[100];; Double_t Red[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t Green[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t Blue[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t Length[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:7380,Energy Efficiency,Green,Green,7380,"use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; End_Macro. To define more a complex palette with a continuous gradient of color, one; should use the static function `TColor::CreateGradientColorTable()`.; The following example demonstrates how to proceed:. Begin_Macro(source); {; auto c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; const Int_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; End_Macro. The function `TColor::CreateGradientColorTable()` automatically; calls `gStyle->SetPalette()`, so there is not need to add one. After a call to `TColor::CreateGradientColorTable()` it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. ~~~ {.cpp}; Int_t MyPalette[100];; Double_t Red[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t Green[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t Blue[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t Length[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, Length, Red, Green, Blue, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;; ~~~. Later on to reuse the palette `MyPalette` it will be enough to do. ~~~ {.cpp}; gStyle->SetPalette(100, MyPalette);; ~~~. As only one palett",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:8012,Energy Efficiency,Green,Green,8012,"""c2"",0,0,600,400);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; const Int_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; End_Macro. The function `TColor::CreateGradientColorTable()` automatically; calls `gStyle->SetPalette()`, so there is not need to add one. After a call to `TColor::CreateGradientColorTable()` it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. ~~~ {.cpp}; Int_t MyPalette[100];; Double_t Red[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t Green[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t Blue[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t Length[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, Length, Red, Green, Blue, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;; ~~~. Later on to reuse the palette `MyPalette` it will be enough to do. ~~~ {.cpp}; gStyle->SetPalette(100, MyPalette);; ~~~. As only one palette is active, one need to use `TExec` to be able to; display plots using different palettes on the same pad.; The tutorial multipalette.C illustrates this feature. Begin_Macro(source); ../../../tutorials/graphs/multipalette.C; End_Macro. \since **6.26:**; The function `TColor::CreateColorTableFromFile(""filename.txt"")` allows you to create a color; palette based on an input ASCII file. In contrast to `TColor::CreateGradientColorTable()`, here; the length (spacing) is constant and can not be tuned. There is no gradient being interpolated; between adjacent colors. The palette will contain the exact",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:8201,Energy Efficiency,Green,Green,8201,"0, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; End_Macro. The function `TColor::CreateGradientColorTable()` automatically; calls `gStyle->SetPalette()`, so there is not need to add one. After a call to `TColor::CreateGradientColorTable()` it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. ~~~ {.cpp}; Int_t MyPalette[100];; Double_t Red[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t Green[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t Blue[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t Length[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, Length, Red, Green, Blue, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;; ~~~. Later on to reuse the palette `MyPalette` it will be enough to do. ~~~ {.cpp}; gStyle->SetPalette(100, MyPalette);; ~~~. As only one palette is active, one need to use `TExec` to be able to; display plots using different palettes on the same pad.; The tutorial multipalette.C illustrates this feature. Begin_Macro(source); ../../../tutorials/graphs/multipalette.C; End_Macro. \since **6.26:**; The function `TColor::CreateColorTableFromFile(""filename.txt"")` allows you to create a color; palette based on an input ASCII file. In contrast to `TColor::CreateGradientColorTable()`, here; the length (spacing) is constant and can not be tuned. There is no gradient being interpolated; between adjacent colors. The palette will contain the exact colors stored in the file, that; comprises one line per color in the format ""r g b"" as floats. \anchor C06; ## High quality predefined palettes; \since **6.04:**; 63 high quality palettes are",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:6013,Modifiability,variab,variable,6013,"rName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. ~~~ {.cpp}; gStyle->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; End_Macro. To define more a complex palette with a continuous gradient of color, one; should use the static function `TColor::CreateGradientColorTable()`.; The following example demonstrates how to proceed:. Begin_Macro(source); {; auto c",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:8905,Performance,tune,tuned,8905,"define palettes.; To store a palette in an array it is enough to do:. ~~~ {.cpp}; Int_t MyPalette[100];; Double_t Red[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t Green[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t Blue[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t Length[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, Length, Red, Green, Blue, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;; ~~~. Later on to reuse the palette `MyPalette` it will be enough to do. ~~~ {.cpp}; gStyle->SetPalette(100, MyPalette);; ~~~. As only one palette is active, one need to use `TExec` to be able to; display plots using different palettes on the same pad.; The tutorial multipalette.C illustrates this feature. Begin_Macro(source); ../../../tutorials/graphs/multipalette.C; End_Macro. \since **6.26:**; The function `TColor::CreateColorTableFromFile(""filename.txt"")` allows you to create a color; palette based on an input ASCII file. In contrast to `TColor::CreateGradientColorTable()`, here; the length (spacing) is constant and can not be tuned. There is no gradient being interpolated; between adjacent colors. The palette will contain the exact colors stored in the file, that; comprises one line per color in the format ""r g b"" as floats. \anchor C06; ## High quality predefined palettes; \since **6.04:**; 63 high quality palettes are predefined with 255 colors each. These palettes can be accessed ""by name"" with `gStyle->SetPalette(num)`.; `num` can be taken within the following enum:. ~~~ {.cpp}; kDeepSea=51, kGreyScale=52, kDarkBodyRadiator=53,; kBlueYellow= 54, kRainBow=55, kInvertedDarkBodyRadiator=56,; kBird=57, kCubehelix=58, kGreenRedViolet=59,; kBlueRedYellow=60, kOcean=61, kColorPrintableOnGrey=62,; kAlpine=63, kAquamarine=64, kArmy=65,; kAtlantic=66, kAurora=67, kAvocado=68,; kBeach=69, kBlackBody=70, kBlueGreenYellow=71,; kBrownCyan=72, kCMYK=73, kCandy=74,; kCherry=75, kCoffee=76, kDarkRainBow=77,; kDarkTerrain=78, kFall=79, kFruitPunch=80,; kFuchsia=81, kGrey",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:225,Security,Access,Accessible,225,"/** \class TColor; \ingroup Base; \ingroup GraphicsAtt. The color creation and management class. - [Introduction](\ref C00); - [Basic colors](\ref C01); - [The color wheel](\ref C02); - [Bright and dark colors](\ref C03); - [Accessible Color Schemes](\ref C031); - [Gray scale view of of canvas with colors](\ref C04); - [Color palettes](\ref C05); - [High quality predefined palettes](\ref C06); - [Colour Vision Deficiency (CVD) friendly palettes](\ref C06a); - [Non Colour Vision Deficiency (CVD) friendly palettes](\ref C06b); - [Palette inversion](\ref C061); - [Color transparency](\ref C07). \anchor C00; ## Introduction. Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. ~~~ {.cpp}; TColor *color = gROOT->GetColor(10);; ~~~. Then it can be manipulated. For example its RGB components can be modified:. ~~~ {.cpp}; color->SetRGB(0.1, 0.2, 0.3);; ~~~. A new color can be created the following way:. ~~~ {.cpp}; Int_t ci = 1756; // color index; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. \since **6.07/07:**; TColor::GetFreeColorIndex() allows to make sure the new color is created with an; unused color index:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. Two sets of colors are initialized;. - The basic colors: colors with index from 0 to 50.; - The color wheel: colors with indices from 300 to 1000. \anchor C01; ## Basic colors; The following image displays the 50 basic colors. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. \anchor C02; ## The color wheel; The wheel contains the recommended 216 colors ",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4349,Security,Access,Accessible,4349,"00; ~~~. Note the special role of color `kWhite` (color number 0). It is the default; background color also. For instance in a PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can ",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4571,Security,access,accessibility,4571,"PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, ",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4816,Security,access,accessible-color-cycles,4816,"chor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5146,Security,access,accessiblecolorschemes,5146," these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current p",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5532,Security,access,access,5532,"esults should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. ~~~ {.cpp}; gStyle->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palet",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5651,Security,access,access,5651,"esults should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. ~~~ {.cpp}; gStyle->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palet",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:9260,Security,access,accessed,9260,"ater on to reuse the palette `MyPalette` it will be enough to do. ~~~ {.cpp}; gStyle->SetPalette(100, MyPalette);; ~~~. As only one palette is active, one need to use `TExec` to be able to; display plots using different palettes on the same pad.; The tutorial multipalette.C illustrates this feature. Begin_Macro(source); ../../../tutorials/graphs/multipalette.C; End_Macro. \since **6.26:**; The function `TColor::CreateColorTableFromFile(""filename.txt"")` allows you to create a color; palette based on an input ASCII file. In contrast to `TColor::CreateGradientColorTable()`, here; the length (spacing) is constant and can not be tuned. There is no gradient being interpolated; between adjacent colors. The palette will contain the exact colors stored in the file, that; comprises one line per color in the format ""r g b"" as floats. \anchor C06; ## High quality predefined palettes; \since **6.04:**; 63 high quality palettes are predefined with 255 colors each. These palettes can be accessed ""by name"" with `gStyle->SetPalette(num)`.; `num` can be taken within the following enum:. ~~~ {.cpp}; kDeepSea=51, kGreyScale=52, kDarkBodyRadiator=53,; kBlueYellow= 54, kRainBow=55, kInvertedDarkBodyRadiator=56,; kBird=57, kCubehelix=58, kGreenRedViolet=59,; kBlueRedYellow=60, kOcean=61, kColorPrintableOnGrey=62,; kAlpine=63, kAquamarine=64, kArmy=65,; kAtlantic=66, kAurora=67, kAvocado=68,; kBeach=69, kBlackBody=70, kBlueGreenYellow=71,; kBrownCyan=72, kCMYK=73, kCandy=74,; kCherry=75, kCoffee=76, kDarkRainBow=77,; kDarkTerrain=78, kFall=79, kFruitPunch=80,; kFuchsia=81, kGreyYellow=82, kGreenBrownTerrain=83,; kGreenPink=84, kIsland=85, kLake=86,; kLightTemperature=87, kLightTerrain=88, kMint=89,; kNeon=90, kPastel=91, kPearl=92,; kPigeon=93, kPlum=94, kRedBlue=95,; kRose=96, kRust=97, kSandyTerrain=98,; kSienna=99, kSolar=100, kSouthWest=101,; kStarryNight=102, kSunset=103, kTemperatureMap=104,; kThermometer=105, kValentine=106, kVisibleSpectrum=107,; kWaterMelon=108, kCool=109, kCopper=",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:689,Usability,simpl,simply,689,"/** \class TColor; \ingroup Base; \ingroup GraphicsAtt. The color creation and management class. - [Introduction](\ref C00); - [Basic colors](\ref C01); - [The color wheel](\ref C02); - [Bright and dark colors](\ref C03); - [Accessible Color Schemes](\ref C031); - [Gray scale view of of canvas with colors](\ref C04); - [Color palettes](\ref C05); - [High quality predefined palettes](\ref C06); - [Colour Vision Deficiency (CVD) friendly palettes](\ref C06a); - [Non Colour Vision Deficiency (CVD) friendly palettes](\ref C06b); - [Palette inversion](\ref C061); - [Color transparency](\ref C07). \anchor C00; ## Introduction. Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. ~~~ {.cpp}; TColor *color = gROOT->GetColor(10);; ~~~. Then it can be manipulated. For example its RGB components can be modified:. ~~~ {.cpp}; color->SetRGB(0.1, 0.2, 0.3);; ~~~. A new color can be created the following way:. ~~~ {.cpp}; Int_t ci = 1756; // color index; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. \since **6.07/07:**; TColor::GetFreeColorIndex() allows to make sure the new color is created with an; unused color index:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. Two sets of colors are initialized;. - The basic colors: colors with index from 0 to 50.; - The color wheel: colors with indices from 300 to 1000. \anchor C01; ## Basic colors; The following image displays the 50 basic colors. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. \anchor C02; ## The color wheel; The wheel contains the recommended 216 colors ",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3582,Usability,simpl,simply,3582,"oup. Each color chip is identified by a mnemonic (e.g. kYellow) and a number.; The keywords, kRed, kBlue, kYellow, kPink, etc are defined in the header file; Rtypes.h that is included in all ROOT other header files. It is better; to use these keywords in user code instead of hardcoded color numbers, e.g.:. ~~~ {.cpp}; myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);; ~~~. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; w->SetCanvas(cw);; w->Draw();; }; End_Macro. The complete list of predefined color names is the following:. ~~~ {.cpp}; kWhite = 0, kBlack = 1, kGray = 920, kRed = 632, kGreen = 416,; kBlue = 600, kYellow = 400, kMagenta = 616, kCyan = 432, kOrange = 800,; kSpring = 820, kTeal = 840, kAzure = 860, kViolet = 880, kPink = 900; ~~~. Note the special role of color `kWhite` (color number 0). It is the default; background color also. For instance in a PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publication",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3659,Usability,simpl,simplest,3659,", kPink, etc are defined in the header file; Rtypes.h that is included in all ROOT other header files. It is better; to use these keywords in user code instead of hardcoded color numbers, e.g.:. ~~~ {.cpp}; myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);; ~~~. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; w->SetCanvas(cw);; w->Draw();; }; End_Macro. The complete list of predefined color names is the following:. ~~~ {.cpp}; kWhite = 0, kBlack = 1, kGray = 920, kRed = 632, kGreen = 416,; kBlue = 600, kYellow = 400, kMagenta = 616, kCyan = 432, kOrange = 800,; kSpring = 820, kTeal = 840, kAzure = 860, kViolet = 880, kPink = 900; ~~~. Note the special role of color `kWhite` (color number 0). It is the default; background color also. For instance in a PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color s",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:233,Safety,avoid,avoid,233,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning kTRUE if some new colors have been defined after; /// initialisation or since the last call to this method. This allows to avoid; /// the colors and palette streaming in TCanvas::Streamer if not needed.; /// If method called once with set_always_on = 1, all next canvases will be; // saved with color palette - disregard if new colors created or not.; /// To reset such mode, just call methoid once with set_always_on = -1",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate color now (can be delayed when we have a large colormap)",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:158,Integrability,depend,dependent,158,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning color number for color specified by; /// system dependent pixel value. Pixel values can be obtained, e.g.,; /// from the GUI color picker.; ///; /// The color retrieval is done using a threshold defined by SetColorThreshold.",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:279,Availability,avail,available,279,"////////////////////////////////////////////////////////////////////////////////; /// This method specifies the color threshold used by GetColor to retrieve a color.; ///; /// \param[in] t Color threshold. By default is equal to 1./31. or 1./255.; /// depending on the number of available color planes.; ///; /// When GetColor is called, it scans the defined colors and compare them to the; /// requested color.; /// If the Red Green and Blue values passed to GetColor are Rr Gr Br; /// and Rd Gd Bd the values of a defined color. These two colors are considered equal; /// if (abs(Rr-Rd) < t & abs(Br-Bd) < t & abs(Br-Bd) < t). If this test passes,; /// the color defined by Rd Gd Bd is returned by GetColor.; ///; /// To make sure GetColor will return a color having exactly the requested; /// R G B values it is enough to specify a nul :; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(0.);; /// ~~~; ///; /// To reset the color threshold to its default value it is enough to do:; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(-1.);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:428,Energy Efficiency,Green,Green,428,"////////////////////////////////////////////////////////////////////////////////; /// This method specifies the color threshold used by GetColor to retrieve a color.; ///; /// \param[in] t Color threshold. By default is equal to 1./31. or 1./255.; /// depending on the number of available color planes.; ///; /// When GetColor is called, it scans the defined colors and compare them to the; /// requested color.; /// If the Red Green and Blue values passed to GetColor are Rr Gr Br; /// and Rd Gd Bd the values of a defined color. These two colors are considered equal; /// if (abs(Rr-Rd) < t & abs(Br-Bd) < t & abs(Br-Bd) < t). If this test passes,; /// the color defined by Rd Gd Bd is returned by GetColor.; ///; /// To make sure GetColor will return a color having exactly the requested; /// R G B values it is enough to specify a nul :; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(0.);; /// ~~~; ///; /// To reset the color threshold to its default value it is enough to do:; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(-1.);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:252,Integrability,depend,depending,252,"////////////////////////////////////////////////////////////////////////////////; /// This method specifies the color threshold used by GetColor to retrieve a color.; ///; /// \param[in] t Color threshold. By default is equal to 1./31. or 1./255.; /// depending on the number of available color planes.; ///; /// When GetColor is called, it scans the defined colors and compare them to the; /// requested color.; /// If the Red Green and Blue values passed to GetColor are Rr Gr Br; /// and Rd Gd Bd the values of a defined color. These two colors are considered equal; /// if (abs(Rr-Rd) < t & abs(Br-Bd) < t & abs(Br-Bd) < t). If this test passes,; /// the color defined by Rd Gd Bd is returned by GetColor.; ///; /// To make sure GetColor will return a color having exactly the requested; /// R G B values it is enough to specify a nul :; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(0.);; /// ~~~; ///; /// To reset the color threshold to its default value it is enough to do:; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(-1.);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:637,Testability,test,test,637,"////////////////////////////////////////////////////////////////////////////////; /// This method specifies the color threshold used by GetColor to retrieve a color.; ///; /// \param[in] t Color threshold. By default is equal to 1./31. or 1./255.; /// depending on the number of available color planes.; ///; /// When GetColor is called, it scans the defined colors and compare them to the; /// requested color.; /// If the Red Green and Blue values passed to GetColor are Rr Gr Br; /// and Rd Gd Bd the values of a defined color. These two colors are considered equal; /// if (abs(Rr-Rd) < t & abs(Br-Bd) < t & abs(Br-Bd) < t). If this test passes,; /// the color defined by Rd Gd Bd is returned by GetColor.; ///; /// To make sure GetColor will return a color having exactly the requested; /// R G B values it is enough to specify a nul :; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(0.);; /// ~~~; ///; /// To reset the color threshold to its default value it is enough to do:; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(-1.);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:119,Integrability,depend,dependent,119,"////////////////////////////////////////////////////////////////////////////////; /// Convert r,g,b to graphics system dependent pixel value.; /// The r,g,b triplet must be [0,1].",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:119,Integrability,depend,dependent,119,"////////////////////////////////////////////////////////////////////////////////; /// Convert r,g,b to graphics system dependent pixel value.; /// The r,g,b triplet must be [0,255].",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:102,Integrability,depend,dependent,102,"////////////////////////////////////////////////////////////////////////////////; /// Convert machine dependent pixel value (obtained via RGB2Pixel or; /// via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; /// The r,g,b triplet will be [0,1].",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:102,Integrability,depend,dependent,102,"////////////////////////////////////////////////////////////////////////////////; /// Convert machine dependent pixel value (obtained via RGB2Pixel or; /// via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; /// The r,g,b triplet will be [0,255].",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:102,Integrability,depend,dependent,102,"////////////////////////////////////////////////////////////////////////////////; /// Convert machine dependent pixel value (obtained via RGB2Pixel or; /// via Number2Pixel() or via TColor::GetPixel()) to a hexadecimal string.; /// This string can be directly passed to, for example,; /// TGClient::GetColorByName(). String will be reused so copy immediately; /// if needed.",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:934,Availability,error,error,934,"////////////////////////////////////////////////////////////////////////////////; /// \brief Static function creating a color palette based on an input text file.; ///; /// Every color in the file will take the same amount of space in the palette.; ///; /// \see https://doi.org/10.1038/s41467-020-19160-7; /// \note This function is designed to load into ROOT the colour-vision; /// deficiency friendly and perceptually uniform colour maps specially designed; /// in https://doi.org/10.5281/zenodo.4491293, namely the .txt files stored; /// in the subfolders of ScientificColourMaps7.zip, e.g. batlow/batlow.txt; ///; /// \param fileName: Name of a .txt file (ASCII) containing three floats per; /// line, separated by spaces, namely the r g b fractions of the color, each; /// value being in the range [0,1].; /// \param alpha the global opacity for all colors within this palette; /// \return a positive value on success and -1 on error.; /// \author Fernando Hueso-González",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:346,Performance,load,load,346,"////////////////////////////////////////////////////////////////////////////////; /// \brief Static function creating a color palette based on an input text file.; ///; /// Every color in the file will take the same amount of space in the palette.; ///; /// \see https://doi.org/10.1038/s41467-020-19160-7; /// \note This function is designed to load into ROOT the colour-vision; /// deficiency friendly and perceptually uniform colour maps specially designed; /// in https://doi.org/10.5281/zenodo.4491293, namely the .txt files stored; /// in the subfolders of ScientificColourMaps7.zip, e.g. batlow/batlow.txt; ///; /// \param fileName: Name of a .txt file (ASCII) containing three floats per; /// line, separated by spaces, namely the r g b fractions of the color, each; /// value being in the range [0,1].; /// \param alpha the global opacity for all colors within this palette; /// \return a positive value on success and -1 on error.; /// \author Fernando Hueso-González",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:1060,Availability,error,error,1060,"///////////////////////////////////////////////////////////////////////; /// Static function creating a color table with several connected linear gradients.; ///; /// - Number: The number of end point colors that will form the gradients.; /// Must be at least 2.; /// - Stops: Where in the whole table the end point colors should lie.; /// Each entry must be on [0, 1], each entry must be greater than; /// the previous entry.; /// - Red, Green, Blue: The end point color values.; /// Each entry must be on [0, 1]; /// - NColors: Total number of colors in the table. Must be at least 1.; /// - alpha: the opacity factor, between 0 and 1. Default is no transparency (1).; /// - setPalette: activate the newly created palette (true by default). If false,; /// the caller is in charge of calling TColor::SetPalette using the; /// return value of the function (first palette color index) and; /// reconstructing the Int_t palette[NColors+1] array.; ///; /// Returns a positive value (the index of the first color of the palette) on; /// success and -1 on error.; ///; /// The table is constructed by tracing lines between the given points in; /// RGB space. Each color value may have a value between 0 and 1. The; /// difference between consecutive ""Stops"" values gives the fraction of; /// space in the whole table that should be used for the interval between; /// the corresponding color values.; ///; /// Normally the first element of Stops should be 0 and the last should be 1.; /// If this is not true, fewer than NColors will be used in proportion with; /// the total interval between the first and last elements of Stops.; ///; /// This definition is similar to the povray-definition of gradient; /// color tables.; ///; /// For instance:; /// ~~~ {.cpp}; /// UInt_t Number = 3;; /// Double_t Red[3] = { 0.0, 1.0, 1.0 };; /// Double_t Green[3] = { 0.0, 0.0, 1.0 };; /// Double_t Blue[3] = { 1.0, 0.0, 1.0 };; /// Double_t Stops[3] = { 0.0, 0.4, 1.0 };; /// ~~~; /// This defines a table in which t",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:448,Energy Efficiency,Green,Green,448,"////////////////////////////////////////////////////////////////////////////////; /// Static function creating a color table with several connected linear gradients.; ///; /// - Number: The number of end point colors that will form the gradients.; /// Must be at least 2.; /// - Stops: Where in the whole table the end point colors should lie.; /// Each entry must be on [0, 1], each entry must be greater than; /// the previous entry.; /// - Red, Green, Blue: The end point color values.; /// Each entry must be on [0, 1]; /// - NColors: Total number of colors in the table. Must be at least 1.; /// - alpha: the opacity factor, between 0 and 1. Default is no transparency (1).; /// - setPalette: activate the newly created palette (true by default). If false,; /// the caller is in charge of calling TColor::SetPalette using the; /// return value of the function (first palette color index) and; /// reconstructing the Int_t palette[NColors+1] array.; ///; /// Returns a positive value (the index of the first color of the palette) on; /// success and -1 on error.; ///; /// The table is constructed by tracing lines between the given points in; /// RGB space. Each color value may have a value between 0 and 1. The; /// difference between consecutive ""Stops"" values gives the fraction of; /// space in the whole table that should be used for the interval between; /// the corresponding color values.; ///; /// Normally the first element of Stops should be 0 and the last should be 1.; /// If this is not true, fewer than NColors will be used in proportion with; /// the total interval between the first and last elements of Stops.; ///; /// This definition is similar to the povray-definition of gradient; /// color tables.; ///; /// For instance:; /// ~~~ {.cpp}; /// UInt_t Number = 3;; /// Double_t Red[3] = { 0.0, 1.0, 1.0 };; /// Double_t Green[3] = { 0.0, 0.0, 1.0 };; /// Double_t Blue[3] = { 1.0, 0.0, 1.0 };; /// Double_t Stops[3] = { 0.0, 0.4, 1.0 };; /// ~~~; /// This defines a table in",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:784,Energy Efficiency,charge,charge,784,"////////////////////////////////////////////////////////////////////////////////; /// Static function creating a color table with several connected linear gradients.; ///; /// - Number: The number of end point colors that will form the gradients.; /// Must be at least 2.; /// - Stops: Where in the whole table the end point colors should lie.; /// Each entry must be on [0, 1], each entry must be greater than; /// the previous entry.; /// - Red, Green, Blue: The end point color values.; /// Each entry must be on [0, 1]; /// - NColors: Total number of colors in the table. Must be at least 1.; /// - alpha: the opacity factor, between 0 and 1. Default is no transparency (1).; /// - setPalette: activate the newly created palette (true by default). If false,; /// the caller is in charge of calling TColor::SetPalette using the; /// return value of the function (first palette color index) and; /// reconstructing the Int_t palette[NColors+1] array.; ///; /// Returns a positive value (the index of the first color of the palette) on; /// success and -1 on error.; ///; /// The table is constructed by tracing lines between the given points in; /// RGB space. Each color value may have a value between 0 and 1. The; /// difference between consecutive ""Stops"" values gives the fraction of; /// space in the whole table that should be used for the interval between; /// the corresponding color values.; ///; /// Normally the first element of Stops should be 0 and the last should be 1.; /// If this is not true, fewer than NColors will be used in proportion with; /// the total interval between the first and last elements of Stops.; ///; /// This definition is similar to the povray-definition of gradient; /// color tables.; ///; /// For instance:; /// ~~~ {.cpp}; /// UInt_t Number = 3;; /// Double_t Red[3] = { 0.0, 1.0, 1.0 };; /// Double_t Green[3] = { 0.0, 0.0, 1.0 };; /// Double_t Blue[3] = { 1.0, 0.0, 1.0 };; /// Double_t Stops[3] = { 0.0, 0.4, 1.0 };; /// ~~~; /// This defines a table in",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:1847,Energy Efficiency,Green,Green,1847," NColors: Total number of colors in the table. Must be at least 1.; /// - alpha: the opacity factor, between 0 and 1. Default is no transparency (1).; /// - setPalette: activate the newly created palette (true by default). If false,; /// the caller is in charge of calling TColor::SetPalette using the; /// return value of the function (first palette color index) and; /// reconstructing the Int_t palette[NColors+1] array.; ///; /// Returns a positive value (the index of the first color of the palette) on; /// success and -1 on error.; ///; /// The table is constructed by tracing lines between the given points in; /// RGB space. Each color value may have a value between 0 and 1. The; /// difference between consecutive ""Stops"" values gives the fraction of; /// space in the whole table that should be used for the interval between; /// the corresponding color values.; ///; /// Normally the first element of Stops should be 0 and the last should be 1.; /// If this is not true, fewer than NColors will be used in proportion with; /// the total interval between the first and last elements of Stops.; ///; /// This definition is similar to the povray-definition of gradient; /// color tables.; ///; /// For instance:; /// ~~~ {.cpp}; /// UInt_t Number = 3;; /// Double_t Red[3] = { 0.0, 1.0, 1.0 };; /// Double_t Green[3] = { 0.0, 0.0, 1.0 };; /// Double_t Blue[3] = { 1.0, 0.0, 1.0 };; /// Double_t Stops[3] = { 0.0, 0.4, 1.0 };; /// ~~~; /// This defines a table in which there are three color end points:; /// RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; /// The first 40% of the table is used to go linearly from blue to red.; /// The remaining 60% of the table is used to go linearly from red to white.; ///; /// If you define a very short interval such that less than one color fits; /// in it, no colors at all will be allocated. If this occurs for all; /// intervals, ROOT will revert to the default palette.; ///; /// Original code by Andreas Zoglauer (zog@mpe.mpg.de)",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:2377,Energy Efficiency,allocate,allocated,2377," NColors: Total number of colors in the table. Must be at least 1.; /// - alpha: the opacity factor, between 0 and 1. Default is no transparency (1).; /// - setPalette: activate the newly created palette (true by default). If false,; /// the caller is in charge of calling TColor::SetPalette using the; /// return value of the function (first palette color index) and; /// reconstructing the Int_t palette[NColors+1] array.; ///; /// Returns a positive value (the index of the first color of the palette) on; /// success and -1 on error.; ///; /// The table is constructed by tracing lines between the given points in; /// RGB space. Each color value may have a value between 0 and 1. The; /// difference between consecutive ""Stops"" values gives the fraction of; /// space in the whole table that should be used for the interval between; /// the corresponding color values.; ///; /// Normally the first element of Stops should be 0 and the last should be 1.; /// If this is not true, fewer than NColors will be used in proportion with; /// the total interval between the first and last elements of Stops.; ///; /// This definition is similar to the povray-definition of gradient; /// color tables.; ///; /// For instance:; /// ~~~ {.cpp}; /// UInt_t Number = 3;; /// Double_t Red[3] = { 0.0, 1.0, 1.0 };; /// Double_t Green[3] = { 0.0, 0.0, 1.0 };; /// Double_t Blue[3] = { 1.0, 0.0, 1.0 };; /// Double_t Stops[3] = { 0.0, 0.4, 1.0 };; /// ~~~; /// This defines a table in which there are three color end points:; /// RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; /// The first 40% of the table is used to go linearly from blue to red.; /// The remaining 60% of the table is used to go linearly from red to white.; ///; /// If you define a very short interval such that less than one color fits; /// in it, no colors at all will be allocated. If this occurs for all; /// intervals, ROOT will revert to the default palette.; ///; /// Original code by Andreas Zoglauer (zog@mpe.mpg.de)",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:1149,Availability,avail,available,1149,"ed by the histogram classes; /// (see TH1::Draw options).; /// For example TH1::Draw(""col"") draws a 2-D histogram with cells; /// represented by a box filled with a color CI function of the cell content.; /// if the cell content is N, the color CI used will be the color number; /// in colors[N],etc. If the maximum cell content is > ncolors, all; /// cell contents are scaled to ncolors.; ///; /// `if ncolors <= 0` a default palette (see below) of 50 colors is; /// defined. The colors defined in this palette are OK for coloring pads, labels.; ///; /// ~~~ {.cpp}; /// index 0->9 : grey colors from light to dark grey; /// index 10->19 : ""brown"" colors; /// index 20->29 : ""blueish"" colors; /// index 30->39 : ""redish"" colors; /// index 40->49 : basic colors; /// ~~~; ///; /// `if ncolors == 1 && colors == 0`, a Rainbow Color map is created; /// with 50 colors. It is kept for backward compatibility. Better palettes like; /// kBird are recommended.; ///; /// High quality predefined palettes with 255 colors are available when `colors == 0`.; /// The following value of `ncolors` give access to:; ///; /// ~~~ {.cpp}; /// if ncolors = 51 and colors=0, a Deep Sea palette is used.; /// if ncolors = 52 and colors=0, a Grey Scale palette is used.; /// if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; /// if ncolors = 54 and colors=0, a Two-Color Hue palette is used.(dark blue through neutral gray to bright yellow); /// if ncolors = 55 and colors=0, a Rain Bow palette is used.; /// if ncolors = 56 and colors=0, an Inverted Dark Body Radiator palette is used.; /// if ncolors = 57 and colors=0, a monotonically increasing L value palette is used.; /// if ncolors = 58 and colors=0, a Cubehelix palette is used; /// (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); /// if ncolors = 59 and colors=0, a Green Red Violet palette is used.; /// if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; /// if ncolors = 61 and col",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:1883,Energy Efficiency,Green,Green,1883,"//; /// `if ncolors == 1 && colors == 0`, a Rainbow Color map is created; /// with 50 colors. It is kept for backward compatibility. Better palettes like; /// kBird are recommended.; ///; /// High quality predefined palettes with 255 colors are available when `colors == 0`.; /// The following value of `ncolors` give access to:; ///; /// ~~~ {.cpp}; /// if ncolors = 51 and colors=0, a Deep Sea palette is used.; /// if ncolors = 52 and colors=0, a Grey Scale palette is used.; /// if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; /// if ncolors = 54 and colors=0, a Two-Color Hue palette is used.(dark blue through neutral gray to bright yellow); /// if ncolors = 55 and colors=0, a Rain Bow palette is used.; /// if ncolors = 56 and colors=0, an Inverted Dark Body Radiator palette is used.; /// if ncolors = 57 and colors=0, a monotonically increasing L value palette is used.; /// if ncolors = 58 and colors=0, a Cubehelix palette is used; /// (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); /// if ncolors = 59 and colors=0, a Green Red Violet palette is used.; /// if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; /// if ncolors = 61 and colors=0, an Ocean palette is used.; /// if ncolors = 62 and colors=0, a Color Printable On Grey palette is used.; /// if ncolors = 63 and colors=0, an Alpine palette is used.; /// if ncolors = 64 and colors=0, an Aquamarine palette is used.; /// if ncolors = 65 and colors=0, an Army palette is used.; /// if ncolors = 66 and colors=0, an Atlantic palette is used.; /// if ncolors = 67 and colors=0, an Aurora palette is used.; /// if ncolors = 68 and colors=0, an Avocado palette is used.; /// if ncolors = 69 and colors=0, a Beach palette is used.; /// if ncolors = 70 and colors=0, a Black Body palette is used.; /// if ncolors = 71 and colors=0, a Blue Green Yellow palette is used.; /// if ncolors = 72 and colors=0, a Brown Cyan palette is used.; /// if ncolors = 73 a",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:2000,Energy Efficiency,Green,Green,2000,"0 colors. It is kept for backward compatibility. Better palettes like; /// kBird are recommended.; ///; /// High quality predefined palettes with 255 colors are available when `colors == 0`.; /// The following value of `ncolors` give access to:; ///; /// ~~~ {.cpp}; /// if ncolors = 51 and colors=0, a Deep Sea palette is used.; /// if ncolors = 52 and colors=0, a Grey Scale palette is used.; /// if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; /// if ncolors = 54 and colors=0, a Two-Color Hue palette is used.(dark blue through neutral gray to bright yellow); /// if ncolors = 55 and colors=0, a Rain Bow palette is used.; /// if ncolors = 56 and colors=0, an Inverted Dark Body Radiator palette is used.; /// if ncolors = 57 and colors=0, a monotonically increasing L value palette is used.; /// if ncolors = 58 and colors=0, a Cubehelix palette is used; /// (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); /// if ncolors = 59 and colors=0, a Green Red Violet palette is used.; /// if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; /// if ncolors = 61 and colors=0, an Ocean palette is used.; /// if ncolors = 62 and colors=0, a Color Printable On Grey palette is used.; /// if ncolors = 63 and colors=0, an Alpine palette is used.; /// if ncolors = 64 and colors=0, an Aquamarine palette is used.; /// if ncolors = 65 and colors=0, an Army palette is used.; /// if ncolors = 66 and colors=0, an Atlantic palette is used.; /// if ncolors = 67 and colors=0, an Aurora palette is used.; /// if ncolors = 68 and colors=0, an Avocado palette is used.; /// if ncolors = 69 and colors=0, a Beach palette is used.; /// if ncolors = 70 and colors=0, a Black Body palette is used.; /// if ncolors = 71 and colors=0, a Blue Green Yellow palette is used.; /// if ncolors = 72 and colors=0, a Brown Cyan palette is used.; /// if ncolors = 73 and colors=0, a CMYK palette is used.; /// if ncolors = 74 and colors=0, a Candy pale",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:2787,Energy Efficiency,Green,Green,2787,"L value palette is used.; /// if ncolors = 58 and colors=0, a Cubehelix palette is used; /// (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); /// if ncolors = 59 and colors=0, a Green Red Violet palette is used.; /// if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; /// if ncolors = 61 and colors=0, an Ocean palette is used.; /// if ncolors = 62 and colors=0, a Color Printable On Grey palette is used.; /// if ncolors = 63 and colors=0, an Alpine palette is used.; /// if ncolors = 64 and colors=0, an Aquamarine palette is used.; /// if ncolors = 65 and colors=0, an Army palette is used.; /// if ncolors = 66 and colors=0, an Atlantic palette is used.; /// if ncolors = 67 and colors=0, an Aurora palette is used.; /// if ncolors = 68 and colors=0, an Avocado palette is used.; /// if ncolors = 69 and colors=0, a Beach palette is used.; /// if ncolors = 70 and colors=0, a Black Body palette is used.; /// if ncolors = 71 and colors=0, a Blue Green Yellow palette is used.; /// if ncolors = 72 and colors=0, a Brown Cyan palette is used.; /// if ncolors = 73 and colors=0, a CMYK palette is used.; /// if ncolors = 74 and colors=0, a Candy palette is used.; /// if ncolors = 75 and colors=0, a Cherry palette is used.; /// if ncolors = 76 and colors=0, a Coffee palette is used.; /// if ncolors = 77 and colors=0, a Dark Rain Bow palette is used.; /// if ncolors = 78 and colors=0, a Dark Terrain palette is used.; /// if ncolors = 79 and colors=0, a Fall palette is used.; /// if ncolors = 80 and colors=0, a Fruit Punch palette is used.; /// if ncolors = 81 and colors=0, a Fuchsia palette is used.; /// if ncolors = 82 and colors=0, a Grey Yellow palette is used.; /// if ncolors = 83 and colors=0, a Green Brown Terrain palette is used.; /// if ncolors = 84 and colors=0, a Green Pink palette is used.; /// if ncolors = 85 and colors=0, an Island palette is used.; /// if ncolors = 86 and colors=0, a Lake palette is used.; /// if n",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3548,Energy Efficiency,Green,Green,3548," is used.; /// if ncolors = 68 and colors=0, an Avocado palette is used.; /// if ncolors = 69 and colors=0, a Beach palette is used.; /// if ncolors = 70 and colors=0, a Black Body palette is used.; /// if ncolors = 71 and colors=0, a Blue Green Yellow palette is used.; /// if ncolors = 72 and colors=0, a Brown Cyan palette is used.; /// if ncolors = 73 and colors=0, a CMYK palette is used.; /// if ncolors = 74 and colors=0, a Candy palette is used.; /// if ncolors = 75 and colors=0, a Cherry palette is used.; /// if ncolors = 76 and colors=0, a Coffee palette is used.; /// if ncolors = 77 and colors=0, a Dark Rain Bow palette is used.; /// if ncolors = 78 and colors=0, a Dark Terrain palette is used.; /// if ncolors = 79 and colors=0, a Fall palette is used.; /// if ncolors = 80 and colors=0, a Fruit Punch palette is used.; /// if ncolors = 81 and colors=0, a Fuchsia palette is used.; /// if ncolors = 82 and colors=0, a Grey Yellow palette is used.; /// if ncolors = 83 and colors=0, a Green Brown Terrain palette is used.; /// if ncolors = 84 and colors=0, a Green Pink palette is used.; /// if ncolors = 85 and colors=0, an Island palette is used.; /// if ncolors = 86 and colors=0, a Lake palette is used.; /// if ncolors = 87 and colors=0, a Light Temperature palette is used.; /// if ncolors = 88 and colors=0, a Light Terrain palette is used.; /// if ncolors = 89 and colors=0, a Mint palette is used.; /// if ncolors = 90 and colors=0, a Neon palette is used.; /// if ncolors = 91 and colors=0, a Pastel palette is used.; /// if ncolors = 92 and colors=0, a Pearl palette is used.; /// if ncolors = 93 and colors=0, a Pigeon palette is used.; /// if ncolors = 94 and colors=0, a Plum palette is used.; /// if ncolors = 95 and colors=0, a Red Blue palette is used.; /// if ncolors = 96 and colors=0, a Rose palette is used.; /// if ncolors = 97 and colors=0, a Rust palette is used.; /// if ncolors = 98 and colors=0, a Sandy Terrain palette is used.; /// if ncolors = 99 and col",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3622,Energy Efficiency,Green,Green,3622,"ed.; /// if ncolors = 69 and colors=0, a Beach palette is used.; /// if ncolors = 70 and colors=0, a Black Body palette is used.; /// if ncolors = 71 and colors=0, a Blue Green Yellow palette is used.; /// if ncolors = 72 and colors=0, a Brown Cyan palette is used.; /// if ncolors = 73 and colors=0, a CMYK palette is used.; /// if ncolors = 74 and colors=0, a Candy palette is used.; /// if ncolors = 75 and colors=0, a Cherry palette is used.; /// if ncolors = 76 and colors=0, a Coffee palette is used.; /// if ncolors = 77 and colors=0, a Dark Rain Bow palette is used.; /// if ncolors = 78 and colors=0, a Dark Terrain palette is used.; /// if ncolors = 79 and colors=0, a Fall palette is used.; /// if ncolors = 80 and colors=0, a Fruit Punch palette is used.; /// if ncolors = 81 and colors=0, a Fuchsia palette is used.; /// if ncolors = 82 and colors=0, a Grey Yellow palette is used.; /// if ncolors = 83 and colors=0, a Green Brown Terrain palette is used.; /// if ncolors = 84 and colors=0, a Green Pink palette is used.; /// if ncolors = 85 and colors=0, an Island palette is used.; /// if ncolors = 86 and colors=0, a Lake palette is used.; /// if ncolors = 87 and colors=0, a Light Temperature palette is used.; /// if ncolors = 88 and colors=0, a Light Terrain palette is used.; /// if ncolors = 89 and colors=0, a Mint palette is used.; /// if ncolors = 90 and colors=0, a Neon palette is used.; /// if ncolors = 91 and colors=0, a Pastel palette is used.; /// if ncolors = 92 and colors=0, a Pearl palette is used.; /// if ncolors = 93 and colors=0, a Pigeon palette is used.; /// if ncolors = 94 and colors=0, a Plum palette is used.; /// if ncolors = 95 and colors=0, a Red Blue palette is used.; /// if ncolors = 96 and colors=0, a Rose palette is used.; /// if ncolors = 97 and colors=0, a Rust palette is used.; /// if ncolors = 98 and colors=0, a Sandy Terrain palette is used.; /// if ncolors = 99 and colors=0, a Sienna palette is used.; /// if ncolors = 100 and colors=0, a",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:1222,Security,access,access,1222,"aw(""col"") draws a 2-D histogram with cells; /// represented by a box filled with a color CI function of the cell content.; /// if the cell content is N, the color CI used will be the color number; /// in colors[N],etc. If the maximum cell content is > ncolors, all; /// cell contents are scaled to ncolors.; ///; /// `if ncolors <= 0` a default palette (see below) of 50 colors is; /// defined. The colors defined in this palette are OK for coloring pads, labels.; ///; /// ~~~ {.cpp}; /// index 0->9 : grey colors from light to dark grey; /// index 10->19 : ""brown"" colors; /// index 20->29 : ""blueish"" colors; /// index 30->39 : ""redish"" colors; /// index 40->49 : basic colors; /// ~~~; ///; /// `if ncolors == 1 && colors == 0`, a Rainbow Color map is created; /// with 50 colors. It is kept for backward compatibility. Better palettes like; /// kBird are recommended.; ///; /// High quality predefined palettes with 255 colors are available when `colors == 0`.; /// The following value of `ncolors` give access to:; ///; /// ~~~ {.cpp}; /// if ncolors = 51 and colors=0, a Deep Sea palette is used.; /// if ncolors = 52 and colors=0, a Grey Scale palette is used.; /// if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; /// if ncolors = 54 and colors=0, a Two-Color Hue palette is used.(dark blue through neutral gray to bright yellow); /// if ncolors = 55 and colors=0, a Rain Bow palette is used.; /// if ncolors = 56 and colors=0, an Inverted Dark Body Radiator palette is used.; /// if ncolors = 57 and colors=0, a monotonically increasing L value palette is used.; /// if ncolors = 58 and colors=0, a Cubehelix palette is used; /// (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); /// if ncolors = 59 and colors=0, a Green Red Violet palette is used.; /// if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; /// if ncolors = 61 and colors=0, an Ocean palette is used.; /// if ncolors = 62 and colors=0, a Color Printa",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5534,Security,access,accessed,5534,"colors = 99 and colors=0, a Sienna palette is used.; /// if ncolors = 100 and colors=0, a Solar palette is used.; /// if ncolors = 101 and colors=0, a South West palette is used.; /// if ncolors = 102 and colors=0, a Starry Night palette is used.; /// if ncolors = 103 and colors=0, a Sunset palette is used.; /// if ncolors = 104 and colors=0, a Temperature Map palette is used.; /// if ncolors = 105 and colors=0, a Thermometer palette is used.; /// if ncolors = 106 and colors=0, a Valentine palette is used.; /// if ncolors = 107 and colors=0, a Visible Spectrum palette is used.; /// if ncolors = 108 and colors=0, a Water Melon palette is used.; /// if ncolors = 109 and colors=0, a Cool palette is used.; /// if ncolors = 110 and colors=0, a Copper palette is used.; /// if ncolors = 111 and colors=0, a Gist Earth palette is used.; /// if ncolors = 112 and colors=0, a Viridis palette is used.; /// if ncolors = 113 and colors=0, a Cividis palette is used.; /// ~~~; /// These palettes can also be accessed by names:; /// ~~~ {.cpp}; /// kDeepSea=51, kGreyScale=52, kDarkBodyRadiator=53,; /// kBlueYellow= 54, kRainBow=55, kInvertedDarkBodyRadiator=56,; /// kBird=57, kCubehelix=58, kGreenRedViolet=59,; /// kBlueRedYellow=60, kOcean=61, kColorPrintableOnGrey=62,; /// kAlpine=63, kAquamarine=64, kArmy=65,; /// kAtlantic=66, kAurora=67, kAvocado=68,; /// kBeach=69, kBlackBody=70, kBlueGreenYellow=71,; /// kBrownCyan=72, kCMYK=73, kCandy=74,; /// kCherry=75, kCoffee=76, kDarkRainBow=77,; /// kDarkTerrain=78, kFall=79, kFruitPunch=80,; /// kFuchsia=81, kGreyYellow=82, kGreenBrownTerrain=83,; /// kGreenPink=84, kIsland=85, kLake=86,; /// kLightTemperature=87, kLightTerrain=88, kMint=89,; /// kNeon=90, kPastel=91, kPearl=92,; /// kPigeon=93, kPlum=94, kRedBlue=95,; /// kRose=96, kRust=97, kSandyTerrain=98,; /// kSienna=99, kSolar=100, kSouthWest=101,; /// kStarryNight=102, kSunset=103, kTemperatureMap=104,; /// kThermometer=105, kValentine=106, kVisibleSpectrum=107,; /// kWaterMelon",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3,Energy Efficiency,Green,Green,3,"// Green Red Violet",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:8,Energy Efficiency,Green,Green,8,"// Blue Green Yellow",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3,Energy Efficiency,Green,Green,3,"// Green Brown Terrain",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3,Energy Efficiency,Green,Green,3,"// Green Pink",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx:499,Modifiability,extend,extends,499,"// @(#)root/base:$Id$; // Author: Timur Pocheptsov 20/3/2012; /*************************************************************************; * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TColorGradient; \ingroup Base; \ingroup GraphicsAtt. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code. Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code.; */",MatchSource.CODE_COMMENT,core/base/src/TColorGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx:610,Modifiability,inherit,inheriting,610,"// @(#)root/base:$Id$; // Author: Timur Pocheptsov 20/3/2012; /*************************************************************************; * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TColorGradient; \ingroup Base; \ingroup GraphicsAtt. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code. Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code.; */",MatchSource.CODE_COMMENT,core/base/src/TColorGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx:546,Usability,simpl,simple,546,"// @(#)root/base:$Id$; // Author: Timur Pocheptsov 20/3/2012; /*************************************************************************; * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TColorGradient; \ingroup Base; \ingroup GraphicsAtt. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code. Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code.; */",MatchSource.CODE_COMMENT,core/base/src/TColorGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx:105,Security,validat,validate,105,"////////////////////////////////////////////////////////////////////////////////; /// There is no way to validate parameters here, so it's up to user; /// to pass correct arguments.",MatchSource.CODE_COMMENT,core/base/src/TColorGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx:105,Security,validat,validate,105,"////////////////////////////////////////////////////////////////////////////////; /// There is no way to validate parameters here, so it's up to user; /// to pass correct arguments.",MatchSource.CODE_COMMENT,core/base/src/TColorGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx:793,Modifiability,portab,portable,793,"// @(#)root/base:$Id$; // Author: Rene Brun 05/01/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TDatime; \ingroup Base. This class stores the date and time with a precision of one second; in an unsigned 32 bit word (950130 124559).; The date is stored with the origin being the 1st January 1995. This class has no support for time zones. The time is assumed; to be in the local time of the machine where the object was created.; As a result, TDatime objects are not portable between machines; operating in different time zones and unsuitable for storing the; date/time of data taking events and the like. If absolute time is; required, use TTimeStamp.; */",MatchSource.CODE_COMMENT,core/base/src/TDatime.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx:190,Energy Efficiency,allocate,allocated,190,"////////////////////////////////////////////////////////////////////////////////; /// Return the date & time as a string (ctime() format).; /// Copy result because it points to a statically allocated string.",MatchSource.CODE_COMMENT,core/base/src/TDatime.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx:255,Safety,safe,safe,255,"////////////////////////////////////////////////////////////////////////////////; /// Return the date & time as a string (ctime() format).; /// Result is copied into out (and out is returned). Make sure; /// out can at least contain 26 characters. Thread safe.",MatchSource.CODE_COMMENT,core/base/src/TDatime.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx:617,Integrability,depend,dependent,617,"////////////////////////////////////////////////////////////////////////////////; /// Convert fDatime from TDatime format to the standard time_t format.; /// If toGMT is true, the time offset of the current local time zone is; /// subtracted from the returned time_t. One use of such a non-standard time_t; /// value is to convert a TDatime object that contains local time to GMT,; /// as in this example:; /// ~~~ {.cpp}; /// TDatime now;; /// now.Set(now.Convert(kTRUE));; /// ~~~; /// Caution: the time_t returned from Convert(kTRUE) is incompatible with; /// regular Unix time - it contains an artificial, locale-dependent offset.",MatchSource.CODE_COMMENT,core/base/src/TDatime.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx:460,Availability,failure,failure,460,"////////////////////////////////////////////////////////////////////////////////; /// Static function that returns the global day number from date. The input is; /// in TDatime format yyyymmdd (as obtained via TDatime::GetDate()).; /// This algorithm is only accurate for dates later than October 1582; /// (earliest date on Gregorian calendar) and it is checked that the date; /// is larger than 15821001 and conversion is correct.; /// In case of conversion failure 0 is returned.; /// No need to use when you know dates are larger than October 1582.",MatchSource.CODE_COMMENT,core/base/src/TDatime.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:21,Safety,avoid,avoid,21,"// Use gROOTLocal to avoid triggering undesired initialization of gROOT.; // For example in compiled C++ programs that don't use it directly.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:256,Modifiability,variab,variable,256,"////////////////////////////////////////////////////////////////////////////////; /// Set the current directory to null.; /// This is called from the TContext destructor. Since the destructor is; /// inline, we do not want to have it directly use a global variable.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:116,Deployability,update,update,116,"// A priori, a `TDirectory` object is assumed to not have shared ownership.; // If it is, let's rely on the user to update the bit.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:37,Security,access,access,37,"// We can not use 'cd' as this would access the current thread; // rather than the thread corresponding to that gDirectory.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:19,Deployability,update,update,19,"// Actually do the update of the thread local gDirectory; // using its object specific lock.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:189,Integrability,depend,dependency,189,"////////////////////////////////////////////////////////////////////////////////; /// Fast execution of 'new TBufferFile(TBuffer::kWrite,10000), without having; /// a compile time circular dependency ... alternatively we could (should?); /// introduce yet another abstract interface.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:273,Integrability,interface,interface,273,"////////////////////////////////////////////////////////////////////////////////; /// Fast execution of 'new TBufferFile(TBuffer::kWrite,10000), without having; /// a compile time circular dependency ... alternatively we could (should?); /// introduce yet another abstract interface.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:201,Performance,load,load,201,"////////////////////////////////////////////////////////////////////////////////; /// Clone an object.; /// This function is called when the directory is not a TDirectoryFile.; /// This version has to load the I/O package, hence via Cling.; ///; /// If autoadd is true and if the object class has a; /// DirectoryAutoAdd function, it will be called at the end of the; /// function with the parameter gDirector. This usually means that; /// the object will be appended to the current ROOT directory.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:42,Availability,error,error,42,"// if no default ctor return immediately (error issued by New())",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:15,Modifiability,inherit,inherit,15,"// cl does not inherit from TObject.; // Since this is not supported in this function, the only reason we could reach this code; // is because something is screwed up in the ROOT code.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:165,Performance,load,load,165,"//create a buffer where the object will be streamed; //We are forced to go via the I/O package (ie TBufferFile).; //Invoking TBufferFile via CINT will automatically load the I/O library",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:171,Integrability,rout,routine,171,"// Note in previous implementation every time gDirectory was lookup in; // a thread, if it was set to nullptr it would be reset to gROOT. This; // was unexpected and this routine is not re-introducing this issue.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:512,Availability,Error,Error,512,"////////////////////////////////////////////////////////////////////////////////; /// Find a directory using apath.; /// It apath is null or empty, returns ""this"" directory.; /// Otherwise use apath to find a directory.; /// The absolute path syntax is: `file.root:/dir1/dir2`; ///; /// where file.root is the file and /dir1/dir2 the desired subdirectory; /// in the file. Relative syntax is relative to ""this"" directory. E.g: `../aa`.; /// Returns 0 in case path does not exist.; /// If printError is true, use Error with 'funcname' to issue an error message.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:546,Availability,error,error,546,"////////////////////////////////////////////////////////////////////////////////; /// Find a directory using apath.; /// It apath is null or empty, returns ""this"" directory.; /// Otherwise use apath to find a directory.; /// The absolute path syntax is: `file.root:/dir1/dir2`; ///; /// where file.root is the file and /dir1/dir2 the desired subdirectory; /// in the file. Relative syntax is relative to ""this"" directory. E.g: `../aa`.; /// Returns 0 in case path does not exist.; /// If printError is true, use Error with 'funcname' to issue an error message.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:552,Integrability,message,message,552,"////////////////////////////////////////////////////////////////////////////////; /// Find a directory using apath.; /// It apath is null or empty, returns ""this"" directory.; /// Otherwise use apath to find a directory.; /// The absolute path syntax is: `file.root:/dir1/dir2`; ///; /// where file.root is the file and /dir1/dir2 the desired subdirectory; /// in the file. Relative syntax is relative to ""this"" directory. E.g: `../aa`.; /// Returns 0 in case path does not exist.; /// If printError is true, use Error with 'funcname' to issue an error message.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:107,Energy Efficiency,allocate,allocated,107,"// Delete objects from directory list, this in turn, recursively closes all; // sub-directories (that were allocated on the heap); // if this dir contains subdirs, we must use the slow option for Delete!; // we must avoid ""slow"" as much as possible, in particular Delete(""slow""); // with a large number of objects (eg >10^5) would take for ever.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:216,Safety,avoid,avoid,216,"// Delete objects from directory list, this in turn, recursively closes all; // sub-directories (that were allocated on the heap); // if this dir contains subdirs, we must use the slow option for Delete!; // we must avoid ""slow"" as much as possible, in particular Delete(""slow""); // with a large number of objects (eg >10^5) would take for ever.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:1030,Modifiability,inherit,inherits,1030,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to object identified by namecycle.; ///; /// namecycle has the format name;cycle; /// - name = * is illegal, cycle = * is illegal; /// - cycle = """" or cycle = 9999 ==> apply to a memory object; ///; /// examples:; /// - foo : get object named foo in memory; /// if object is not in memory, try with highest cycle from file; /// - foo;1 : get cycle 1 of foo on file; ///; /// The retrieved object should in principle derive from TObject.; /// If not, the function TDirectory::GetObject should be called.; /// However, this function will still work for a non-TObject, providing that; /// the calling application cast the return type to the correct type (which; /// is the actual type of the object).; ///; /// NOTE:; ///; /// The method GetObject offer better protection and avoid the need; /// for any cast:; /// ~~~ {.cpp}; /// MyClass *obj;; /// directory->GetObject(""some object"",obj);; /// if (obj) { ... the object exist and inherits from MyClass ... }; /// ~~~; ///; /// VERY IMPORTANT NOTE:; ///; /// In case the class of this object derives from TObject but not; /// as a first inheritance, one must use dynamic_cast<>().; /// #### Example 1: Normal case:; /// ~~~ {.cpp}; /// class MyClass : public TObject, public AnotherClass; /// ~~~; /// then on return, one can do:; /// ~~~ {.cpp}; /// MyClass *obj = (MyClass*)directory->Get(""some object of MyClass"");; /// ~~~; /// #### Example 2: Special case:; /// ~~~ {.cpp}; /// class MyClass : public AnotherClass, public TObject; /// ~~~; /// then on return, one must do:; /// ~~~ {.cpp}; /// MyClass *obj = dynamic_cast<MyClass*>(directory->Get(""some object of MyClass""));; /// ~~~; /// Of course, dynamic_cast<> can also be used in the example 1.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:1186,Modifiability,inherit,inheritance,1186,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to object identified by namecycle.; ///; /// namecycle has the format name;cycle; /// - name = * is illegal, cycle = * is illegal; /// - cycle = """" or cycle = 9999 ==> apply to a memory object; ///; /// examples:; /// - foo : get object named foo in memory; /// if object is not in memory, try with highest cycle from file; /// - foo;1 : get cycle 1 of foo on file; ///; /// The retrieved object should in principle derive from TObject.; /// If not, the function TDirectory::GetObject should be called.; /// However, this function will still work for a non-TObject, providing that; /// the calling application cast the return type to the correct type (which; /// is the actual type of the object).; ///; /// NOTE:; ///; /// The method GetObject offer better protection and avoid the need; /// for any cast:; /// ~~~ {.cpp}; /// MyClass *obj;; /// directory->GetObject(""some object"",obj);; /// if (obj) { ... the object exist and inherits from MyClass ... }; /// ~~~; ///; /// VERY IMPORTANT NOTE:; ///; /// In case the class of this object derives from TObject but not; /// as a first inheritance, one must use dynamic_cast<>().; /// #### Example 1: Normal case:; /// ~~~ {.cpp}; /// class MyClass : public TObject, public AnotherClass; /// ~~~; /// then on return, one can do:; /// ~~~ {.cpp}; /// MyClass *obj = (MyClass*)directory->Get(""some object of MyClass"");; /// ~~~; /// #### Example 2: Special case:; /// ~~~ {.cpp}; /// class MyClass : public AnotherClass, public TObject; /// ~~~; /// then on return, one must do:; /// ~~~ {.cpp}; /// MyClass *obj = dynamic_cast<MyClass*>(directory->Get(""some object of MyClass""));; /// ~~~; /// Of course, dynamic_cast<> can also be used in the example 1.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:874,Safety,avoid,avoid,874,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to object identified by namecycle.; ///; /// namecycle has the format name;cycle; /// - name = * is illegal, cycle = * is illegal; /// - cycle = """" or cycle = 9999 ==> apply to a memory object; ///; /// examples:; /// - foo : get object named foo in memory; /// if object is not in memory, try with highest cycle from file; /// - foo;1 : get cycle 1 of foo on file; ///; /// The retrieved object should in principle derive from TObject.; /// If not, the function TDirectory::GetObject should be called.; /// However, this function will still work for a non-TObject, providing that; /// the calling application cast the return type to the correct type (which; /// is the actual type of the object).; ///; /// NOTE:; ///; /// The method GetObject offer better protection and avoid the need; /// for any cast:; /// ~~~ {.cpp}; /// MyClass *obj;; /// directory->GetObject(""some object"",obj);; /// if (obj) { ... the object exist and inherits from MyClass ... }; /// ~~~; ///; /// VERY IMPORTANT NOTE:; ///; /// In case the class of this object derives from TObject but not; /// as a first inheritance, one must use dynamic_cast<>().; /// #### Example 1: Normal case:; /// ~~~ {.cpp}; /// class MyClass : public TObject, public AnotherClass; /// ~~~; /// then on return, one can do:; /// ~~~ {.cpp}; /// MyClass *obj = (MyClass*)directory->Get(""some object of MyClass"");; /// ~~~; /// #### Example 2: Special case:; /// ~~~ {.cpp}; /// class MyClass : public AnotherClass, public TObject; /// ~~~; /// then on return, one must do:; /// ~~~ {.cpp}; /// MyClass *obj = dynamic_cast<MyClass*>(directory->Get(""some object of MyClass""));; /// ~~~; /// Of course, dynamic_cast<> can also be used in the example 1.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:875,Modifiability,inherit,inheriting,875,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to object identified by namecycle if and only if the actual; /// object is a type suitable to be stored as a pointer to a ""expectedClass""; /// If expectedClass is null, no check is performed.; ///; /// namecycle has the format `name;cycle`; /// - name = * is illegal, cycle = * is illegal; /// - cycle = """" or cycle = 9999 ==> apply to a memory object; ///; /// VERY IMPORTANT NOTE:; ///; /// The calling application must cast the returned pointer to; /// the type described by the 2 arguments (i.e. cl):; /// ~~~ {.cpp}; /// MyClass *obj = (MyClass*)directory->GetObjectChecked(""some object of MyClass"",""MyClass""));; /// ~~~; /// Note: We recommend using the method TDirectory::GetObject:; /// ~~~ {.cpp}; /// MyClass *obj = nullptr;; /// directory->GetObject(""some object inheriting from MyClass"",obj);; /// if (obj) { ... we found what we are looking for ... }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:282,Performance,perform,performed,282,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to object identified by namecycle if and only if the actual; /// object is a type suitable to be stored as a pointer to a ""expectedClass""; /// If expectedClass is null, no check is performed.; ///; /// namecycle has the format `name;cycle`; /// - name = * is illegal, cycle = * is illegal; /// - cycle = """" or cycle = 9999 ==> apply to a memory object; ///; /// VERY IMPORTANT NOTE:; ///; /// The calling application must cast the returned pointer to; /// the type described by the 2 arguments (i.e. cl):; /// ~~~ {.cpp}; /// MyClass *obj = (MyClass*)directory->GetObjectChecked(""some object of MyClass"",""MyClass""));; /// ~~~; /// Note: We recommend using the method TDirectory::GetObject:; /// ~~~ {.cpp}; /// MyClass *obj = nullptr;; /// directory->GetObject(""some object inheriting from MyClass"",obj);; /// if (obj) { ... we found what we are looking for ... }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:191,Availability,error,error,191,"////////////////////////////////////////////////////////////////////////////////; /// Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".; ///; /// Returns 0 in case of error or if a sub-directory (hierarchy) with the requested; /// name already exists.; /// returnExistingDirectory returns a pointer to an already existing sub-directory with the same name.; /// Returns a pointer to the created sub-directory or to the top sub-directory of; /// the hierarchy (in the above example, the returned TDirectory * always points; /// to ""a"").; /// In particular, the steps to create first a/b/c and then a/b/d without receiving; /// errors are:; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->cd(""b"");; /// gDirectory->mkdir(""d"");; /// ~~~; /// or; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->mkdir(""b/d"", """", true);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:649,Availability,error,errors,649,"////////////////////////////////////////////////////////////////////////////////; /// Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".; ///; /// Returns 0 in case of error or if a sub-directory (hierarchy) with the requested; /// name already exists.; /// returnExistingDirectory returns a pointer to an already existing sub-directory with the same name.; /// Returns a pointer to the created sub-directory or to the top sub-directory of; /// the hierarchy (in the above example, the returned TDirectory * always points; /// to ""a"").; /// In particular, the steps to create first a/b/c and then a/b/d without receiving; /// errors are:; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->cd(""b"");; /// gDirectory->mkdir(""d"");; /// ~~~; /// or; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->mkdir(""b/d"", """", true);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:148,Deployability,a/b,a/b,148,"////////////////////////////////////////////////////////////////////////////////; /// Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".; ///; /// Returns 0 in case of error or if a sub-directory (hierarchy) with the requested; /// name already exists.; /// returnExistingDirectory returns a pointer to an already existing sub-directory with the same name.; /// Returns a pointer to the created sub-directory or to the top sub-directory of; /// the hierarchy (in the above example, the returned TDirectory * always points; /// to ""a"").; /// In particular, the steps to create first a/b/c and then a/b/d without receiving; /// errors are:; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->cd(""b"");; /// gDirectory->mkdir(""d"");; /// ~~~; /// or; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->mkdir(""b/d"", """", true);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:605,Deployability,a/b,a/b,605,"////////////////////////////////////////////////////////////////////////////////; /// Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".; ///; /// Returns 0 in case of error or if a sub-directory (hierarchy) with the requested; /// name already exists.; /// returnExistingDirectory returns a pointer to an already existing sub-directory with the same name.; /// Returns a pointer to the created sub-directory or to the top sub-directory of; /// the hierarchy (in the above example, the returned TDirectory * always points; /// to ""a"").; /// In particular, the steps to create first a/b/c and then a/b/d without receiving; /// errors are:; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->cd(""b"");; /// gDirectory->mkdir(""d"");; /// ~~~; /// or; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->mkdir(""b/d"", """", true);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:620,Deployability,a/b,a/b,620,"////////////////////////////////////////////////////////////////////////////////; /// Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".; ///; /// Returns 0 in case of error or if a sub-directory (hierarchy) with the requested; /// name already exists.; /// returnExistingDirectory returns a pointer to an already existing sub-directory with the same name.; /// Returns a pointer to the created sub-directory or to the top sub-directory of; /// the hierarchy (in the above example, the returned TDirectory * always points; /// to ""a"").; /// In particular, the steps to create first a/b/c and then a/b/d without receiving; /// errors are:; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->cd(""b"");; /// gDirectory->mkdir(""d"");; /// ~~~; /// or; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->mkdir(""b/d"", """", true);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:486,Integrability,message,message,486,"////////////////////////////////////////////////////////////////////////////////; /// Save object in filename,; /// if filename is `nullptr` or """", a file with ""<objectname>.root"" is created.; /// The name of the key is the object name.; /// By default new file will be created. Using option ""a"", one can append object; /// to the existing ROOT file.; /// If the operation is successful, it returns the number of bytes written to the file; /// otherwise it returns 0.; /// By default a message is printed. Use option ""q"" to not print the message.; /// If filename contains "".json"" extension, JSON representation of the object; /// will be created and saved in the text file. Such file can be used in; /// JavaScript ROOT (https://root.cern/js/) to display object in web browser; /// When creating JSON file, option string may contain compression level from 0 to 3 (default 0)",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:538,Integrability,message,message,538,"////////////////////////////////////////////////////////////////////////////////; /// Save object in filename,; /// if filename is `nullptr` or """", a file with ""<objectname>.root"" is created.; /// The name of the key is the object name.; /// By default new file will be created. Using option ""a"", one can append object; /// to the existing ROOT file.; /// If the operation is successful, it returns the number of bytes written to the file; /// otherwise it returns 0.; /// By default a message is printed. Use option ""q"" to not print the message.; /// If filename contains "".json"" extension, JSON representation of the object; /// will be created and saved in the text file. Such file can be used in; /// JavaScript ROOT (https://root.cern/js/) to display object in web browser; /// When creating JSON file, option string may contain compression level from 0 to 3 (default 0)",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:25,Performance,load,load,25,"// FIXME:; // globalptr->load()->fGDirectories will still contain globalptr, but we cannot; // know whether globalptr->load() has been deleted by another thread in the meantime.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:119,Performance,load,load,119,"// FIXME:; // globalptr->load()->fGDirectories will still contain globalptr, but we cannot; // know whether globalptr->load() has been deleted by another thread in the meantime.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:514,Modifiability,config,config,514,"// @(#)root/base:$Id: 0daf41ec24086ee7af29fdc2f9f2f848b150dcc8 $; // Author: Fons Rademakers 22/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TEnv; \ingroup Base. The TEnv class reads config files, by default named `.rootrc`.; Three types of config files are read: global, user and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:572,Modifiability,config,config,572,"// @(#)root/base:$Id: 0daf41ec24086ee7af29fdc2f9f2f848b150dcc8 $; // Author: Fons Rademakers 22/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TEnv; \ingroup Base. The TEnv class reads config files, by default named `.rootrc`.; Three types of config files are read: global, user and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:793,Modifiability,variab,variable,793,"// @(#)root/base:$Id: 0daf41ec24086ee7af29fdc2f9f2f848b150dcc8 $; // Author: Fons Rademakers 22/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TEnv; \ingroup Base. The TEnv class reads config files, by default named `.rootrc`.; Three types of config files are read: global, user and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:2042,Modifiability,variab,variables,2042,"and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts comment line. Note that the environment variables (like $ROOTSYS) need to be; surrounded in parentheses in order to be expanded. For the currently defined resources (and their default values) see; `$ROOTSYS/etc/system.rootrc`. Note that the .rootrc config files contain the config for all ROOT; based applications. To add new entries to a TEnv:; ~~~ {.cpp}; TEnv env("".myfile"");; env.SetValue(""myname"",""value"");; env.SaveLevel(kEnvLocal);; ~~~; All new entries will be saved in the file corresponding to the; first SaveLevel() command. If Save() is used, new entries go; into the local file by default.; */",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:2251,Modifiability,config,config,2251,"and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts comment line. Note that the environment variables (like $ROOTSYS) need to be; surrounded in parentheses in order to be expanded. For the currently defined resources (and their default values) see; `$ROOTSYS/etc/system.rootrc`. Note that the .rootrc config files contain the config for all ROOT; based applications. To add new entries to a TEnv:; ~~~ {.cpp}; TEnv env("".myfile"");; env.SetValue(""myname"",""value"");; env.SaveLevel(kEnvLocal);; ~~~; All new entries will be saved in the file corresponding to the; first SaveLevel() command. If Save() is used, new entries go; into the local file by default.; */",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:2276,Modifiability,config,config,2276,"and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts comment line. Note that the environment variables (like $ROOTSYS) need to be; surrounded in parentheses in order to be expanded. For the currently defined resources (and their default values) see; `$ROOTSYS/etc/system.rootrc`. Note that the .rootrc config files contain the config for all ROOT; based applications. To add new entries to a TEnv:; ~~~ {.cpp}; TEnv env("".myfile"");; env.SetValue(""myname"",""value"");; env.SaveLevel(kEnvLocal);; ~~~; All new entries will be saved in the file corresponding to the; first SaveLevel() command. If Save() is used, new entries go; into the local file by default.; */",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:1001,Safety,avoid,avoid,1001,"// @(#)root/base:$Id: 0daf41ec24086ee7af29fdc2f9f2f848b150dcc8 $; // Author: Fons Rademakers 22/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TEnv; \ingroup Base. The TEnv class reads config files, by default named `.rootrc`.; Three types of config files are read: global, user and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:445,Modifiability,variab,variable,445,"////////////////////////////////////////////////////////////////////////////////; /// Create a resource table and read the (possibly) three resource files,; /// i.e.\ `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`),; /// `$HOME/<name>` and `$PWD/<name>`.; /// ROOT always reads "".rootrc"" (in TROOT::InitSystem()). You can; /// read additional user defined resource files by creating additional TEnv; /// objects. By setting the shell variable ROOTENV_NO_HOME=1 the reading of; /// the `$HOME/<name>` resource file will be skipped. This might be useful in; /// case the home directory resides on an auto-mounted remote file system; /// and one wants to avoid the file system from being mounted.",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:663,Safety,avoid,avoid,663,"////////////////////////////////////////////////////////////////////////////////; /// Create a resource table and read the (possibly) three resource files,; /// i.e.\ `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`),; /// `$HOME/<name>` and `$PWD/<name>`.; /// ROOT always reads "".rootrc"" (in TROOT::InitSystem()). You can; /// read additional user defined resource files by creating additional TEnv; /// objects. By setting the shell variable ROOTENV_NO_HOME=1 the reading of; /// the `$HOME/<name>` resource file will be skipped. This might be useful in; /// case the home directory resides on an auto-mounted remote file system; /// and one wants to avoid the file system from being mounted.",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:167,Availability,error,error,167,"////////////////////////////////////////////////////////////////////////////////; /// Read and parse the resource file for a certain level.; /// Returns -1 on case of error, 0 in case of success.",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:6,Availability,Error,Error,6,"// no Error() here since we are allowed to try to read from a non-existing; // file (like ./.rootrc, $HOME/.rootrc, etc.)",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:213,Availability,error,error,213,"////////////////////////////////////////////////////////////////////////////////; /// Write resource records to file fname for a certain level. Use; /// level kEnvAll to write all resources. Returns -1 on case of error,; /// 0 in case of success.",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:3,Deployability,Integrat,Integrate,3,"// Integrate with macOS crash reporter.",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:3,Integrability,Integrat,Integrate,3,"// Integrate with macOS crash reporter.",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:15,Availability,error,error,15,"/// Serializes error output, destructed by the gROOT destructor via ReleaseDefaultErrorHandler()",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:68,Deployability,Release,ReleaseDefaultErrorHandler,68,"/// Serializes error output, destructed by the gROOT destructor via ReleaseDefaultErrorHandler()",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:39,Integrability,message,message,39,"// ROOT namespace; /// Print debugging message to stderr and, on Windows, to the system debugger.",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:16,Availability,error,error,16,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:145,Availability,error,error,145,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:54,Integrability,message,message,54,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:84,Safety,abort,abort,84,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:100,Safety,abort,aborts,100,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:304,Safety,abort,abort,304,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:23,Availability,error,error,23,"// This can also print error messages, so we need to do it outside the lock",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:29,Integrability,message,messages,29,"// This can also print error messages, so we need to do it outside the lock",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:656,Deployability,update,updated,656,"/** \class TExec; \ingroup Base. TExec is a utility class that can be used to execute a C++ command; when some event happens in a pad.; The command in turn can invoke a C++ macro to paint graphics objects; at positions depending on the histogram or graph contents. ### Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in `$ROOTSYS/test/Aclock.cxx`.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; ~~~ {.cpp}; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; ~~~. ### Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this l",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:2847,Energy Efficiency,power,powerful,2847,"object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this list of TExecs. In the code (interpreted or compiled) executed; by the TExec referenced command, one can call the pad service functions; such as TPad::GetEvent, TPad::GetEventX, TPad::GetEventY to find; which type of event and the X,Y position of the mouse.; By default, the list of TExecs is executed. This can be disabled; via the canvas menu ""Option"".; See $ROOTSYS/tutorials/hist/exec2.C for an example.; ~~~ {.cpp}; Root > TFile f(""hsimple.root"");; Root > hpxpy.Draw();; Root > c1.AddExec(""ex2"","".x exec2.C"");; ~~~; When moving the mouse in the canvas, a second canvas shows the; projection along X of the bin corresponding to the Y position; of the mouse. The resulting histogram is fitted with a gaussian.; A ""dynamic"" line shows the current bin position in Y.; This more elaborated example can be used as a starting point; to develop more powerful interactive applications exploiting CINT; as a development engine. The 3 options above can be combined.; */; ////////////////////////////////////////////////////////////////////////////////; /// Exec default constructor.",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:219,Integrability,depend,depending,219,"/** \class TExec; \ingroup Base. TExec is a utility class that can be used to execute a C++ command; when some event happens in a pad.; The command in turn can invoke a C++ macro to paint graphics objects; at positions depending on the histogram or graph contents. ### Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in `$ROOTSYS/test/Aclock.cxx`.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; ~~~ {.cpp}; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; ~~~. ### Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this l",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:736,Performance,Load,Load,736,"/** \class TExec; \ingroup Base. TExec is a utility class that can be used to execute a C++ command; when some event happens in a pad.; The command in turn can invoke a C++ macro to paint graphics objects; at positions depending on the histogram or graph contents. ### Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in `$ROOTSYS/test/Aclock.cxx`.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; ~~~ {.cpp}; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; ~~~. ### Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this l",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:544,Testability,test,test,544,"/** \class TExec; \ingroup Base. TExec is a utility class that can be used to execute a C++ command; when some event happens in a pad.; The command in turn can invoke a C++ macro to paint graphics objects; at positions depending on the histogram or graph contents. ### Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in `$ROOTSYS/test/Aclock.cxx`.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; ~~~ {.cpp}; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; ~~~. ### Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this l",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:751,Testability,test,test,751,"/** \class TExec; \ingroup Base. TExec is a utility class that can be used to execute a C++ command; when some event happens in a pad.; The command in turn can invoke a C++ macro to paint graphics objects; at positions depending on the histogram or graph contents. ### Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in `$ROOTSYS/test/Aclock.cxx`.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; ~~~ {.cpp}; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; ~~~. ### Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this l",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:6,Security,hash,hash,6,"// We hash on the UUID",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:257,Availability,error,error,257,"////////////////////////////////////////////////////////////////////////////////; /// Merge all TFileCollection objects in li into this TFileCollection object.; /// Updates counters at the end.; /// Returns the number of merged collections or -1 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:165,Deployability,Update,Updates,165,"////////////////////////////////////////////////////////////////////////////////; /// Merge all TFileCollection objects in li into this TFileCollection object.; /// Updates counters at the end.; /// Returns the number of merged collections or -1 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:271,Availability,avail,available,271,"////////////////////////////////////////////////////////////////////////////////; /// Update accumulated information about the elements of the collection; /// (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; /// bytes when the size info is not available.; /// Also updates the meta data information by summarizing; /// the meta data of the contained objects.; /// Return -1 in case of any failure, 0 if the total size is exact, 1 if; /// incomplete, 2 if complete but (at least partially) estimated.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:416,Availability,failure,failure,416,"////////////////////////////////////////////////////////////////////////////////; /// Update accumulated information about the elements of the collection; /// (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; /// bytes when the size info is not available.; /// Also updates the meta data information by summarizing; /// the meta data of the contained objects.; /// Return -1 in case of any failure, 0 if the total size is exact, 1 if; /// incomplete, 2 if complete but (at least partially) estimated.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update accumulated information about the elements of the collection; /// (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; /// bytes when the size info is not available.; /// Also updates the meta data information by summarizing; /// the meta data of the contained objects.; /// Return -1 in case of any failure, 0 if the total size is exact, 1 if; /// incomplete, 2 if complete but (at least partially) estimated.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:292,Deployability,update,updates,292,"////////////////////////////////////////////////////////////////////////////////; /// Update accumulated information about the elements of the collection; /// (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; /// bytes when the size info is not available.; /// Also updates the meta data information by summarizing; /// the meta data of the contained objects.; /// Return -1 in case of any failure, 0 if the total size is exact, 1 if; /// incomplete, 2 if complete but (at least partially) estimated.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:3,Usability,Clear,Clear,3,"// Clear internal meta information which is going to be rebuilt in this; // function",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:388,Deployability,Update,Update,388,"////////////////////////////////////////////////////////////////////////////////; /// Add's a meta data object to the file collection object. The object will be; /// adopted by the TFileCollection and should not be deleted by the user.; /// Typically objects of class TFileInfoMeta or derivatives should be added,; /// but any class is accepted.; ///; /// NB : a call to TFileCollection::Update will remove these objects unless the; /// bit TFileInfoMeta::kExternal is set.; /// Returns kTRUE if successful, kFALSE otherwise.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileInfo.cxx:335,Security,hash,hashed,335,"////////////////////////////////////////////////////////////////////////////////; /// Set the UUID to the value associated to the string 'uuid'. This is; /// useful to set the UUID to the one of the ROOT file during verification.; ///; /// NB: we do not change the name in here, because this would screw up lists; /// of these objects hashed on the name. Those lists need to be rebuild.; /// TFileCollection does that in RemoveDuplicates.",MatchSource.CODE_COMMENT,core/base/src/TFileInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileInfo.cxx:152,Availability,error,error,152,"////////////////////////////////////////////////////////////////////////////////; /// Remove URL at given position. Returns kTRUE on success, kFALSE on error.",MatchSource.CODE_COMMENT,core/base/src/TFileInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:1160,Energy Efficiency,efficient,efficient,1160,"Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TFolder; \ingroup Base. \legacy{TFolder}. A TFolder object is a collection of objects and folders.; Folders have a name and a title and are identified in the folder hierarchy; by a ""Unix-like"" naming mechanism. The root of all folders is //root.; New folders can be dynamically added or removed to/from a folder.; The folder hierarchy can be visualized via the TBrowser. \image html base_browser.png. The Root folders hierarchy can be seen as a whiteboard where objects; are posted. Other classes/tasks can access these objects by specifying; only a string pathname. This whiteboard facility greatly improves the; modularity of an application, minimizing the class relationship problem; that penalizes large applications. Pointers are efficient to communicate between classes.; However, one has interest to minimize direct coupling between classes; in the form of direct pointers. One better uses the naming and search; service provided by the Root folders hierarchy. This makes the classes; loosely coupled and also greatly facilitates I/O operations.; In a client/server environment, this mechanism facilitates the access; to any kind of object in //root stores running on different processes. A TFolder is created by invoking the TFolder constructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted, its reference from the parent folder and; possible other folders is deleted. If a folder has been declared the owner of its objects/folders via; TFolder::SetOwner, then th",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:1248,Modifiability,coupling,coupling,1248," $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TFolder; \ingroup Base. \legacy{TFolder}. A TFolder object is a collection of objects and folders.; Folders have a name and a title and are identified in the folder hierarchy; by a ""Unix-like"" naming mechanism. The root of all folders is //root.; New folders can be dynamically added or removed to/from a folder.; The folder hierarchy can be visualized via the TBrowser. \image html base_browser.png. The Root folders hierarchy can be seen as a whiteboard where objects; are posted. Other classes/tasks can access these objects by specifying; only a string pathname. This whiteboard facility greatly improves the; modularity of an application, minimizing the class relationship problem; that penalizes large applications. Pointers are efficient to communicate between classes.; However, one has interest to minimize direct coupling between classes; in the form of direct pointers. One better uses the naming and search; service provided by the Root folders hierarchy. This makes the classes; loosely coupled and also greatly facilitates I/O operations.; In a client/server environment, this mechanism facilitates the access; to any kind of object in //root stores running on different processes. A TFolder is created by invoking the TFolder constructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted, its reference from the parent folder and; possible other folders is deleted. If a folder has been declared the owner of its objects/folders via; TFolder::SetOwner, then the contained objects are deleted when the; folder is deleted. By default, a fold",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:3603,Modifiability,variab,variable,3603,"nstructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted, its reference from the parent folder and; possible other folders is deleted. If a folder has been declared the owner of its objects/folders via; TFolder::SetOwner, then the contained objects are deleted when the; folder is deleted. By default, a folder does not own its contained objects. NOTE that folder ownership can be set; - via TFolder::SetOwner; - or via TCollection::SetOwner on the collection specified to TFolder::AddFolder. Standard Root objects are automatically added to the folder hierarchy.; For example, the following folders exist:; //root/Files with the list of currently connected Root files; //root/Classes with the list of active classes; //root/Geometries with active geometries; //root/Canvases with the list of active canvases; //root/Styles with the list of graphics styles; //root/Colors with the list of active colors. For example, if a file ""myFile.root"" is added to the list of files, one can; retrieve a pointer to the corresponding TFile object with a statement like:; ~~~ {.cpp}; TFile *myFile = (TFile*)gROOT->FindObject(""//root/Files/myFile.root"");; ~~~; The above statement can be abbreviated to:; ~~~ {.cpp}; TFile *myFile = (TFile*)gROOT->FindObject(""/Files/myFile.root"");; ~~~; or even to:; ~~~ {.cpp}; TFile *myFile = (TFile*)gROOT->FindObjectAny(""myFile.root"");; ~~~; In this last case, the TROOT::FindObjectAny function will scan the folder hierarchy; starting at //root and will return the first object named ""myFile.root"". Because a string-based search mechanism is expensive, it is recommended; to save the pointer to the object as a class member or local variable; if this pointer is used frequently or inside loops.; */",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:932,Security,access,access,932,"// @(#)root/base:$Id$; // Author: Rene Brun 02/09/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TFolder; \ingroup Base. \legacy{TFolder}. A TFolder object is a collection of objects and folders.; Folders have a name and a title and are identified in the folder hierarchy; by a ""Unix-like"" naming mechanism. The root of all folders is //root.; New folders can be dynamically added or removed to/from a folder.; The folder hierarchy can be visualized via the TBrowser. \image html base_browser.png. The Root folders hierarchy can be seen as a whiteboard where objects; are posted. Other classes/tasks can access these objects by specifying; only a string pathname. This whiteboard facility greatly improves the; modularity of an application, minimizing the class relationship problem; that penalizes large applications. Pointers are efficient to communicate between classes.; However, one has interest to minimize direct coupling between classes; in the form of direct pointers. One better uses the naming and search; service provided by the Root folders hierarchy. This makes the classes; loosely coupled and also greatly facilitates I/O operations.; In a client/server environment, this mechanism facilitates the access; to any kind of object in //root stores running on different processes. A TFolder is created by invoking the TFolder constructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:1542,Security,access,access,1542," a title and are identified in the folder hierarchy; by a ""Unix-like"" naming mechanism. The root of all folders is //root.; New folders can be dynamically added or removed to/from a folder.; The folder hierarchy can be visualized via the TBrowser. \image html base_browser.png. The Root folders hierarchy can be seen as a whiteboard where objects; are posted. Other classes/tasks can access these objects by specifying; only a string pathname. This whiteboard facility greatly improves the; modularity of an application, minimizing the class relationship problem; that penalizes large applications. Pointers are efficient to communicate between classes.; However, one has interest to minimize direct coupling between classes; in the form of direct pointers. One better uses the naming and search; service provided by the Root folders hierarchy. This makes the classes; loosely coupled and also greatly facilitates I/O operations.; In a client/server environment, this mechanism facilitates the access; to any kind of object in //root stores running on different processes. A TFolder is created by invoking the TFolder constructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted, its reference from the parent folder and; possible other folders is deleted. If a folder has been declared the owner of its objects/folders via; TFolder::SetOwner, then the contained objects are deleted when the; folder is deleted. By default, a folder does not own its contained objects. NOTE that folder ownership can be set; - via TFolder::SetOwner; - or via TCollection::SetOwner on the collection specified to TFolder::AddFolder. Standard Root objects are automatically added to the folder hierarchy.; For example, the following folders exis",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:24,Modifiability,Inherit,InheritsFrom,24,"// For a TClass object, InheritsFrom does not check the inheritance of; // the object but the inheritance of the class described by the object,; // so we need to explicitly call IsA",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:56,Modifiability,inherit,inheritance,56,"// For a TClass object, InheritsFrom does not check the inheritance of; // the object but the inheritance of the class described by the object,; // so we need to explicitly call IsA",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:94,Modifiability,inherit,inheritance,94,"// For a TClass object, InheritsFrom does not check the inheritance of; // the object but the inheritance of the class described by the object,; // so we need to explicitly call IsA",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:41,Modifiability,Inherit,InheritsFrom,41,"// For any other object IsA is called by InheritsFrom",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:12,Modifiability,Inherit,InheritsFrom,12,"//if (!obj->InheritsFrom(TFolder::Class())) continue;",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:268,Usability,Clear,Clear,268,"////////////////////////////////////////////////////////////////////////////////; /// Set ownership.; /// If the folder is declared owner, when the folder is deleted, all; /// the objects added via TFolder::Add are deleted via TObject::Delete,; /// otherwise TObject::Clear is called.; ///; /// NOTE that folder ownership can be set:; /// - via TFolder::SetOwner; /// - or via TCollection::SetOwner on the collection specified to TFolder::AddFolder",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TInetAddress.cxx:492,Integrability,Protocol,Protocol,492,"// @(#)root/base:$Id$; // Author: Fons Rademakers 16/12/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TInetAddress; \ingroup Base. This class represents an Internet Protocol (IP) address.; */",MatchSource.CODE_COMMENT,core/base/src/TInetAddress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TInetAddress.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TInetAddress.cxx:282,Energy Efficiency,allocate,allocated,282,"////////////////////////////////////////////////////////////////////////////////; /// Returns the raw IP address in host byte order. The highest; /// order byte position is in addr[0]. To be prepared for 64-bit; /// IP addresses an array of bytes is returned.; /// User must delete allocated memory.",MatchSource.CODE_COMMENT,core/base/src/TInetAddress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TInetAddress.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TListOfTypes.cxx:57,Availability,avail,available,57,"// Is this a scope?; // We look into the list of classes available,; // the ones in the dictionaries and the protoclasses.",MatchSource.CODE_COMMENT,core/base/src/TListOfTypes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TListOfTypes.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TListOfTypes.cxx:6,Performance,perform,perform,6,"// We perform now a lookup",MatchSource.CODE_COMMENT,core/base/src/TListOfTypes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TListOfTypes.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:884,Deployability,update,updated,884,"// @(#)root/base:$Id$; // Author: Rene Brun 16/08/2005; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMacro; \ingroup Base. Class supporting a collection of lines with C++ code.; A TMacro can be executed, saved to a ROOT file, edited, etc. A macro can be built line by line by calling the AddLine function.; or it can be created directly from a file via the special constructor; when the first argument is a file name. A macro can be executed via the Exec function.; Arguments can be specified when calling Exec. A macro can be drawn in a pad. When the pad is updated, the macro is; automatically executed. The code in the macro can be saved via the SaveSource function.; If the macro is in the list of primitives of a pad/canvas, the macro; will be saved in the script generated by TCanvas::SaveSource. A macro can be written to a ROOT file via TObject::Write. Examples:; ~~~ {.cpp}; TMacro m(""Peaks.C""); //macro m with name ""Peaks"" is created; //from file Peaks.C; m.Exec(); //macro executed with default arguments; m.Exec(""4""); //macro executed with argument; m.SaveSource(""newPeaks.C"");; TFile f(""mymacros.root"",""recreate"");; m.Write(); //macro saved to file with name ""Peaks""; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:170,Integrability,depend,depending,170,"////////////////////////////////////////////////////////////////////////////////; /// When clicking in the browser, the following action is performed; /// on this macro, depending the content of the variable TMacro.Browse.; /// TMacro.Browse can be set in the system.rootrc or .rootrc file like:; /// ~~~ {.cpp}; /// TMacro.Browse : Action; /// ~~~; /// or set via gEnv->SetValue, eg; /// ~~~ {.cpp}; /// gEnv->SetValue(""TMacro.Browse"",""Print"");; /// ~~~; /// By default TMacro.Browse=""""; /// -if TMacro.Browse ="""" the macro is executed; /// -if TMacro.Browse =""Print"" the macro is printed in stdout; /// -if TMacro.Browse is of the form ""mymacro.C""; /// the macro void mymacro.C(TMacro *m) is called where m=this macro; /// An example of macro.C saving the macro into a file and viewing it; /// with emacs is shown below:; /// ~~~ {.cpp}; /// void mymacro(TMacro *m) {; /// m->SaveSource(""xx.log"");; /// gSystem->Exec(""emacs xx.log&"");; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:199,Modifiability,variab,variable,199,"////////////////////////////////////////////////////////////////////////////////; /// When clicking in the browser, the following action is performed; /// on this macro, depending the content of the variable TMacro.Browse.; /// TMacro.Browse can be set in the system.rootrc or .rootrc file like:; /// ~~~ {.cpp}; /// TMacro.Browse : Action; /// ~~~; /// or set via gEnv->SetValue, eg; /// ~~~ {.cpp}; /// gEnv->SetValue(""TMacro.Browse"",""Print"");; /// ~~~; /// By default TMacro.Browse=""""; /// -if TMacro.Browse ="""" the macro is executed; /// -if TMacro.Browse =""Print"" the macro is printed in stdout; /// -if TMacro.Browse is of the form ""mymacro.C""; /// the macro void mymacro.C(TMacro *m) is called where m=this macro; /// An example of macro.C saving the macro into a file and viewing it; /// with emacs is shown below:; /// ~~~ {.cpp}; /// void mymacro(TMacro *m) {; /// m->SaveSource(""xx.log"");; /// gSystem->Exec(""emacs xx.log&"");; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:140,Performance,perform,performed,140,"////////////////////////////////////////////////////////////////////////////////; /// When clicking in the browser, the following action is performed; /// on this macro, depending the content of the variable TMacro.Browse.; /// TMacro.Browse can be set in the system.rootrc or .rootrc file like:; /// ~~~ {.cpp}; /// TMacro.Browse : Action; /// ~~~; /// or set via gEnv->SetValue, eg; /// ~~~ {.cpp}; /// gEnv->SetValue(""TMacro.Browse"",""Print"");; /// ~~~; /// By default TMacro.Browse=""""; /// -if TMacro.Browse ="""" the macro is executed; /// -if TMacro.Browse =""Print"" the macro is printed in stdout; /// -if TMacro.Browse is of the form ""mymacro.C""; /// the macro void mymacro.C(TMacro *m) is called where m=this macro; /// An example of macro.C saving the macro into a file and viewing it; /// with emacs is shown below:; /// ~~~ {.cpp}; /// void mymacro(TMacro *m) {; /// m->SaveSource(""xx.log"");; /// gSystem->Exec(""emacs xx.log&"");; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:893,Testability,log,log,893,"////////////////////////////////////////////////////////////////////////////////; /// When clicking in the browser, the following action is performed; /// on this macro, depending the content of the variable TMacro.Browse.; /// TMacro.Browse can be set in the system.rootrc or .rootrc file like:; /// ~~~ {.cpp}; /// TMacro.Browse : Action; /// ~~~; /// or set via gEnv->SetValue, eg; /// ~~~ {.cpp}; /// gEnv->SetValue(""TMacro.Browse"",""Print"");; /// ~~~; /// By default TMacro.Browse=""""; /// -if TMacro.Browse ="""" the macro is executed; /// -if TMacro.Browse =""Print"" the macro is printed in stdout; /// -if TMacro.Browse is of the form ""mymacro.C""; /// the macro void mymacro.C(TMacro *m) is called where m=this macro; /// An example of macro.C saving the macro into a file and viewing it; /// with emacs is shown below:; /// ~~~ {.cpp}; /// void mymacro(TMacro *m) {; /// m->SaveSource(""xx.log"");; /// gSystem->Exec(""emacs xx.log&"");; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:929,Testability,log,log,929,"////////////////////////////////////////////////////////////////////////////////; /// When clicking in the browser, the following action is performed; /// on this macro, depending the content of the variable TMacro.Browse.; /// TMacro.Browse can be set in the system.rootrc or .rootrc file like:; /// ~~~ {.cpp}; /// TMacro.Browse : Action; /// ~~~; /// or set via gEnv->SetValue, eg; /// ~~~ {.cpp}; /// gEnv->SetValue(""TMacro.Browse"",""Print"");; /// ~~~; /// By default TMacro.Browse=""""; /// -if TMacro.Browse ="""" the macro is executed; /// -if TMacro.Browse =""Print"" the macro is printed in stdout; /// -if TMacro.Browse is of the form ""mymacro.C""; /// the macro void mymacro.C(TMacro *m) is called where m=this macro; /// An example of macro.C saving the macro into a file and viewing it; /// with emacs is shown below:; /// ~~~ {.cpp}; /// void mymacro(TMacro *m) {; /// m->SaveSource(""xx.log"");; /// gSystem->Exec(""emacs xx.log&"");; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:207,Availability,error,error,207,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of the current content. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:94,Security,checksum,checksum,94,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of the current content. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load the macro into the interpreter.; /// Return true in case the loading was successful.",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:152,Performance,load,loading,152,"////////////////////////////////////////////////////////////////////////////////; /// Load the macro into the interpreter.; /// Return true in case the loading was successful.",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:193,Availability,error,error,193,"////////////////////////////////////////////////////////////////////////////////; /// Execute this macro with params, if params is 0, default parameters; /// (set via SetParams) are used.; /// error is set to an TInterpreter::EErrorCode by TApplication::ProcessLine().; /// Returns the result of the macro (return value or value of the last; /// expression), cast to a Long_t.",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMathBase.cxx:562,Availability,avail,available,562,"// @(#)root/base:$Id$; // Authors: Rene Brun 08/02/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** TMath Base functions; \ingroup Base. Define the functions Min, Max, Abs, Sign, Range for all types.; NB: These functions are unfortunately not available in a portable; way in std::. More functions are defined in TMath.h. TMathBase.h is designed to be; a stable file and used in place of TMath.h in the ROOT miniCore.; */",MatchSource.CODE_COMMENT,core/base/src/TMathBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMathBase.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMathBase.cxx:577,Modifiability,portab,portable,577,"// @(#)root/base:$Id$; // Authors: Rene Brun 08/02/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** TMath Base functions; \ingroup Base. Define the functions Min, Max, Abs, Sign, Range for all types.; NB: These functions are unfortunately not available in a portable; way in std::. More functions are defined in TMath.h. TMathBase.h is designed to be; a stable file and used in place of TMath.h in the ROOT miniCore.; */",MatchSource.CODE_COMMENT,core/base/src/TMathBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMathBase.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:696,Availability,avail,available,696,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:954,Deployability,Update,Update,954,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:480,Integrability,message,message-digest,480,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:889,Integrability,message,message,889,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:720,Security,Secur,Security,720,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:755,Testability,test,tested,755,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:119,Safety,avoid,avoids,119,"////////////////////////////////////////////////////////////////////////////////; /// MD5 copy ctor. Special copy ctor avoids copying unnecessary; /// temp arrays when finalized.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:139,Safety,avoid,avoids,139,"////////////////////////////////////////////////////////////////////////////////; /// MD5 assignment operator. Special assignment operator avoids; /// copying unnecessary temp arrays when finalized.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update TMD5 object to reflect the concatenation of another buffer full; /// of bytes.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:3,Deployability,Update,Update,3,"// Update bitcount",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:116,Integrability,message,message-digest,116,"////////////////////////////////////////////////////////////////////////////////; /// MD5 finalization, ends an MD5 message-digest operation, writing the; /// the message digest and zeroizing the context.; /// Returns digest.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:163,Integrability,message,message,163,"////////////////////////////////////////////////////////////////////////////////; /// MD5 finalization, ends an MD5 message-digest operation, writing the; /// the message digest and zeroizing the context.; /// Returns digest.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:116,Integrability,message,message-digest,116,"////////////////////////////////////////////////////////////////////////////////; /// MD5 finalization, ends an MD5 message-digest operation, writing the; /// the message digest and zeroizing the context.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:163,Integrability,message,message,163,"////////////////////////////////////////////////////////////////////////////////; /// MD5 finalization, ends an MD5 message-digest operation, writing the; /// the message digest and zeroizing the context.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:93,Integrability,message,message,93,"////////////////////////////////////////////////////////////////////////////////; /// Return message digest as string. Returns """" in case Final() has; /// not yet been called.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:35,Performance,optimiz,optimized,35,"// The four core functions - F1 is optimized somewhat; //#define F1(x, y, z) (x & y | ~x & z)",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:208,Deployability,Update,Update,208,"////////////////////////////////////////////////////////////////////////////////; /// The core of the MD5 algorithm, this alters an existing MD5 hash to; /// reflect the addition of 16 longwords of new data. Update() blocks; /// the data and converts bytes into longwords for this routine.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:281,Integrability,rout,routine,281,"////////////////////////////////////////////////////////////////////////////////; /// The core of the MD5 algorithm, this alters an existing MD5 hash to; /// reflect the addition of 16 longwords of new data. Update() blocks; /// the data and converts bytes into longwords for this routine.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:145,Security,hash,hash,145,"////////////////////////////////////////////////////////////////////////////////; /// The core of the MD5 algorithm, this alters an existing MD5 hash to; /// reflect the addition of 16 longwords of new data. Update() blocks; /// the data and converts bytes into longwords for this routine.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:98,Integrability,message,message,98,"////////////////////////////////////////////////////////////////////////////////; /// Compare two message digests for equality.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:312,Availability,error,error,312,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum stored in ASCII in specified file. Use to read files; /// created via WriteChecksum(). The returned TMD5 object must be deleted; /// by the user. Returns 0 in case the file cannot be opened or in case of; /// error. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:94,Security,checksum,checksum,94,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum stored in ASCII in specified file. Use to read files; /// created via WriteChecksum(). The returned TMD5 object must be deleted; /// by the user. Returns 0 in case the file cannot be opened or in case of; /// error. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:286,Availability,error,error,286,"////////////////////////////////////////////////////////////////////////////////; /// Writes checksum in ASCII format to specified file. This file can; /// directly be read by ReadChecksum(). The md5 must have been finalized.; /// Returns -1 in case file cannot be opened or in case of error,; /// 0 otherwise. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:93,Security,checksum,checksum,93,"////////////////////////////////////////////////////////////////////////////////; /// Writes checksum in ASCII format to specified file. This file can; /// directly be read by ReadChecksum(). The md5 must have been finalized.; /// Returns -1 in case file cannot be opened or in case of error,; /// 0 otherwise. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:243,Availability,error,error,243,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case the file does not exists; /// or in case of error. This function preserves the modtime of the file; /// so it can be safely used in conjunction with methods that keep track; /// of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:316,Safety,safe,safely,316,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case the file does not exists; /// or in case of error. This function preserves the modtime of the file; /// so it can be safely used in conjunction with methods that keep track; /// of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:94,Security,checksum,checksum,94,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case the file does not exists; /// or in case of error. This function preserves the modtime of the file; /// so it can be safely used in conjunction with methods that keep track; /// of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:168,Availability,error,error,168,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file in digest argument. Returns -1 in; /// case of error, 0 otherwise. This method preserves the modtime of the; /// file so it can be safely used in conjunction with methods that keep; /// track of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:252,Safety,safe,safely,252,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file in digest argument. Returns -1 in; /// case of error, 0 otherwise. This method preserves the modtime of the; /// file so it can be safely used in conjunction with methods that keep; /// track of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:94,Security,checksum,checksum,94,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file in digest argument. Returns -1 in; /// case of error, 0 otherwise. This method preserves the modtime of the; /// file so it can be safely used in conjunction with methods that keep; /// track of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:486,Security,access,accessing,486,"// @(#)root/base:$Id$; // Author: Fons Rademakers 15/07/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMemberInspector; \ingroup Base. Abstract base class for accessing the data-members of a class.; Classes derived from this class can be given as argument to the; ShowMembers() methods of ROOT classes. This feature facilitates; the writing of class browsers and inspectors.; */",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:253,Availability,error,error,253,"// Call ShowMember() on obj.; // This could be faster if we implemented this either as a templated; // function or by rootcint-generated code using the typeid (i.e. the; // difference is a lookup in a TList instead of in a map).; // To avoid a spurious error message in case the data member is; // transient and does not have a dictionary we check first.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:259,Integrability,message,message,259,"// Call ShowMember() on obj.; // This could be faster if we implemented this either as a templated; // function or by rootcint-generated code using the typeid (i.e. the; // difference is a lookup in a TList instead of in a map).; // To avoid a spurious error message in case the data member is; // transient and does not have a dictionary we check first.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:236,Safety,avoid,avoid,236,"// Call ShowMember() on obj.; // This could be faster if we implemented this either as a templated; // function or by rootcint-generated code using the typeid (i.e. the; // difference is a lookup in a TList instead of in a map).; // To avoid a spurious error message in case the data member is; // transient and does not have a dictionary we check first.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:26,Availability,error,error,26,"// This might be worth an error message",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:32,Integrability,message,message,32,"// This might be worth an error message",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:3,Integrability,Rout,Routine,3,"// Routine driving the visiting of the class information/data members.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:3,Integrability,Rout,Routine,3,"// Routine driving the visiting of the class information/data members.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:3,Integrability,Rout,Routine,3,"// Routine driving the visiting of the class information/data members.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:972,Availability,Error,Errors,972,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:798,Deployability,install,install,798,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:462,Integrability,message,messages,462,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:566,Integrability,message,messages,566,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:686,Integrability,message,message,686,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:739,Integrability,message,message,739,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:781,Integrability,message,message,781,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:820,Integrability,message,message,820,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:850,Integrability,message,message,850,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:946,Integrability,message,message,946,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:994,Integrability,message,message,994,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:1045,Integrability,message,message,1045,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:1093,Integrability,message,message,1093,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:725,Security,access,access,725,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:936,Testability,log,logged,936,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:984,Testability,log,logged,984,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:1035,Testability,log,logged,1035,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:1083,Testability,log,logged,1083,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:99,Integrability,message,message,99,"////////////////////////////////////////////////////////////////////////////////; /// Create a new message handler for class cl and add it to the list; /// of message handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:159,Integrability,message,message,159,"////////////////////////////////////////////////////////////////////////////////; /// Create a new message handler for class cl and add it to the list; /// of message handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:99,Integrability,message,message,99,"////////////////////////////////////////////////////////////////////////////////; /// Create a new message handler for class named cl and add it to the list; /// of message handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:165,Integrability,message,message,165,"////////////////////////////////////////////////////////////////////////////////; /// Create a new message handler for class named cl and add it to the list; /// of message handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:99,Integrability,message,message,99,"////////////////////////////////////////////////////////////////////////////////; /// Clean up the message handler.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// Add this message handler to the list of messages handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:126,Integrability,message,messages,126,"////////////////////////////////////////////////////////////////////////////////; /// Add this message handler to the list of messages handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:38,Integrability,message,message,38,"// don't emit signal when the default message handler is added; // as this happens in the TROOT ctor and the TQObject stuff is; // not yet properly initialized on some platforms",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:105,Integrability,message,message,105,"////////////////////////////////////////////////////////////////////////////////; /// Return counter for message with ID=messid.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:109,Integrability,message,messages,109,"////////////////////////////////////////////////////////////////////////////////; /// Return total number of messages.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:92,Integrability,message,message,92,"////////////////////////////////////////////////////////////////////////////////; /// Store message origin, keep statistics and call Notify().",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:12,Integrability,message,message,12,"// check if message must be managed by this message handler",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:44,Integrability,message,message,44,"// check if message must be managed by this message handler",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:9,Integrability,message,message,9,"// first message",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:20,Integrability,message,message,20,"// already existing message",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:7,Integrability,message,message,7,"// new message",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:54,Integrability,message,message,54,"// case of default handler; // encode class number in message id",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:112,Integrability,message,message,112,"////////////////////////////////////////////////////////////////////////////////; /// Print statistics for this message handler.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:98,Integrability,message,message,98,"////////////////////////////////////////////////////////////////////////////////; /// Remove this message handler from the list of messages handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:131,Integrability,message,messages,131,"////////////////////////////////////////////////////////////////////////////////; /// Remove this message handler from the list of messages handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TNamed.cxx:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,core/base/src/TNamed.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TNamed.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:608,Availability,error,error,608,"// @(#)root/base:$Id$; // Author: Rene Brun 26/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObject; \ingroup Base. Mother of all ROOT objects. The TObject class provides default behaviour and protocol for all; objects in the ROOT system. It provides protocol for object I/O,; error handling, sorting, inspection, printing, drawing, etc.; Every object which inherits from TObject can be stored in the; ROOT collection classes. TObject's bits can be used as flags, bits 0 - 13 and 24-31 are; reserved as global bits while bits 14 - 23 can be used in different; class hierarchies (watch out for overlaps).; */",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:524,Integrability,protocol,protocol,524,"// @(#)root/base:$Id$; // Author: Rene Brun 26/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObject; \ingroup Base. Mother of all ROOT objects. The TObject class provides default behaviour and protocol for all; objects in the ROOT system. It provides protocol for object I/O,; error handling, sorting, inspection, printing, drawing, etc.; Every object which inherits from TObject can be stored in the; ROOT collection classes. TObject's bits can be used as flags, bits 0 - 13 and 24-31 are; reserved as global bits while bits 14 - 23 can be used in different; class hierarchies (watch out for overlaps).; */",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:582,Integrability,protocol,protocol,582,"// @(#)root/base:$Id$; // Author: Rene Brun 26/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObject; \ingroup Base. Mother of all ROOT objects. The TObject class provides default behaviour and protocol for all; objects in the ROOT system. It provides protocol for object I/O,; error handling, sorting, inspection, printing, drawing, etc.; Every object which inherits from TObject can be stored in the; ROOT collection classes. TObject's bits can be used as flags, bits 0 - 13 and 24-31 are; reserved as global bits while bits 14 - 23 can be used in different; class hierarchies (watch out for overlaps).; */",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:689,Modifiability,inherit,inherits,689,"// @(#)root/base:$Id$; // Author: Rene Brun 26/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObject; \ingroup Base. Mother of all ROOT objects. The TObject class provides default behaviour and protocol for all; objects in the ROOT system. It provides protocol for object I/O,; error handling, sorting, inspection, printing, drawing, etc.; Every object which inherits from TObject can be stored in the; ROOT collection classes. TObject's bits can be used as flags, bits 0 - 13 and 24-31 are; reserved as global bits while bits 14 - 23 can be used in different; class hierarchies (watch out for overlaps).; */",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:68,Safety,Detect,Detect,68,"// Return true if delete changes/poisons/taints the memory.; //; // Detect whether operator delete taints the memory. If it does, we can not rely; // on TestBit(kNotDeleted) to check if the memory has been deleted (but in case,; // like TClonesArray, where we know the destructor will be called but not operator; // delete, we can still use it to detect the cases where the destructor was called.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:347,Safety,detect,detect,347,"// Return true if delete changes/poisons/taints the memory.; //; // Detect whether operator delete taints the memory. If it does, we can not rely; // on TestBit(kNotDeleted) to check if the memory has been deleted (but in case,; // like TClonesArray, where we know the destructor will be called but not operator; // delete, we can still use it to detect the cases where the destructor was called.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:153,Testability,Test,TestBit,153,"// Return true if delete changes/poisons/taints the memory.; //; // Detect whether operator delete taints the memory. If it does, we can not rely; // on TestBit(kNotDeleted) to check if the memory has been deleted (but in case,; // like TClonesArray, where we know the destructor will be called but not operator; // delete, we can still use it to detect the cases where the destructor was called.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:17,Availability,error,error,17,"// Not using the error logger, as there routine is meant to be called; // during library initialization/loading.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:40,Integrability,rout,routine,40,"// Not using the error logger, as there routine is meant to be called; // during library initialization/loading.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:104,Performance,load,loading,104,"// Not using the error logger, as there routine is meant to be called; // during library initialization/loading.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:23,Testability,log,logger,23,"// Not using the error logger, as there routine is meant to be called; // during library initialization/loading.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:353,Availability,error,error,353,"// the 'if' part is that surrounded by the debug code.; // Intentionally accessing the deleted memory to check whether it has been changed as; // a consequence (side effect) of executing operator delete. If there no change, we; // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:433,Availability,fault,fault,433,"// the 'if' part is that surrounded by the debug code.; // Intentionally accessing the deleted memory to check whether it has been changed as; // a consequence (side effect) of executing operator delete. If there no change, we; // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:372,Integrability,message,message,372,"// the 'if' part is that surrounded by the debug code.; // Intentionally accessing the deleted memory to check whether it has been changed as; // a consequence (side effect) of executing operator delete. If there no change, we; // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:329,Safety,detect,detect,329,"// the 'if' part is that surrounded by the debug code.; // Intentionally accessing the deleted memory to check whether it has been changed as; // a consequence (side effect) of executing operator delete. If there no change, we; // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:73,Security,access,accessing,73,"// the 'if' part is that surrounded by the debug code.; // Intentionally accessing the deleted memory to check whether it has been changed as; // a consequence (side effect) of executing operator delete. If there no change, we; // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:102,Availability,error,errorswhen,102,"// on Windows, even __declspec(no_sanitize_address) does not prevent catching; // heap-use-after-free errorswhen using the /fsanitize=address compiler flag; // so don't even try",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:58,Testability,Test,TestBit,58,"// operator delete tainted the memory, we can not rely on TestBit(kNotDeleted)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:3,Testability,test,test,3,"// test uses fBits so don't move next line",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:8,Testability,Test,TestBit,8,"// if (!TestBit(kNotDeleted)); // Fatal(""~TObject"", ""object deleted twice"");",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:197,Integrability,depend,dependency,197,"////////////////////////////////////////////////////////////////////////////////; /// Private helper function which will dispatch to; /// TObjectTable::AddObj.; /// Included here to avoid circular dependency between header files.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:182,Safety,avoid,avoid,182,"////////////////////////////////////////////////////////////////////////////////; /// Private helper function which will dispatch to; /// TObjectTable::AddObj.; /// Included here to avoid circular dependency between header files.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:214,Energy Efficiency,allocate,allocated,214,"////////////////////////////////////////////////////////////////////////////////; /// Delete this object. Typically called as a command via the interpreter.; /// Normally use ""delete"" operator when object has been allocated on the heap.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:97,Modifiability,inherit,inheritance,97,"////////////////////////////////////////////////////////////////////////////////; /// Draw class inheritance tree of the class to which this object belongs.; /// If a class B inherits from a class A, description of B is drawn; /// on the right side of description of A.; /// Member functions overridden by B are shown in class A with a blue line; /// crossing-out the corresponding member function.; /// The following picture is the class inheritance tree of class TPaveLabel:; ///; /// \image html base_object.png",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:175,Modifiability,inherit,inherits,175,"////////////////////////////////////////////////////////////////////////////////; /// Draw class inheritance tree of the class to which this object belongs.; /// If a class B inherits from a class A, description of B is drawn; /// on the right side of description of A.; /// Member functions overridden by B are shown in class A with a blue line; /// crossing-out the corresponding member function.; /// The following picture is the class inheritance tree of class TPaveLabel:; ///; /// \image html base_object.png",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:439,Modifiability,inherit,inheritance,439,"////////////////////////////////////////////////////////////////////////////////; /// Draw class inheritance tree of the class to which this object belongs.; /// If a class B inherits from a class A, description of B is drawn; /// on the right side of description of A.; /// Member functions overridden by B are shown in class A with a blue line; /// crossing-out the corresponding member function.; /// The following picture is the class inheritance tree of class TPaveLabel:; ///; /// \image html base_object.png",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:613,Availability,Error,Error,613,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:145,Integrability,rout,routine,145,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:93,Security,hash,hash,93,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:499,Security,Hash,Hash,499,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:738,Security,Hash,Hash,738,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:542,Testability,log,logarithmic,542,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:110,Modifiability,inherit,inherits,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if object inherits from class ""classname"".",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:110,Modifiability,inherit,inherits,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if object inherits from TClass cl.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:396,Performance,load,load,396,"////////////////////////////////////////////////////////////////////////////////; /// This method must be overridden to handle object notification (the base implementation is no-op).; ///; /// Different objects in ROOT use the `Notify` method for different purposes, in coordination; /// with other objects that call this method at the appropriate time.; ///; /// For example, `TLeaf` uses it to load class information; `TBranchRef` to load contents of; /// referenced branches `TBranchRef`; most notably, based on `Notify`, `TChain` implements a; /// callback mechanism to inform interested parties when it switches to a new sub-tree.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:436,Performance,load,load,436,"////////////////////////////////////////////////////////////////////////////////; /// This method must be overridden to handle object notification (the base implementation is no-op).; ///; /// Different objects in ROOT use the `Notify` method for different purposes, in coordination; /// with other objects that call this method at the appropriate time.; ///; /// For example, `TLeaf` uses it to load class information; `TBranchRef` to load contents of; /// referenced branches `TBranchRef`; most notably, based on `Notify`, `TChain` implements a; /// callback mechanism to inform interested parties when it switches to a new sub-tree.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:968,Availability,avail,available,968,"////////////////////////////////////////////////////////////////////////////////; /// Save this object in the file specified by filename.; ///; /// - if ""filename"" contains "".root"" the object is saved in filename as root; /// binary file.; ///; /// - if ""filename"" contains "".xml"" the object is saved in filename as a xml; /// ascii file.; ///; /// - if ""filename"" contains "".cc"" the object is saved in filename as C code; /// independant from ROOT. The code is generated via SavePrimitive().; /// Specific code should be implemented in each object to handle this; /// option. Like in TF1::SavePrimitive().; ///; /// - otherwise the object is written to filename as a CINT/C++ script. The; /// C++ code to rebuild this object is generated via SavePrimitive(). The; /// ""option"" parameter is passed to SavePrimitive. By default it is an empty; /// string. It can be used to specify the Draw option in the code generated; /// by SavePrimitive.; ///; /// The function is available via the object context menu.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:1697,Energy Efficiency,reduce,reduces,1697,"ed to; /// hold the compressed buffer.; ///; /// - Reservation of the corresponding space in the file by looking; /// in the TFree list of free blocks of the file.; ///; /// - The buffer is written to the file.; ///; /// Bufsize can be given to force a given buffer size to write this object.; /// By default, the buffersize will be taken from the average buffer size; /// of all objects written to the current file so far.; ///; /// If a name is specified, it will be the name of the key.; /// If name is not given, the name of the key will be the name as returned; /// by GetName().; ///; /// The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete; /// Using the kOverwrite option a previous key with the same name is; /// overwritten. The previous key is deleted before writing the new object.; /// Using the kWriteDelete option a previous key with the same name is; /// deleted only after the new object has been written. This option; /// is safer than kOverwrite but it is slower.; /// NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile--; /// the space is simply freed up to be overwritten; in the case of a TTree,; /// it is more complicated. If one opens a TTree, appends some entries,; /// then writes it out, the behaviour is effectively the same. If, however,; /// one creates a new TTree and writes it out in this way,; /// only the metadata is replaced, effectively making the old data invisible; /// without deleting it. TTree::Delete() can be used to mark all disk space; /// occupied by a TTree as free before overwriting its metadata this way.; /// The kSingleKey option is only used by TCollection::Write() to write; /// a container with a single key instead of each object in the container; /// with its own key.; ///; /// An object is read from the file into memory via TKey::Read() or; /// via TObject::Read().; ///; /// The function returns the total number of bytes written to the file.; /// It returns 0 if the object cannot be written.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:1610,Safety,safe,safer,1610," a second buffer is created to; /// hold the compressed buffer.; ///; /// - Reservation of the corresponding space in the file by looking; /// in the TFree list of free blocks of the file.; ///; /// - The buffer is written to the file.; ///; /// Bufsize can be given to force a given buffer size to write this object.; /// By default, the buffersize will be taken from the average buffer size; /// of all objects written to the current file so far.; ///; /// If a name is specified, it will be the name of the key.; /// If name is not given, the name of the key will be the name as returned; /// by GetName().; ///; /// The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete; /// Using the kOverwrite option a previous key with the same name is; /// overwritten. The previous key is deleted before writing the new object.; /// Using the kWriteDelete option a previous key with the same name is; /// deleted only after the new object has been written. This option; /// is safer than kOverwrite but it is slower.; /// NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile--; /// the space is simply freed up to be overwritten; in the case of a TTree,; /// it is more complicated. If one opens a TTree, appends some entries,; /// then writes it out, the behaviour is effectively the same. If, however,; /// one creates a new TTree and writes it out in this way,; /// only the metadata is replaced, effectively making the old data invisible; /// without deleting it. TTree::Delete() can be used to mark all disk space; /// occupied by a TTree as free before overwriting its metadata this way.; /// The kSingleKey option is only used by TCollection::Write() to write; /// a container with a single key instead of each object in the container; /// with its own key.; ///; /// An object is read from the file into memory via TKey::Read() or; /// via TObject::Read().; ///; /// The function returns the total number of bytes written to the file.; /// It returns 0 if the o",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:1745,Usability,simpl,simply,1745,"ed to; /// hold the compressed buffer.; ///; /// - Reservation of the corresponding space in the file by looking; /// in the TFree list of free blocks of the file.; ///; /// - The buffer is written to the file.; ///; /// Bufsize can be given to force a given buffer size to write this object.; /// By default, the buffersize will be taken from the average buffer size; /// of all objects written to the current file so far.; ///; /// If a name is specified, it will be the name of the key.; /// If name is not given, the name of the key will be the name as returned; /// by GetName().; ///; /// The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete; /// Using the kOverwrite option a previous key with the same name is; /// overwritten. The previous key is deleted before writing the new object.; /// Using the kWriteDelete option a previous key with the same name is; /// deleted only after the new object has been written. This option; /// is safer than kOverwrite but it is slower.; /// NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile--; /// the space is simply freed up to be overwritten; in the case of a TTree,; /// it is more complicated. If one opens a TTree, appends some entries,; /// then writes it out, the behaviour is effectively the same. If, however,; /// one creates a new TTree and writes it out in this way,; /// only the metadata is replaced, effectively making the old data invisible; /// without deleting it. TTree::Delete() can be used to mark all disk space; /// occupied by a TTree as free before overwriting its metadata this way.; /// The kSingleKey option is only used by TCollection::Write() to write; /// a container with a single key instead of each object in the container; /// with its own key.; ///; /// An object is read from the file into memory via TKey::Read() or; /// via TObject::Read().; ///; /// The function returns the total number of bytes written to the file.; /// It returns 0 if the object cannot be written.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:41,Energy Efficiency,allocate,allocated,41,"// Record how this instance was actually allocated.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:33,Safety,avoid,avoid,33,"// Can not read TFile.h here and avoid going through the interpreter by; // simply hard-coding this value.; // This **must** be equal to TFile::k630forwardCompatibility",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:76,Usability,simpl,simply,76,"// Can not read TFile.h here and avoid going through the interpreter by; // simply hard-coding this value.; // This **must** be equal to TFile::k630forwardCompatibility",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:99,Availability,Error,ErrorHandler,99,"////////////////////////////////////////////////////////////////////////////////; /// Interface to ErrorHandler (protected).",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface to ErrorHandler (protected).",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:97,Integrability,message,message,97,"////////////////////////////////////////////////////////////////////////////////; /// Issue info message. Use ""location"" to specify the method where the; /// warning occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:100,Integrability,message,message,100,"////////////////////////////////////////////////////////////////////////////////; /// Issue warning message. Use ""location"" to specify the method where the; /// warning occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:92,Availability,error,error,92,"////////////////////////////////////////////////////////////////////////////////; /// Issue error message. Use ""location"" to specify the method where the; /// error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:159,Availability,error,error,159,"////////////////////////////////////////////////////////////////////////////////; /// Issue error message. Use ""location"" to specify the method where the; /// error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:98,Integrability,message,message,98,"////////////////////////////////////////////////////////////////////////////////; /// Issue error message. Use ""location"" to specify the method where the; /// error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:99,Availability,error,error,99,"////////////////////////////////////////////////////////////////////////////////; /// Issue system error message. Use ""location"" to specify the method where; /// the system error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:173,Availability,error,error,173,"////////////////////////////////////////////////////////////////////////////////; /// Issue system error message. Use ""location"" to specify the method where; /// the system error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:105,Integrability,message,message,105,"////////////////////////////////////////////////////////////////////////////////; /// Issue system error message. Use ""location"" to specify the method where; /// the system error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:98,Availability,error,error,98,"////////////////////////////////////////////////////////////////////////////////; /// Issue fatal error message. Use ""location"" to specify the method where the; /// fatal error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:171,Availability,error,error,171,"////////////////////////////////////////////////////////////////////////////////; /// Issue fatal error message. Use ""location"" to specify the method where the; /// fatal error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:104,Integrability,message,message,104,"////////////////////////////////////////////////////////////////////////////////; /// Issue fatal error message. Use ""location"" to specify the method where the; /// fatal error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObjString.cxx:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,core/base/src/TObjString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObjString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3476,Integrability,depend,dependencies,3476," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:485,Modifiability,plugin,plugin,485,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:537,Modifiability,plugin,plugin,537,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:556,Modifiability,plugin,plugin,556,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:583,Modifiability,plugin,plugin,583,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:647,Modifiability,extend,extend,647,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:758,Modifiability,extend,extend,758,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:841,Modifiability,plugin,plugin,841,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1017,Modifiability,Plugin,Plugin,1017,"/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now depre",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1072,Modifiability,plugin,plugin,1072,"/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now depre",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1111,Modifiability,plugin,plugins,1111,"Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1135,Modifiability,plugin,plugin,1135,"Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1296,Modifiability,plugin,plugin,1296,"*; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in fro",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1459,Modifiability,Plugin,PluginClass,1459,"nager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when the",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1964,Modifiability,Plugin,Plugin,1964,"ading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2132,Modifiability,Plugin,Plugin,2132,"op plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TS",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2196,Modifiability,Plugin,Plugin,2196,"SYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServ",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2259,Modifiability,Plugin,Plugin,2259," by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of curre",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2346,Modifiability,Plugin,Plugin,2346,"rs in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2377,Modifiability,extend,extends,2377,"e names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-c",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2461,Modifiability,plugin,plugin,2461,"e names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-c",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2477,Modifiability,extend,extend,2477,"e names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-c",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2739,Modifiability,plugin,plugin,2739," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2919,Modifiability,plugin,plugins,2919," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2969,Modifiability,plugin,plugins,2969," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3009,Modifiability,Plugin,Plugin,3009," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3365,Modifiability,plugin,plugin,3365," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3515,Modifiability,plugin,plugin,3515," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3541,Modifiability,extend,extend,3541," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:602,Performance,load,load,602,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:832,Performance,load,load,832,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:916,Performance,load,loading,916,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:8,Modifiability,plugin,plugin,8,"// main plugin manager created in TROOT",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:95,Modifiability,plugin,plugin,95,"////////////////////////////////////////////////////////////////////////////////; /// Create a plugin handler. Called by TPluginManager.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:94,Modifiability,plugin,plugin,94,"////////////////////////////////////////////////////////////////////////////////; /// Cleanup plugin handler object.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3,Performance,cache,cache,3,"// cache argument types for fast comparison",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:99,Modifiability,plugin,plugin,99,"////////////////////////////////////////////////////////////////////////////////; /// Check if the plugin library for this handler exits. Returns 0; /// when it exists and -1 in case the plugin does not exist.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:187,Modifiability,plugin,plugin,187,"////////////////////////////////////////////////////////////////////////////////; /// Check if the plugin library for this handler exits. Returns 0; /// when it exists and -1 in case the plugin does not exist.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:228,Availability,error,error,228,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Sets status to 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:95,Modifiability,plugin,plugin,95,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Sets status to 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Sets status to 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:159,Performance,load,loading,159,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Sets status to 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:25,Integrability,depend,dependent,25,"// first call also loads dependent libraries declared via the rootmap file",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:19,Performance,load,loads,19,"// first call also loads dependent libraries declared via the rootmap file",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:221,Availability,error,error,221,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Returns 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:95,Modifiability,plugin,plugin,95,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Returns 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Returns 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:152,Performance,load,loading,152,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Returns 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:37,Energy Efficiency,reduce,reduce,37,"// call once and cache the result to reduce lock contention",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:17,Performance,cache,cache,17,"// call once and cache the result to reduce lock contention",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:108,Safety,avoid,avoid,108,"// Not initialized yet.; // SetupCallEnv is likely to require/take the interpreter lock.; // Grab it now to avoid dead-lock. In particular TPluginHandler::ExecPluginImpl; // takes the gInterpreterMutex and *then* call (indirectly) code that; // take the lock in fHandlers.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:107,Modifiability,plugin,plugin,107,"////////////////////////////////////////////////////////////////////////////////; /// Print info about the plugin handler. If option is ""a"" print; /// also the ctor's that will be used.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:99,Modifiability,plugin,plugin,99,"////////////////////////////////////////////////////////////////////////////////; /// Clean up the plugin manager.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:91,Modifiability,plugin,plugin,91,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified in config file, like:; /// ~~~ {.cpp}; /// Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""TMySQLServer(...)""; /// +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""TPgSQLServer(...)""; /// ~~~; /// The + allows the extension of an already defined resource (see TEnv).",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:120,Modifiability,config,config,120,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified in config file, like:; /// ~~~ {.cpp}; /// Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""TMySQLServer(...)""; /// +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""TPgSQLServer(...)""; /// ~~~; /// The + allows the extension of an already defined resource (see TEnv).",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:160,Modifiability,Plugin,Plugin,160,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified in config file, like:; /// ~~~ {.cpp}; /// Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""TMySQLServer(...)""; /// +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""TPgSQLServer(...)""; /// ~~~; /// The + allows the extension of an already defined resource (see TEnv).",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:232,Modifiability,Plugin,Plugin,232,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified in config file, like:; /// ~~~ {.cpp}; /// Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""TMySQLServer(...)""; /// +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""TPgSQLServer(...)""; /// ~~~; /// The + allows the extension of an already defined resource (see TEnv).",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified in config file, like:; /// ~~~ {.cpp}; /// Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""TMySQLServer(...)""; /// +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""TPgSQLServer(...)""; /// ~~~; /// The + allows the extension of an already defined resource (see TEnv).",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:58,Modifiability,Plugin,Plugin,58,"// use s, i.e. skip possible OS and application prefix to Plugin.; // so that GetValue() takes properly care of returning the value; // for the specified OS and/or application",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:95,Modifiability,plugin,plugin,95,"////////////////////////////////////////////////////////////////////////////////; /// Load all plugin macros from the specified path/base directory.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load all plugin macros from the specified path/base directory.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3,Performance,load,load,3,"// load macros in alphabetical order",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1274,Availability,down,downloading,1274,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1223,Integrability,depend,dependency,1223,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:91,Modifiability,plugin,plugin,91,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:141,Modifiability,plugin,plugin,141,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:184,Modifiability,plugin,plugins,184,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:212,Modifiability,plugin,plugin,212,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:332,Modifiability,Plugin,PluginClass,332,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:689,Modifiability,plugin,plugin,689,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1298,Modifiability,plugin,plugin,1298,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:732,Performance,load,loaded,732,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:81,Modifiability,plugin,plugin,81,"// While waiting for the lock, another thread may; // have process the requested plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:90,Modifiability,plugin,plugin,90,"////////////////////////////////////////////////////////////////////////////////; /// Add plugin handler to the list of handlers. If there is already a; /// handler defined for the same base and regexp it will be replaced.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:210,Modifiability,plugin,plugin,210,"////////////////////////////////////////////////////////////////////////////////; /// Returns the handler if there exists a handler for the specified URI.; /// The uri can be 0 in which case the first matching plugin handler; /// will be returned. Returns 0 in case handler is not found.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:111,Modifiability,plugin,plugin,111,"////////////////////////////////////////////////////////////////////////////////; /// Print list of registered plugin handlers. If option is ""a"" print; /// also the ctor's that will be used.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:123,Modifiability,plugin,plugin,123,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified directory the plugin macros. If plugin is specified; /// and if it is a base class all macros for that base will be written. If it; /// is a plugin class name, only that one macro will be written. If plugin; /// is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:141,Modifiability,plugin,plugin,141,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified directory the plugin macros. If plugin is specified; /// and if it is a base class all macros for that base will be written. If it; /// is a plugin class name, only that one macro will be written. If plugin; /// is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:250,Modifiability,plugin,plugin,250,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified directory the plugin macros. If plugin is specified; /// and if it is a base class all macros for that base will be written. If it; /// is a plugin class name, only that one macro will be written. If plugin; /// is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:309,Modifiability,plugin,plugin,309,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified directory the plugin macros. If plugin is specified; /// and if it is a base class all macros for that base will be written. If it; /// is a plugin class name, only that one macro will be written. If plugin; /// is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:121,Modifiability,config,config,121,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified environment config file the plugin records. If; /// plugin is specified and if it is a base class all records for that; /// base will be written. If it is a plugin class name, only that one; /// record will be written. If plugin is 0 all macros are written.; /// If envFile is 0 or """" the records are written to stdout.; /// Returns -1 if envFile cannot be created or opened, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:137,Modifiability,plugin,plugin,137,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified environment config file the plugin records. If; /// plugin is specified and if it is a base class all records for that; /// base will be written. If it is a plugin class name, only that one; /// record will be written. If plugin is 0 all macros are written.; /// If envFile is 0 or """" the records are written to stdout.; /// Returns -1 if envFile cannot be created or opened, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:161,Modifiability,plugin,plugin,161,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified environment config file the plugin records. If; /// plugin is specified and if it is a base class all records for that; /// base will be written. If it is a plugin class name, only that one; /// record will be written. If plugin is 0 all macros are written.; /// If envFile is 0 or """" the records are written to stdout.; /// Returns -1 if envFile cannot be created or opened, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:266,Modifiability,plugin,plugin,266,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified environment config file the plugin records. If; /// plugin is specified and if it is a base class all records for that; /// base will be written. If it is a plugin class name, only that one; /// record will be written. If plugin is 0 all macros are written.; /// If envFile is 0 or """" the records are written to stdout.; /// Returns -1 if envFile cannot be created or opened, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:331,Modifiability,plugin,plugin,331,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified environment config file the plugin records. If; /// plugin is specified and if it is a base class all records for that; /// base will be written. If it is a plugin class name, only that one; /// record will be written. If plugin is 0 all macros are written.; /// If envFile is 0 or """" the records are written to stdout.; /// Returns -1 if envFile cannot be created or opened, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:456,Integrability,Wrap,Wrapper,456,"// @(#)root/base:$Id$; // Author: Eddy Offermann 24/06/05; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /* \class TPRegexp; \ingroup Base. C++ Wrapper for the ""Perl Compatible Regular Expressions"" library; The PCRE lib can be found at: http://www.pcre.org/. Extensive documentation about Regular expressions in Perl can be; found at : http://perldoc.perl.org/perlre.html; */",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:1051,Availability,avail,available,1051,"////////////////////////////////////////////////////////////////////////////////; /// Translate Perl modifier flags into pcre flags.; /// The supported modStr characters are: g, i, m, o, s, x, and the; /// special d for debug. The meaning of the letters is:; /// - m; /// Treat string as multiple lines. That is, change ""^"" and ""$"" from; /// matching the start or end of the string to matching the start or; /// end of any line anywhere within the string.; /// - s; /// Treat string as single line. That is, change ""."" to match any; /// character whatsoever, even a newline, which normally it would not match.; /// Used together, as /ms, they let the ""."" match any character whatsoever,; /// while still allowing ""^"" and ""$"" to match, respectively, just after and; /// just before newlines within the string.; /// - i; /// Do case-insensitive pattern matching.; /// - x; /// Extend your pattern's legibility by permitting whitespace and comments.; /// - p; /// Preserve the string matched such that ${^PREMATCH}, ${^MATCH},; /// and ${^POSTMATCH} are available for use after matching.; /// - g and c; /// Global matching, and keep the Current position after failed matching.; /// Unlike i, m, s and x, these two flags affect the way the regex is used; /// rather than the regex itself. See Using regular expressions in Perl in; /// perlretut for further explanation of the g and c modifiers.; /// For more detail see: http://perldoc.perl.org/perlre.html#Modifiers.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:875,Modifiability,Extend,Extend,875,"////////////////////////////////////////////////////////////////////////////////; /// Translate Perl modifier flags into pcre flags.; /// The supported modStr characters are: g, i, m, o, s, x, and the; /// special d for debug. The meaning of the letters is:; /// - m; /// Treat string as multiple lines. That is, change ""^"" and ""$"" from; /// matching the start or end of the string to matching the start or; /// end of any line anywhere within the string.; /// - s; /// Treat string as single line. That is, change ""."" to match any; /// character whatsoever, even a newline, which normally it would not match.; /// Used together, as /ms, they let the ""."" match any character whatsoever,; /// while still allowing ""^"" and ""$"" to match, respectively, just after and; /// just before newlines within the string.; /// - i; /// Do case-insensitive pattern matching.; /// - x; /// Extend your pattern's legibility by permitting whitespace and comments.; /// - p; /// Preserve the string matched such that ${^PREMATCH}, ${^MATCH},; /// and ${^POSTMATCH} are available for use after matching.; /// - g and c; /// Global matching, and keep the Current position after failed matching.; /// Unlike i, m, s and x, these two flags affect the way the regex is used; /// rather than the regex itself. See Using regular expressions in Perl in; /// perlretut for further explanation of the g and c modifiers.; /// For more detail see: http://perldoc.perl.org/perlre.html#Modifiers.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:115,Performance,optimiz,optimizer,115,"////////////////////////////////////////////////////////////////////////////////; /// Send the pattern through the optimizer.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform the actual matching - protected method.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:317,Integrability,rout,routine,317,"////////////////////////////////////////////////////////////////////////////////; /// The number of matches is returned, this equals the full match +; /// sub-pattern matches.; /// nMaxMatch is the maximum allowed number of matches.; /// pos contains the string indices of the matches. Its usage is; /// shown in the routine MatchS.; /// For meaning of mods see ParseMods().",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform pattern substitution with optional back-ref replacement; /// - protected method.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:171,Availability,error,error,171,"////////////////////////////////////////////////////////////////////////////////; /// Get value of static flag controlling whether exception should be thrown upon an; /// error during regular expression compilation by the PCRE engine.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:162,Availability,error,error,162,"////////////////////////////////////////////////////////////////////////////////; /// Set static flag controlling whether exception should be thrown upon an; /// error during regular expression compilation by the PCRE engine.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:23,Integrability,Wrap,Wrapper,23,"/** \class TPMERegexp. Wrapper for PCRE library (Perl Compatible Regular Expressions).; Based on PME - PCRE Made Easy by Zachary Hansen. Supports main Perl operations using regular expressions (Match,; Substitute and Split). To retrieve the results one can simply use; operator[] returning a TString. See $ROOTSYS/tutorials/regexp_pme.C for examples.; */",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:257,Usability,simpl,simply,257,"/** \class TPMERegexp. Wrapper for PCRE library (Perl Compatible Regular Expressions).; Based on PME - PCRE Made Easy by Zachary Hansen. Supports main Perl operations using regular expressions (Match,; Substitute and Split). To retrieve the results one can simply use; operator[] returning a TString. See $ROOTSYS/tutorials/regexp_pme.C for examples.; */",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:161,Performance,perform,performed,161,"////////////////////////////////////////////////////////////////////////////////; /// Substitute matching part of s with r, dollar back-ref; /// substitution is performed if doDollarSubst is true (default).; /// Returns the number of substitutions made.; ///; /// After the substitution, another pass is made over the resulting; /// string and the following special tokens are interpreted:; /// - `\l` lowercase next char,; /// - `\u` uppercase next char,; /// - `\L` lowercase till `\E`,; /// - `\U` uppercase till `\E`, and; /// - `\E` end case modification.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:170,Availability,avail,available,170,"////////////////////////////////////////////////////////////////////////////////; /// Get the next token, it is stored in this TString.; /// Returns true if new token is available, false otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:1243,Security,access,accessible,1243,"// @(#)root/cont:$Id$; // Author: Rene Brun 28/09/2001; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TProcessID; \ingroup Base. A TProcessID identifies a ROOT job in a unique way in time and space.; The TProcessID title consists of a TUUID object which provides a globally; unique identifier (for more see TUUID.h). A TProcessID is automatically created by the TROOT constructor.; When a TFile contains referenced objects (see TRef), the TProcessID; object is written to the file.; If a file has been written in multiple sessions (same machine or not),; a TProcessID is written for each session.; These objects are used by the class TRef to uniquely identified; any TObject pointed by a TRef. When a referenced object is read from a file (its bit kIsReferenced is set),; this object is entered into the objects table of the corresponding TProcessID.; Each TFile has a list of TProcessIDs (see TFile::fProcessIDs) also; accessible via TProcessID::fgPIDs (for all files).; When this object is deleted, it is removed from the table via the cleanup; mechanism invoked by the TObject destructor. Each TProcessID has a table (TObjArray *fObjects) that keeps track; of all referenced objects. If a referenced object has a fUniqueID set,; a pointer to this unique object may be found via fObjects->At(fUniqueID).; In the same way, when a TRef::GetObject is called, GetObject uses; its own fUniqueID to find the pointer to the referenced object.; See TProcessID::GetObjectWithID and PutObjectWithID. When a referenced object is deleted, its slot in fObjects is set to null.; //; See also TProcessUUID: a specialized TProcessID to manage the single list; of TUUIDs.; */",MatchSource.CODE_COMMENT,core/base/src/TProcessID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:93,Security,hash,hash,93,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.",MatchSource.CODE_COMMENT,core/base/src/TProcessID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:110,Deployability,update,update,110,"// We use operator() rather than Add() because; // if the address has already been registered, we want to; // update it's uniqueID (this can easily happen when the; // referenced object have been stored in a TClonesArray.",MatchSource.CODE_COMMENT,core/base/src/TProcessID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:234,Integrability,message,message,234,"// Only attempt to remove from the map the items that are already; // registered (because they are associated with a TProcessID with index; // greater than 255. Attempting to remove an item that is not in the map; // issues a Warning message.",MatchSource.CODE_COMMENT,core/base/src/TProcessID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:3,Safety,Avoid,Avoid,3,"// Avoid recalculation of fLast (compared to ->RemoveAt(uid))",MatchSource.CODE_COMMENT,core/base/src/TProcessID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:973,Availability,down,downwards,973,"// @(#)root/base:$Id$; // Author: Valeriy Onuchin 04/27/2004; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the nu",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2467,Deployability,update,update,2467,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2521,Deployability,update,update,2521,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3050,Performance,perform,performing,3050,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:725,Usability,undo,undo,725,"// @(#)root/base:$Id$; // Author: Valeriy Onuchin 04/27/2004; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the nu",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:912,Usability,undo,undo,912,"// @(#)root/base:$Id$; // Author: Valeriy Onuchin 04/27/2004; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the nu",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:1001,Usability,undo,undo,1001,"// @(#)root/base:$Id$; // Author: Valeriy Onuchin 04/27/2004; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the nu",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:1466,Usability,undo,undo,1466,"**********************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands togeth",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:1490,Usability,undo,undo,1490,"**********************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands togeth",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:1517,Usability,undo,undo,1517,"**********************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands togeth",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:1793,Usability,undo,undo,1793,"s long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in dire",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2009,Usability,undo,undo,2009,"and in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed ",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2054,Usability,undo,undo,2054,"and in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed ",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2093,Usability,undo,undo,2093,"and in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed ",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2199,Usability,Undo,Undo,2199,"~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; his",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2282,Usability,Undo,Undo,2282,"llColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invok",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2301,Usability,undo,undo,2301,"llColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invok",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2406,Usability,undo,undo,2406," object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is ",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2838,Usability,Undo,Undo,2838,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2904,Usability,Undo,Undo,2904,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2948,Usability,undo,undo,2948,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3061,Usability,undo,undo,3061,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3334,Usability,Undo,Undo,3334,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3342,Usability,undo,undo,3342,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3382,Usability,Undo,Undo,3382,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3391,Usability,undo,undo,3391,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:243,Usability,undo,undo,243,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:272,Usability,undo,undo,272,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:367,Usability,undo,undo,367,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:429,Usability,undo,undo,429,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:617,Usability,undo,undo,617,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:667,Usability,undo,undo,667,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:214,Usability,undo,undo,214,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. obj - an object; /// 2. redo - method or function to do/redo operation; /// 3. undo - method or function to undo operation; ///; /// Comments:; /// to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; ///; /// undo method can be same as redo one. In that case ""undo""; /// can parameter be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:243,Usability,undo,undo,243,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. obj - an object; /// 2. redo - method or function to do/redo operation; /// 3. undo - method or function to undo operation; ///; /// Comments:; /// to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; ///; /// undo method can be same as redo one. In that case ""undo""; /// can parameter be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:321,Usability,undo,undo,321,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. obj - an object; /// 2. redo - method or function to do/redo operation; /// 3. undo - method or function to undo operation; ///; /// Comments:; /// to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; ///; /// undo method can be same as redo one. In that case ""undo""; /// can parameter be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:506,Usability,undo,undo,506,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. obj - an object; /// 2. redo - method or function to do/redo operation; /// 3. undo - method or function to undo operation; ///; /// Comments:; /// to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; ///; /// undo method can be same as redo one. In that case ""undo""; /// can parameter be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:557,Usability,undo,undo,557,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. obj - an object; /// 2. redo - method or function to do/redo operation; /// 3. undo - method or function to undo operation; ///; /// Comments:; /// to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; ///; /// undo method can be same as redo one. In that case ""undo""; /// can parameter be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:123,Usability,undo,undo,123,"////////////////////////////////////////////////////////////////////////////////; /// Return a command which is doing redo/undo action.; ///; /// This static method allows to set undo parameters dynamically, i.e.; /// during execution of Redo function.; ///; /// Example:; /// For redo actions like TGTextEdit::DelChar() it is not possible to; /// know ahead what character will be deleted.; /// To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; /// one needs to call TQCommand::SetUndoArgs(1, character) from; /// inside of TGTextEdit::DelChar() method, i.e.; /// ~~~ {.cpp}; /// TQCommand::GetCommand()->SetUndoArgs(1, somechar);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:179,Usability,undo,undo,179,"////////////////////////////////////////////////////////////////////////////////; /// Return a command which is doing redo/undo action.; ///; /// This static method allows to set undo parameters dynamically, i.e.; /// during execution of Redo function.; ///; /// Example:; /// For redo actions like TGTextEdit::DelChar() it is not possible to; /// know ahead what character will be deleted.; /// To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; /// one needs to call TQCommand::SetUndoArgs(1, character) from; /// inside of TGTextEdit::DelChar() method, i.e.; /// ~~~ {.cpp}; /// TQCommand::GetCommand()->SetUndoArgs(1, somechar);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:417,Usability,undo,undo,417,"////////////////////////////////////////////////////////////////////////////////; /// Return a command which is doing redo/undo action.; ///; /// This static method allows to set undo parameters dynamically, i.e.; /// during execution of Redo function.; ///; /// Example:; /// For redo actions like TGTextEdit::DelChar() it is not possible to; /// know ahead what character will be deleted.; /// To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; /// one needs to call TQCommand::SetUndoArgs(1, character) from; /// inside of TGTextEdit::DelChar() method, i.e.; /// ~~~ {.cpp}; /// TQCommand::GetCommand()->SetUndoArgs(1, somechar);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:409,Testability,log,logical,409,"////////////////////////////////////////////////////////////////////////////////; /// Add command to the list of merged commands.; /// This make it possible to group complex actions together so an end user; /// can undo and redo them with one command. Execution of TQUndoManager::Undo(),; /// TQUndoManager::Redo() methods only invokes the top level command as a whole.; ///; /// Merge method is analogous to logical join operation.; ///; /// Note: Merge method invokes redo action.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:215,Usability,undo,undo,215,"////////////////////////////////////////////////////////////////////////////////; /// Add command to the list of merged commands.; /// This make it possible to group complex actions together so an end user; /// can undo and redo them with one command. Execution of TQUndoManager::Undo(),; /// TQUndoManager::Redo() methods only invokes the top level command as a whole.; ///; /// Merge method is analogous to logical join operation.; ///; /// Note: Merge method invokes redo action.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:280,Usability,Undo,Undo,280,"////////////////////////////////////////////////////////////////////////////////; /// Add command to the list of merged commands.; /// This make it possible to group complex actions together so an end user; /// can undo and redo them with one command. Execution of TQUndoManager::Undo(),; /// TQUndoManager::Redo() methods only invokes the top level command as a whole.; ///; /// Merge method is analogous to logical join operation.; ///; /// Note: Merge method invokes redo action.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:305,Usability,undo,undo,305,"////////////////////////////////////////////////////////////////////////////////; /// Add command to the list of merged commands.; ///; /// Option string can contain substrings:; /// - ""compress"" - try to compress input command; /// - ""radd"" - execute redo action of input command; /// - ""uadd"" - execute undo action of input command",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:310,Modifiability,inherit,inherited,310,"////////////////////////////////////////////////////////////////////////////////; /// Compress command. Compression is analogous to arithmetic ""addition operation"".; ///; /// Note:; /// - The compressed command will be deleted.; /// - Execution Compress method invokes Redo action with new redo arguments; /// inherited from compressed command.; ///; /// More complicated commands might want to override this function.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:194,Usability,Undo,Undo,194,"////////////////////////////////////////////////////////////////////////////////; /// Equal comparison. The commands are equal if they are; /// applied to the same object and have the same Redo/Undo actions; ///; /// More complicated commands might want to override this function.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:134,Usability,Undo,Undo,134,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE is command if Redo is the same as Undo function; /// and is the setter action.; ///; /// By default, all functions with names like ""SetXXX"" or ""setXXX""; /// considered as setters. Another type of setters are Move, Resize operations; ///; /// More complicated commands might want to override this function.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:102,Usability,undo,undo,102,"////////////////////////////////////////////////////////////////////////////////; /// Set do/redo and undo parameters. The format is; /// SetArgs(number_of_params, redo_params, undo_params); ///; /// Example:; /// ~~~ {.cpp}; /// move_command->SetArgs(2, 100, 100, 200, 200);; /// ~~~; /// 2 params, (100,100) - do/redo position, (200,200) - undo position",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:342,Usability,undo,undo,342,"////////////////////////////////////////////////////////////////////////////////; /// Set do/redo and undo parameters. The format is; /// SetArgs(number_of_params, redo_params, undo_params); ///; /// Example:; /// ~~~ {.cpp}; /// move_command->SetArgs(2, 100, 100, 200, 200);; /// ~~~; /// 2 params, (100,100) - do/redo position, (200,200) - undo position",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:90,Usability,undo,undo,90,"////////////////////////////////////////////////////////////////////////////////; /// Set undo parameters. The format is; /// SetUndoArgs(number_of_params, params); ///; /// Example:; /// ~~~ {.cpp}; /// move_command->SetUndoArgs(2, 200, 200);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:103,Usability,Undo,Undo,103,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if Undo action is possible, kFALSE if it's not.; /// By default, only single trial undo action is possible.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:183,Usability,undo,undo,183,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if Undo action is possible, kFALSE if it's not.; /// By default, only single trial undo action is possible.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:170,Usability,Undo,UndoName,170,"////////////////////////////////////////////////////////////////////////////////; /// Returns command description.; /// By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)""",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:106,Usability,undo,undo,106,"////////////////////////////////////////////////////////////////////////////////; /// Returns the name of undo command",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:116,Usability,undo,undo,116,"////////////////////////////////////////////////////////////////////////////////; /// Returns a pointer to array of undo arguments",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:106,Usability,undo,undo,106,"////////////////////////////////////////////////////////////////////////////////; /// Returns a number of undo arguments",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:114,Usability,undo,undo,114,"////////////////////////////////////////////////////////////////////////////////; /// Returns an object for which undo redo actions are applied",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:117,Usability,undo,undo,117,"////////////////////////////////////////////////////////////////////////////////; /// Returns a number of sequential undo or redo operations",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:120,Usability,undo,undo,120,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if neither redo nor undo action specified",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:86,Usability,Undo,Undo,86,"////////////////////////////////////////////////////////////////////////////////; /// Undo action is in progress",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:53,Usability,undo,undo,53,"/** \class TQUndoManager; Recorder of operations for undo and redo; */; ////////////////////////////////////////////////////////////////////////////////; /// Constructor",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:92,Testability,log,logging,92,"////////////////////////////////////////////////////////////////////////////////; /// Start logging. Delete all previous log records; /// Note: logging is not implemented yet",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:121,Testability,log,log,121,"////////////////////////////////////////////////////////////////////////////////; /// Start logging. Delete all previous log records; /// Note: logging is not implemented yet",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:144,Testability,log,logging,144,"////////////////////////////////////////////////////////////////////////////////; /// Start logging. Delete all previous log records; /// Note: logging is not implemented yet",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3,Usability,undo,undo,3,"// undo/redo in progress",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs undo action. Move cursor position backward in history stack",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:95,Usability,undo,undo,95,"////////////////////////////////////////////////////////////////////////////////; /// Performs undo action. Move cursor position backward in history stack",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs redo action. Move cursor position forward in history stack",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:103,Usability,undo,undo,103,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if undo action is possible",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:103,Testability,log,logging,103,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if logging is ON",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQConnection.cxx:133,Modifiability,variab,variable,133,"////////////////////////////////////////////////////////////////////////////////; /// Apply slot-method to the fReceiver object with variable; /// number of argument values.",MatchSource.CODE_COMMENT,core/base/src/TQConnection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQConnection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:1421,Energy Efficiency,power,powerfull,1421,"// @(#)root/base:$Id: 5d6810ad46b864564f576f88aa9b154789d91d48 $; // Author: Valeriy Onuchin & Fons Rademakers 15/10/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQObject; \ingroup Base. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. ### Signals. ~~~ {.cpp}; Destroyed(); ~~~; Signal emitted when object is destroyed.; This signal could be connected to some garbage-collector object. ~~~ {.cpp}; ChangedBy(const char *method_name); ~~~; This signal is emitted when some important data members of; the object were changed. method_name parameter can be used; as an identifier of the modifier method. ~~~ {.cpp}; Message(const char *msg); ~~~. General purpose message signal; */",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:1841,Integrability,Message,Message,1841,"// @(#)root/base:$Id: 5d6810ad46b864564f576f88aa9b154789d91d48 $; // Author: Valeriy Onuchin & Fons Rademakers 15/10/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQObject; \ingroup Base. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. ### Signals. ~~~ {.cpp}; Destroyed(); ~~~; Signal emitted when object is destroyed.; This signal could be connected to some garbage-collector object. ~~~ {.cpp}; ChangedBy(const char *method_name); ~~~; This signal is emitted when some important data members of; the object were changed. method_name parameter can be used; as an identifier of the modifier method. ~~~ {.cpp}; Message(const char *msg); ~~~. General purpose message signal; */",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:1888,Integrability,message,message,1888,"// @(#)root/base:$Id: 5d6810ad46b864564f576f88aa9b154789d91d48 $; // Author: Valeriy Onuchin & Fons Rademakers 15/10/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQObject; \ingroup Base. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. ### Signals. ~~~ {.cpp}; Destroyed(); ~~~; Signal emitted when object is destroyed.; This signal could be connected to some garbage-collector object. ~~~ {.cpp}; ChangedBy(const char *method_name); ~~~; This signal is emitted when some important data members of; the object were changed. method_name parameter can be used; as an identifier of the modifier method. ~~~ {.cpp}; Message(const char *msg); ~~~. General purpose message signal; */",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:66,Security,access,access,66,"// A pointer to the object that sent the last signal.; // Getting access to the sender might be practical; // when many signals are connected to a single slot.",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:167,Availability,error,error,167,"////////////////////////////////////////////////////////////////////////////////; /// Checking of consistency of sender/receiver methods/arguments.; /// Returns -1 on error, otherwise number or arguments of signal function.; /// Static method.",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:3,Safety,avoid,avoid,3,"// avoid zero strings; // if delegation object TQObjSender is used get the real sender class",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:3,Safety,avoid,avoid,3,"// avoid zero strings",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:215,Energy Efficiency,allocate,allocated,215,"////////////////////////////////////////////////////////////////////////////////; /// TQObject Constructor.; /// Comment:; /// - In order to minimize memory allocation fListOfSignals and; /// fListOfConnections are allocated only if it is neccesary; /// - When fListOfSignals/fListOfConnections are empty they will; /// be deleted",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:200,Performance,perform,performed,200,"////////////////////////////////////////////////////////////////////////////////; /// Collect class signal lists from class cls and all its; /// base-classes.; ///; /// The recursive traversal is not performed for classes not; /// deriving from TQClass.",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:3,Deployability,update,update,3,"// update list of signal lists",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:20,Deployability,update,update,20,"// slot_name != 0 , update signal list",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:20,Deployability,update,update,20,"// slot_name != 0 , update signal list",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:108,Usability,simpl,simplifies,108,"////////////////////////////////////////////////////////////////////////////////; /// Global function which simplifies making connection in interpreted ROOT session; ///; /// ConnectCINT - connects to interpreter(CINT) command",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:1909,Deployability,update,updated,1909,"n the tree/graph is written to the output buffer to avoid circular; dependencies. However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects. When a TRef is used to point to a TObject *robj, for example in a class with; ~~~ {.cpp}; TRef fRef;; ~~~; one can do:; ~~~ {.cpp}; fRef = robj; //to set the pointer; ~~~; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be auto-loaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. ## How does it work. A TRef is itself a TObject with an additional transient pointer fPID.; When the statement fRef = robj is executed, the following actions happen:. - The pointer fPID is set to the current TProcessID.; - The current ObjectNumber (see below) is incremented by one.; - robj::fUniqueID is set to ObjectNumber.; - In the fPID object, the element fObjects[ObjectNumber] is set to robj; - ref::fUniqueID is also set to ObjectNumber. After having set fRef, one can immediately return the value of robj; using fRef.GetObject(). This function returns directly fObjects[fUniqueID]; from the fPID object. When the TRef is written, the process id number pidf of fPID is written; in addition to the TObject part of TRef (fBits,fUniqueID). When the TRef is read, its pointer fPID is set to the value; stored in the TObjArray of TFile::fProcessIDs (fProcessIDs[pidf]).; The pidf is stored as a UShort_t limiting a file to 65535 dist",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:981,Integrability,depend,dependencies,981,"// @(#)root/cont:$Id$; // Author: Rene Brun 28/09/2001; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TRef; \ingroup Base. Persistent Reference link to a TObject; A TRef is a lightweight object pointing to any TObject.; This object can be used instead of normal C++ pointers in case. - the referenced object R and the pointer P are not written to the same file; - P is read before R; - R and P are written to different Tree branches. When a top level object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies. However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects. When a TRef is used to point to a TObject *robj, for example in a class with; ~~~ {.cpp}; TRef fRef;; ~~~; one can do:; ~~~ {.cpp}; fRef = robj; //to set the pointer; ~~~; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be auto-loaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. ## How does it work. A T",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:1757,Performance,load,loaded,1757,"vel object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies. However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects. When a TRef is used to point to a TObject *robj, for example in a class with; ~~~ {.cpp}; TRef fRef;; ~~~; one can do:; ~~~ {.cpp}; fRef = robj; //to set the pointer; ~~~; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be auto-loaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. ## How does it work. A TRef is itself a TObject with an additional transient pointer fPID.; When the statement fRef = robj is executed, the following actions happen:. - The pointer fPID is set to the current TProcessID.; - The current ObjectNumber (see below) is incremented by one.; - robj::fUniqueID is set to ObjectNumber.; - In the fPID object, the element fObjects[ObjectNumber] is set to robj; - ref::fUniqueID is also set to ObjectNumber. After having set fRef, one can immediately return the value of robj; using fRef.GetObject(). This function returns directly fObjects[fUniqueID]; from the fPID object. When the TRef is written, the process id number pidf of fPID is written; in addition to the TObject part of TRef (fBits,fUniqueID). When the TRef is read, its pointer fPID is set to",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:6573,Performance,Load,LoadHits,6573,"l class, do:; ~~~ {.cpp}; TRef fRef; //EXEC:execName. points to something; ~~~; When the special keyword ""EXEC:"" is found in the comment field of the member,; the next string is assumed to be the name of a TExec object.; When a file is connected, the dictionary of the classes on the file; is read in memory (see TFile::ReadStreamerInfo). When the TStreamerElement; object is read, a TExec object is automatically created with the name; specified after the keyword ""EXEC:"" in case a TExec with a same name does; not already exist. The action to be executed via this TExec can be specified with:. - a call to the TExec constructor, if the constructor is called before; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; ~~~ {.cpp}; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand);; ~~~; where actionCommand is a string containing a C++ instruction. Examples:; ~~~ {.cpp}; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on dem",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:6817,Performance,load,load,6817,"y of the classes on the file; is read in memory (see TFile::ReadStreamerInfo). When the TStreamerElement; object is read, a TExec object is automatically created with the name; specified after the keyword ""EXEC:"" in case a TExec with a same name does; not already exist. The action to be executed via this TExec can be specified with:. - a call to the TExec constructor, if the constructor is called before; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; ~~~ {.cpp}; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand);; ~~~; where actionCommand is a string containing a C++ instruction. Examples:; ~~~ {.cpp}; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram; ~~~; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter. An e",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:965,Safety,avoid,avoid,965,"// @(#)root/cont:$Id$; // Author: Rene Brun 28/09/2001; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TRef; \ingroup Base. Persistent Reference link to a TObject; A TRef is a lightweight object pointing to any TObject.; This object can be used instead of normal C++ pointers in case. - the referenced object R and the pointer P are not written to the same file; - P is read before R; - R and P are written to different Tree branches. When a top level object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies. However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects. When a TRef is used to point to a TObject *robj, for example in a class with; ~~~ {.cpp}; TRef fRef;; ~~~; one can do:; ~~~ {.cpp}; fRef = robj; //to set the pointer; ~~~; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be auto-loaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. ## How does it work. A T",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:4547,Safety,avoid,avoid,4547,"ject::Streamer, the pidf is read.; At this point, robj is entered into the table of objects of the TProcessID; corresponding to pidf. ### WARNING1:; If MyClass is the class of the referenced object, The TObject; part of MyClass must be Streamed. One should not; call MyClass::Class()->IgnoreTObjectStreamer(). ### WARNING2:; A TRef cannot point to another TRef. ## ObjectNumber. When an object is referenced (see TRef assignment operator or TRefArray::Add); a unique identifier is computed and stored in both the fUniqueID of the; referenced and referencing object. This uniqueID is computed by incrementing; by one the static global in TProcessID::fgNumber. fUniqueID is some sort of; serial object number in the current session. One can retrieve at any time; the current value of fgNumber by calling the static function TProcessID::GetObjectCount; or set this number via TProcessID::SetObjectCount. To avoid a growing table of fObjects in TProcessID, in case, for example,; one processes many events in a loop, it might be necessary to reset the; ObjectNumber at the end of processing of one event. See an example; in $ROOTSYS/test/Event.cxx (look at function Build). The value of ObjectNumber (say saveNumber=TProcessID::GetObjectCount()) may be; saved at the beginning of one event and reset to this original value; at the end of the event via TProcessID::SetObjectCount(saveNumber). These; actions may be stacked. ## Action on Demand. The normal behaviour of a TRef has been described above. In addition,; TRef supports also ""Actions on Demand"". It may happen that the object; referenced is not yet in memory, on a separate file or not yet computed.; In this case TRef is able to automatically execute an action:. - call to a compiled function (static function of member function); - call to an interpreted function; - execution of a C++ script. How to select this option?; In the definition of the TRef data member in the original class, do:; ~~~ {.cpp}; TRef fRef; //EXEC:execName. points to s",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:8758,Safety,detect,detected,8758,"tically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on the ROOT Web site and returns the object h6; to TRef::GetObject. Note that if the definition of the TRef fWebHistogram had been:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram(); ~~~; then, the compiled or interpreted function GetWebHistogram() would have; been called instead of the C++ script GetWebHistogram.C. ## Special case of a TRef pointing to an object with a TUUID. If the referenced object has a TUUID, its bit kHasUUID has been set.; This case is detected by the TRef assignment operator.; (For example, TFile and TDirectory have a TUUID); The TRef fPID points directly to the single object TProcessUUID (deriving; from TProcessID) and managing the list of TUUIDs for a process.; The TRef kHasUUID bit is set and its fUniqueID is set to the fUniqueID; of the referenced object. When the TRef is streamed to a buffer, the corresponding TUUID is also; streamed with the TRef. When a TRef is read from a buffer, the corresponding; TUUID is also read and entered into the global list of TUUIDs (if not; already there). The TRef fUniqueID is set to the UUIDNumber.; see TProcessUUID for more details. ## Array of TRef. The special class TRefArray should be used to store multiple references.; A TRefArray has one single pointer fPID for all objects in the array.; It has a dynamic compact table of fUniqueIDs. Use a TRefArray rather; then a collection of TRefs if all TRefs stem from the same process. Example:. Suppose a TObjArray *mytracks containing a list of Tr",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:7131,Security,access,access,7131," call to the TExec constructor, if the constructor is called before; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; ~~~ {.cpp}; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand);; ~~~; where actionCommand is a string containing a C++ instruction. Examples:; ~~~ {.cpp}; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram; ~~~; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() exec",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:7288,Security,access,accessing,7288,"n at any time.; One can compute a pointer to an existing TExec with a name with:; ~~~ {.cpp}; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand);; ~~~; where actionCommand is a string containing a C++ instruction. Examples:; ~~~ {.cpp}; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram; ~~~; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on th",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:4772,Testability,test,test,4772,"ding to pidf. ### WARNING1:; If MyClass is the class of the referenced object, The TObject; part of MyClass must be Streamed. One should not; call MyClass::Class()->IgnoreTObjectStreamer(). ### WARNING2:; A TRef cannot point to another TRef. ## ObjectNumber. When an object is referenced (see TRef assignment operator or TRefArray::Add); a unique identifier is computed and stored in both the fUniqueID of the; referenced and referencing object. This uniqueID is computed by incrementing; by one the static global in TProcessID::fgNumber. fUniqueID is some sort of; serial object number in the current session. One can retrieve at any time; the current value of fgNumber by calling the static function TProcessID::GetObjectCount; or set this number via TProcessID::SetObjectCount. To avoid a growing table of fObjects in TProcessID, in case, for example,; one processes many events in a loop, it might be necessary to reset the; ObjectNumber at the end of processing of one event. See an example; in $ROOTSYS/test/Event.cxx (look at function Build). The value of ObjectNumber (say saveNumber=TProcessID::GetObjectCount()) may be; saved at the beginning of one event and reset to this original value; at the end of the event via TProcessID::SetObjectCount(saveNumber). These; actions may be stacked. ## Action on Demand. The normal behaviour of a TRef has been described above. In addition,; TRef supports also ""Actions on Demand"". It may happen that the object; referenced is not yet in memory, on a separate file or not yet computed.; In this case TRef is able to automatically execute an action:. - call to a compiled function (static function of member function); - call to an interpreted function; - execution of a C++ script. How to select this option?; In the definition of the TRef data member in the original class, do:; ~~~ {.cpp}; TRef fRef; //EXEC:execName. points to something; ~~~; When the special keyword ""EXEC:"" is found in the comment field of the member,; the next string is assumed",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:7603,Testability,test,test,7603,")"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram; ~~~; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on the ROOT Web site and returns the object h6; to TRef::GetObject. Note that if the definition of the TRef fWebHistogram had been:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram(); ~~~; then, the compiled or interpreted function GetWebHistogram() would have; been called instead of the",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:1816,Usability,simpl,simply,1816,"vel object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies. However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects. When a TRef is used to point to a TObject *robj, for example in a class with; ~~~ {.cpp}; TRef fRef;; ~~~; one can do:; ~~~ {.cpp}; fRef = robj; //to set the pointer; ~~~; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be auto-loaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. ## How does it work. A TRef is itself a TObject with an additional transient pointer fPID.; When the statement fRef = robj is executed, the following actions happen:. - The pointer fPID is set to the current TProcessID.; - The current ObjectNumber (see below) is incremented by one.; - robj::fUniqueID is set to ObjectNumber.; - In the fPID object, the element fObjects[ObjectNumber] is set to robj; - ref::fUniqueID is also set to ObjectNumber. After having set fRef, one can immediately return the value of robj; using fRef.GetObject(). This function returns directly fObjects[fUniqueID]; from the fPID object. When the TRef is written, the process id number pidf of fPID is written; in addition to the TObject part of TRef (fBits,fUniqueID). When the TRef is read, its pointer fPID is set to",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:27,Performance,load,loaded,27,"//well may be the Exec has loaded the object",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:333,Security,access,access,333,"////////////////////////////////////////////////////////////////////////////////; /// Static function to set the object found on the Action on Demand function.; /// This function may be called by the user in the function called; /// when a ""EXEC:"" keyword is specified in the data member field of the TRef.; /// The function can get access to the dereferencing TRef (i.e. this)using; /// the static function GetStaticObject().",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRefCnt.cxx:78,Availability,down,down,78,"// This definition is compiled in case nothing else is,; // in order to quiet down some fussy librarians",MatchSource.CODE_COMMENT,core/base/src/TRefCnt.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRefCnt.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRegexp.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// This routine transforms a wildcarding regular expression into; /// a general regular expression used for pattern matching.; /// When using wildcards the regular expression is assumed to be; /// preceded by a ""^"" (BOL) and terminated by a ""$"" (EOL). Also, all; /// ""*""'s and ""?""'s (closures) are assumed to be preceded by a ""."" (i.e. any; /// character, except ""/""'s) and all .'s are escaped (so *.ps is different; /// from *.eps). The special treatment of ""/"" allows the easy matching of; /// pathnames, e.g. ""*.root"" will match ""aap.root"", but not ""pipo/aap.root"".",MatchSource.CODE_COMMENT,core/base/src/TRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRegexp.cxx:3,Deployability,Update,Update,3,"// Update start-of-search index",MatchSource.CODE_COMMENT,core/base/src/TRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRemoteObject.cxx:496,Integrability,protocol,protocol,496,"// @(#)root/base:$Id$; // Author: Bertrand Bellenot 19/06/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TRemoteObject; \ingroup Base. The TRemoteObject class provides protocol for browsing ROOT objects; from a remote ROOT session. It contains information on the real remote object as:. - Object Properties (i.e. file stat if the object is a TSystemFile); - Object Name; - Class Name; - TKey Object Name (if the remote object is a TKey); - TKey Class Name (if the remote object is a TKey); - Remote object address; */",MatchSource.CODE_COMMENT,core/base/src/TRemoteObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRemoteObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRemoteObject.cxx:115,Deployability,continuous,continuous,115,"// Collections to keep track of all browser objects that have been; // generated. It's main goal is to prevent the continuous; // allocations of new objects with the same names during browsing.",MatchSource.CODE_COMMENT,core/base/src/TRemoteObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRemoteObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:569,Security,access,accessible,569,"// @(#)root/base:$Id$; // Author: Rene Brun 08/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TROOT; \ingroup Base. ROOT top level object description. The TROOT object is the entry point to the ROOT system.; The single instance of TROOT is accessible via the global gROOT.; Using the gROOT pointer one has access to basically every object; created in a ROOT based program. The TROOT object is essentially a; container of several lists pointing to the main ROOT objects. The following lists are accessible from gROOT object:. ~~~ {.cpp}; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers; ~~~. The TROOT class provides also many useful services:; - Get pointer to an object in any of the lists above; - Time utilities TROOT::Time. The ROOT object must be created as a static object. An example; of a main program creating an interactive version is shown below:. ### Example of a main program. ~~~ {.cpp}; #include ""TRint.h"". int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);. // Init Intrinsics, build all windows, and enter event loop; theApp->Run();. return(0);; }; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:635,Security,access,access,635,"// @(#)root/base:$Id$; // Author: Rene Brun 08/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TROOT; \ingroup Base. ROOT top level object description. The TROOT object is the entry point to the ROOT system.; The single instance of TROOT is accessible via the global gROOT.; Using the gROOT pointer one has access to basically every object; created in a ROOT based program. The TROOT object is essentially a; container of several lists pointing to the main ROOT objects. The following lists are accessible from gROOT object:. ~~~ {.cpp}; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers; ~~~. The TROOT class provides also many useful services:; - Get pointer to an object in any of the lists above; - Time utilities TROOT::Time. The ROOT object must be created as a static object. An example; of a main program creating an interactive version is shown below:. ### Example of a main program. ~~~ {.cpp}; #include ""TRint.h"". int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);. // Init Intrinsics, build all windows, and enter event loop; theApp->Run();. return(0);; }; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:823,Security,access,accessible,823,"// @(#)root/base:$Id$; // Author: Rene Brun 08/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TROOT; \ingroup Base. ROOT top level object description. The TROOT object is the entry point to the ROOT system.; The single instance of TROOT is accessible via the global gROOT.; Using the gROOT pointer one has access to basically every object; created in a ROOT based program. The TROOT object is essentially a; container of several lists pointing to the main ROOT objects. The following lists are accessible from gROOT object:. ~~~ {.cpp}; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers; ~~~. The TROOT class provides also many useful services:; - Get pointer to an object in any of the lists above; - Time utilities TROOT::Time. The ROOT object must be created as a static object. An example; of a main program creating an interactive version is shown below:. ### Example of a main program. ~~~ {.cpp}; #include ""TRint.h"". int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);. // Init Intrinsics, build all windows, and enter event loop; theApp->Run();. return(0);; }; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:27,Performance,concurren,concurrent,27,"// Mutex for protection of concurrent gROOT access",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:44,Security,access,access,44,"// Mutex for protection of concurrent gROOT access",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:7,Security,access,accessing,7,"// For accessing TThread::Tsd indirectly.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:31,Integrability,rout,routines,31,"//-------- Names of next three routines are a small homage to CMZ --------------; ////////////////////////////////////////////////////////////////////////////////; /// Return version id as an integer, i.e. ""2.22/04"" -> 22204.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:51,Performance,load,load,51,"// Additional code to be given to cling at library load",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:294,Energy Efficiency,schedul,scheduled,294,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:346,Energy Efficiency,schedul,schedule,346,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1092,Energy Efficiency,schedul,schedule,1092,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1299,Energy Efficiency,allocate,allocate,1299,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:10,Integrability,wrap,wrapper,10,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:253,Modifiability,variab,variable,253,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:189,Performance,load,loaded,189,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:576,Performance,load,loading,576,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Usability,Simpl,Simple,3,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1076,Performance,load,loading,1076,"// The global gROOT is defined to be a function (ROOT::GetROOT()); // which itself is dereferencing a function pointer.; // Initially this function pointer's value is & GetROOT1 whose role is to; // create and initialize the TROOT object itself.; // At the very end of the TROOT constructor the value of the function pointer; // is switch to & GetROOT2 whose role is to initialize the interpreter.; // This mechanism was primarily intended to fix the issues with order in which; // global TROOT and LLVM globals are initialized. TROOT was initializing; // Cling, but Cling could not be used yet due to LLVM globals not being; // Initialized yet. The solution is to delay initializing the interpreter in; // TROOT till after main() when all LLVM globals are initialized.; // Technically, the mechanism used actually delay the interpreter; // initialization until the first use of gROOT *after* the end of the; // TROOT constructor.; // So to delay until after the start of main, we also made sure that none; // of the ROOT code (mostly the dictionary code) used during library loading; // is using gROOT (directly or indirectly).; // In practice, the initialization of the interpreter is now delayed until; // the first use gROOT (or gInterpreter) after the start of main (but user; // could easily break this by using gROOT in their library initialization; // code).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Performance,Load,Load,3,"// Load and init threads library",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:166,Performance,multi-thread,multi-threading,166,"//////////////////////////////////////////////////////////////////////////////; /// Globally enables the parallel branch processing, which is a case of; /// implicit multi-threading (IMT) in ROOT, activating the required locks.; /// This IMT use case, implemented in TTree::GetEntry, spawns a task for; /// each branch of the tree. Therefore, a task takes care of the reading,; /// decompression and deserialisation of a given branch.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:147,Performance,load,load,147,"////////////////////////////////////////////////////////////////////////////////; /// Keeps track of the status of ImplicitMT w/o resorting to the load of; /// libImt",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:740,Modifiability,plug-in,plug-ins,740,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:821,Modifiability,variab,variable,821,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:209,Performance,concurren,concurrent,209,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:381,Performance,concurren,concurrent,381,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:572,Performance,concurren,concurrent,572,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:649,Performance,concurren,concurrent,649,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:713,Performance,concurren,concurrent,713,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:724,Performance,load,loading,724,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:152,Safety,safe,safe,152,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:196,Safety,safe,safe,196,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:916,Safety,safe,safe,916,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1091,Safety,safe,safe,1091,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1273,Safety,safe,safe,1273,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1350,Safety,safe,safety,1350,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:374,Availability,avail,available,374,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1471,Energy Efficiency,schedul,scheduler,1471,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1747,Energy Efficiency,schedul,scheduling,1747,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1436,Modifiability,config,configured,1436,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1619,Modifiability,variab,variable,1619,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:461,Performance,multi-thread,multi-threading,461,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:865,Performance,perform,performs,865,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1264,Performance,multi-thread,multi-threading,1264,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1849,Performance,multi-thread,multi-threading,1849,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:108,Performance,multi-thread,multi-threading,108,"////////////////////////////////////////////////////////////////////////////////; /// Disables the implicit multi-threading in ROOT (see EnableImplicitMT).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:115,Performance,multi-thread,multi-threading,115,"////////////////////////////////////////////////////////////////////////////////; /// Returns true if the implicit multi-threading in ROOT is enabled.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:195,Modifiability,variab,variable,195,"// Global debug flag (set to > 0 to get debug output).; // Can be set either via the interpreter (gDebug is exported to CINT),; // via the rootrc resource ""Root.Debug"", via the shell environment variable; // ROOTDEBUG, or via the debugger.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1114,Integrability,depend,dependencies,1114,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the ROOT system. The creation of the TROOT object initializes; /// the ROOT system. It must be the first ROOT related action that is; /// performed by a program. The TROOT object must be created on the stack; /// (can not be called via new since ""operator new"" is protected). The; /// TROOT object is either created as a global object (outside the main(); /// program), or it is one of the first objects created in main().; /// Make sure that the TROOT object stays in scope for as long as ROOT; /// related actions are performed. TROOT is a so called singleton so; /// only one instance of it can be created. The single TROOT object can; /// always be accessed via the global pointer gROOT.; /// The name and title arguments can be used to identify the running; /// application. The initfunc argument can contain an array of; /// function pointers (last element must be 0). These functions are; /// executed at the end of the constructor. This way one can easily; /// extend the ROOT system without adding permanent dependencies; /// (e.g. the graphics system is initialized via such a function).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1066,Modifiability,extend,extend,1066,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the ROOT system. The creation of the TROOT object initializes; /// the ROOT system. It must be the first ROOT related action that is; /// performed by a program. The TROOT object must be created on the stack; /// (can not be called via new since ""operator new"" is protected). The; /// TROOT object is either created as a global object (outside the main(); /// program), or it is one of the first objects created in main().; /// Make sure that the TROOT object stays in scope for as long as ROOT; /// related actions are performed. TROOT is a so called singleton so; /// only one instance of it can be created. The single TROOT object can; /// always be accessed via the global pointer gROOT.; /// The name and title arguments can be used to identify the running; /// application. The initfunc argument can contain an array of; /// function pointers (last element must be 0). These functions are; /// executed at the end of the constructor. This way one can easily; /// extend the ROOT system without adding permanent dependencies; /// (e.g. the graphics system is initialized via such a function).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:235,Performance,perform,performed,235,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the ROOT system. The creation of the TROOT object initializes; /// the ROOT system. It must be the first ROOT related action that is; /// performed by a program. The TROOT object must be created on the stack; /// (can not be called via new since ""operator new"" is protected). The; /// TROOT object is either created as a global object (outside the main(); /// program), or it is one of the first objects created in main().; /// Make sure that the TROOT object stays in scope for as long as ROOT; /// related actions are performed. TROOT is a so called singleton so; /// only one instance of it can be created. The single TROOT object can; /// always be accessed via the global pointer gROOT.; /// The name and title arguments can be used to identify the running; /// application. The initfunc argument can contain an array of; /// function pointers (last element must be 0). These functions are; /// executed at the end of the constructor. This way one can easily; /// extend the ROOT system without adding permanent dependencies; /// (e.g. the graphics system is initialized via such a function).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:617,Performance,perform,performed,617,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the ROOT system. The creation of the TROOT object initializes; /// the ROOT system. It must be the first ROOT related action that is; /// performed by a program. The TROOT object must be created on the stack; /// (can not be called via new since ""operator new"" is protected). The; /// TROOT object is either created as a global object (outside the main(); /// program), or it is one of the first objects created in main().; /// Make sure that the TROOT object stays in scope for as long as ROOT; /// related actions are performed. TROOT is a so called singleton so; /// only one instance of it can be created. The single TROOT object can; /// always be accessed via the global pointer gROOT.; /// The name and title arguments can be used to identify the running; /// application. The initfunc argument can contain an array of; /// function pointers (last element must be 0). These functions are; /// executed at the end of the constructor. This way one can easily; /// extend the ROOT system without adding permanent dependencies; /// (e.g. the graphics system is initialized via such a function).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:750,Security,access,accessed,750,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the ROOT system. The creation of the TROOT object initializes; /// the ROOT system. It must be the first ROOT related action that is; /// performed by a program. The TROOT object must be created on the stack; /// (can not be called via new since ""operator new"" is protected). The; /// TROOT object is either created as a global object (outside the main(); /// program), or it is one of the first objects created in main().; /// Make sure that the TROOT object stays in scope for as long as ROOT; /// related actions are performed. TROOT is a so called singleton so; /// only one instance of it can be created. The single TROOT object can; /// always be accessed via the global pointer gROOT.; /// The name and title arguments can be used to identify the running; /// application. The initfunc argument can contain an array of; /// function pointers (last element must be 0). These functions are; /// executed at the end of the constructor. This way one can easily; /// extend the ROOT system without adding permanent dependencies; /// (e.g. the graphics system is initialized via such a function).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:31,Integrability,interface,interface,31,"// Initialize Operating System interface",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:14,Integrability,interface,interface,14,"// Initialize interface to CINT C++ interpreter",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:37,Availability,avail,available,37,"// usedToIdentifyRootClingByDlSym is available when TROOT is part of; // rootcling.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:14,Modifiability,plugin,plugin,14,"// initialize plugin manager early",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:20,Integrability,Message,MessageHandler,20,"// Create a default MessageHandler",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:32,Safety,avoid,avoid,32,"// Turn-off the global mutex to avoid recreating mutexes that have; // already been deleted during the destruction phase",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:15,Availability,error,error,15,"// Return when error occurred in TCling, i.e. when setup file(s) are; // out of date",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:64,Safety,Safe,SafeDelete,64,"// FIXME: Causes rootcling to deadlock, debug and uncomment; // SafeDelete(fRootFolder);",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:7,Security,secur,security,7,"// and security contexts",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:84,Safety,Safe,SafeDelete,84,"// FIXME: Causes segfault in rootcling, debug and uncomment; // fClasses->Delete(); SafeDelete(fClasses); // TClass'es must be deleted last",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:295,Integrability,depend,dependent,295,"// On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; // initialization order is (by default?) is 'wrong' and so we can't; // delete the interpreter now .. because any of the static in the; // interpreter's library have already been deleted.; // On the link line, we must list the most dependent .o file; // and end with the least dependent (LLVM libraries), unfortunately,; // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; // in the same order (hence doing libCore's before LLVM's and; // vice et versa for both the destructor. We worked around the; // initialization order by delay the TROOT creation until first use.; // We can not do the same for destruction as we have no way of knowing; // the last access ...; // So for now, let's avoid delete TCling except in the special build; // checking the completeness of the termination deletion.; // TODO: Should we do more cleanup here than just call delete?; // Segfaults rootcling in some cases, debug and uncomment:; //; // delete fInterpreter;; // We cannot delete fCleanups because of the logic in atexit which needs it.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:340,Integrability,depend,dependent,340,"// On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; // initialization order is (by default?) is 'wrong' and so we can't; // delete the interpreter now .. because any of the static in the; // interpreter's library have already been deleted.; // On the link line, we must list the most dependent .o file; // and end with the least dependent (LLVM libraries), unfortunately,; // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; // in the same order (hence doing libCore's before LLVM's and; // vice et versa for both the destructor. We worked around the; // initialization order by delay the TROOT creation until first use.; // We can not do the same for destruction as we have no way of knowing; // the last access ...; // So for now, let's avoid delete TCling except in the special build; // checking the completeness of the termination deletion.; // TODO: Should we do more cleanup here than just call delete?; // Segfaults rootcling in some cases, debug and uncomment:; //; // delete fInterpreter;; // We cannot delete fCleanups because of the logic in atexit which needs it.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:768,Safety,avoid,avoid,768,"// On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; // initialization order is (by default?) is 'wrong' and so we can't; // delete the interpreter now .. because any of the static in the; // interpreter's library have already been deleted.; // On the link line, we must list the most dependent .o file; // and end with the least dependent (LLVM libraries), unfortunately,; // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; // in the same order (hence doing libCore's before LLVM's and; // vice et versa for both the destructor. We worked around the; // initialization order by delay the TROOT creation until first use.; // We can not do the same for destruction as we have no way of knowing; // the last access ...; // So for now, let's avoid delete TCling except in the special build; // checking the completeness of the termination deletion.; // TODO: Should we do more cleanup here than just call delete?; // Segfaults rootcling in some cases, debug and uncomment:; //; // delete fInterpreter;; // We cannot delete fCleanups because of the logic in atexit which needs it.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:735,Security,access,access,735,"// On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; // initialization order is (by default?) is 'wrong' and so we can't; // delete the interpreter now .. because any of the static in the; // interpreter's library have already been deleted.; // On the link line, we must list the most dependent .o file; // and end with the least dependent (LLVM libraries), unfortunately,; // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; // in the same order (hence doing libCore's before LLVM's and; // vice et versa for both the destructor. We worked around the; // initialization order by delay the TROOT creation until first use.; // We can not do the same for destruction as we have no way of knowing; // the last access ...; // So for now, let's avoid delete TCling except in the special build; // checking the completeness of the termination deletion.; // TODO: Should we do more cleanup here than just call delete?; // Segfaults rootcling in some cases, debug and uncomment:; //; // delete fInterpreter;; // We cannot delete fCleanups because of the logic in atexit which needs it.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1074,Testability,log,logic,1074,"// On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; // initialization order is (by default?) is 'wrong' and so we can't; // delete the interpreter now .. because any of the static in the; // interpreter's library have already been deleted.; // On the link line, we must list the most dependent .o file; // and end with the least dependent (LLVM libraries), unfortunately,; // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; // in the same order (hence doing libCore's before LLVM's and; // vice et versa for both the destructor. We worked around the; // initialization order by delay the TROOT creation until first use.; // We can not do the same for destruction as we have no way of knowing; // the last access ...; // So for now, let's avoid delete TCling except in the special build; // checking the completeness of the termination deletion.; // TODO: Should we do more cleanup here than just call delete?; // Segfaults rootcling in some cases, debug and uncomment:; //; // delete fInterpreter;; // We cannot delete fCleanups because of the logic in atexit which needs it.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:37,Availability,avail,available,37,"// usedToIdentifyRootClingByDlSym is available when TROOT is part of rootcling.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:140,Integrability,rout,routine,140,"////////////////////////////////////////////////////////////////////////////////; /// Add a class to the list and map of classes.; /// This routine is deprecated, use TClass::AddClass directly.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:192,Performance,load,loaded,192,"////////////////////////////////////////////////////////////////////////////////; /// Add a class generator. This generator will be called by TClass::GetClass; /// in case its does not find a loaded rootcint dictionary to request the; /// creation of a TClass object.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:98,Deployability,update,update,98,"// Routine to close a list of files using the 'slow' techniques; // that also for the deletion ot update the list itself.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Integrability,Rout,Routine,3,"// Routine to close a list of files using the 'slow' techniques; // that also for the deletion ot update the list itself.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:409,Usability,Clear,Clear,409,"// In order for the iterator to stay valid, we must; // prevent the removal of the object (dir) from the list; // (which is done in TFile::Close). We can also can not; // just move to the next iterator since the Close might; // also (indirectly) remove that file.; // So we SetObject to a harmless value, so that 'dir'; // is not seen as part of the list.; // We will later, remove all the object (see files->Clear()",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:90,Usability,Clear,Clear,90,"// this must not be zero otherwise things go wrong.; // See related comment at the files->Clear(""nodelete"");",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:168,Safety,avoid,avoid,168,"// Now were done, clear the list but do not delete the objects as; // they have been moved to the list of closed objects and must be; // deleted from there in order to avoid a double delete from a; // use objects (on the interpreter stack).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:18,Usability,clear,clear,18,"// Now were done, clear the list but do not delete the objects as; // they have been moved to the list of closed objects and must be; // deleted from there in order to avoid a double delete from a; // use objects (on the interpreter stack).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Integrability,Rout,Routine,3,"// Routine to delete the content of list of files using the 'slow' techniques",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:409,Usability,Clear,Clear,409,"// In order for the iterator to stay valid, we must; // prevent the removal of the object (dir) from the list; // (which is done in TFile::Close). We can also can not; // just move to the next iterator since the Close might; // also (indirectly) remove that file.; // So we SetObject to a harmless value, so that 'dir'; // is not seen as part of the list.; // We will later, remove all the object (see files->Clear()",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:90,Usability,Clear,Clear,90,"// this must not be zero otherwise things go wrong.; // See related comment at the files->Clear(""nodelete"");",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:409,Usability,Clear,Clear,409,"// In order for the iterator to stay valid, we must; // prevent the removal of the object (dir) from the list; // (which is done in TFile::Close). We can also can not; // just move to the next iterator since the Close might; // also (indirectly) remove that file.; // So we SetObject to a harmless value, so that 'dir'; // is not seen as part of the list.; // We will later, remove all the object (see files->Clear()",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:18,Usability,clear,clear,18,"// Now were done, clear the list",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:92,Availability,down,down,92,"// Now delete the objects still 'held' by the TFiles so that it; // is done before the tear down of the libraries.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:16,Usability,simpl,simpler,16,"// Now a set of simpler things to delete. See the same ordering in; // TROOT::~TROOT",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:18,Modifiability,variab,variable,18,"// Is it a global variable?",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:325,Performance,load,loading,325,"// Example of inputs are; // vector<int> (*); // vector<Int_t>; // vector<long long>; // vector<Long_64_t> (*); // vector<int, allocator<int> >; // vector<Int_t, allocator<int> >; //; // One of the possibly expensive operation is the resolving of the typedef; // which can provoke the parsing of the header files (and/or the loading; // of clang pcms information).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Performance,load,load,3,/* load */,MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:255,Performance,load,load,255,"// If 2 threads gets here at the same time, the static initialization ""lock""; // will stall one of them until ProcessLine is finished and both will return the; // correct answer.; // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`; // and restart after this thread has finished the initialization (i.e. a rare case),; // the only penalty we pay is a spurious 2nd lookup for an unknown function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:111,Modifiability,variab,variable,111,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to global variable by name. If load is true force; /// reading of all currently defined globals from CINT (more expensive).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:132,Performance,load,load,132,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to global variable by name. If load is true force; /// reading of all currently defined globals from CINT (more expensive).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:111,Modifiability,variab,variable,111,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to global variable with address addr.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Performance,load,load,3,/* load */,MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:95,Integrability,rout,routine,95,"////////////////////////////////////////////////////////////////////////////////; /// Internal routine returning, and creating if necessary, the list; /// of global function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:250,Performance,load,load,250,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to global function by name.; /// If params != 0 it will also resolve overloading other it returns the first; /// name match.; /// If params == 0 and load is true force reading of all currently defined; /// global functions from Cling.; /// The param string must be of the form: ""3189,\""aap\"",1.3"".",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:185,Performance,load,load,185,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to global function by name. If proto != 0; /// it will also resolve overloading. If load is true force reading; /// of all currently defined global functions from CINT (more expensive).; /// The proto string must be of the form: ""int, char*, float"".",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Testability,Test,Test,3,"// Test again just in case, another thread did the work while we were; // waiting.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:233,Deployability,update,update,233,"////////////////////////////////////////////////////////////////////////////////; /// Return list containing the TGlobals currently defined.; /// Since globals are created and deleted during execution of the; /// program, we need to update the list of globals every time we; /// execute this method. However, when calling this function in; /// a (tight) loop where no interpreter symbols will be created; /// you can set load=kFALSE (default).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:421,Performance,load,load,421,"////////////////////////////////////////////////////////////////////////////////; /// Return list containing the TGlobals currently defined.; /// Since globals are created and deleted during execution of the; /// program, we need to update the list of globals every time we; /// execute this method. However, when calling this function in; /// a (tight) loop where no interpreter symbols will be created; /// you can set load=kFALSE (default).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:237,Deployability,update,update,237,"////////////////////////////////////////////////////////////////////////////////; /// Return list containing the TFunctions currently defined.; /// Since functions are created and deleted during execution of the; /// program, we need to update the list of functions every time we; /// execute this method. However, when calling this function in; /// a (tight) loop where no interpreter symbols will be created; /// you can set load=kFALSE (default).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:427,Performance,load,load,427,"////////////////////////////////////////////////////////////////////////////////; /// Return list containing the TFunctions currently defined.; /// Since functions are created and deleted during execution of the; /// program, we need to update the list of functions every time we; /// execute this method. However, when calling this function in; /// a (tight) loop where no interpreter symbols will be created; /// you can set load=kFALSE (default).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:28,Performance,load,load,28,"// A thread that calls with load==true and a thread that calls with load==false; // will conflict here (the load==true will be updating the list while the; // other is reading it). To solve the problem, we could use a read-write lock; // inside the list itself.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:68,Performance,load,load,68,"// A thread that calls with load==true and a thread that calls with load==false; // will conflict here (the load==true will be updating the list while the; // other is reading it). To solve the problem, we could use a read-write lock; // inside the list itself.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:108,Performance,load,load,108,"// A thread that calls with load==true and a thread that calls with load==false; // will conflict here (the load==true will be updating the list while the; // other is reading it). To solve the problem, we could use a read-write lock; // inside the list itself.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:115,Security,access,access,115,"////////////////////////////////////////////////////////////////////////////////; /// Return a dynamic list giving access to all TDataTypes (typedefs); /// currently defined.; ///; /// The list is populated on demand. Calling; /// ~~~ {.cpp}; /// gROOT->GetListOfTypes()->FindObject(nameoftype);; /// ~~~; /// will return the TDataType corresponding to 'nameoftype'. If the; /// TDataType is not already in the list itself and the type does exist,; /// a new TDataType will be created and added to the list.; ///; /// Calling; /// ~~~ {.cpp}; /// gROOT->GetListOfTypes()->ls(); // or Print(); /// ~~~; /// list only the typedefs that have been previously accessed through the; /// list (plus the builtins types).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:655,Security,access,accessed,655,"////////////////////////////////////////////////////////////////////////////////; /// Return a dynamic list giving access to all TDataTypes (typedefs); /// currently defined.; ///; /// The list is populated on demand. Calling; /// ~~~ {.cpp}; /// gROOT->GetListOfTypes()->FindObject(nameoftype);; /// ~~~; /// will return the TDataType corresponding to 'nameoftype'. If the; /// TDataType is not already in the list itself and the type does exist,; /// a new TDataType will be created and added to the list.; ///; /// Calling; /// ~~~ {.cpp}; /// gROOT->GetListOfTypes()->ls(); // or Print(); /// ~~~; /// list only the typedefs that have been previously accessed through the; /// list (plus the builtins types).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Performance,load,load,3,/* load */,MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:30,Availability,avail,available,30,"// Check whether the class is available for auto-loading first:",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:49,Performance,load,loading,49,"// Check whether the class is available for auto-loading first:",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:302,Safety,detect,detected,302,"// ""C:\dir"" becomes ""C:::dir"".; // fname corresponds to whatever is stated after #include and; // a full path name usually means that it's not a regular #include; // but e.g. a "".L"", so we can assume that this is not a header of; // a class in a namespace (a global-namespace class would have been; // detected already before).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:16,Availability,error,error,16,"// to a void an error with VisualC++",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:114,Integrability,interface,interface,114,"////////////////////////////////////////////////////////////////////////////////; /// Initialize operating system interface.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:137,Availability,avail,available,137,"// The old ""Root.ZipMode"" had a discrepancy between documentation vs actual meaning.; // Also, a value with the meaning ""default"" wasn't available. To solved this,; // ""Root.ZipMode"" was replaced by ""Root.CompressionAlgorithm"". Warn about usage of; // the old value, if it's set to 0, but silently translate the setting to; // ""Root.CompressionAlgorithm"" for values > 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load and initialize thread library.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:37,Availability,avail,available,37,"// usedToIdentifyRootClingByDlSym is available when TROOT is part of; // rootcling.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:9,Availability,error,error,9,"// reset error message",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:15,Integrability,message,message,15,"// reset error message",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Energy Efficiency,Schedul,Schedule,3,"// Schedule the destruction of TROOT.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:161,Performance,load,load,161,"////////////////////////////////////////////////////////////////////////////////; /// Helper function used by TClass::GetClass().; /// This function attempts to load the dictionary for 'classname'; /// either from the TClassTable or from the list of generator.; /// If silent is 'true', do not warn about missing dictionary for the class.; /// (typically used for class that are used only for transient members); ///; /// The 'requestedname' is expected to be already normalized.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:646,Availability,error,error,646,"////////////////////////////////////////////////////////////////////////////////; /// Check if class ""classname"" is known to the interpreter (in fact,; /// this check is not needed anymore, so classname is ignored). If; /// not it will load library ""libname"". If the library couldn't be found with original; /// libname and if the name was not prefixed with lib, try to prefix with ""lib"" and search again.; /// If DynamicPathName still couldn't find the library, return -1.; /// If check is true it will only check if libname exists and is; /// readable.; /// Returns 0 on successful loading, -1 in case libname does not; /// exist or in case of error and -2 in case of version mismatch.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:236,Performance,load,load,236,"////////////////////////////////////////////////////////////////////////////////; /// Check if class ""classname"" is known to the interpreter (in fact,; /// this check is not needed anymore, so classname is ignored). If; /// not it will load library ""libname"". If the library couldn't be found with original; /// libname and if the name was not prefixed with lib, try to prefix with ""lib"" and search again.; /// If DynamicPathName still couldn't find the library, return -1.; /// If check is true it will only check if libname exists and is; /// readable.; /// Returns 0 on successful loading, -1 in case libname does not; /// exist or in case of error and -2 in case of version mismatch.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:584,Performance,load,loading,584,"////////////////////////////////////////////////////////////////////////////////; /// Check if class ""classname"" is known to the interpreter (in fact,; /// this check is not needed anymore, so classname is ignored). If; /// not it will load library ""libname"". If the library couldn't be found with original; /// libname and if the name was not prefixed with lib, try to prefix with ""lib"" and search again.; /// If DynamicPathName still couldn't find the library, return -1.; /// If check is true it will only check if libname exists and is; /// readable.; /// Returns 0 on successful loading, -1 in case libname does not; /// exist or in case of error and -2 in case of version mismatch.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:29,Performance,load,load,29,"// If check == false, try to load the library",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:12,Performance,Load,Load,12,"// TSystem::Load returns 1 when the library was already loaded, return success in this case.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:56,Performance,load,loaded,56,"// TSystem::Load returns 1 when the library was already loaded, return success in this case.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:355,Availability,error,error,355,"////////////////////////////////////////////////////////////////////////////////; /// Load a macro in the interpreter's memory. Equivalent to the command line; /// command "".L filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If check is true it will only check if filename exists and is; /// readable.; /// Returns 0 on successful loading and -1 in case filename does not; /// exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:585,Availability,error,error,585,"////////////////////////////////////////////////////////////////////////////////; /// Load a macro in the interpreter's memory. Equivalent to the command line; /// command "".L filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If check is true it will only check if filename exists and is; /// readable.; /// Returns 0 on successful loading and -1 in case filename does not; /// exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load a macro in the interpreter's memory. Equivalent to the command line; /// command "".L filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If check is true it will only check if filename exists and is; /// readable.; /// Returns 0 on successful loading and -1 in case filename does not; /// exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:519,Performance,load,loading,519,"////////////////////////////////////////////////////////////////////////////////; /// Load a macro in the interpreter's memory. Equivalent to the command line; /// command "".L filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If check is true it will only check if filename exists and is; /// readable.; /// Returns 0 on successful loading and -1 in case filename does not; /// exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:357,Availability,error,error,357,"////////////////////////////////////////////////////////////////////////////////; /// Execute a macro in the interpreter. Equivalent to the command line; /// command "".x filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]][(args)].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If padUpdate is true (default) update the current pad.; /// Returns the macro return value.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:446,Deployability,update,update,446,"////////////////////////////////////////////////////////////////////////////////; /// Execute a macro in the interpreter. Equivalent to the command line; /// command "".x filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]][(args)].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If padUpdate is true (default) update the current pad.; /// Returns the macro return value.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:94,Integrability,message,message,94,"////////////////////////////////////////////////////////////////////////////////; /// Process message id called by obj.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:432,Availability,error,error,432,"////////////////////////////////////////////////////////////////////////////////; /// Process interpreter command via TApplication::ProcessLine().; /// On Win32 the line will be processed asynchronously by sending; /// it to the CINT interpreter thread. For explicit synchronous processing; /// use ProcessLineSync(). On non-Win32 platforms there is no difference; /// between ProcessLine() and ProcessLineSync().; /// The possible error codes are defined by TInterpreter::EErrorCode. In; /// particular, error will equal to TInterpreter::kProcessing until the; /// CINT interpreted thread has finished executing the line.; /// Returns the result of the command, cast to a Longptr_t.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:505,Availability,error,error,505,"////////////////////////////////////////////////////////////////////////////////; /// Process interpreter command via TApplication::ProcessLine().; /// On Win32 the line will be processed asynchronously by sending; /// it to the CINT interpreter thread. For explicit synchronous processing; /// use ProcessLineSync(). On non-Win32 platforms there is no difference; /// between ProcessLine() and ProcessLineSync().; /// The possible error codes are defined by TInterpreter::EErrorCode. In; /// particular, error will equal to TInterpreter::kProcessing until the; /// CINT interpreted thread has finished executing the line.; /// Returns the result of the command, cast to a Longptr_t.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:419,Availability,error,error,419,"////////////////////////////////////////////////////////////////////////////////; /// Process interpreter command via TApplication::ProcessLine().; /// On Win32 the line will be processed synchronously (i.e. it will; /// only return when the CINT interpreter thread has finished executing; /// the line). On non-Win32 platforms there is no difference between; /// ProcessLine() and ProcessLineSync().; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// Returns the result of the command, cast to a Longptr_t.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:285,Availability,error,error,285,"////////////////////////////////////////////////////////////////////////////////; /// Process interpreter command directly via CINT interpreter.; /// Only executable statements are allowed (no variable declarations),; /// In all other cases use TROOT::ProcessLine().; /// The possible error codes are defined by TInterpreter::EErrorCode.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:193,Modifiability,variab,variable,193,"////////////////////////////////////////////////////////////////////////////////; /// Process interpreter command directly via CINT interpreter.; /// Only executable statements are allowed (no variable declarations),; /// In all other cases use TROOT::ProcessLine().; /// The possible error codes are defined by TInterpreter::EErrorCode.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:15,Security,hash,hash,15,"// read commit hash",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:122,Deployability,release,release,122,"////////////////////////////////////////////////////////////////////////////////; /// Deprecated (will be removed in next release).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:289,Deployability,update,update,289,"////////////////////////////////////////////////////////////////////////////////; /// Refresh all browsers. Call this method when some command line; /// command or script has changed the browser contents. Not needed; /// for objects that have the kMustCleanup bit set. Most useful to; /// update browsers that show the file system or other objects external; /// to the running ROOT session.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1825,Availability,down,down,1825,"led if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (whichever comes first). We do *not*; // want the files to be closed whenever a library is unloaded via; // dlclose. To avoid this, we add the function (CallCloseFiles); // from the dictionary indirectly (via ROOT::RegisterModule). In; // this case the function will only only be called either when; // libCore is 'dlclose'd or right after the end of main.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:797,Integrability,rout,routine,797,"// First a side track to insure proper end of process behavior.; // Register for each loaded dictionary (and thus for each library),; // that we need to Close the ROOT files as soon as this library; // might start being unloaded after main.; //; // By calling atexit here (rather than directly from within the; // library) we make sure that this is not called if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (w",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:86,Performance,load,loaded,86,"// First a side track to insure proper end of process behavior.; // Register for each loaded dictionary (and thus for each library),; // that we need to Close the ROOT files as soon as this library; // might start being unloaded after main.; //; // By calling atexit here (rather than directly from within the; // library) we make sure that this is not called if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (w",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:556,Performance,load,loaded,556,"// First a side track to insure proper end of process behavior.; // Register for each loaded dictionary (and thus for each library),; // that we need to Close the ROOT files as soon as this library; // might start being unloaded after main.; //; // By calling atexit here (rather than directly from within the; // library) we make sure that this is not called if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (w",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:657,Performance,load,loaded,657,"// First a side track to insure proper end of process behavior.; // Register for each loaded dictionary (and thus for each library),; // that we need to Close the ROOT files as soon as this library; // might start being unloaded after main.; //; // By calling atexit here (rather than directly from within the; // library) we make sure that this is not called if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (w",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1316,Performance,load,load,1316,"lled if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (whichever comes first). We do *not*; // want the files to be closed whenever a library is unloaded via; // dlclose. To avoid this, we add the function (CallCloseFiles); // from the dictionary indirectly (via ROOT::RegisterModule). In; // this case the function will only only be called either when; // libCore is 'dlclose'd or right after the end of main.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:2119,Safety,avoid,avoid,2119,"led if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (whichever comes first). We do *not*; // want the files to be closed whenever a library is unloaded via; // dlclose. To avoid this, we add the function (CallCloseFiles); // from the dictionary indirectly (via ROOT::RegisterModule). In; // this case the function will only only be called either when; // libCore is 'dlclose'd or right after the end of main.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:145,Integrability,rout,routine,145,"////////////////////////////////////////////////////////////////////////////////; /// Remove a class from the list and map of classes.; /// This routine is deprecated, use TClass::RemoveClass directly.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:244,Performance,load,loaded,244,"////////////////////////////////////////////////////////////////////////////////; /// Delete all global interpreter objects created since the last call to Reset; ///; /// If option=""a"" is set reset to startup context (i.e. unload also; /// all loaded files, classes, structs, typedefs, etc.).; ///; /// This function is typically used at the beginning (or end) of an unnamed macro; /// to clean the environment.; ///; /// IMPORTANT WARNING:; /// Do not use this call from within any function (neither compiled nor; /// interpreted. This should only be used from a unnamed macro; /// (which starts with a { (curly braces) ). For example, using TROOT::Reset; /// from within an interpreted function will lead to the unloading of the; /// dictionary and source file, including the one defining the function being; /// executed.; ///",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:93,Modifiability,extend,extend,93,"////////////////////////////////////////////////////////////////////////////////; /// Set or extend the macro search path. Static utility function.; /// If newpath=0 or """" reset to value specified in the rootrc file.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:267,Availability,avail,available,267,"////////////////////////////////////////////////////////////////////////////////; /// Set batch mode for ROOT; /// If the argument evaluates to `true`, the session does not use interactive graphics.; /// If web graphics runs in server mode, the web widgets are still available via URL",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:981,Availability,avail,available,981,"////////////////////////////////////////////////////////////////////////////////; /// \brief Specify where web graphics shall be rendered; ///; /// The input parameter `webdisplay` defines where web graphics is rendered.; /// `webdisplay` parameter may contain:; ///; /// - ""firefox"": select Mozilla Firefox browser for interactive web display; /// - ""chrome"": select Google Chrome browser for interactive web display; /// - ""edge"": select Microsoft Edge browser for interactive web display; /// - ""native"": select one of the natively-supported web browsers firefox/chrome/edge for interactive web display; /// - ""qt5"": uses QWebEngine from Qt5, no real http server started (requires `qt5web` component build for ROOT); /// - ""qt6"": uses QWebEngine from Qt6, no real http server started (requires `qt6web` component build for ROOT); /// - ""cef"": uses Chromium Embeded Framework, no real http server started (requires `cefweb` component build for ROOT); /// - ""local"": select on of available local (without http server) engines like qt5/qt6/cef; /// - ""default"": system default web browser, invoked with `xdg-open` on Linux, `start` on Mac or `open` on Windows; /// - ""on"": try ""local"", then ""native"", then ""default"" option; /// - ""off"": turns off the web display and comes back to normal graphics in; /// interactive mode.; /// - ""server:port"": turns the web display into server mode with specified port. Web widgets will not be displayed,; /// only text message with window URL will be printed on standard output",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1455,Integrability,message,message,1455,"////////////////////////////////////////////////////////////////////////////////; /// \brief Specify where web graphics shall be rendered; ///; /// The input parameter `webdisplay` defines where web graphics is rendered.; /// `webdisplay` parameter may contain:; ///; /// - ""firefox"": select Mozilla Firefox browser for interactive web display; /// - ""chrome"": select Google Chrome browser for interactive web display; /// - ""edge"": select Microsoft Edge browser for interactive web display; /// - ""native"": select one of the natively-supported web browsers firefox/chrome/edge for interactive web display; /// - ""qt5"": uses QWebEngine from Qt5, no real http server started (requires `qt5web` component build for ROOT); /// - ""qt6"": uses QWebEngine from Qt6, no real http server started (requires `qt6web` component build for ROOT); /// - ""cef"": uses Chromium Embeded Framework, no real http server started (requires `cefweb` component build for ROOT); /// - ""local"": select on of available local (without http server) engines like qt5/qt6/cef; /// - ""default"": system default web browser, invoked with `xdg-open` on Linux, `start` on Mac or `open` on Windows; /// - ""on"": try ""local"", then ""native"", then ""default"" option; /// - ""off"": turns off the web display and comes back to normal graphics in; /// interactive mode.; /// - ""server:port"": turns the web display into server mode with specified port. Web widgets will not be displayed,; /// only text message with window URL will be printed on standard output",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:38,Modifiability,config,configured,38,"// restore canvas and browser classes configured at the moment when gROOT->SetWebDisplay() was called for the first time; // This is necessary when SetWebDisplay() called several times and therefore current settings may differ",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:131,Integrability,inject,inject,131,"////////////////////////////////////////////////////////////////////////////////; /// INTERNAL function!; /// Used by rootcling to inject interpreter arguments through a C-interface layer.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:172,Integrability,interface,interface,172,"////////////////////////////////////////////////////////////////////////////////; /// INTERNAL function!; /// Used by rootcling to inject interpreter arguments through a C-interface layer.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:131,Security,inject,inject,131,"////////////////////////////////////////////////////////////////////////////////; /// INTERNAL function!; /// Used by rootcling to inject interpreter arguments through a C-interface layer.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:119,Deployability,install,installation,119,"////////////////////////////////////////////////////////////////////////////////; /// Get the rootsys directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Safety,Avoid,Avoid,3,"// Avoid returning a reference to a temporary because of the conversion; // between std::string and TString.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:118,Deployability,install,installation,118,"////////////////////////////////////////////////////////////////////////////////; /// Get the binary directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:119,Deployability,install,installation,119,"////////////////////////////////////////////////////////////////////////////////; /// Get the library directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:128,Deployability,install,installation,128,"////////////////////////////////////////////////////////////////////////////////; /// Get the shared libraries directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:119,Deployability,install,installation,119,"////////////////////////////////////////////////////////////////////////////////; /// Get the include directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Safety,Avoid,Avoid,3,"// Avoid returning a reference to a temporary because of the conversion; // between std::string and TString.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:121,Deployability,install,installation,121,"////////////////////////////////////////////////////////////////////////////////; /// Get the sysconfig directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Safety,Avoid,Avoid,3,"// Avoid returning a reference to a temporary because of the conversion; // between std::string and TString.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:116,Deployability,install,installation,116,"////////////////////////////////////////////////////////////////////////////////; /// Get the data directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:125,Deployability,install,installation,125,"////////////////////////////////////////////////////////////////////////////////; /// Get the documentation directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:117,Deployability,install,installation,117,"////////////////////////////////////////////////////////////////////////////////; /// Get the macro directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:121,Deployability,install,installation,121,"////////////////////////////////////////////////////////////////////////////////; /// Get the tutorials directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:91,Availability,down,down,91,"////////////////////////////////////////////////////////////////////////////////; /// Shut down ROOT.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:118,Deployability,install,installation,118,"////////////////////////////////////////////////////////////////////////////////; /// Get the source directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:111,Deployability,install,installation,111,"////////////////////////////////////////////////////////////////////////////////; /// Get the icon path in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:117,Deployability,install,installation,117,"////////////////////////////////////////////////////////////////////////////////; /// Get the fonts directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:121,Deployability,install,installation,121,"////////////////////////////////////////////////////////////////////////////////; /// Get the tutorials directory in the installation. Static utility function.; /// Backward compatibility function - do not use for new code",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStopwatch.cxx:86,Usability,Resume,Resume,86,"////////////////////////////////////////////////////////////////////////////////; /// Resume a stopped stopwatch. The stopwatch continues counting from the last; /// Start() onwards (this is like the laptimer function).",MatchSource.CODE_COMMENT,core/base/src/TStopwatch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStopwatch.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:917,Deployability,toggle,toggle,917,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/07/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TStorage; \ingroup Base. Storage manager. The storage manager works best in conjunction with; the custom ROOT new and delete operators defined in the file; NewDelete.cxx (libNew.so). Only when using the custom allocation; operators will memory usage statistics be gathered using the; TStorage EnterStat(), RemoveStat(), etc. functions.; Memory checking is by default enabled (when using libNew.so) and; usage statistics is gathered. Using the resource (in .rootrc):; Root.MemStat one can toggle statistics gathering on or off. More; specifically on can trap the allocation of a block of memory of a; certain size. This can be specified using the resource:; Root.MemStat.size, using the resource Root.MemStat.cnt one can; specify after how many allocations of this size the trap should; occur. Set the compile option R__NOSTATS to de-activate all memory checking; and statistics gathering in the system.; */",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate a block of memory, that later can be resized using; /// TStorage::ReAlloc().",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:89,Energy Efficiency,allocate,allocate,89,"////////////////////////////////////////////////////////////////////////////////; /// De-allocate block of memory, that was allocated via TStorage::Alloc().",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:124,Energy Efficiency,allocate,allocated,124,"////////////////////////////////////////////////////////////////////////////////; /// De-allocate block of memory, that was allocated via TStorage::Alloc().",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:94,Energy Efficiency,allocate,allocate,94,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate a TObject on the heap (via TObject::operator new()).; /// Directly after this routine one can call (in the TObject ctor); /// TStorage::FilledByObjectAlloc() to find out if the just created object is on; /// the heap. This technique is necessary as there is one stack per thread; /// and we can not rely on comparison with the current stack memory position.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:181,Integrability,rout,routine,181,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate a TObject on the heap (via TObject::operator new()).; /// Directly after this routine one can call (in the TObject ctor); /// TStorage::FilledByObjectAlloc() to find out if the just created object is on; /// the heap. This technique is necessary as there is one stack per thread; /// and we can not rely on comparison with the current stack memory position.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:94,Energy Efficiency,allocate,allocate,94,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate array of TObject on the heap (via TObject::operator new[]()).; /// Unlike the 'singular' ObjectAlloc, we do not mark those object has being; /// allocated on the heap as they can not be individually deleted.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:248,Energy Efficiency,allocate,allocated,248,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate array of TObject on the heap (via TObject::operator new[]()).; /// Unlike the 'singular' ObjectAlloc, we do not mark those object has being; /// allocated on the heap as they can not be individually deleted.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:94,Energy Efficiency,allocate,allocate,94,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); /// in position vp. vp is already allocated (maybe on heap, maybe on; /// stack) so just return.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:202,Energy Efficiency,allocate,allocated,202,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); /// in position vp. vp is already allocated (maybe on heap, maybe on; /// stack) so just return.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:651,Performance,Optimiz,Optimization,651,"// @(#)root/base:$Id$; // Author: Fons Rademakers 04/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TString; \ingroup Base. Basic string class. Cannot be stored in a TCollection... use TObjString instead. The underlying string is stored as a char* that can be accessed via; TString::Data().; TString provides Short String Optimization (SSO) so that short; strings (<15 on 64-bit and <11 on 32-bit) are contained in the; TString internal data structure without the need for mallocing the; required space. Substring operations are provided by the TSubString class, which; holds a reference to the original string and its data, along with; the offset and length of the substring. To retrieve the substring; as a TString, construct a TString from it, eg:; ~~~ {.cpp}; root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello""; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:589,Security,access,accessed,589,"// @(#)root/base:$Id$; // Author: Fons Rademakers 04/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TString; \ingroup Base. Basic string class. Cannot be stored in a TCollection... use TObjString instead. The underlying string is stored as a char* that can be accessed via; TString::Data().; TString provides Short String Optimization (SSO) so that short; strings (<15 on 64-bit and <11 on 32-bit) are contained in the; TString internal data structure without the need for mallocing the; required space. Substring operations are provided by the TSubString class, which; holds a reference to the original string and its data, along with; the offset and length of the substring. To retrieve the substring; as a TString, construct a TString from it, eg:; ~~~ {.cpp}; root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello""; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:34,Safety,avoid,avoid,34,"// Amount to shift hash values to avoid clustering",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:19,Security,hash,hash,19,"// Amount to shift hash values to avoid clustering",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:258,Modifiability,variab,variable,258,"////////////////////////////////////////////////////////////////////////////////; //; // In what follows, fCap is the length of the underlying representation; // vector. Hence, the capacity for a null terminated string held in this; // vector is fCap-1. The variable fSize is the length of the held; // string, excluding the terminating null.; //; // The algorithms make no assumptions about whether internal strings; // hold embedded nulls. However, they do assume that any string; // passed in as an argument that does not have a length count is null; // terminated and therefore has no embedded nulls.; //; // The internal string is always null terminated.; ////////////////////////////////////////////////////////////////////////////////; /// TString default ctor.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:297,Energy Efficiency,allocate,allocated,297,"////////////////////////////////////////////////////////////////////////////////; /// Private member function returning an empty string representation of; /// size capacity and containing nchar characters.; /// \warning If nchar > MaxSize(), then Fatal() is raised and only MaxSize() elements are allocated",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:102,Security,Hash,Hash,102,"////////////////////////////////////////////////////////////////////////////////; /// Utility used by Hash().",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:110,Security,hash,hash,110,"////////////////////////////////////////////////////////////////////////////////; /// Return a case-sensitive hash value (endian independent).",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:110,Security,hash,hash,110,"////////////////////////////////////////////////////////////////////////////////; /// Return a case-sensitive hash value (endian independent).",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:112,Security,hash,hash,112,"////////////////////////////////////////////////////////////////////////////////; /// Return a case-insensitive hash value (endian independent).",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:93,Security,hash,hash,93,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:129,Performance,optimiz,optimized,129,"// MurmurHash3 - a blazingly fast public domain hash!; // See http://code.google.com/p/smhasher/; // There are two versions, one optimized for 32 bit and one for 64 bit.; // They give different hash results!; // We use only the 64 bit version which also works on 32 bit.; //-----------------------------------------------------------------------------; // MurmurHash3 was written by Austin Appleby, and is placed in the public; // domain. The author hereby disclaims copyright to this source code.; // Note - The x86 and x64 versions do _not_ produce the same results, as the; // algorithms are optimized for their respective platforms. You can still; // compile and run any of them on any platform, but your performance with the; // non-native version will be less than optimal.; //-----------------------------------------------------------------------------; // Platform-specific functions and macros; // From MurmurHash.h:",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:595,Performance,optimiz,optimized,595,"// MurmurHash3 - a blazingly fast public domain hash!; // See http://code.google.com/p/smhasher/; // There are two versions, one optimized for 32 bit and one for 64 bit.; // They give different hash results!; // We use only the 64 bit version which also works on 32 bit.; //-----------------------------------------------------------------------------; // MurmurHash3 was written by Austin Appleby, and is placed in the public; // domain. The author hereby disclaims copyright to this source code.; // Note - The x86 and x64 versions do _not_ produce the same results, as the; // algorithms are optimized for their respective platforms. You can still; // compile and run any of them on any platform, but your performance with the; // non-native version will be less than optimal.; //-----------------------------------------------------------------------------; // Platform-specific functions and macros; // From MurmurHash.h:",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:709,Performance,perform,performance,709,"// MurmurHash3 - a blazingly fast public domain hash!; // See http://code.google.com/p/smhasher/; // There are two versions, one optimized for 32 bit and one for 64 bit.; // They give different hash results!; // We use only the 64 bit version which also works on 32 bit.; //-----------------------------------------------------------------------------; // MurmurHash3 was written by Austin Appleby, and is placed in the public; // domain. The author hereby disclaims copyright to this source code.; // Note - The x86 and x64 versions do _not_ produce the same results, as the; // algorithms are optimized for their respective platforms. You can still; // compile and run any of them on any platform, but your performance with the; // non-native version will be less than optimal.; //-----------------------------------------------------------------------------; // Platform-specific functions and macros; // From MurmurHash.h:",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:48,Security,hash,hash,48,"// MurmurHash3 - a blazingly fast public domain hash!; // See http://code.google.com/p/smhasher/; // There are two versions, one optimized for 32 bit and one for 64 bit.; // They give different hash results!; // We use only the 64 bit version which also works on 32 bit.; //-----------------------------------------------------------------------------; // MurmurHash3 was written by Austin Appleby, and is placed in the public; // domain. The author hereby disclaims copyright to this source code.; // Note - The x86 and x64 versions do _not_ produce the same results, as the; // algorithms are optimized for their respective platforms. You can still; // compile and run any of them on any platform, but your performance with the; // non-native version will be less than optimal.; //-----------------------------------------------------------------------------; // Platform-specific functions and macros; // From MurmurHash.h:",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:194,Security,hash,hash,194,"// MurmurHash3 - a blazingly fast public domain hash!; // See http://code.google.com/p/smhasher/; // There are two versions, one optimized for 32 bit and one for 64 bit.; // They give different hash results!; // We use only the 64 bit version which also works on 32 bit.; //-----------------------------------------------------------------------------; // MurmurHash3 was written by Austin Appleby, and is placed in the public; // domain. The author hereby disclaims copyright to this source code.; // Note - The x86 and x64 versions do _not_ produce the same results, as the; // algorithms are optimized for their respective platforms. You can still; // compile and run any of them on any platform, but your performance with the; // non-native version will be less than optimal.; //-----------------------------------------------------------------------------; // Platform-specific functions and macros; // From MurmurHash.h:",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:122,Security,hash,hash,122,"/////////////////////////////////////////////////////////////////////////////; /// Finalization mix - force all bits of a hash block to avalanche",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:104,Security,hash,hashed,104,"/////////////////////////////////////////////////////////////////////////////; /// ""key"" is input to be hashed.; /// ""len"" is the number of bytes to hash starting at ""key"".; /// ""seed"" is a hash seed, ""out"" is a buffer (128 bytes) that will receive; /// the results.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:149,Security,hash,hash,149,"/////////////////////////////////////////////////////////////////////////////; /// ""key"" is input to be hashed.; /// ""len"" is the number of bytes to hash starting at ""key"".; /// ""seed"" is a hash seed, ""out"" is a buffer (128 bytes) that will receive; /// the results.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:190,Security,hash,hash,190,"/////////////////////////////////////////////////////////////////////////////; /// ""key"" is input to be hashed.; /// ""len"" is the number of bytes to hash starting at ""key"".; /// ""seed"" is a hash seed, ""out"" is a buffer (128 bytes) that will receive; /// the results.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:375,Integrability,depend,depending,375,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:97,Security,hash,hash,97,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:180,Security,Hash,Hash,180,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:231,Security,Hash,Hash,231,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:292,Security,Hash,Hash,292,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:359,Security,hash,hash,359,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:465,Security,hash,hashes,465,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:426,Usability,simpl,simple,426,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:21,Security,hash,hash,21,"// simple, superfast hash for pointers and alike",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:3,Usability,simpl,simple,3,"// simple, superfast hash for pointers and alike",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:3,Safety,Avoid,Avoid,3,"// Avoid a dereference w dumb compiler",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:3,Safety,Avoid,Avoid,3,"// Avoid a dereference w dumb compiler",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear string without changing its capacity.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:232,Energy Efficiency,allocate,allocated,232,"////////////////////////////////////////////////////////////////////////////////; /// Clear string and make sure it has a capacity of nc.; /// \warning If nc > MaxSize(), then Fatal() is raised, and only MaxSize(); /// elements are allocated if Fatal does not abort; /// \return Resulting allocated capacity (after clamping, if needed)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:289,Energy Efficiency,allocate,allocated,289,"////////////////////////////////////////////////////////////////////////////////; /// Clear string and make sure it has a capacity of nc.; /// \warning If nc > MaxSize(), then Fatal() is raised, and only MaxSize(); /// elements are allocated if Fatal does not abort; /// \return Resulting allocated capacity (after clamping, if needed)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:260,Safety,abort,abort,260,"////////////////////////////////////////////////////////////////////////////////; /// Clear string and make sure it has a capacity of nc.; /// \warning If nc > MaxSize(), then Fatal() is raised, and only MaxSize(); /// elements are allocated if Fatal does not abort; /// \return Resulting allocated capacity (after clamping, if needed)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear string and make sure it has a capacity of nc.; /// \warning If nc > MaxSize(), then Fatal() is raised, and only MaxSize(); /// elements are allocated if Fatal does not abort; /// \return Resulting allocated capacity (after clamping, if needed)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:41,Safety,abort,abort,41,"// In the rare case where Fatal does not abort, we erase, clamp and continue",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:30,Safety,avoid,avoid,30,"// Clamping after deleting to avoid corruption",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:318,Energy Efficiency,allocate,allocated,318,"////////////////////////////////////////////////////////////////////////////////; /// Make self a distinct copy with capacity of at least tot, where tot cannot; /// be smaller than the current length. Preserve previous contents.; /// \warning If tot > MaxSize(), then Fatal() is raised and only MaxSize() elements are allocated",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:119,Usability,Simpl,Simplified,119,"////////////////////////////////////////////////////////////////////////////////; /// Read TString object from buffer. Simplified version of; /// TBuffer::ReadObject (does not keep track of multiple; /// references to same string). We need to have it here; /// because TBuffer::ReadObject can only handle descendant; /// of TObject.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:118,Usability,Simpl,Simplified,118,"////////////////////////////////////////////////////////////////////////////////; /// Write TString object to buffer. Simplified version of; /// TBuffer::WriteObject (does not keep track of multiple; /// references to the same string). We need to have it here; /// because TBuffer::ReadObject can only handle descendant; /// of TObject",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:2,Testability,test,test,2,"//test if it is now uniquely composed of numbers",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:7,Energy Efficiency,allocate,allocate,7,"// Pre-allocate enough space (35=kMaxDigits)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:7,Energy Efficiency,allocate,allocate,7,"// Pre-allocate enough space (35=kMaxDigits)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:7,Energy Efficiency,allocate,allocate,7,"// Pre-allocate enough space (35=kMaxDigits)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:7,Energy Efficiency,allocate,allocate,7,"// Pre-allocate enough space (35=kMaxDigits)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:16,Safety,avoid,avoid,16,"// !isSigned to avoid strings beginning with ""-+""",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:3,Deployability,Update,Update,3,"// Update buflen, as Clobber clamps length to MaxSize (if Fatal does not abort)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:73,Safety,abort,abort,73,"// Update buflen, as Clobber clamps length to MaxSize (if Fatal does not abort)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStringLong.cxx:13,Safety,avoid,avoid,13,"// Remove to avoid deprecation warnings during root build; //ClassImp(TStringLong);; ////////////////////////////////////////////////////////////////////////////////; ///constructor",MatchSource.CODE_COMMENT,core/base/src/TStringLong.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStringLong.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:442,Modifiability,inherit,inherit,442,"/** \class TStyle; \ingroup Base; \ingroup GraphicsAtt. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes; like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their; default attributes are taken from the current style. The current style is an object; of the class[TStyle](https://root.cern/doc/master/classTStyle.html) and can be; referenced via the global variable `gStyle` (in TStyle.h). ROOT provides two styles called ""Default"" and ""Plain"". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:761,Modifiability,variab,variable,761,"/** \class TStyle; \ingroup Base; \ingroup GraphicsAtt. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes; like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their; default attributes are taken from the current style. The current style is an object; of the class[TStyle](https://root.cern/doc/master/classTStyle.html) and can be; referenced via the global variable `gStyle` (in TStyle.h). ROOT provides two styles called ""Default"" and ""Plain"". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:2811,Modifiability,extend,extended,2811,"r to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.2);; gStyle->SetLabelFont(72);; ```. Note that when an object is created, its attributes are taken from the current; style. For example, you may have created an histogram in a previous session,; saved it in a file. Meanwhile, if you have changed the style, the histogram will; be drawn with the old attributes. You can force the current style attributes to; be set when you read an object from a file by calling:. ```; gROOT->ForceStyle();; ```. before reading the objects from the file. Let's assume you have a canvas or pad with your histogram or any other object,; you can force these objects to get the attributes of the current style via:. ```; canvas->UseCurrentStyle();; ```. The description of the style functions should be clear from the name of the; TStyle Setters or Getters. Some functions have an extended description, in particular:. - TStyle:SetLabelFont.; - TStyle:SetLineStyleString, to set the format of dashed lines.; - TStyle:SetOptStat.; - TStyle:SetPalette to change the colors palette.; - TStyle:SetTitleOffset. */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:165,Security,access,accessed,165,"/** \class TStyle; \ingroup Base; \ingroup GraphicsAtt. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes; like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their; default attributes are taken from the current style. The current style is an object; of the class[TStyle](https://root.cern/doc/master/classTStyle.html) and can be; referenced via the global variable `gStyle` (in TStyle.h). ROOT provides two styles called ""Default"" and ""Plain"". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:1844,Testability,log,log,1844,""". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.2);; gStyle->SetLabelFont(72);; ```. Note that when an object is created, its attributes are taken from the current; style. For example, you may have created an histogram in a previous session,; saved it in a file. Meanwhile, if you have changed the style, the histogram will; be drawn with the old attributes. You can force the current style attributes to; be set when you read an object from a file by calling:. ```; gROOT->ForceStyle();; ```. before reading the objects from the file. Let's assume you have a canvas or pad with your histogram or any other object,; you can force these objects to get the attributes of the current style via:. ```; canvas->UseCurrentStyle();; ```. The description of the style functions should be clear from the name of the; TStyle Setters or Getters. Some functions have an extended description, in particular",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:881,Usability,simpl,simply,881,"/** \class TStyle; \ingroup Base; \ingroup GraphicsAtt. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes; like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their; default attributes are taken from the current style. The current style is an object; of the class[TStyle](https://root.cern/doc/master/classTStyle.html) and can be; referenced via the global variable `gStyle` (in TStyle.h). ROOT provides two styles called ""Default"" and ""Plain"". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:2733,Usability,clear,clear,2733,"r to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.2);; gStyle->SetLabelFont(72);; ```. Note that when an object is created, its attributes are taken from the current; style. For example, you may have created an histogram in a previous session,; saved it in a file. Meanwhile, if you have changed the style, the histogram will; be drawn with the old attributes. You can force the current style attributes to; be set when you read an object from a file by calling:. ```; gROOT->ForceStyle();; ```. before reading the objects from the file. Let's assume you have a canvas or pad with your histogram or any other object,; you can force these objects to get the attributes of the current style via:. ```; canvas->UseCurrentStyle();; ```. The description of the style functions should be clear from the name of the; TStyle Setters or Getters. Some functions have an extended description, in particular:. - TStyle:SetLabelFont.; - TStyle:SetLineStyleString, to set the format of dashed lines.; - TStyle:SetOptStat.; - TStyle:SetPalette to change the colors palette.; - TStyle:SetTitleOffset. */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:14,Availability,error,error,14,"// get rid of error bar caps",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:38,Availability,error,error,38,"// postscript dashes; // get rid of X error bars",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:14,Availability,error,error,14,"// get rid of error bar caps",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:536,Energy Efficiency,Green,Green,536,"////////////////////////////////////////////////////////////////////////////////; /// Define the color model used by TPostScript and TPDF (RGB or CMYK).; /// CMY and CMYK models are subtractive color models unlike RGB which is; /// additive. They are mainly used for printing purposes. CMY means Cyan Magenta; /// Yellow. To convert RGB to CMY it is enough to do: C=1-R, M=1-G and Y=1-B.; /// CMYK has one more component K (black). The conversion from RGB to CMYK is:; /// ~~~ {.cpp}; /// Double_t Black = TMath::Min(TMath::Min(1-Red,1-Green),1-Blue);; /// Double_t Cyan = (1-Red-Black)/(1-Black);; /// Double_t Magenta = (1-Green-Black)/(1-Black);; /// Double_t Yellow = (1-Blue-Black)/(1-Black);; /// ~~~; /// CMYK adds the black component which allows better quality for black; /// printing. PostScript and PDF support the CMYK model.; ///; /// - c = 0 means TPostScript and TPDF will use RGB color model (default); /// - c = 1 means TPostScript and TPDF will use CMYK color model",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:625,Energy Efficiency,Green,Green-Black,625,"////////////////////////////////////////////////////////////////////////////////; /// Define the color model used by TPostScript and TPDF (RGB or CMYK).; /// CMY and CMYK models are subtractive color models unlike RGB which is; /// additive. They are mainly used for printing purposes. CMY means Cyan Magenta; /// Yellow. To convert RGB to CMY it is enough to do: C=1-R, M=1-G and Y=1-B.; /// CMYK has one more component K (black). The conversion from RGB to CMYK is:; /// ~~~ {.cpp}; /// Double_t Black = TMath::Min(TMath::Min(1-Red,1-Green),1-Blue);; /// Double_t Cyan = (1-Red-Black)/(1-Black);; /// Double_t Magenta = (1-Green-Black)/(1-Black);; /// Double_t Yellow = (1-Blue-Black)/(1-Black);; /// ~~~; /// CMYK adds the black component which allows better quality for black; /// printing. PostScript and PDF support the CMYK model.; ///; /// - c = 0 means TPostScript and TPDF will use RGB color model (default); /// - c = 1 means TPostScript and TPDF will use CMYK color model",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:159,Availability,error,error,159,"////////////////////////////////////////////////////////////////////////////////; /// Set the size (in pixels) of the small lines drawn at the; /// end of the error bars (TH1 or TGraphErrors).; ///; /// The default value is 2 pixels.; /// Set np=0 to remove these lines",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:312,Performance,scalab,scalable,312,"////////////////////////////////////////////////////////////////////////////////; /// Set font number used to draw axis labels.; /// - font : Text font code = 10*fontnumber + precision; /// - Font numbers must be between 1 and 14; /// - precision = 1 fast hardware fonts (steps in the size); /// - precision = 2 scalable and rotatable hardware fonts; /// The default font number is 62.; /// axis specifies which axis (""x"",""y"",""z""), default = ""x""; /// if axis=""xyz"" set all 3 axes",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:370,Availability,error,errors,370,"////////////////////////////////////////////////////////////////////////////////; /// The type of information about fit parameters printed in the histogram; /// statistics box can be selected via the parameter `mode`.; /// The parameter mode can be = `pcev`:; /// - p = 1; print Probability; /// - c = 1; print Chisquare/Number of degrees of freedom; /// - e = 1; print errors (if e=1, v must be 1); /// - v = 1; print name/values of parameters; /// Example: `gStyle->SetOptFit(1011);`; /// print fit probability, parameter names/values and errors.; /// - When ""v""=1 is specified, only the non-fixed parameters are shown.; /// - When ""v""=2 all parameters are shown.; ///; /// #### Notes:; ///; /// - never call `SetOptFit(000111);` but `SetOptFit(111)`, 000111 will; /// be taken as an octal number !!; /// - `gStyle->SetOptFit(1)` is a shortcut allowing to set the most common; /// case and is equivalent to `gStyle->SetOptFit(111)`; /// - At ROOT startup the option fit is set to `0`. So, to see the fit parameters; /// on all plot resulting from a fit, a call to `gStyle->SetOptFit()` with a; /// non null value should be done. One can put it in the `rootlogon.C` file to; /// always have it.; ///; /// see also SetOptStat below.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:541,Availability,error,errors,541,"////////////////////////////////////////////////////////////////////////////////; /// The type of information about fit parameters printed in the histogram; /// statistics box can be selected via the parameter `mode`.; /// The parameter mode can be = `pcev`:; /// - p = 1; print Probability; /// - c = 1; print Chisquare/Number of degrees of freedom; /// - e = 1; print errors (if e=1, v must be 1); /// - v = 1; print name/values of parameters; /// Example: `gStyle->SetOptFit(1011);`; /// print fit probability, parameter names/values and errors.; /// - When ""v""=1 is specified, only the non-fixed parameters are shown.; /// - When ""v""=2 all parameters are shown.; ///; /// #### Notes:; ///; /// - never call `SetOptFit(000111);` but `SetOptFit(111)`, 000111 will; /// be taken as an octal number !!; /// - `gStyle->SetOptFit(1)` is a shortcut allowing to set the most common; /// case and is equivalent to `gStyle->SetOptFit(111)`; /// - At ROOT startup the option fit is set to `0`. So, to see the fit parameters; /// on all plot resulting from a fit, a call to `gStyle->SetOptFit()` with a; /// non null value should be done. One can put it in the `rootlogon.C` file to; /// always have it.; ///; /// see also SetOptStat below.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:307,Availability,error,error,307,"////////////////////////////////////////////////////////////////////////////////; /// The type of information printed in the histogram statistics box; /// can be selected via the parameter mode.; /// The parameter mode can be = `ksiourmen`; /// - k = 1; kurtosis printed; /// - k = 2; kurtosis and kurtosis error printed; /// - s = 1; skewness printed; /// - s = 2; skewness and skewness error printed; /// - i = 1; integral of bins printed; /// - i = 2; integral of bins with option ""width"" printed; /// - o = 1; number of overflows printed; /// - u = 1; number of underflows printed; /// - r = 1; rms printed; /// - r = 2; rms and rms error printed; /// - m = 1; mean value printed; /// - m = 2; mean and mean error values printed; /// - e = 1; number of entries printed; /// - n = 1; name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(11);`; /// print only name of histogram and number of entries.; /// `gStyle->SetOptStat(1101);` displays the name of histogram, mean value and RMS.; ///; /// #### Notes:; ///; /// - never call `SetOptStat(000111);` but `SetOptStat(111)`, 000111 will; /// be taken as an octal number !!; /// - `SetOptStat(1)` is s shortcut allowing to set the most common case, and is; /// taken as `SetOptStat(1111)` (for backward compatibility with older versions.; /// If you want to print only the name of the histogram call `SetOptStat(1000000001)`.; /// - that in case of 2-D histograms, when selecting just underflow (10000); /// or overflow (100000), the stats box will show all combinations; /// of underflow/overflows and not just one single number!",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:388,Availability,error,error,388,"////////////////////////////////////////////////////////////////////////////////; /// The type of information printed in the histogram statistics box; /// can be selected via the parameter mode.; /// The parameter mode can be = `ksiourmen`; /// - k = 1; kurtosis printed; /// - k = 2; kurtosis and kurtosis error printed; /// - s = 1; skewness printed; /// - s = 2; skewness and skewness error printed; /// - i = 1; integral of bins printed; /// - i = 2; integral of bins with option ""width"" printed; /// - o = 1; number of overflows printed; /// - u = 1; number of underflows printed; /// - r = 1; rms printed; /// - r = 2; rms and rms error printed; /// - m = 1; mean value printed; /// - m = 2; mean and mean error values printed; /// - e = 1; number of entries printed; /// - n = 1; name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(11);`; /// print only name of histogram and number of entries.; /// `gStyle->SetOptStat(1101);` displays the name of histogram, mean value and RMS.; ///; /// #### Notes:; ///; /// - never call `SetOptStat(000111);` but `SetOptStat(111)`, 000111 will; /// be taken as an octal number !!; /// - `SetOptStat(1)` is s shortcut allowing to set the most common case, and is; /// taken as `SetOptStat(1111)` (for backward compatibility with older versions.; /// If you want to print only the name of the histogram call `SetOptStat(1000000001)`.; /// - that in case of 2-D histograms, when selecting just underflow (10000); /// or overflow (100000), the stats box will show all combinations; /// of underflow/overflows and not just one single number!",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:637,Availability,error,error,637,"////////////////////////////////////////////////////////////////////////////////; /// The type of information printed in the histogram statistics box; /// can be selected via the parameter mode.; /// The parameter mode can be = `ksiourmen`; /// - k = 1; kurtosis printed; /// - k = 2; kurtosis and kurtosis error printed; /// - s = 1; skewness printed; /// - s = 2; skewness and skewness error printed; /// - i = 1; integral of bins printed; /// - i = 2; integral of bins with option ""width"" printed; /// - o = 1; number of overflows printed; /// - u = 1; number of underflows printed; /// - r = 1; rms printed; /// - r = 2; rms and rms error printed; /// - m = 1; mean value printed; /// - m = 2; mean and mean error values printed; /// - e = 1; number of entries printed; /// - n = 1; name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(11);`; /// print only name of histogram and number of entries.; /// `gStyle->SetOptStat(1101);` displays the name of histogram, mean value and RMS.; ///; /// #### Notes:; ///; /// - never call `SetOptStat(000111);` but `SetOptStat(111)`, 000111 will; /// be taken as an octal number !!; /// - `SetOptStat(1)` is s shortcut allowing to set the most common case, and is; /// taken as `SetOptStat(1111)` (for backward compatibility with older versions.; /// If you want to print only the name of the histogram call `SetOptStat(1000000001)`.; /// - that in case of 2-D histograms, when selecting just underflow (10000); /// or overflow (100000), the stats box will show all combinations; /// of underflow/overflows and not just one single number!",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:712,Availability,error,error,712,"////////////////////////////////////////////////////////////////////////////////; /// The type of information printed in the histogram statistics box; /// can be selected via the parameter mode.; /// The parameter mode can be = `ksiourmen`; /// - k = 1; kurtosis printed; /// - k = 2; kurtosis and kurtosis error printed; /// - s = 1; skewness printed; /// - s = 2; skewness and skewness error printed; /// - i = 1; integral of bins printed; /// - i = 2; integral of bins with option ""width"" printed; /// - o = 1; number of overflows printed; /// - u = 1; number of underflows printed; /// - r = 1; rms printed; /// - r = 2; rms and rms error printed; /// - m = 1; mean value printed; /// - m = 2; mean and mean error values printed; /// - e = 1; number of entries printed; /// - n = 1; name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(11);`; /// print only name of histogram and number of entries.; /// `gStyle->SetOptStat(1101);` displays the name of histogram, mean value and RMS.; ///; /// #### Notes:; ///; /// - never call `SetOptStat(000111);` but `SetOptStat(111)`, 000111 will; /// be taken as an octal number !!; /// - `SetOptStat(1)` is s shortcut allowing to set the most common case, and is; /// taken as `SetOptStat(1111)` (for backward compatibility with older versions.; /// If you want to print only the name of the histogram call `SetOptStat(1000000001)`.; /// - that in case of 2-D histograms, when selecting just underflow (10000); /// or overflow (100000), the stats box will show all combinations; /// of underflow/overflows and not just one single number!",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:206,Availability,error,error,206,"////////////////////////////////////////////////////////////////////////////////; /// The parameter mode can be any combination of kKsSiourRmMen; /// - k : kurtosis printed; /// - K : kurtosis and kurtosis error printed; /// - s : skewness printed; /// - S : skewness and skewness error printed; /// - i : integral of bins printed; /// - I : integral of bins with option ""width"" printed; /// - o : number of overflows printed; /// - u : number of underflows printed; /// - r : rms printed; /// - R : rms and rms error printed; /// - m : mean value printed; /// - M : mean value mean error values printed; /// - e : number of entries printed; /// - n : name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(""ne"");`; /// print only name of histogram and number of entries.; ///; /// - `gStyle->SetOptStat(""n"")` print only the name of the histogram; /// - `gStyle->SetOptStat(""nemr"")` is the default",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:281,Availability,error,error,281,"////////////////////////////////////////////////////////////////////////////////; /// The parameter mode can be any combination of kKsSiourRmMen; /// - k : kurtosis printed; /// - K : kurtosis and kurtosis error printed; /// - s : skewness printed; /// - S : skewness and skewness error printed; /// - i : integral of bins printed; /// - I : integral of bins with option ""width"" printed; /// - o : number of overflows printed; /// - u : number of underflows printed; /// - r : rms printed; /// - R : rms and rms error printed; /// - m : mean value printed; /// - M : mean value mean error values printed; /// - e : number of entries printed; /// - n : name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(""ne"");`; /// print only name of histogram and number of entries.; ///; /// - `gStyle->SetOptStat(""n"")` print only the name of the histogram; /// - `gStyle->SetOptStat(""nemr"")` is the default",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:512,Availability,error,error,512,"////////////////////////////////////////////////////////////////////////////////; /// The parameter mode can be any combination of kKsSiourRmMen; /// - k : kurtosis printed; /// - K : kurtosis and kurtosis error printed; /// - s : skewness printed; /// - S : skewness and skewness error printed; /// - i : integral of bins printed; /// - I : integral of bins with option ""width"" printed; /// - o : number of overflows printed; /// - u : number of underflows printed; /// - r : rms printed; /// - R : rms and rms error printed; /// - m : mean value printed; /// - M : mean value mean error values printed; /// - e : number of entries printed; /// - n : name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(""ne"");`; /// print only name of histogram and number of entries.; ///; /// - `gStyle->SetOptStat(""n"")` print only the name of the histogram; /// - `gStyle->SetOptStat(""nemr"")` is the default",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:583,Availability,error,error,583,"////////////////////////////////////////////////////////////////////////////////; /// The parameter mode can be any combination of kKsSiourRmMen; /// - k : kurtosis printed; /// - K : kurtosis and kurtosis error printed; /// - s : skewness printed; /// - S : skewness and skewness error printed; /// - i : integral of bins printed; /// - I : integral of bins with option ""width"" printed; /// - o : number of overflows printed; /// - u : number of underflows printed; /// - r : rms printed; /// - R : rms and rms error printed; /// - m : mean value printed; /// - M : mean value mean error values printed; /// - e : number of entries printed; /// - n : name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(""ne"");`; /// print only name of histogram and number of entries.; ///; /// - `gStyle->SetOptStat(""n"")` print only the name of the histogram; /// - `gStyle->SetOptStat(""nemr"")` is the default",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:3,Modifiability,Inherit,Inheritance,3,"// Inheritance :; // TAttLine :",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:186,Safety,avoid,avoid,186,"////////////////////////////////////////////////////////////////////////////////; /// De-activate a system event handler. Use this method to temporarily; /// disable an event handler to avoid it from being recursively called.; /// Use DeActivate() / Activate() instead of Remove() / Add() for this; /// purpose, since the Add() will add the handler back to the end of; /// the list of handlers and cause it to be called again for the same,; /// already handled, event.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:129,Availability,mask,mask,129,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:201,Availability,mask,mask,201,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:267,Availability,mask,mask,267,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:161,Energy Efficiency,monitor,monitor,161,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:226,Energy Efficiency,monitor,monitor,226,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:298,Energy Efficiency,monitor,monitor,298,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:99,Availability,mask,mask,99,"////////////////////////////////////////////////////////////////////////////////; /// Set interest mask to 'mask'.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:108,Availability,mask,mask,108,"////////////////////////////////////////////////////////////////////////////////; /// Set interest mask to 'mask'.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:597,Safety,Abort,Abort,597,"////////////////////////////////////////////////////////////////////////////////; /// Handle standard C++ exceptions intercepted by the TSystem::Run().; ///; /// Virtual method EStatus Handle(std::exception& exc) is called on the; /// collection of handlers registered to TSystem. The return value of; /// each handler influences the continuation of handling procedure:; /// - kSEProceed - Proceed with passing of the exception to other; /// handlers, the exception has not been handled.; /// - kSEHandled - The exception has been handled, do not pass it to; /// other handlers.; /// - kSEAbort - Abort application.; /// If all handlers return kSEProceed TSystem::Run() rethrows the; /// exception, possibly resulting in process abortion.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:729,Safety,abort,abortion,729,"////////////////////////////////////////////////////////////////////////////////; /// Handle standard C++ exceptions intercepted by the TSystem::Run().; ///; /// Virtual method EStatus Handle(std::exception& exc) is called on the; /// collection of handlers registered to TSystem. The return value of; /// each handler influences the continuation of handling procedure:; /// - kSEProceed - Proceed with passing of the exception to other; /// handlers, the exception has not been handled.; /// - kSEHandled - The exception has been handled, do not pass it to; /// other handlers.; /// - kSEAbort - Abort application.; /// If all handlers return kSEProceed TSystem::Run() rethrows the; /// exception, possibly resulting in process abortion.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:535,Integrability,interface,interface,535,"// @(#)root/base:$Id: 8944840ba34631ec28efc779647618db43c0eee5 $; // Author: Fons Rademakers 15/09/95; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TSystem; \ingroup Base. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es.; */",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:849,Usability,simpl,simple,849,"// @(#)root/base:$Id: 8944840ba34631ec28efc779647618db43c0eee5 $; // Author: Fons Rademakers 15/09/95; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TSystem; \ingroup Base. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es.; */",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:33,Performance,Load,Load,33,"// Set in TVersionCheck, used in Load()",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:33,Performance,Load,Load,33,"// Set in TVersionCheck, used in Load()",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:96,Integrability,protocol,protocol,96,"////////////////////////////////////////////////////////////////////////////////; /// Strip off protocol string from specified path",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:102,Integrability,interface,interface,102,"////////////////////////////////////////////////////////////////////////////////; /// Create a new OS interface.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:100,Integrability,interface,interface,100,"////////////////////////////////////////////////////////////////////////////////; /// Delete the OS interface.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:104,Integrability,interface,interface,104,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the OS interface.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:110,Modifiability,variab,variable,110,"////////////////////////////////////////////////////////////////////////////////; /// Set DISPLAY environment variable based on utmp entry. Only for UNIX.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// Set the system error string. This string will be used by GetError().; /// To be used in case one does not want or can use the system error; /// string (e.g. because error is generated by a third party POSIX like; /// library that does not use standard errno).",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:219,Availability,error,error,219,"////////////////////////////////////////////////////////////////////////////////; /// Set the system error string. This string will be used by GetError().; /// To be used in case one does not want or can use the system error; /// string (e.g. because error is generated by a third party POSIX like; /// library that does not use standard errno).",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:251,Availability,error,error,251,"////////////////////////////////////////////////////////////////////////////////; /// Set the system error string. This string will be used by GetError().; /// To be used in case one does not want or can use the system error; /// string (e.g. because error is generated by a third party POSIX like; /// library that does not use standard errno).",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:100,Availability,error,error,100,"////////////////////////////////////////////////////////////////////////////////; /// Return system error string.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:230,Availability,error,error,230,"////////////////////////////////////////////////////////////////////////////////; /// Return cryptographic random number; /// Fill provided buffer with random values; /// Returns number of bytes written to buffer or -1 in case of error",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:119,Availability,error,error,119,"////////////////////////////////////////////////////////////////////////////////; /// Static function returning system error number.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:119,Availability,error,error,119,"////////////////////////////////////////////////////////////////////////////////; /// Static function resetting system error number.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:135,Integrability,interface,interface,135,"////////////////////////////////////////////////////////////////////////////////; /// Objects that should be deleted on exit of the OS interface.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:35,Integrability,interface,interface,35,"// Currently needed only for WinNT interface.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:389,Integrability,depend,depending,389,"////////////////////////////////////////////////////////////////////////////////; /// Process pending events (GUI, timers, sockets). Returns the result of; /// TROOT::IsInterrupted(). The interrupt flag (TROOT::SetInterrupt()); /// can be set during the handling of the events. This mechanism allows; /// macros running in tight calculating loops to be interrupted by some; /// GUI event (depending on the interval with which this method is; /// called). For example hitting ctrl-c in a canvas will set the; /// interrupt flag.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:86,Safety,Abort,Abort,86,"////////////////////////////////////////////////////////////////////////////////; /// Abort the application.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:273,Security,access,access,273,"//---- Directories -------------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Create helper TSystem to handle file and directory operations that; /// might be special for remote file access.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:78,Safety,avoid,avoid,78,"// well we should not have to make the root of the file system!; // (and this avoid infinite recursions!)",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:592,Availability,error,error,592,"//---- Paths & Files -----------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; /// environment variables in a pathname. If compatibility is not an issue; /// you can use on Unix directly $XXX. This is a protected function called; /// from the OS specific system classes, like TUnixSystem and TWinNTSystem.; /// Returns the expanded filename or 0 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:330,Modifiability,variab,variables,330,"//---- Paths & Files -----------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; /// environment variables in a pathname. If compatibility is not an issue; /// you can use on Unix directly $XXX. This is a protected function called; /// from the OS specific system classes, like TUnixSystem and TWinNTSystem.; /// Returns the expanded filename or 0 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:333,Availability,error,error,333,"//////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// This function is analogous to ExpandFileName(const char *), except that; /// it receives a TString reference of the pathname to be expanded.; /// Returns kTRUE in case of error and kFALSE otherwise.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:151,Availability,error,error,151,"////////////////////////////////////////////////////////////////////////////; /// Private method for pathname expansion.; /// Returns kTRUE in case of error and kFALSE otherwise.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:10,Usability,simpl,simple,10,"// not $, simple copy",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:248,Modifiability,variab,variables,248,"////////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; /// environment variables in a pathname. If compatibility is not an issue; /// you can use on Unix directly $XXX.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:248,Modifiability,variab,variables,248,"////////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; /// environment variables in a pathname. If compatibility is not an issue; /// you can use on Unix directly $XXX. The user must delete returned string.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:111,Security,access,access,111,"////////////////////////////////////////////////////////////////////////////////; /// Returns FALSE if one can access a file using the specified access mode.; /// The file name must not contain any special shell characters line ~ or $,; /// in those cases first call ExpandPathName().; /// Attention, bizarre convention of return value!!",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:145,Security,access,access,145,"////////////////////////////////////////////////////////////////////////////////; /// Returns FALSE if one can access a file using the specified access mode.; /// The file name must not contain any special shell characters line ~ or $,; /// in those cases first call ExpandPathName().; /// Attention, bizarre convention of return value!!",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:174,Safety,avoid,avoid,174,"////////////////////////////////////////////////////////////////////////////////; /// Returns TRUE if the url in 'path' points to the local file system.; /// This is used to avoid going through the NIC card for local operations.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:235,Availability,failure,failure,235,"////////////////////////////////////////////////////////////////////////////////; /// Copy a file. If overwrite is true and file already exists the; /// file will be overwritten. Returns 0 when successful, -1 in case; /// of file open failure, -2 in case the file already exists and overwrite; /// was false and -3 in case of error during copy.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:326,Availability,error,error,326,"////////////////////////////////////////////////////////////////////////////////; /// Copy a file. If overwrite is true and file already exists the; /// file will be overwritten. Returns 0 when successful, -1 in case; /// of file open failure, -2 in case the file already exists and overwrite; /// was false and -3 in case of error during copy.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:100,Modifiability,config,configured,100,"////////////////////////////////////////////////////////////////////////////////; /// Return a user configured or systemwide directory to create; /// temporary files in.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:555,Availability,error,error,555,"////////////////////////////////////////////////////////////////////////////////; /// Create a secure temporary file by appending a unique; /// 6 letter string to base. The file will be created in; /// a standard (system) directory or in the directory; /// provided in dir. Optionally one can provide suffix; /// append to the final name - like extension "".txt"" or "".html"".; /// The full filename is returned in base; /// and a filepointer is returned for safely writing to the file; /// (this avoids certain security problems). Returns 0 in case; /// of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:456,Safety,safe,safely,456,"////////////////////////////////////////////////////////////////////////////////; /// Create a secure temporary file by appending a unique; /// 6 letter string to base. The file will be created in; /// a standard (system) directory or in the directory; /// provided in dir. Optionally one can provide suffix; /// append to the final name - like extension "".txt"" or "".html"".; /// The full filename is returned in base; /// and a filepointer is returned for safely writing to the file; /// (this avoids certain security problems). Returns 0 in case; /// of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:494,Safety,avoid,avoids,494,"////////////////////////////////////////////////////////////////////////////////; /// Create a secure temporary file by appending a unique; /// 6 letter string to base. The file will be created in; /// a standard (system) directory or in the directory; /// provided in dir. Optionally one can provide suffix; /// append to the final name - like extension "".txt"" or "".html"".; /// The full filename is returned in base; /// and a filepointer is returned for safely writing to the file; /// (this avoids certain security problems). Returns 0 in case; /// of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:95,Security,secur,secure,95,"////////////////////////////////////////////////////////////////////////////////; /// Create a secure temporary file by appending a unique; /// 6 letter string to base. The file will be created in; /// a standard (system) directory or in the directory; /// provided in dir. Optionally one can provide suffix; /// append to the final name - like extension "".txt"" or "".html"".; /// The full filename is returned in base; /// and a filepointer is returned for safely writing to the file; /// (this avoids certain security problems). Returns 0 in case; /// of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:509,Security,secur,security,509,"////////////////////////////////////////////////////////////////////////////////; /// Create a secure temporary file by appending a unique; /// 6 letter string to base. The file will be created in; /// a standard (system) directory or in the directory; /// provided in dir. Optionally one can provide suffix; /// append to the final name - like extension "".txt"" or "".html"".; /// The full filename is returned in base; /// and a filepointer is returned for safely writing to the file; /// (this avoids certain security problems). Returns 0 in case; /// of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:138,Availability,error,error,138,"////////////////////////////////////////////////////////////////////////////////; /// Set the file permission bits. Returns -1 in case or error, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:121,Availability,mask,mask,121,"////////////////////////////////////////////////////////////////////////////////; /// Set the process file creation mode mask.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:222,Availability,error,error,222,"////////////////////////////////////////////////////////////////////////////////; /// Set the a files modification and access times. If actime = 0 it will be; /// set to the modtime. Returns 0 on success and -1 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:119,Security,access,access,119,"////////////////////////////////////////////////////////////////////////////////; /// Set the a files modification and access times. If actime = 0 it will be; /// set to the modtime. Returns 0 on success and -1 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:206,Availability,error,error,206,"////////////////////////////////////////////////////////////////////////////////; /// Returns all user info in the UserGroup_t structure. The returned; /// structure must be deleted by the user. In case of error 0 is returned.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:256,Availability,error,error,256,"////////////////////////////////////////////////////////////////////////////////; /// Returns all user info in the UserGroup_t structure. If user = 0, returns; /// current user's id info. The returned structure must be deleted by the; /// user. In case of error 0 is returned.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:311,Availability,error,error,311,"////////////////////////////////////////////////////////////////////////////////; /// Returns all group info in the UserGroup_t structure. The only active; /// fields in the UserGroup_t structure for this call are:; /// - fGid and fGroup; /// The returned structure must be deleted by the user. In case of; /// error 0 is returned.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:355,Availability,error,error,355,"////////////////////////////////////////////////////////////////////////////////; /// Returns all group info in the UserGroup_t structure. The only active; /// fields in the UserGroup_t structure for this call are:; /// - fGid and fGroup; /// If group = 0, returns current user's group. The returned structure; /// must be deleted by the user. In case of error 0 is returned.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:184,Modifiability,variab,variable,184,"//---- environment manipulation ------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Set environment variable.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:104,Modifiability,variab,variable,104,"////////////////////////////////////////////////////////////////////////////////; /// Unset environment variable.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:102,Modifiability,variab,variable,102,"////////////////////////////////////////////////////////////////////////////////; /// Get environment variable.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:14,Testability,Log,Logging,14,"//---- System Logging ----------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Open connection to system log daemon. For the use of the options and; /// facility see the Unix openlog man page.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:194,Testability,log,log,194,"//---- System Logging ----------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Open connection to system log daemon. For the use of the options and; /// facility see the Unix openlog man page.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:159,Integrability,message,message,159,"////////////////////////////////////////////////////////////////////////////////; /// Send mess to syslog daemon. Level is the logging level and mess the; /// message that will be written on the log.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:127,Testability,log,logging,127,"////////////////////////////////////////////////////////////////////////////////; /// Send mess to syslog daemon. Level is the logging level and mess the; /// message that will be written on the log.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:195,Testability,log,log,195,"////////////////////////////////////////////////////////////////////////////////; /// Send mess to syslog daemon. Level is the logging level and mess the; /// message that will be written on the log.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:113,Testability,log,log,113,"////////////////////////////////////////////////////////////////////////////////; /// Close connection to system log daemon.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:888,Availability,error,error,888,"//---- Standard output redirection ---------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Redirect standard output (stdout, stderr) to the specified file.; /// If the file argument is 0 the output is set again to stderr, stdout.; /// The second argument specifies whether the output should be added to the; /// file (""a"", default) or the file be truncated before (""w"").; /// The implementations of this function save internally the current state into; /// a static structure.; ///; /// The call can be made reentrant by specifying the opaque structure pointed; /// by 'h', which is filled with the relevant information. The handle 'h'; /// obtained on the first call must then be used in any subsequent call,; /// included ShowOutput, to display the redirected output.; /// Returns 0 on success, -1 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:16,Security,access,access,16,"// ... and file access",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:3,Deployability,Update,Update,3,"// Update counters",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:15,Performance,Load,Loading,15,"//---- Dynamic Loading ---------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Add a new directory to the dynamic path.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:76,Testability,test,test,76,"// Files on same inode (but this is not unique on AFS so we need the next 2 test",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:230,Availability,error,error,230,"////////////////////////////////////////////////////////////////////////////////; /// Load a shared library. Returns 0 on successful loading, 1 in; /// case lib was already loaded, -1 in case lib does not exist; /// or in case of error and -2 in case of version mismatch.; /// When entry is specified the loaded lib is; /// searched for this entry point (return -1 when entry does not exist,; /// 0 otherwise). When the system flag is kTRUE, the library is considered; /// a permanent system library that should not be unloaded during the; /// course of the session.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load a shared library. Returns 0 on successful loading, 1 in; /// case lib was already loaded, -1 in case lib does not exist; /// or in case of error and -2 in case of version mismatch.; /// When entry is specified the loaded lib is; /// searched for this entry point (return -1 when entry does not exist,; /// 0 otherwise). When the system flag is kTRUE, the library is considered; /// a permanent system library that should not be unloaded during the; /// course of the session.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:133,Performance,load,loading,133,"////////////////////////////////////////////////////////////////////////////////; /// Load a shared library. Returns 0 on successful loading, 1 in; /// case lib was already loaded, -1 in case lib does not exist; /// or in case of error and -2 in case of version mismatch.; /// When entry is specified the loaded lib is; /// searched for this entry point (return -1 when entry does not exist,; /// 0 otherwise). When the system flag is kTRUE, the library is considered; /// a permanent system library that should not be unloaded during the; /// course of the session.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:173,Performance,load,loaded,173,"////////////////////////////////////////////////////////////////////////////////; /// Load a shared library. Returns 0 on successful loading, 1 in; /// case lib was already loaded, -1 in case lib does not exist; /// or in case of error and -2 in case of version mismatch.; /// When entry is specified the loaded lib is; /// searched for this entry point (return -1 when entry does not exist,; /// 0 otherwise). When the system flag is kTRUE, the library is considered; /// a permanent system library that should not be unloaded during the; /// course of the session.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:305,Performance,load,loaded,305,"////////////////////////////////////////////////////////////////////////////////; /// Load a shared library. Returns 0 on successful loading, 1 in; /// case lib was already loaded, -1 in case lib does not exist; /// or in case of error and -2 in case of version mismatch.; /// When entry is specified the loaded lib is; /// searched for this entry point (return -1 when entry does not exist,; /// 0 otherwise). When the system flag is kTRUE, the library is considered; /// a permanent system library that should not be unloaded during the; /// course of the session.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:9,Performance,load,load,9,"// don't load libraries that have already been loaded",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:47,Performance,load,loaded,47,"// don't load libraries that have already been loaded",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:14,Testability,test,test,14,"// No need to test for len here, at worse idx==len and lib[idx]=='\0'",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:12,Integrability,depend,dependent,12,"// load any dependent libraries",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:3,Performance,load,load,3,"// load any dependent libraries",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:85,Performance,Load,Load,85,"///////////////////////////////////////////////////////////////////////////////; /// Load all libraries known to ROOT via the rootmap system.; /// Returns the number of top level libraries successfully loaded.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:202,Performance,load,loaded,202,"///////////////////////////////////////////////////////////////////////////////; /// Load all libraries known to ROOT via the rootmap system.; /// Returns the number of top level libraries successfully loaded.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:41,Performance,load,load,41,"// check that none of the libs failed to load",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:31,Integrability,depend,dependencies,31,"// don't load it or any of its dependencies",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:9,Performance,load,load,9,"// don't load it or any of its dependencies",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:33,Performance,load,loaded,33,"// ignore libCore - it's already loaded",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:8,Performance,load,load,8,"// just load the first library - TSystem will do the rest.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:152,Deployability,update,updated,152,"////////////////////////////////////////////////////////////////////////////////; /// Find a dynamic library using the system search paths. lib will be updated; /// to contain the absolute filename if found. Returns lib if found, or NULL; /// if a library called lib was not found.; /// This function does not open the library.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:95,Performance,load,loaded,95,"////////////////////////////////////////////////////////////////////////////////; /// List the loaded shared libraries.; /// `regexp` is a regular expression allowing to filter the list.; ///; /// Examples:; ///; /// The following line lists all the libraries currently loaded:; /// ~~~ {.cpp}; /// gSystem->ListLibraries(); /// ~~~; ///; /// The following line lists all the libraries currently loaded having ""RIO"" in their names:; /// ~~~ {.cpp}; /// gSystem->ListLibraries("".*RIO.*""); /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:270,Performance,load,loaded,270,"////////////////////////////////////////////////////////////////////////////////; /// List the loaded shared libraries.; /// `regexp` is a regular expression allowing to filter the list.; ///; /// Examples:; ///; /// The following line lists all the libraries currently loaded:; /// ~~~ {.cpp}; /// gSystem->ListLibraries(); /// ~~~; ///; /// The following line lists all the libraries currently loaded having ""RIO"" in their names:; /// ~~~ {.cpp}; /// gSystem->ListLibraries("".*RIO.*""); /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:396,Performance,load,loaded,396,"////////////////////////////////////////////////////////////////////////////////; /// List the loaded shared libraries.; /// `regexp` is a regular expression allowing to filter the list.; ///; /// Examples:; ///; /// The following line lists all the libraries currently loaded:; /// ~~~ {.cpp}; /// gSystem->ListLibraries(); /// ~~~; ///; /// The following line lists all the libraries currently loaded having ""RIO"" in their names:; /// ~~~ {.cpp}; /// gSystem->ListLibraries("".*RIO.*""); /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:138,Availability,error,error,138,"////////////////////////////////////////////////////////////////////////////////; /// Return the thread local storage for the custom last error message",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:144,Integrability,message,message,144,"////////////////////////////////////////////////////////////////////////////////; /// Return the thread local storage for the custom last error message",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:138,Availability,error,error,138,"////////////////////////////////////////////////////////////////////////////////; /// Return the thread local storage for the custom last error message",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:144,Integrability,message,message,144,"////////////////////////////////////////////////////////////////////////////////; /// Return the thread local storage for the custom last error message",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:215,Availability,error,error,215,"////////////////////////////////////////////////////////////////////////////////; /// Get list of shared libraries loaded at the start of the executable.; /// Returns 0 in case list cannot be obtained or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:115,Performance,load,loaded,115,"////////////////////////////////////////////////////////////////////////////////; /// Get list of shared libraries loaded at the start of the executable.; /// Returns 0 in case list cannot be obtained or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:577,Availability,avail,available,577,"////////////////////////////////////////////////////////////////////////////////; /// Return a space separated list of loaded shared libraries.; /// Regexp is a wildcard expression, see TRegexp::MakeWildcard.; /// This list is of a format suitable for a linker, i.e it may contain; /// -Lpathname and/or -lNameOfLib.; /// Option can be any of:; /// - S: shared libraries loaded at the start of the executable, because; /// they were specified on the link line.; /// - D: shared libraries dynamically loaded after the start of the program.; /// - L: this option is ignored, and available for backward compatibility.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:119,Performance,load,loaded,119,"////////////////////////////////////////////////////////////////////////////////; /// Return a space separated list of loaded shared libraries.; /// Regexp is a wildcard expression, see TRegexp::MakeWildcard.; /// This list is of a format suitable for a linker, i.e it may contain; /// -Lpathname and/or -lNameOfLib.; /// Option can be any of:; /// - S: shared libraries loaded at the start of the executable, because; /// they were specified on the link line.; /// - D: shared libraries dynamically loaded after the start of the program.; /// - L: this option is ignored, and available for backward compatibility.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:371,Performance,load,loaded,371,"////////////////////////////////////////////////////////////////////////////////; /// Return a space separated list of loaded shared libraries.; /// Regexp is a wildcard expression, see TRegexp::MakeWildcard.; /// This list is of a format suitable for a linker, i.e it may contain; /// -Lpathname and/or -lNameOfLib.; /// Option can be any of:; /// - S: shared libraries loaded at the start of the executable, because; /// they were specified on the link line.; /// - D: shared libraries dynamically loaded after the start of the program.; /// - L: this option is ignored, and available for backward compatibility.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:500,Performance,load,loaded,500,"////////////////////////////////////////////////////////////////////////////////; /// Return a space separated list of loaded shared libraries.; /// Regexp is a wildcard expression, see TRegexp::MakeWildcard.; /// This list is of a format suitable for a linker, i.e it may contain; /// -Lpathname and/or -lNameOfLib.; /// Option can be any of:; /// - S: shared libraries loaded at the start of the executable, because; /// they were specified on the link line.; /// - D: shared libraries dynamically loaded after the start of the program.; /// - L: this option is ignored, and available for backward compatibility.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:54,Performance,load,loaded,54,"// Cint currently register all libraries that; // are loaded and have a dictionary in them, this; // includes all the libraries that are included; // in the list of (hard) linked libraries.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:56,Performance,load,loaded,56,"// We need to remove the libraries that are dynamically loaded and not linked",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:181,Integrability,Protocol,Protocol,181,"//---- RPC ---------------------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Get Internet Protocol (IP) address of host.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:99,Integrability,Protocol,Protocol,99,"////////////////////////////////////////////////////////////////////////////////; /// Get Internet Protocol (IP) address of remote host and port #.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:99,Integrability,Protocol,Protocol,99,"////////////////////////////////////////////////////////////////////////////////; /// Get Internet Protocol (IP) address of host and port #.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:306,Availability,error,error,306,"//---- System, CPU and Memory info ---------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Returns static system info, like OS type, CPU type, number of CPUs; /// RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; /// 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:182,Availability,error,error,182,"////////////////////////////////////////////////////////////////////////////////; /// Returns cpu load average and load info into the CpuInfo_t structure.; /// Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; /// interval over which the CPU load will be measured, in ms (default 1000).",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:98,Performance,load,load,98,"////////////////////////////////////////////////////////////////////////////////; /// Returns cpu load average and load info into the CpuInfo_t structure.; /// Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; /// interval over which the CPU load will be measured, in ms (default 1000).",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:115,Performance,load,load,115,"////////////////////////////////////////////////////////////////////////////////; /// Returns cpu load average and load info into the CpuInfo_t structure.; /// Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; /// interval over which the CPU load will be measured, in ms (default 1000).",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:261,Performance,load,load,261,"////////////////////////////////////////////////////////////////////////////////; /// Returns cpu load average and load info into the CpuInfo_t structure.; /// Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; /// interval over which the CPU load will be measured, in ms (default 1000).",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:182,Availability,error,error,182,"////////////////////////////////////////////////////////////////////////////////; /// Returns ram and swap memory usage info into the MemInfo_t structure.; /// Returns -1 in case of error, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:188,Availability,error,error,188,"////////////////////////////////////////////////////////////////////////////////; /// Returns cpu and memory used by this process into the ProcInfo_t structure.; /// Returns -1 in case of error, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:14,Availability,avail,availability,14,"// else check availability of cygpath...",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:16,Integrability,depend,dependency,16,"// Generate the dependency via standard output, not searching the; // standard include directories,",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:7,Integrability,depend,dependency,7,"// Add dependency on rootcling.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:273,Availability,error,error,273,"////////////////////////////////////////////////////////////////////////////////; /// This method compiles and loads a shared library containing; /// the code from the file ""filename"".; ///; /// The return value is true (1) in case of success and false (0); /// in case of error.; ///; /// The possible options are:; /// - k : keep the shared library after the session end.; /// - f : force recompilation.; /// - g : compile with debug symbol; /// - O : optimized the code; /// - c : compile only, do not attempt to load the library.; /// - s : silence all informational output; /// - v : output all information output; /// - d : debug ACLiC, keep all the output files.; /// - - : if buildir is set, use a flat structure (see buildir below); ///; /// If library_specified is specified, CompileMacro generates the file; /// ""library_specified"".soext where soext is the shared library extension for; /// the current platform.; ///; /// If build_dir is specified, it is used as an alternative 'root' for the; /// generation of the shared library. The library is stored in a sub-directories; /// of 'build_dir' including the full pathname of the script unless a flat; /// directory structure is requested ('-' option). With the '-' option the libraries; /// are created directly in the directory 'build_dir'; in particular this means that; /// 2 scripts with the same name in different source directory will over-write each; /// other's library.; /// See also TSystem::SetBuildDir.; ///; /// If dirmode is not zero and we need to create the target directory, the; /// file mode bit will be change to 'dirmode' using chmod.; ///; /// If library_specified is not specified, CompileMacro generate a default name; /// for library by taking the name of the file ""filename"" but replacing the; /// dot before the extension by an underscore and by adding the shared; /// library extension for the current platform.; /// For example on most platform, hsimple.cxx will generate hsimple_cxx.so; ///; /// It uses the ",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:3840,Availability,avail,available,3840," in order to execute a script, a user has to type at the root; /// prompt; /// ~~~ {.cpp}; /// .X myfunc.C(arg1,arg2); /// ~~~; /// We allow them to type:; /// ~~~ {.cpp}; /// .X myfunc.C++(arg1,arg2); /// ~~~; /// or; /// ~~~ {.cpp}; /// .X myfunc.C+(arg1,arg2); /// ~~~; /// In which case an external compiler will be called to create a shared; /// library. This shared library will then be loaded and the function; /// myfunc will be called with the two arguments. With '++' the shared library; /// is always recompiled. With '+' the shared library is recompiled only; /// if it does not exist yet or the macro file is newer than the shared; /// library.; ///; /// Of course the + and ++ notation is supported in similar way for .x and .L.; ///; /// Through the function TSystem::SetMakeSharedLib(), the user will be able to; /// indicate, with shell commands, how to build a shared library (a good; /// default will be provided). The most common change, namely where to find; /// header files, will be available through the function; /// TSystem::SetIncludePath().; /// A good default will be provided so that a typical user session should be at; /// most:; /// ~~~ {.cpp}; /// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:4723,Availability,avail,available,4723,", how to build a shared library (a good; /// default will be provided). The most common change, namely where to find; /// header files, will be available through the function; /// TSystem::SetIncludePath().; /// A good default will be provided so that a typical user session should be at; /// most:; /// ~~~ {.cpp}; /// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customization we could also add to the .rootrc support for the; /// variables; /// ~~~ {.cpp}; /// Unix.*.Root.IncludePath: -I$ROOTSYS/include; /// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ///; /// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; /// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; /// ~~~; /// And also support for MakeSharedLibs() and MakeExe().; ///; /// (the ... have to be replaced by the actual values and are here only to; /// shorten this comment).; ///; /// Note th",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:5031,Availability,avail,available,5031,"System->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customization we could also add to the .rootrc support for the; /// variables; /// ~~~ {.cpp}; /// Unix.*.Root.IncludePath: -I$ROOTSYS/include; /// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ///; /// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; /// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; /// ~~~; /// And also support for MakeSharedLibs() and MakeExe().; ///; /// (the ... have to be replaced by the actual values and are here only to; /// shorten this comment).; ///; /// Note that the default behavior is to remove libraries when closing ROOT,; /// ie TSystem::CleanCompiledMacros() is called in the TROOT destructor.; /// The default behavior of .L script.C+ is the opposite one, leaving things; /// after closing, without removing. In other words, .L always passes the 'k'; /// option behind the scenes.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:2400,Modifiability,variab,variables,2400," each; /// other's library.; /// See also TSystem::SetBuildDir.; ///; /// If dirmode is not zero and we need to create the target directory, the; /// file mode bit will be change to 'dirmode' using chmod.; ///; /// If library_specified is not specified, CompileMacro generate a default name; /// for library by taking the name of the file ""filename"" but replacing the; /// dot before the extension by an underscore and by adding the shared; /// library extension for the current platform.; /// For example on most platform, hsimple.cxx will generate hsimple_cxx.so; ///; /// It uses the directive fMakeSharedLibs to create a shared library.; /// If loading the shared library fails, it tries to output a list of missing; /// symbols by creating an executable (on some platforms like OSF, this does; /// not HAVE to be an executable) containing the script. It uses the; /// directive fMakeExe to do so.; /// For both directives, before passing them to TSystem::Exec, it expands the; /// variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs,; /// $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more; /// information on those variables.; ///; /// This method is used to implement the following feature:; ///; /// Synopsis:; ///; /// The purpose of this addition is to allow the user to use an external; /// compiler to create a shared library from its C++ macro (scripts).; /// Currently in order to execute a script, a user has to type at the root; /// prompt; /// ~~~ {.cpp}; /// .X myfunc.C(arg1,arg2); /// ~~~; /// We allow them to type:; /// ~~~ {.cpp}; /// .X myfunc.C++(arg1,arg2); /// ~~~; /// or; /// ~~~ {.cpp}; /// .X myfunc.C+(arg1,arg2); /// ~~~; /// In which case an external compiler will be called to create a shared; /// library. This shared library will then be loaded and the function; /// myfunc will be called with the two arguments. With '++' the shared library; /// is always recompiled. With '+' the shared library is recompiled only; /// if it",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:2573,Modifiability,variab,variables,2573,"ctory, the; /// file mode bit will be change to 'dirmode' using chmod.; ///; /// If library_specified is not specified, CompileMacro generate a default name; /// for library by taking the name of the file ""filename"" but replacing the; /// dot before the extension by an underscore and by adding the shared; /// library extension for the current platform.; /// For example on most platform, hsimple.cxx will generate hsimple_cxx.so; ///; /// It uses the directive fMakeSharedLibs to create a shared library.; /// If loading the shared library fails, it tries to output a list of missing; /// symbols by creating an executable (on some platforms like OSF, this does; /// not HAVE to be an executable) containing the script. It uses the; /// directive fMakeExe to do so.; /// For both directives, before passing them to TSystem::Exec, it expands the; /// variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs,; /// $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more; /// information on those variables.; ///; /// This method is used to implement the following feature:; ///; /// Synopsis:; ///; /// The purpose of this addition is to allow the user to use an external; /// compiler to create a shared library from its C++ macro (scripts).; /// Currently in order to execute a script, a user has to type at the root; /// prompt; /// ~~~ {.cpp}; /// .X myfunc.C(arg1,arg2); /// ~~~; /// We allow them to type:; /// ~~~ {.cpp}; /// .X myfunc.C++(arg1,arg2); /// ~~~; /// or; /// ~~~ {.cpp}; /// .X myfunc.C+(arg1,arg2); /// ~~~; /// In which case an external compiler will be called to create a shared; /// library. This shared library will then be loaded and the function; /// myfunc will be called with the two arguments. With '++' the shared library; /// is always recompiled. With '+' the shared library is recompiled only; /// if it does not exist yet or the macro file is newer than the shared; /// library.; ///; /// Of course the + and ++ notation is supported in",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:5251,Modifiability,variab,variables,5251,"System->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customization we could also add to the .rootrc support for the; /// variables; /// ~~~ {.cpp}; /// Unix.*.Root.IncludePath: -I$ROOTSYS/include; /// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ///; /// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; /// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; /// ~~~; /// And also support for MakeSharedLibs() and MakeExe().; ///; /// (the ... have to be replaced by the actual values and are here only to; /// shorten this comment).; ///; /// Note that the default behavior is to remove libraries when closing ROOT,; /// ie TSystem::CleanCompiledMacros() is called in the TROOT destructor.; /// The default behavior of .L script.C+ is the opposite one, leaving things; /// after closing, without removing. In other words, .L always passes the 'k'; /// option behind the scenes.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:111,Performance,load,loads,111,"////////////////////////////////////////////////////////////////////////////////; /// This method compiles and loads a shared library containing; /// the code from the file ""filename"".; ///; /// The return value is true (1) in case of success and false (0); /// in case of error.; ///; /// The possible options are:; /// - k : keep the shared library after the session end.; /// - f : force recompilation.; /// - g : compile with debug symbol; /// - O : optimized the code; /// - c : compile only, do not attempt to load the library.; /// - s : silence all informational output; /// - v : output all information output; /// - d : debug ACLiC, keep all the output files.; /// - - : if buildir is set, use a flat structure (see buildir below); ///; /// If library_specified is specified, CompileMacro generates the file; /// ""library_specified"".soext where soext is the shared library extension for; /// the current platform.; ///; /// If build_dir is specified, it is used as an alternative 'root' for the; /// generation of the shared library. The library is stored in a sub-directories; /// of 'build_dir' including the full pathname of the script unless a flat; /// directory structure is requested ('-' option). With the '-' option the libraries; /// are created directly in the directory 'build_dir'; in particular this means that; /// 2 scripts with the same name in different source directory will over-write each; /// other's library.; /// See also TSystem::SetBuildDir.; ///; /// If dirmode is not zero and we need to create the target directory, the; /// file mode bit will be change to 'dirmode' using chmod.; ///; /// If library_specified is not specified, CompileMacro generate a default name; /// for library by taking the name of the file ""filename"" but replacing the; /// dot before the extension by an underscore and by adding the shared; /// library extension for the current platform.; /// For example on most platform, hsimple.cxx will generate hsimple_cxx.so; ///; /// It uses the ",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:454,Performance,optimiz,optimized,454,"////////////////////////////////////////////////////////////////////////////////; /// This method compiles and loads a shared library containing; /// the code from the file ""filename"".; ///; /// The return value is true (1) in case of success and false (0); /// in case of error.; ///; /// The possible options are:; /// - k : keep the shared library after the session end.; /// - f : force recompilation.; /// - g : compile with debug symbol; /// - O : optimized the code; /// - c : compile only, do not attempt to load the library.; /// - s : silence all informational output; /// - v : output all information output; /// - d : debug ACLiC, keep all the output files.; /// - - : if buildir is set, use a flat structure (see buildir below); ///; /// If library_specified is specified, CompileMacro generates the file; /// ""library_specified"".soext where soext is the shared library extension for; /// the current platform.; ///; /// If build_dir is specified, it is used as an alternative 'root' for the; /// generation of the shared library. The library is stored in a sub-directories; /// of 'build_dir' including the full pathname of the script unless a flat; /// directory structure is requested ('-' option). With the '-' option the libraries; /// are created directly in the directory 'build_dir'; in particular this means that; /// 2 scripts with the same name in different source directory will over-write each; /// other's library.; /// See also TSystem::SetBuildDir.; ///; /// If dirmode is not zero and we need to create the target directory, the; /// file mode bit will be change to 'dirmode' using chmod.; ///; /// If library_specified is not specified, CompileMacro generate a default name; /// for library by taking the name of the file ""filename"" but replacing the; /// dot before the extension by an underscore and by adding the shared; /// library extension for the current platform.; /// For example on most platform, hsimple.cxx will generate hsimple_cxx.so; ///; /// It uses the ",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:516,Performance,load,load,516,"////////////////////////////////////////////////////////////////////////////////; /// This method compiles and loads a shared library containing; /// the code from the file ""filename"".; ///; /// The return value is true (1) in case of success and false (0); /// in case of error.; ///; /// The possible options are:; /// - k : keep the shared library after the session end.; /// - f : force recompilation.; /// - g : compile with debug symbol; /// - O : optimized the code; /// - c : compile only, do not attempt to load the library.; /// - s : silence all informational output; /// - v : output all information output; /// - d : debug ACLiC, keep all the output files.; /// - - : if buildir is set, use a flat structure (see buildir below); ///; /// If library_specified is specified, CompileMacro generates the file; /// ""library_specified"".soext where soext is the shared library extension for; /// the current platform.; ///; /// If build_dir is specified, it is used as an alternative 'root' for the; /// generation of the shared library. The library is stored in a sub-directories; /// of 'build_dir' including the full pathname of the script unless a flat; /// directory structure is requested ('-' option). With the '-' option the libraries; /// are created directly in the directory 'build_dir'; in particular this means that; /// 2 scripts with the same name in different source directory will over-write each; /// other's library.; /// See also TSystem::SetBuildDir.; ///; /// If dirmode is not zero and we need to create the target directory, the; /// file mode bit will be change to 'dirmode' using chmod.; ///; /// If library_specified is not specified, CompileMacro generate a default name; /// for library by taking the name of the file ""filename"" but replacing the; /// dot before the extension by an underscore and by adding the shared; /// library extension for the current platform.; /// For example on most platform, hsimple.cxx will generate hsimple_cxx.so; ///; /// It uses the ",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:2063,Performance,load,loading,2063,"t; /// directory structure is requested ('-' option). With the '-' option the libraries; /// are created directly in the directory 'build_dir'; in particular this means that; /// 2 scripts with the same name in different source directory will over-write each; /// other's library.; /// See also TSystem::SetBuildDir.; ///; /// If dirmode is not zero and we need to create the target directory, the; /// file mode bit will be change to 'dirmode' using chmod.; ///; /// If library_specified is not specified, CompileMacro generate a default name; /// for library by taking the name of the file ""filename"" but replacing the; /// dot before the extension by an underscore and by adding the shared; /// library extension for the current platform.; /// For example on most platform, hsimple.cxx will generate hsimple_cxx.so; ///; /// It uses the directive fMakeSharedLibs to create a shared library.; /// If loading the shared library fails, it tries to output a list of missing; /// symbols by creating an executable (on some platforms like OSF, this does; /// not HAVE to be an executable) containing the script. It uses the; /// directive fMakeExe to do so.; /// For both directives, before passing them to TSystem::Exec, it expands the; /// variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs,; /// $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more; /// information on those variables.; ///; /// This method is used to implement the following feature:; ///; /// Synopsis:; ///; /// The purpose of this addition is to allow the user to use an external; /// compiler to create a shared library from its C++ macro (scripts).; /// Currently in order to execute a script, a user has to type at the root; /// prompt; /// ~~~ {.cpp}; /// .X myfunc.C(arg1,arg2); /// ~~~; /// We allow them to type:; /// ~~~ {.cpp}; /// .X myfunc.C++(arg1,arg2); /// ~~~; /// or; /// ~~~ {.cpp}; /// .X myfunc.C+(arg1,arg2); /// ~~~; /// In which case an external compiler will be called t",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:3227,Performance,load,loaded,3227,"containing the script. It uses the; /// directive fMakeExe to do so.; /// For both directives, before passing them to TSystem::Exec, it expands the; /// variables $SourceFiles, $SharedLib, $LibName, $IncludePath, $LinkedLibs,; /// $DepLibs, $ExeName and $ObjectFiles. See SetMakeSharedLib() for more; /// information on those variables.; ///; /// This method is used to implement the following feature:; ///; /// Synopsis:; ///; /// The purpose of this addition is to allow the user to use an external; /// compiler to create a shared library from its C++ macro (scripts).; /// Currently in order to execute a script, a user has to type at the root; /// prompt; /// ~~~ {.cpp}; /// .X myfunc.C(arg1,arg2); /// ~~~; /// We allow them to type:; /// ~~~ {.cpp}; /// .X myfunc.C++(arg1,arg2); /// ~~~; /// or; /// ~~~ {.cpp}; /// .X myfunc.C+(arg1,arg2); /// ~~~; /// In which case an external compiler will be called to create a shared; /// library. This shared library will then be loaded and the function; /// myfunc will be called with the two arguments. With '++' the shared library; /// is always recompiled. With '+' the shared library is recompiled only; /// if it does not exist yet or the macro file is newer than the shared; /// library.; ///; /// Of course the + and ++ notation is supported in similar way for .x and .L.; ///; /// Through the function TSystem::SetMakeSharedLib(), the user will be able to; /// indicate, with shell commands, how to build a shared library (a good; /// default will be provided). The most common change, namely where to find; /// header files, will be available through the function; /// TSystem::SetIncludePath().; /// A good default will be provided so that a typical user session should be at; /// most:; /// ~~~ {.cpp}; /// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared l",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:4212,Performance,load,loaded,4212,"ry. This shared library will then be loaded and the function; /// myfunc will be called with the two arguments. With '++' the shared library; /// is always recompiled. With '+' the shared library is recompiled only; /// if it does not exist yet or the macro file is newer than the shared; /// library.; ///; /// Of course the + and ++ notation is supported in similar way for .x and .L.; ///; /// Through the function TSystem::SetMakeSharedLib(), the user will be able to; /// indicate, with shell commands, how to build a shared library (a good; /// default will be provided). The most common change, namely where to find; /// header files, will be available through the function; /// TSystem::SetIncludePath().; /// A good default will be provided so that a typical user session should be at; /// most:; /// ~~~ {.cpp}; /// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customiz",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:4352,Performance,load,loading,4352,"y; /// if it does not exist yet or the macro file is newer than the shared; /// library.; ///; /// Of course the + and ++ notation is supported in similar way for .x and .L.; ///; /// Through the function TSystem::SetMakeSharedLib(), the user will be able to; /// indicate, with shell commands, how to build a shared library (a good; /// default will be provided). The most common change, namely where to find; /// header files, will be available through the function; /// TSystem::SetIncludePath().; /// A good default will be provided so that a typical user session should be at; /// most:; /// ~~~ {.cpp}; /// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customization we could also add to the .rootrc support for the; /// variables; /// ~~~ {.cpp}; /// Unix.*.Root.IncludePath: -I$ROOTSYS/include; /// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ///; /// Unix.*.Root.Linke",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:4665,Performance,load,loader,4665,", how to build a shared library (a good; /// default will be provided). The most common change, namely where to find; /// header files, will be available through the function; /// TSystem::SetIncludePath().; /// A good default will be provided so that a typical user session should be at; /// most:; /// ~~~ {.cpp}; /// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customization we could also add to the .rootrc support for the; /// variables; /// ~~~ {.cpp}; /// Unix.*.Root.IncludePath: -I$ROOTSYS/include; /// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ///; /// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; /// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; /// ~~~; /// And also support for MakeSharedLibs() and MakeExe().; ///; /// (the ... have to be replaced by the actual values and are here only to; /// shorten this comment).; ///; /// Note th",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:4789,Performance,load,loaded,4789,". The most common change, namely where to find; /// header files, will be available through the function; /// TSystem::SetIncludePath().; /// A good default will be provided so that a typical user session should be at; /// most:; /// ~~~ {.cpp}; /// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customization we could also add to the .rootrc support for the; /// variables; /// ~~~ {.cpp}; /// Unix.*.Root.IncludePath: -I$ROOTSYS/include; /// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ///; /// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; /// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; /// ~~~; /// And also support for MakeSharedLibs() and MakeExe().; ///; /// (the ... have to be replaced by the actual values and are here only to; /// shorten this comment).; ///; /// Note that the default behavior is to remove libraries when closing ROOT,; ///",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:4815,Performance,Load,Load,4815,"will be available through the function; /// TSystem::SetIncludePath().; /// A good default will be provided so that a typical user session should be at; /// most:; /// ~~~ {.cpp}; /// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customization we could also add to the .rootrc support for the; /// variables; /// ~~~ {.cpp}; /// Unix.*.Root.IncludePath: -I$ROOTSYS/include; /// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ///; /// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; /// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; /// ~~~; /// And also support for MakeSharedLibs() and MakeExe().; ///; /// (the ... have to be replaced by the actual values and are here only to; /// shorten this comment).; ///; /// Note that the default behavior is to remove libraries when closing ROOT,; /// ie TSystem::CleanCompiledMacros() is called in the TROOT destruc",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:4825,Security,access,accessible,4825,"will be available through the function; /// TSystem::SetIncludePath().; /// A good default will be provided so that a typical user session should be at; /// most:; /// ~~~ {.cpp}; /// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customization we could also add to the .rootrc support for the; /// variables; /// ~~~ {.cpp}; /// Unix.*.Root.IncludePath: -I$ROOTSYS/include; /// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ///; /// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; /// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; /// ~~~; /// And also support for MakeSharedLibs() and MakeExe().; ///; /// (the ... have to be replaced by the actual values and are here only to; /// shorten this comment).; ///; /// Note that the default behavior is to remove libraries when closing ROOT,; /// ie TSystem::CleanCompiledMacros() is called in the TROOT destruc",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:5174,Usability,simpl,simplify,5174,"System->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customization we could also add to the .rootrc support for the; /// variables; /// ~~~ {.cpp}; /// Unix.*.Root.IncludePath: -I$ROOTSYS/include; /// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ///; /// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; /// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; /// ~~~; /// And also support for MakeSharedLibs() and MakeExe().; ///; /// (the ... have to be replaced by the actual values and are here only to; /// shorten this comment).; ///; /// Note that the default behavior is to remove libraries when closing ROOT,; /// ie TSystem::CleanCompiledMacros() is called in the TROOT destructor.; /// The default behavior of .L script.C+ is the opposite one, leaving things; /// after closing, without removing. In other words, .L always passes the 'k'; /// option behind the scenes.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:48,Integrability,depend,dependency,48,"// NOTE: should probably just skip isysroot for dependency analysis.; // (And will, in the future - once we rely on compiler-generated .d files.)",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:182,Usability,usab,usable,182,"// For some probably good reason, DirName on Windows returns the 'name' of; // the directory, omitting the drive letter (even if there was one). In; // consequence the result is not usable as a 'root directory', we need to; // add the drive letter if there was one..",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:43,Integrability,depend,dependent,43,"// Extension of shared library is platform dependent!!",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:29,Availability,redundant,redundant,29,"// Strip potential, somewhat redundant '/.' from the pathname ...",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:29,Safety,redund,redundant,29,"// Strip potential, somewhat redundant '/.' from the pathname ...",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:92,Availability,error,error,92,"// The mkdir failed __and__ we can not write to the target directory,; // let make sure the error message will be about the target directory",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:98,Integrability,message,message,98,"// The mkdir failed __and__ we can not write to the target directory,; // let make sure the error message will be about the target directory",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:40,Performance,load,loaded,40,"// ======= Check if the library need to loaded or compiled",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:31,Performance,load,loaded,31,"// the script has already been loaded in interpreted mode; // Let's warn the user and unload it.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:26,Integrability,depend,dependency,26,"// Extract the -D for the dependency generation.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:16,Integrability,depend,dependency,16,"// Generate the dependency filename",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:24,Integrability,depend,dependencies,24,"// We need to check the dependencies",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:26,Integrability,depend,dependency,26,"// there is no accessible dependency file, let's assume the library has been; // modified",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:15,Security,access,accessible,15,"// there is no accessible dependency file, let's assume the library has been; // modified",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:42,Performance,load,loaded,42,"// The library has already been built and loaded.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:28,Modifiability,polymorphi,polymorphic,28,"// FIXME: Switch to generic polymorphic when we make c++14 default.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:117,Integrability,depend,dependencies,117,"// We have no rootmap files or modules to construct `-l` flags enabling; // explicit linking. We have to resolve the dependencies by ourselves; // taking the job of the dyld.; // FIXME: This is a rare case where we have rootcling running with; // modules disabled. Remove this code once we fully switch to modules,; // or implement a special flag in rootcling which selective enables; // modules for dependent libraries and does not produce a module for; // the ACLiC library.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:400,Integrability,depend,dependent,400,"// We have no rootmap files or modules to construct `-l` flags enabling; // explicit linking. We have to resolve the dependencies by ourselves; // taking the job of the dyld.; // FIXME: This is a rare case where we have rootcling running with; // modules disabled. Remove this code once we fully switch to modules,; // or implement a special flag in rootcling which selective enables; // modules for dependent libraries and does not produce a module for; // the ACLiC library.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:41,Performance,load,load,41,"// The library already exist, let's just load it.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:67,Modifiability,variab,variable,67,"// the file name end up in the file produced; // by rootcling as a variable name so all character need to be valid!",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:45,Integrability,depend,depend,45,"// ======= Load the library the script might depend on",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:11,Performance,Load,Load,11,"// ======= Load the library the script might depend on",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:3,Performance,Load,Load,3,"// Load the needed library except for the library we are currently building!",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:32,Integrability,depend,dependency,32,"// We failed to load one of the dependency.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:16,Performance,load,load,16,"// We failed to load one of the dependency.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:34,Integrability,rout,routine,34,"// We could append this fake main routine to the compilation line.; // But in this case compiler may output the name of the dictionary file; // and of the fakeMain file while it compiles it. (this would be useless; // confusing output).; // We could also the fake main routine to the end of the dictionary file; // however compilation would fail if a main is already there; // (like stress.cxx); // dict.Append("" "").Append(fakeMain);",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:269,Integrability,rout,routine,269,"// We could append this fake main routine to the compilation line.; // But in this case compiler may output the name of the dictionary file; // and of the fakeMain file while it compiles it. (this would be useless; // confusing output).; // We could also the fake main routine to the end of the dictionary file; // however compilation would fail if a main is already there; // (like stress.cxx); // dict.Append("" "").Append(fakeMain);",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:224,Availability,redundant,redundant,224,"// We may have unresolved symbols. Use dyld to resolve the dependent; // libraries and relink.; // FIXME: We will likely have duplicated libraries as we are appending; // FIXME: This likely makes rootcling --lib-list-prefix redundant.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:59,Integrability,depend,dependent,59,"// We may have unresolved symbols. Use dyld to resolve the dependent; // libraries and relink.; // FIXME: We will likely have duplicated libraries as we are appending; // FIXME: This likely makes rootcling --lib-list-prefix redundant.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:224,Safety,redund,redundant,224,"// We may have unresolved symbols. Use dyld to resolve the dependent; // libraries and relink.; // FIXME: We will likely have duplicated libraries as we are appending; // FIXME: This likely makes rootcling --lib-list-prefix redundant.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:3,Safety,abort,abort,3,"// abort",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:97,Performance,optimiz,optimization,97,"////////////////////////////////////////////////////////////////////////////////; /// Return the optimization flags.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:164,Performance,optimiz,optimized,164,"////////////////////////////////////////////////////////////////////////////////; /// AclicMode indicates whether the library should be built in; /// debug mode or optimized. The values are:; /// - TSystem::kDefault : compile the same as the current ROOT; /// - TSystem::kDebug : compiled in debug mode; /// - TSystem::kOpt : optimized the library",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:326,Performance,optimiz,optimized,326,"////////////////////////////////////////////////////////////////////////////////; /// AclicMode indicates whether the library should be built in; /// debug mode or optimized. The values are:; /// - TSystem::kDefault : compile the same as the current ROOT; /// - TSystem::kDebug : compiled in debug mode; /// - TSystem::kOpt : optimized the library",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:52,Availability,error,error,52,"// FIXME: This is a temporary fix for the following error with ACLiC; // (and this is apparently not needed anyway):; // 48: input_line_12:8:38: error: use of undeclared identifier 'IC'; // 48: ""C:/Users/bellenot/build/debug/etc"" -IC:/Users/bellenot/build/debug/etc//cling -IC:/Users/bellenot/build/debug/include"""",; // 48: ^; // 48: Error in <ACLiC>: Dictionary generation failed!",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:145,Availability,error,error,145,"// FIXME: This is a temporary fix for the following error with ACLiC; // (and this is apparently not needed anyway):; // 48: input_line_12:8:38: error: use of undeclared identifier 'IC'; // 48: ""C:/Users/bellenot/build/debug/etc"" -IC:/Users/bellenot/build/debug/etc//cling -IC:/Users/bellenot/build/debug/include"""",; // 48: ^; // 48: Error in <ACLiC>: Dictionary generation failed!",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:334,Availability,Error,Error,334,"// FIXME: This is a temporary fix for the following error with ACLiC; // (and this is apparently not needed anyway):; // 48: input_line_12:8:38: error: use of undeclared identifier 'IC'; // 48: ""C:/Users/bellenot/build/debug/etc"" -IC:/Users/bellenot/build/debug/etc//cling -IC:/Users/bellenot/build/debug/include"""",; // 48: ^; // 48: Error in <ACLiC>: Dictionary generation failed!",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:769,Safety,risk,risk,769,"////////////////////////////////////////////////////////////////////////////////; /// Set the location where ACLiC will create libraries and use as; /// a scratch area. If unset, libraries will be created at the same; /// location than the script.; ///; /// \param build_dir the name of the build directory; /// \param isflat If false (default), then the libraries are actually stored; /// in sub-directories of 'build_dir' including the full pathname; /// of the script. If the script is located at `/full/path/name/macro.C`; /// the library will be located at `build_dir+/full/path/name/macro_C.so`; /// If 'isflat' is true, then no subdirectory is created and the library; /// is created directly in the directory 'build_dir'. Note that in this; /// mode there is a risk than 2 script of the same in different source; /// directory will over-write each other.; /// \note This `build_dir` can also be controlled via `ACLiC.BuildDir` in; /// your `.rootrc`.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:190,Performance,optimiz,optimized,190,"////////////////////////////////////////////////////////////////////////////////; /// FlagsOpt should contain the options to pass to the C++ compiler; /// in order to compile the library in optimized mode.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:164,Performance,optimiz,optimized,164,"////////////////////////////////////////////////////////////////////////////////; /// AclicMode indicates whether the library should be built in; /// debug mode or optimized. The values are:; /// - TSystem::kDefault : compile the same as the current ROOT; /// - TSystem::kDebug : compiled in debug mode; /// - TSystem::kOpt : optimized the library",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:326,Performance,optimiz,optimized,326,"////////////////////////////////////////////////////////////////////////////////; /// AclicMode indicates whether the library should be built in; /// debug mode or optimized. The values are:; /// - TSystem::kDefault : compile the same as the current ROOT; /// - TSystem::kDebug : compiled in debug mode; /// - TSystem::kOpt : optimized the library",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:333,Modifiability,variab,variable,333,"////////////////////////////////////////////////////////////////////////////////; /// Directives has the same syntax as the argument of SetMakeSharedLib but is; /// used to create an executable. This creation is used as a means to output; /// a list of unresolved symbols, when loading a shared library has failed.; /// The required variable is $ExeName rather than $SharedLib, e.g.:; /// ~~~ {.cpp}; /// gSystem->SetMakeExe(; /// ""g++ -Wall -fPIC $IncludePath $SourceFiles; /// -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:278,Performance,load,loading,278,"////////////////////////////////////////////////////////////////////////////////; /// Directives has the same syntax as the argument of SetMakeSharedLib but is; /// used to create an executable. This creation is used as a means to output; /// a list of unresolved symbols, when loading a shared library has failed.; /// The required variable is $ExeName rather than $SharedLib, e.g.:; /// ~~~ {.cpp}; /// gSystem->SetMakeExe(; /// ""g++ -Wall -fPIC $IncludePath $SourceFiles; /// -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:63,Modifiability,variab,variables,63,"// NOTE: add verification that the directives has the required variables",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:1988,Deployability,RELEASE,RELEASE,1988,"/// Directives should contain the description on how to compile and link a; /// shared lib. This description can be any valid shell command, including; /// the use of ';' to separate several instructions. However, shell specific; /// construct should be avoided. In particular this description can contain; /// environment variables, like $ROOTSYS (or %ROOTSYS% on windows).; /// ~~~ {.cpp}; /// Five special variables will be expanded before execution:; /// Variable name Expands to; /// ------------- ----------; /// $SourceFiles Name of source files to be compiled; /// $SharedLib Name of the shared library being created; /// $LibName Name of shared library without extension; /// $BuildDir Directory where the files will be created; /// $IncludePath value of fIncludePath; /// $LinkedLibs value of fLinkedLibs; /// $DepLibs libraries on which this library depends on; /// $ObjectFiles Name of source files to be compiler with; /// their extension changed to .o or .obj; /// $Opt location of the optimization/debug options; /// set fFlagsDebug and fFlagsOpt; /// ~~~; /// e.g.:; /// ~~~ {.cpp}; /// gSystem->SetMakeSharedLib(; /// ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; /// --no_exceptions --signed_chars --display_error_number; /// --diag_suppress 68 -o $SharedLib"");; ///; /// gSystem->setMakeSharedLib(; /// ""Cxx $IncludePath -c $SourceFile;; /// ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; /// \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; /// -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc""; ///; /// gSystem->SetMakeSharedLib(; /// ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; /// -shared -o $SharedLib"");; ///; /// gSystem->SetMakeSharedLib(; /// ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN32; /// -D_WINDOWS $IncludePath $SourceFile; /// /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLOGO; /// $LinkedLibs -entry:_DllMainCRTStartup@12 -dll /out:$SharedLib""); /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:943,Integrability,depend,depends,943,"////////////////////////////////////////////////////////////////////////////////; /// Directives should contain the description on how to compile and link a; /// shared lib. This description can be any valid shell command, including; /// the use of ';' to separate several instructions. However, shell specific; /// construct should be avoided. In particular this description can contain; /// environment variables, like $ROOTSYS (or %ROOTSYS% on windows).; /// ~~~ {.cpp}; /// Five special variables will be expanded before execution:; /// Variable name Expands to; /// ------------- ----------; /// $SourceFiles Name of source files to be compiled; /// $SharedLib Name of the shared library being created; /// $LibName Name of shared library without extension; /// $BuildDir Directory where the files will be created; /// $IncludePath value of fIncludePath; /// $LinkedLibs value of fLinkedLibs; /// $DepLibs libraries on which this library depends on; /// $ObjectFiles Name of source files to be compiler with; /// their extension changed to .o or .obj; /// $Opt location of the optimization/debug options; /// set fFlagsDebug and fFlagsOpt; /// ~~~; /// e.g.:; /// ~~~ {.cpp}; /// gSystem->SetMakeSharedLib(; /// ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; /// --no_exceptions --signed_chars --display_error_number; /// --diag_suppress 68 -o $SharedLib"");; ///; /// gSystem->setMakeSharedLib(; /// ""Cxx $IncludePath -c $SourceFile;; /// ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; /// \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; /// -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc""; ///; /// gSystem->SetMakeSharedLib(; /// ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; /// -shared -o $SharedLib"");; ///; /// gSystem->SetMakeSharedLib(; /// ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN32; /// -D_WINDOWS $IncludePath $SourceFile; /// /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLO",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:405,Modifiability,variab,variables,405,"////////////////////////////////////////////////////////////////////////////////; /// Directives should contain the description on how to compile and link a; /// shared lib. This description can be any valid shell command, including; /// the use of ';' to separate several instructions. However, shell specific; /// construct should be avoided. In particular this description can contain; /// environment variables, like $ROOTSYS (or %ROOTSYS% on windows).; /// ~~~ {.cpp}; /// Five special variables will be expanded before execution:; /// Variable name Expands to; /// ------------- ----------; /// $SourceFiles Name of source files to be compiled; /// $SharedLib Name of the shared library being created; /// $LibName Name of shared library without extension; /// $BuildDir Directory where the files will be created; /// $IncludePath value of fIncludePath; /// $LinkedLibs value of fLinkedLibs; /// $DepLibs libraries on which this library depends on; /// $ObjectFiles Name of source files to be compiler with; /// their extension changed to .o or .obj; /// $Opt location of the optimization/debug options; /// set fFlagsDebug and fFlagsOpt; /// ~~~; /// e.g.:; /// ~~~ {.cpp}; /// gSystem->SetMakeSharedLib(; /// ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; /// --no_exceptions --signed_chars --display_error_number; /// --diag_suppress 68 -o $SharedLib"");; ///; /// gSystem->setMakeSharedLib(; /// ""Cxx $IncludePath -c $SourceFile;; /// ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; /// \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; /// -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc""; ///; /// gSystem->SetMakeSharedLib(; /// ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; /// -shared -o $SharedLib"");; ///; /// gSystem->SetMakeSharedLib(; /// ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN32; /// -D_WINDOWS $IncludePath $SourceFile; /// /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLO",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:491,Modifiability,variab,variables,491,"////////////////////////////////////////////////////////////////////////////////; /// Directives should contain the description on how to compile and link a; /// shared lib. This description can be any valid shell command, including; /// the use of ';' to separate several instructions. However, shell specific; /// construct should be avoided. In particular this description can contain; /// environment variables, like $ROOTSYS (or %ROOTSYS% on windows).; /// ~~~ {.cpp}; /// Five special variables will be expanded before execution:; /// Variable name Expands to; /// ------------- ----------; /// $SourceFiles Name of source files to be compiled; /// $SharedLib Name of the shared library being created; /// $LibName Name of shared library without extension; /// $BuildDir Directory where the files will be created; /// $IncludePath value of fIncludePath; /// $LinkedLibs value of fLinkedLibs; /// $DepLibs libraries on which this library depends on; /// $ObjectFiles Name of source files to be compiler with; /// their extension changed to .o or .obj; /// $Opt location of the optimization/debug options; /// set fFlagsDebug and fFlagsOpt; /// ~~~; /// e.g.:; /// ~~~ {.cpp}; /// gSystem->SetMakeSharedLib(; /// ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; /// --no_exceptions --signed_chars --display_error_number; /// --diag_suppress 68 -o $SharedLib"");; ///; /// gSystem->setMakeSharedLib(; /// ""Cxx $IncludePath -c $SourceFile;; /// ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; /// \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; /// -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc""; ///; /// gSystem->SetMakeSharedLib(; /// ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; /// -shared -o $SharedLib"");; ///; /// gSystem->SetMakeSharedLib(; /// ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN32; /// -D_WINDOWS $IncludePath $SourceFile; /// /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLO",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:541,Modifiability,Variab,Variable,541,"////////////////////////////////////////////////////////////////////////////////; /// Directives should contain the description on how to compile and link a; /// shared lib. This description can be any valid shell command, including; /// the use of ';' to separate several instructions. However, shell specific; /// construct should be avoided. In particular this description can contain; /// environment variables, like $ROOTSYS (or %ROOTSYS% on windows).; /// ~~~ {.cpp}; /// Five special variables will be expanded before execution:; /// Variable name Expands to; /// ------------- ----------; /// $SourceFiles Name of source files to be compiled; /// $SharedLib Name of the shared library being created; /// $LibName Name of shared library without extension; /// $BuildDir Directory where the files will be created; /// $IncludePath value of fIncludePath; /// $LinkedLibs value of fLinkedLibs; /// $DepLibs libraries on which this library depends on; /// $ObjectFiles Name of source files to be compiler with; /// their extension changed to .o or .obj; /// $Opt location of the optimization/debug options; /// set fFlagsDebug and fFlagsOpt; /// ~~~; /// e.g.:; /// ~~~ {.cpp}; /// gSystem->SetMakeSharedLib(; /// ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; /// --no_exceptions --signed_chars --display_error_number; /// --diag_suppress 68 -o $SharedLib"");; ///; /// gSystem->setMakeSharedLib(; /// ""Cxx $IncludePath -c $SourceFile;; /// ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; /// \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; /// -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc""; ///; /// gSystem->SetMakeSharedLib(; /// ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; /// -shared -o $SharedLib"");; ///; /// gSystem->SetMakeSharedLib(; /// ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN32; /// -D_WINDOWS $IncludePath $SourceFile; /// /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLO",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:1082,Performance,optimiz,optimization,1082,"/// Directives should contain the description on how to compile and link a; /// shared lib. This description can be any valid shell command, including; /// the use of ';' to separate several instructions. However, shell specific; /// construct should be avoided. In particular this description can contain; /// environment variables, like $ROOTSYS (or %ROOTSYS% on windows).; /// ~~~ {.cpp}; /// Five special variables will be expanded before execution:; /// Variable name Expands to; /// ------------- ----------; /// $SourceFiles Name of source files to be compiled; /// $SharedLib Name of the shared library being created; /// $LibName Name of shared library without extension; /// $BuildDir Directory where the files will be created; /// $IncludePath value of fIncludePath; /// $LinkedLibs value of fLinkedLibs; /// $DepLibs libraries on which this library depends on; /// $ObjectFiles Name of source files to be compiler with; /// their extension changed to .o or .obj; /// $Opt location of the optimization/debug options; /// set fFlagsDebug and fFlagsOpt; /// ~~~; /// e.g.:; /// ~~~ {.cpp}; /// gSystem->SetMakeSharedLib(; /// ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; /// --no_exceptions --signed_chars --display_error_number; /// --diag_suppress 68 -o $SharedLib"");; ///; /// gSystem->setMakeSharedLib(; /// ""Cxx $IncludePath -c $SourceFile;; /// ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; /// \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; /// -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc""; ///; /// gSystem->SetMakeSharedLib(; /// ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; /// -shared -o $SharedLib"");; ///; /// gSystem->SetMakeSharedLib(; /// ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN32; /// -D_WINDOWS $IncludePath $SourceFile; /// /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLOGO; /// $LinkedLibs -entry:_DllMainCRTStartup@12 -dll /out:$SharedLib""); /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:336,Safety,avoid,avoided,336,"////////////////////////////////////////////////////////////////////////////////; /// Directives should contain the description on how to compile and link a; /// shared lib. This description can be any valid shell command, including; /// the use of ';' to separate several instructions. However, shell specific; /// construct should be avoided. In particular this description can contain; /// environment variables, like $ROOTSYS (or %ROOTSYS% on windows).; /// ~~~ {.cpp}; /// Five special variables will be expanded before execution:; /// Variable name Expands to; /// ------------- ----------; /// $SourceFiles Name of source files to be compiled; /// $SharedLib Name of the shared library being created; /// $LibName Name of shared library without extension; /// $BuildDir Directory where the files will be created; /// $IncludePath value of fIncludePath; /// $LinkedLibs value of fLinkedLibs; /// $DepLibs libraries on which this library depends on; /// $ObjectFiles Name of source files to be compiler with; /// their extension changed to .o or .obj; /// $Opt location of the optimization/debug options; /// set fFlagsDebug and fFlagsOpt; /// ~~~; /// e.g.:; /// ~~~ {.cpp}; /// gSystem->SetMakeSharedLib(; /// ""KCC -n32 --strict $IncludePath -K0 \$Opt $SourceFile; /// --no_exceptions --signed_chars --display_error_number; /// --diag_suppress 68 -o $SharedLib"");; ///; /// gSystem->setMakeSharedLib(; /// ""Cxx $IncludePath -c $SourceFile;; /// ld -L/usr/lib/cmplrs/cxx -rpath /usr/lib/cmplrs/cxx -expect_unresolved; /// \$Opt -shared /usr/lib/cmplrs/cc/crt0.o /usr/lib/cmplrs/cxx/_main.o; /// -o $SharedLib $ObjectFile -lcxxstd -lcxx -lexc -lots -lc""; ///; /// gSystem->SetMakeSharedLib(; /// ""$HOME/mygcc/bin/g++ \$Opt -Wall -fPIC $IncludePath $SourceFile; /// -shared -o $SharedLib"");; ///; /// gSystem->SetMakeSharedLib(; /// ""cl -DWIN32 -D_WIN32 -D_MT -D_DLL -MD /O2 /G5 /MD -DWIN32; /// -D_WINDOWS $IncludePath $SourceFile; /// /link -PDB:NONE /NODEFAULTLIB /INCREMENTAL:NO /RELEASE /NOLO",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:63,Modifiability,variab,variables,63,"// NOTE: add verification that the directives has the required variables",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:213,Integrability,interface,interface,213,"////////////////////////////////////////////////////////////////////////////////; /// \brief Add a directory to the already set include path.; /// \param[in] includePath The path to the directory.; /// \note This interface is mostly relevant for ACLiC and it does *not* inform; /// gInterpreter for this include path. If the TInterpreter needs to know; /// about the include path please use TInterpreter::AddIncludePath() .; /// \warning The path should start with the \c -I prefix, i.e.; /// <tt>gSystem->AddIncludePath(""-I /path/to/my/includes"")</tt>.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:346,Modifiability,config,config,346,"////////////////////////////////////////////////////////////////////////////////; /// LinkedLibs should contain the library directory and list of libraries; /// needed to recreate the current executable. It is used to expand $LinkedLibs; /// in the directives given to SetMakeSharedLib() and SetMakeExe(); /// The default value on Unix is: `root-config --glibs`",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:140,Performance,load,loaded,140,"////////////////////////////////////////////////////////////////////////////////; /// The 'suffix' will be appended to the name of a script loaded by ACLiC; /// and used to locate any eventual additional linkdef information that; /// ACLiC should used to produce the dictionary.; ///; /// So by default, when doing .L MyScript.cxx, ACLiC will look; /// for a file name MyScript_linkdef and having one of the .h (.hpp,; /// etc.) extensions. If such a file exist, it will be added to; /// the end of the linkdef file used to created the ACLiC dictionary.; /// This effectively enable the full customization of the creation; /// of the dictionary. It should be noted that the file is intended; /// as a linkdef `fragment`, so usually you would not list the; /// typical:; /// ~~~ {.cpp}; /// #pragma link off ....; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:106,Modifiability,plugin,plugin,106,"////////////////////////////////////////////////////////////////////////////////; /// Register version of plugin library.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystemDirectory.cxx:299,Availability,error,errors,299,"////////////////////////////////////////////////////////////////////////////////; /// Returns a TList of TSystemFile objects representing the contents; /// of the directory. It's the responsibility of the user to delete; /// the list (the list owns the contained objects).; /// Returns 0 in case of errors.",MatchSource.CODE_COMMENT,core/base/src/TSystemDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystemDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystemDirectory.cxx:115,Deployability,continuous,continuous,115,"// Collections to keep track of all browser objects that have been; // generated. It's main goal is to prevent the continuous; // allocations of new objects with the same names during browsing.",MatchSource.CODE_COMMENT,core/base/src/TSystemDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystemDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx:1448,Usability,resume,resumed,1448,"*****/; /** \class TTask; \ingroup Base. \legacy{TTask}. TTask is a base class that can be used to build a complex tree of Tasks.; Each TTask derived class may contain other TTasks that can be executed; recursively, such that a complex program can be dynamically built and executed; by invoking the services of the top level Task or one of its subtasks. Use the TTask::Add function to add a subtask to an existing TTask.; To execute a TTask, one calls the ExecuteTask function. ExecuteTask will; call recursively:. - the TTask::Exec function of the derived class; - TTask::ExecuteTasks to execute for each task the list of its subtasks. If the top level task (see example below) is added to the list of Root; browsable objects, the tree of tasks can be visualized by the Root browser.; The browser can be used to start a task, set break points at the beginning; of a task or when the task has completed. At a breakpoint, data structures; generated by the execution up this point may be inspected asynchronously; and then the execution can be resumed by selecting the ""Continue"" function; of a task.; //; A Task may be active or inactive (controlled by TTask::SetActive).; When a task is not active, its sub tasks are not executed.; //; A TTask tree may be made persistent, saving the status of all the tasks.; //; The Root browser's picture below has been generated by executing; the following script:; ~~~ {.cpp}; {; TTask *aliroot = new TTask(""aliroot"",""ALICE reconstruction main task"");; TTask *geominit = new TTask(""geomInit"",""Initialize ALICE geometry"");; TTask *matinit = new TTask(""matInit"",""Initialize ALICE materials"");; TTask *physinit = new TTask(""physInit"",""Initialize Physics processes"");; TTask *tracker = new TTask(""tracker"",""Track reconstruction manager"");; TTask *tpcrec = new TTask(""tpcrec"",""TPC reconstruction"");; TTask *itsrec = new TTask(""itsrec"",""ITS reconstruction"");; TTask *muonrec = new TTask(""muonRec"",""Muon Reconstruction"");; TTask *phosrec = new TTask(""phosRec"",""Phos Reco",MatchSource.CODE_COMMENT,core/base/src/TTask.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx:86,Safety,Abort,Abort,86,"////////////////////////////////////////////////////////////////////////////////; /// Abort current tree of tasks.; /// After this call, the tree of tasks is ready to be executed again.; /// The application must take care of cleaning data structures created; /// by previous executions.",MatchSource.CODE_COMMENT,core/base/src/TTask.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx:157,Usability,Clear,Clear,157,"////////////////////////////////////////////////////////////////////////////////; /// Reset tasks state: breakpoints and execute flags; /// also invokes the Clear function of each task to clear all data; /// structures created by a previous execution of a task.",MatchSource.CODE_COMMENT,core/base/src/TTask.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx:188,Usability,clear,clear,188,"////////////////////////////////////////////////////////////////////////////////; /// Reset tasks state: breakpoints and execute flags; /// also invokes the Clear function of each task to clear all data; /// structures created by a previous execution of a task.",MatchSource.CODE_COMMENT,core/base/src/TTask.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx:107,Usability,Clear,Clear,107,"////////////////////////////////////////////////////////////////////////////////; /// Recursively call the Clear function of this task and its subtasks.; /// The Clear function must be implemented for each derived class; /// to clear all data structures created by a previous execution of a task.; /// This function is automatically called by the CleanTasks function.",MatchSource.CODE_COMMENT,core/base/src/TTask.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx:162,Usability,Clear,Clear,162,"////////////////////////////////////////////////////////////////////////////////; /// Recursively call the Clear function of this task and its subtasks.; /// The Clear function must be implemented for each derived class; /// to clear all data structures created by a previous execution of a task.; /// This function is automatically called by the CleanTasks function.",MatchSource.CODE_COMMENT,core/base/src/TTask.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx:228,Usability,clear,clear,228,"////////////////////////////////////////////////////////////////////////////////; /// Recursively call the Clear function of this task and its subtasks.; /// The Clear function must be implemented for each derived class; /// to clear all data structures created by a previous execution of a task.; /// This function is automatically called by the CleanTasks function.",MatchSource.CODE_COMMENT,core/base/src/TTask.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx:86,Usability,Resume,Resume,86,"////////////////////////////////////////////////////////////////////////////////; /// Resume execution at the current break point.",MatchSource.CODE_COMMENT,core/base/src/TTask.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:1084,Safety,Timeout,Timeout,1084,"// @(#)root/base:$Id$; // Author: Fons Rademakers 28/11/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TTimer; \ingroup Base. Handles synchronous and a-synchronous timer events.; 1. synchronous timer is registered into TSystem and is processed; within the standard ROOT event-loop.; 2. asynchronous timer is passed to the operating system which sends; an external signal to ROOT and thus interrupts its event-loop. You can use this class in one of the following ways:; - Sub-class TTimer and override the Notify() method.; - Re-implement the TObject::HandleTimer() method in your class; and pass a pointer to this object to timer, see the SetObject(); method.; - Pass an interpreter command to timer, see SetCommand() method.; - Create a TTimer, connect its Timeout() signal to the; appropriate methods. Then when the time is up it will emit a; Timeout() signal and call connected slots. Minimum timeout interval is defined in TSystem::ESysConstants as; `kItimerResolution` (currently 10 ms). Signal/slots example:; ~~~{.cpp}; TTimer *timer = new TTimer();; timer->Connect(""Timeout()"", ""myObjectClassName"",; myObject, ""TimerDone()"");; timer->Start(2000, kTRUE); // 2 seconds single-shot; ~~~; To emit the Timeout signal repeatedly with minimum timeout:; ~~~ {.cpp}; timer->Start(0, kFALSE);; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:1171,Safety,Timeout,Timeout,1171,"// @(#)root/base:$Id$; // Author: Fons Rademakers 28/11/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TTimer; \ingroup Base. Handles synchronous and a-synchronous timer events.; 1. synchronous timer is registered into TSystem and is processed; within the standard ROOT event-loop.; 2. asynchronous timer is passed to the operating system which sends; an external signal to ROOT and thus interrupts its event-loop. You can use this class in one of the following ways:; - Sub-class TTimer and override the Notify() method.; - Re-implement the TObject::HandleTimer() method in your class; and pass a pointer to this object to timer, see the SetObject(); method.; - Pass an interpreter command to timer, see SetCommand() method.; - Create a TTimer, connect its Timeout() signal to the; appropriate methods. Then when the time is up it will emit a; Timeout() signal and call connected slots. Minimum timeout interval is defined in TSystem::ESysConstants as; `kItimerResolution` (currently 10 ms). Signal/slots example:; ~~~{.cpp}; TTimer *timer = new TTimer();; timer->Connect(""Timeout()"", ""myObjectClassName"",; myObject, ""TimerDone()"");; timer->Start(2000, kTRUE); // 2 seconds single-shot; ~~~; To emit the Timeout signal repeatedly with minimum timeout:; ~~~ {.cpp}; timer->Start(0, kFALSE);; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:1222,Safety,timeout,timeout,1222,"// @(#)root/base:$Id$; // Author: Fons Rademakers 28/11/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TTimer; \ingroup Base. Handles synchronous and a-synchronous timer events.; 1. synchronous timer is registered into TSystem and is processed; within the standard ROOT event-loop.; 2. asynchronous timer is passed to the operating system which sends; an external signal to ROOT and thus interrupts its event-loop. You can use this class in one of the following ways:; - Sub-class TTimer and override the Notify() method.; - Re-implement the TObject::HandleTimer() method in your class; and pass a pointer to this object to timer, see the SetObject(); method.; - Pass an interpreter command to timer, see SetCommand() method.; - Create a TTimer, connect its Timeout() signal to the; appropriate methods. Then when the time is up it will emit a; Timeout() signal and call connected slots. Minimum timeout interval is defined in TSystem::ESysConstants as; `kItimerResolution` (currently 10 ms). Signal/slots example:; ~~~{.cpp}; TTimer *timer = new TTimer();; timer->Connect(""Timeout()"", ""myObjectClassName"",; myObject, ""TimerDone()"");; timer->Start(2000, kTRUE); // 2 seconds single-shot; ~~~; To emit the Timeout signal repeatedly with minimum timeout:; ~~~ {.cpp}; timer->Start(0, kFALSE);; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:1400,Safety,Timeout,Timeout,1400,"// @(#)root/base:$Id$; // Author: Fons Rademakers 28/11/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TTimer; \ingroup Base. Handles synchronous and a-synchronous timer events.; 1. synchronous timer is registered into TSystem and is processed; within the standard ROOT event-loop.; 2. asynchronous timer is passed to the operating system which sends; an external signal to ROOT and thus interrupts its event-loop. You can use this class in one of the following ways:; - Sub-class TTimer and override the Notify() method.; - Re-implement the TObject::HandleTimer() method in your class; and pass a pointer to this object to timer, see the SetObject(); method.; - Pass an interpreter command to timer, see SetCommand() method.; - Create a TTimer, connect its Timeout() signal to the; appropriate methods. Then when the time is up it will emit a; Timeout() signal and call connected slots. Minimum timeout interval is defined in TSystem::ESysConstants as; `kItimerResolution` (currently 10 ms). Signal/slots example:; ~~~{.cpp}; TTimer *timer = new TTimer();; timer->Connect(""Timeout()"", ""myObjectClassName"",; myObject, ""TimerDone()"");; timer->Start(2000, kTRUE); // 2 seconds single-shot; ~~~; To emit the Timeout signal repeatedly with minimum timeout:; ~~~ {.cpp}; timer->Start(0, kFALSE);; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:1531,Safety,Timeout,Timeout,1531,"// @(#)root/base:$Id$; // Author: Fons Rademakers 28/11/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TTimer; \ingroup Base. Handles synchronous and a-synchronous timer events.; 1. synchronous timer is registered into TSystem and is processed; within the standard ROOT event-loop.; 2. asynchronous timer is passed to the operating system which sends; an external signal to ROOT and thus interrupts its event-loop. You can use this class in one of the following ways:; - Sub-class TTimer and override the Notify() method.; - Re-implement the TObject::HandleTimer() method in your class; and pass a pointer to this object to timer, see the SetObject(); method.; - Pass an interpreter command to timer, see SetCommand() method.; - Create a TTimer, connect its Timeout() signal to the; appropriate methods. Then when the time is up it will emit a; Timeout() signal and call connected slots. Minimum timeout interval is defined in TSystem::ESysConstants as; `kItimerResolution` (currently 10 ms). Signal/slots example:; ~~~{.cpp}; TTimer *timer = new TTimer();; timer->Connect(""Timeout()"", ""myObjectClassName"",; myObject, ""TimerDone()"");; timer->Start(2000, kTRUE); // 2 seconds single-shot; ~~~; To emit the Timeout signal repeatedly with minimum timeout:; ~~~ {.cpp}; timer->Start(0, kFALSE);; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:1570,Safety,timeout,timeout,1570,"// @(#)root/base:$Id$; // Author: Fons Rademakers 28/11/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TTimer; \ingroup Base. Handles synchronous and a-synchronous timer events.; 1. synchronous timer is registered into TSystem and is processed; within the standard ROOT event-loop.; 2. asynchronous timer is passed to the operating system which sends; an external signal to ROOT and thus interrupts its event-loop. You can use this class in one of the following ways:; - Sub-class TTimer and override the Notify() method.; - Re-implement the TObject::HandleTimer() method in your class; and pass a pointer to this object to timer, see the SetObject(); method.; - Pass an interpreter command to timer, see SetCommand() method.; - Create a TTimer, connect its Timeout() signal to the; appropriate methods. Then when the time is up it will emit a; Timeout() signal and call connected slots. Minimum timeout interval is defined in TSystem::ESysConstants as; `kItimerResolution` (currently 10 ms). Signal/slots example:; ~~~{.cpp}; TTimer *timer = new TTimer();; timer->Connect(""Timeout()"", ""myObjectClassName"",; myObject, ""TimerDone()"");; timer->Start(2000, kTRUE); // 2 seconds single-shot; ~~~; To emit the Timeout signal repeatedly with minimum timeout:; ~~~ {.cpp}; timer->Start(0, kFALSE);; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:165,Safety,timeout,timeout,165,"////////////////////////////////////////////////////////////////////////////////; /// Create timer that times out in ms milliseconds. If milliSec is 0; /// then the timeout will be the minimum timeout (see TSystem::ESysConstants,; /// i.e. 10 ms). If mode == kTRUE then the timer is synchronous else; /// a-synchronous. The default is synchronous. Add a timer to the system; /// eventloop by calling TurnOn(). Set command to be executed from Notify(); /// or set the object whose HandleTimer() method will be called via Notify(),; /// derive from TTimer and override Notify() or connect slots to the; /// signals Timeout(), TurnOn() and TurnOff().",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:193,Safety,timeout,timeout,193,"////////////////////////////////////////////////////////////////////////////////; /// Create timer that times out in ms milliseconds. If milliSec is 0; /// then the timeout will be the minimum timeout (see TSystem::ESysConstants,; /// i.e. 10 ms). If mode == kTRUE then the timer is synchronous else; /// a-synchronous. The default is synchronous. Add a timer to the system; /// eventloop by calling TurnOn(). Set command to be executed from Notify(); /// or set the object whose HandleTimer() method will be called via Notify(),; /// derive from TTimer and override Notify() or connect slots to the; /// signals Timeout(), TurnOn() and TurnOff().",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:613,Safety,Timeout,Timeout,613,"////////////////////////////////////////////////////////////////////////////////; /// Create timer that times out in ms milliseconds. If milliSec is 0; /// then the timeout will be the minimum timeout (see TSystem::ESysConstants,; /// i.e. 10 ms). If mode == kTRUE then the timer is synchronous else; /// a-synchronous. The default is synchronous. Add a timer to the system; /// eventloop by calling TurnOn(). Set command to be executed from Notify(); /// or set the object whose HandleTimer() method will be called via Notify(),; /// derive from TTimer and override Notify() or connect slots to the; /// signals Timeout(), TurnOn() and TurnOff().",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:8,Safety,Timeout,Timeout,8,"// emit Timeout() signal",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:299,Safety,timeout,timeout,299,"////////////////////////////////////////////////////////////////////////////////; /// When the argument is true the a-synchronous timer (SIGALRM) signal; /// handler is set so that interrupted syscalls will not be restarted; /// by the kernel. This is typically used in case one wants to put a; /// timeout on an I/O operation. By default interrupted syscalls will; /// be restarted.",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:119,Safety,timeout,timeout,119,"////////////////////////////////////////////////////////////////////////////////; /// Starts the timer with a milliSec timeout. If milliSec is 0; /// then the timeout will be the minimum timeout (see TSystem::ESysConstants,; /// i.e. 10 ms), if milliSec is -1 then the time interval as previously; /// specified (in ctor or SetTime()) will be used.; /// If singleShot is kTRUE, the timer will be activated only once,; /// otherwise it will continue until it is stopped.; /// See also TurnOn(), Stop(), TurnOff().",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:159,Safety,timeout,timeout,159,"////////////////////////////////////////////////////////////////////////////////; /// Starts the timer with a milliSec timeout. If milliSec is 0; /// then the timeout will be the minimum timeout (see TSystem::ESysConstants,; /// i.e. 10 ms), if milliSec is -1 then the time interval as previously; /// specified (in ctor or SetTime()) will be used.; /// If singleShot is kTRUE, the timer will be activated only once,; /// otherwise it will continue until it is stopped.; /// See also TurnOn(), Stop(), TurnOff().",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:187,Safety,timeout,timeout,187,"////////////////////////////////////////////////////////////////////////////////; /// Starts the timer with a milliSec timeout. If milliSec is 0; /// then the timeout will be the minimum timeout (see TSystem::ESysConstants,; /// i.e. 10 ms), if milliSec is -1 then the time interval as previously; /// specified (in ctor or SetTime()) will be used.; /// If singleShot is kTRUE, the timer will be activated only once,; /// otherwise it will continue until it is stopped.; /// See also TurnOn(), Stop(), TurnOff().",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:105,Safety,Timeout,Timeout,105,"// single shot timer cleaner; // gSingleShotCleaner will delete singleShotTimer a; // short period after Timeout() signal is emitted",MatchSource.CODE_COMMENT,core/base/src/TTimer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:513,Modifiability,extend,extends,513,"// @(#)root/base:$Id$; // Author: R. Hatcher 30/9/2001; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TTimeStamp; \ingroup Base. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; ~~~ {.cpp}; struct timespec; {; time_t tv_sec; // seconds; long tv_nsec; // nanoseconds; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC; ~~~; No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; `Jan 18, 19:14:07, 2038`.; If this experiment is still going when it becomes significant; someone will have to deal with it.; */",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:918,Usability,simpl,simply,918,"// @(#)root/base:$Id$; // Author: R. Hatcher 30/9/2001; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TTimeStamp; \ingroup Base. The TTimeStamp encapsulates seconds and ns since EPOCH. This extends (and isolates) struct timespec; ~~~ {.cpp}; struct timespec; {; time_t tv_sec; // seconds; long tv_nsec; // nanoseconds; }; time_t seconds is relative to Jan 1, 1970 00:00:00 UTC; ~~~; No accounting of leap seconds is made. Due to ROOT/CINT limitations TTimeStamp does not explicitly; hold a timespec struct; attempting to do so means the Streamer; must be hand written. Instead we have chosen to simply contain; similar fields within the private area of this class. NOTE: the use of time_t (and its default implementation as a 32 int); implies overflow conditions occurs somewhere around; `Jan 18, 19:14:07, 2038`.; If this experiment is still going when it becomes significant; someone will have to deal with it.; */",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:235,Usability,simpl,simply,235,"////////////////////////////////////////////////////////////////////////////////; /// Default ctor. Create a TTimeStamp and set it to the current time; /// (as best possible). The nanosecond part is faked so that subsequent; /// calls simply add 1 to ensure that sequential calls are distinct; /// (and sortable).",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:453,Availability,error,error,453,"////////////////////////////////////////////////////////////////////////////////; /// Return Greenwich mean sidereal time (GMST) in hour-angle. Return value; /// will always be between 0 and 24 (hours). Sidereal time is most accurately; /// calculated from UT1. If fSec and fNanoSec are in UTC (which they are by; /// default), the optional argument UT1Offset can be supplied (in; /// milliseconds). If UT1Offset is not supplied, conversion has maximum error; /// of 1s. If offset is supplied error can be reduced to us level. Values for; /// UT1Offset can be found in IERS Bulletin B:; /// ftp://ftp.iers.org/products/eop/bulletinb/format_2009/; /// The conversion to sidereal time used here is given by; /// Aoki et. al. Astron. Astrophys. 105, 359-362 (1982); /// http://adsabs.harvard.edu/abs/1982A%26A...105..359A",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:493,Availability,error,error,493,"////////////////////////////////////////////////////////////////////////////////; /// Return Greenwich mean sidereal time (GMST) in hour-angle. Return value; /// will always be between 0 and 24 (hours). Sidereal time is most accurately; /// calculated from UT1. If fSec and fNanoSec are in UTC (which they are by; /// default), the optional argument UT1Offset can be supplied (in; /// milliseconds). If UT1Offset is not supplied, conversion has maximum error; /// of 1s. If offset is supplied error can be reduced to us level. Values for; /// UT1Offset can be found in IERS Bulletin B:; /// ftp://ftp.iers.org/products/eop/bulletinb/format_2009/; /// The conversion to sidereal time used here is given by; /// Aoki et. al. Astron. Astrophys. 105, 359-362 (1982); /// http://adsabs.harvard.edu/abs/1982A%26A...105..359A",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:93,Energy Efficiency,Green,Greenwich,93,"////////////////////////////////////////////////////////////////////////////////; /// Return Greenwich mean sidereal time (GMST) in hour-angle. Return value; /// will always be between 0 and 24 (hours). Sidereal time is most accurately; /// calculated from UT1. If fSec and fNanoSec are in UTC (which they are by; /// default), the optional argument UT1Offset can be supplied (in; /// milliseconds). If UT1Offset is not supplied, conversion has maximum error; /// of 1s. If offset is supplied error can be reduced to us level. Values for; /// UT1Offset can be found in IERS Bulletin B:; /// ftp://ftp.iers.org/products/eop/bulletinb/format_2009/; /// The conversion to sidereal time used here is given by; /// Aoki et. al. Astron. Astrophys. 105, 359-362 (1982); /// http://adsabs.harvard.edu/abs/1982A%26A...105..359A",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:506,Energy Efficiency,reduce,reduced,506,"////////////////////////////////////////////////////////////////////////////////; /// Return Greenwich mean sidereal time (GMST) in hour-angle. Return value; /// will always be between 0 and 24 (hours). Sidereal time is most accurately; /// calculated from UT1. If fSec and fNanoSec are in UTC (which they are by; /// default), the optional argument UT1Offset can be supplied (in; /// milliseconds). If UT1Offset is not supplied, conversion has maximum error; /// of 1s. If offset is supplied error can be reduced to us level. Values for; /// UT1Offset can be found in IERS Bulletin B:; /// ftp://ftp.iers.org/products/eop/bulletinb/format_2009/; /// The conversion to sidereal time used here is given by; /// Aoki et. al. Astron. Astrophys. 105, 359-362 (1982); /// http://adsabs.harvard.edu/abs/1982A%26A...105..359A",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:457,Availability,error,error,457,"////////////////////////////////////////////////////////////////////////////////; /// Return Greenwich apparent sidereal time (GAST) in hour-angle. Return; /// value will always be between 0 and 24 (hours). Sidereal time is most; /// accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; /// they are by default), the optional argument UT1Offset can be supplied (in; /// milliseconds). If UT1Offset is not supplied, conversion has maximum error; /// of 1s. If offset is supplied error can be reduced to us level. Values for; /// UT1Offset can be found in IERS Bulletin B:; /// ftp://ftp.iers.org/products/eop/bulletinb/format_2009/; /// Equation of the equinoxes is given by USNO:; /// http://aa.usno.navy.mil/faq/docs/GAST.php",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:497,Availability,error,error,497,"////////////////////////////////////////////////////////////////////////////////; /// Return Greenwich apparent sidereal time (GAST) in hour-angle. Return; /// value will always be between 0 and 24 (hours). Sidereal time is most; /// accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; /// they are by default), the optional argument UT1Offset can be supplied (in; /// milliseconds). If UT1Offset is not supplied, conversion has maximum error; /// of 1s. If offset is supplied error can be reduced to us level. Values for; /// UT1Offset can be found in IERS Bulletin B:; /// ftp://ftp.iers.org/products/eop/bulletinb/format_2009/; /// Equation of the equinoxes is given by USNO:; /// http://aa.usno.navy.mil/faq/docs/GAST.php",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:93,Energy Efficiency,Green,Greenwich,93,"////////////////////////////////////////////////////////////////////////////////; /// Return Greenwich apparent sidereal time (GAST) in hour-angle. Return; /// value will always be between 0 and 24 (hours). Sidereal time is most; /// accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; /// they are by default), the optional argument UT1Offset can be supplied (in; /// milliseconds). If UT1Offset is not supplied, conversion has maximum error; /// of 1s. If offset is supplied error can be reduced to us level. Values for; /// UT1Offset can be found in IERS Bulletin B:; /// ftp://ftp.iers.org/products/eop/bulletinb/format_2009/; /// Equation of the equinoxes is given by USNO:; /// http://aa.usno.navy.mil/faq/docs/GAST.php",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:510,Energy Efficiency,reduce,reduced,510,"////////////////////////////////////////////////////////////////////////////////; /// Return Greenwich apparent sidereal time (GAST) in hour-angle. Return; /// value will always be between 0 and 24 (hours). Sidereal time is most; /// accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; /// they are by default), the optional argument UT1Offset can be supplied (in; /// milliseconds). If UT1Offset is not supplied, conversion has maximum error; /// of 1s. If offset is supplied error can be reduced to us level. Values for; /// UT1Offset can be found in IERS Bulletin B:; /// ftp://ftp.iers.org/products/eop/bulletinb/format_2009/; /// Equation of the equinoxes is given by USNO:; /// http://aa.usno.navy.mil/faq/docs/GAST.php",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:484,Availability,error,error,484,"////////////////////////////////////////////////////////////////////////////////; /// Return local mean sidereal time (LMST) in hour-angle, given a longitude; /// in degrees. Return value will always be between 0 and 24 (hours).; /// Sidereal time is most accurately calculated from UT1. If fSec and; /// fNanoSec are in UTC (which they are by default), the optional argument; /// UT1Offset can be supplied (in milliseconds). If UT1Offset is not; /// supplied, conversion has maximum error of 1s. If offset is supplied error; /// can be reduced to us level. Values for UT1Offset can be found in IERS; /// Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009/",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:519,Availability,error,error,519,"////////////////////////////////////////////////////////////////////////////////; /// Return local mean sidereal time (LMST) in hour-angle, given a longitude; /// in degrees. Return value will always be between 0 and 24 (hours).; /// Sidereal time is most accurately calculated from UT1. If fSec and; /// fNanoSec are in UTC (which they are by default), the optional argument; /// UT1Offset can be supplied (in milliseconds). If UT1Offset is not; /// supplied, conversion has maximum error of 1s. If offset is supplied error; /// can be reduced to us level. Values for UT1Offset can be found in IERS; /// Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009/",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:537,Energy Efficiency,reduce,reduced,537,"////////////////////////////////////////////////////////////////////////////////; /// Return local mean sidereal time (LMST) in hour-angle, given a longitude; /// in degrees. Return value will always be between 0 and 24 (hours).; /// Sidereal time is most accurately calculated from UT1. If fSec and; /// fNanoSec are in UTC (which they are by default), the optional argument; /// UT1Offset can be supplied (in milliseconds). If UT1Offset is not; /// supplied, conversion has maximum error of 1s. If offset is supplied error; /// can be reduced to us level. Values for UT1Offset can be found in IERS; /// Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009/",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:488,Availability,error,error,488,"////////////////////////////////////////////////////////////////////////////////; /// Return local apparent sidereal time (LAST) in hour-angle, given a; /// longitude in degrees. Return value will always be between 0 and 24; /// (hours). Sidereal time is most accurately calculated from UT1. If fSec; /// and fNanoSec are in UTC (which they are by default), the optional; /// argument UT1Offset can be supplied (in milliseconds). If UT1Offset is not; /// supplied, conversion has maximum error of 1s. If offset is supplied error; /// can be reduced to us level. Values for UT1Offset can be found in IERS; /// Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009/",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:523,Availability,error,error,523,"////////////////////////////////////////////////////////////////////////////////; /// Return local apparent sidereal time (LAST) in hour-angle, given a; /// longitude in degrees. Return value will always be between 0 and 24; /// (hours). Sidereal time is most accurately calculated from UT1. If fSec; /// and fNanoSec are in UTC (which they are by default), the optional; /// argument UT1Offset can be supplied (in milliseconds). If UT1Offset is not; /// supplied, conversion has maximum error of 1s. If offset is supplied error; /// can be reduced to us level. Values for UT1Offset can be found in IERS; /// Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009/",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:541,Energy Efficiency,reduce,reduced,541,"////////////////////////////////////////////////////////////////////////////////; /// Return local apparent sidereal time (LAST) in hour-angle, given a; /// longitude in degrees. Return value will always be between 0 and 24; /// (hours). Sidereal time is most accurately calculated from UT1. If fSec; /// and fNanoSec are in UTC (which they are by default), the optional; /// argument UT1Offset can be supplied (in milliseconds). If UT1Offset is not; /// supplied, conversion has maximum error of 1s. If offset is supplied error; /// can be reduced to us level. Values for UT1Offset can be found in IERS; /// Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009/",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:166,Energy Efficiency,allocate,allocated,166,"////////////////////////////////////////////////////////////////////////////////; /// Return the date & time as a string.; ///; /// Result is pointer to a statically allocated string.; /// User should copy this into their own buffer before calling; /// this method again.; ///; /// Option ""l"" returns it in local zone format; /// (can be applied to default or compact format).; ///; /// Default format is RFC822 compliant:; /// ~~~ {.cpp}; /// ""Mon, 02 Jan 2001 18:11:12 +0000 (GMT) +999999999 nsec""; /// ""Mon, 02 Jan 2001 10:11:12 -0800 (PST) +999999999 nsec""; /// ~~~; ///; /// Option ""c"" compact is (almost) ISO 8601 compliant:; /// - ""2001-01-02 18:11:12.9999999999Z""; /// - ""2001-01-02 10:11:12.9999999999-0800"" if PST; /// * uses ""-"" as date separator as specified in ISO 8601; /// * uses ""."" rather than preferred "","" for decimal separator; /// * -HHMM is the difference between local and UTC (if behind, + if ahead).; ///; /// The ""-HHMM"" is replaced with ""Z"" if given as UTC.; /// To be strictly conforming it should use ""T"" instead of the; /// blank separating the date and time.; ///; /// Option ""2"" returns as {sec,nsec} integers.; ///; /// Option ""s"" returns ""2001-01-02 18:11:12"" with an implied UTC,; /// overrides ""l"" option.; ///; /// Internally uses a circular list of buffers to avoid problems; /// using AsString multiple times in a single statement.",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:1298,Safety,avoid,avoid,1298,"////////////////////////////////////////////////////////////////////////////////; /// Return the date & time as a string.; ///; /// Result is pointer to a statically allocated string.; /// User should copy this into their own buffer before calling; /// this method again.; ///; /// Option ""l"" returns it in local zone format; /// (can be applied to default or compact format).; ///; /// Default format is RFC822 compliant:; /// ~~~ {.cpp}; /// ""Mon, 02 Jan 2001 18:11:12 +0000 (GMT) +999999999 nsec""; /// ""Mon, 02 Jan 2001 10:11:12 -0800 (PST) +999999999 nsec""; /// ~~~; ///; /// Option ""c"" compact is (almost) ISO 8601 compliant:; /// - ""2001-01-02 18:11:12.9999999999Z""; /// - ""2001-01-02 10:11:12.9999999999-0800"" if PST; /// * uses ""-"" as date separator as specified in ISO 8601; /// * uses ""."" rather than preferred "","" for decimal separator; /// * -HHMM is the difference between local and UTC (if behind, + if ahead).; ///; /// The ""-HHMM"" is replaced with ""Z"" if given as UTC.; /// To be strictly conforming it should use ""T"" instead of the; /// blank separating the date and time.; ///; /// Option ""2"" returns as {sec,nsec} integers.; ///; /// Option ""s"" returns ""2001-01-02 18:11:12"" with an implied UTC,; /// overrides ""l"" option.; ///; /// Internally uses a circular list of buffers to avoid problems; /// using AsString multiple times in a single statement.",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:247,Usability,simpl,simply,247,"////////////////////////////////////////////////////////////////////////////////; /// Set Date/Time to current time as reported by the system.; /// No accounting for nanoseconds with std ANSI functions,; /// ns part faked so that subsequent calls simply add 1 to it; /// this ensures that calls within the same second come back; /// distinct (and sortable). Time is since Jan 1, 1970.",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:80,Integrability,rout,routine,80,"// convert tm struct to time_t, if values are given in UTC then; // no standard routine exists and we'll have to use our homegrown routine,; // if values are given in local time then use ""mktime""; // which also normalizes the tm struct as a byproduct",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:131,Integrability,rout,routine,131,"// convert tm struct to time_t, if values are given in UTC then; // no standard routine exists and we'll have to use our homegrown routine,; // if values are given in local time then use ""mktime""; // which also normalizes the tm struct as a byproduct",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:80,Integrability,rout,routine,80,"// convert tm struct to time_t, if values are given in UTC then; // no standard routine exists and we'll have to use our homegrown routine,; // if values are given in local time then use ""mktime""; // which also normalizes the tm struct as a byproduct",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:131,Integrability,rout,routine,131,"// convert tm struct to time_t, if values are given in UTC then; // no standard routine exists and we'll have to use our homegrown routine,; // if values are given in local time then use ""mktime""; // which also normalizes the tm struct as a byproduct",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:109,Integrability,rout,routine,109,"////////////////////////////////////////////////////////////////////////////////; /// Equivalent of standard routine ""mktime"" but; /// using the assumption that tm struct is filled with UTC, not local, time.; ///; /// This version *ISN'T* configured to handle every possible; /// weirdness of out-of-range values in the case of normalizing; /// the tm struct.; ///; /// This version *DOESN'T* correctly handle values that can't be; /// fit into a time_t (i.e. beyond year 2038-01-18 19:14:07, or; /// before the start of Epoch).",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:239,Modifiability,config,configured,239,"////////////////////////////////////////////////////////////////////////////////; /// Equivalent of standard routine ""mktime"" but; /// using the assumption that tm struct is filled with UTC, not local, time.; ///; /// This version *ISN'T* configured to handle every possible; /// weirdness of out-of-range values in the case of normalizing; /// the tm struct.; ///; /// This version *DOESN'T* correctly handle values that can't be; /// fit into a time_t (i.e. beyond year 2038-01-18 19:14:07, or; /// before the start of Epoch).",MatchSource.CODE_COMMENT,core/base/src/TTimeStamp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:668,Security,validat,validating,668,"// @(#)root/base:$Id$; // Author: Gerhard E. Bruckner 15/07/07; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TUri; \ingroup Base. This class represents a RFC 3986 compatible URI.; \see https://doi.org/10.17487/RFC3986; It provides member functions to set and return the different; the different parts of an URI. The functionality is that of; a validating parser.; */",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:138,Integrability,rout,routine,138,"////////////////////////////////////////////////////////////////////////////////; /// This functions implements the ""remove_dot_segments"" routine; /// of chapter 5.2.4 ""for interpreting and removing the; /// special '.' and '..' complete path segments from a; /// referenced path"".",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:162,Usability,simpl,simply,162,"////////////////////////////////////////////////////////////////////////////////; /// Display function,; /// - option ""d"" .. debug output; /// - anything else .. simply print URI.",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:115,Modifiability,variab,variables,115,"////////////////////////////////////////////////////////////////////////////////; /// Parse URI and set the member variables accordingly,; /// returns kTRUE if URI validates, and kFALSE otherwise:; /// ~~~ {.cpp}; /// URI = scheme "":"" hier-part [ ""?"" query ] [ ""#"" fragment ]; /// hier-part = ""//"" authority path-abempty; /// / path-absolute; /// / path-rootless; /// / path-empty; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:164,Security,validat,validates,164,"////////////////////////////////////////////////////////////////////////////////; /// Parse URI and set the member variables accordingly,; /// returns kTRUE if URI validates, and kFALSE otherwise:; /// ~~~ {.cpp}; /// URI = scheme "":"" hier-part [ ""?"" query ] [ ""#"" fragment ]; /// hier-part = ""//"" authority path-abempty; /// / path-absolute; /// / path-rootless; /// / path-empty; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:16,Modifiability,variab,variables,16,"// Reset member variables",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:16,Modifiability,variab,variables,16,"// reset member variables once again, if one at least setter failed",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:52,Safety,avoid,avoid,52,"// use functionality of SetHierPart; // in order to avoid duplicate code",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:56,Safety,avoid,avoid,56,"// use functionality of SetRelativePart; // in order to avoid duplicate code",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:210,Availability,error,error,210,"////////////////////////////////////////////////////////////////////////////////; /// Percent-encode and return the given string according to RFC 3986; /// in principle, this function cannot fail or produce an error.",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:3,Safety,abort,abort,3,"// abort if out of bounds",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:3,Safety,abort,abort,3,"// abort if out of bounds",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:3,Safety,abort,abort,3,"// abort if out of bounds",MatchSource.CODE_COMMENT,core/base/src/TUri.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:312,Integrability,protocol,protocols,312,"////////////////////////////////////////////////////////////////////////////////; /// Parse url character string and split in its different subcomponents.; /// Use IsValid() to check if URL is legal.; /// ~~~ {.cpp}; /// url: [proto://][user[:passwd]@]host[:port]/file.ext[?options][#anchor]; /// ~~~; /// Known protocols: http, root, proof, ftp, news and any special protocols; /// defined in the rootrc Url.Special key.; /// The default protocol is ""http"", unless defaultIsFile is true in which; /// case the url is assumed to be of type ""file"".; /// If a passwd contains a @ it must be escaped by a \\, e.g.; /// ""pip@"" becomes ""pip\\@"".; ///; /// Default ports: http=80, root=1094, proof=1093, ftp=20, news=119.; /// Port #1093 has been assigned by IANA (www.iana.org) to proofd.; /// Port #1094 has been assigned by IANA (www.iana.org) to rootd.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:368,Integrability,protocol,protocols,368,"////////////////////////////////////////////////////////////////////////////////; /// Parse url character string and split in its different subcomponents.; /// Use IsValid() to check if URL is legal.; /// ~~~ {.cpp}; /// url: [proto://][user[:passwd]@]host[:port]/file.ext[?options][#anchor]; /// ~~~; /// Known protocols: http, root, proof, ftp, news and any special protocols; /// defined in the rootrc Url.Special key.; /// The default protocol is ""http"", unless defaultIsFile is true in which; /// case the url is assumed to be of type ""file"".; /// If a passwd contains a @ it must be escaped by a \\, e.g.; /// ""pip@"" becomes ""pip\\@"".; ///; /// Default ports: http=80, root=1094, proof=1093, ftp=20, news=119.; /// Port #1093 has been assigned by IANA (www.iana.org) to proofd.; /// Port #1094 has been assigned by IANA (www.iana.org) to rootd.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:439,Integrability,protocol,protocol,439,"////////////////////////////////////////////////////////////////////////////////; /// Parse url character string and split in its different subcomponents.; /// Use IsValid() to check if URL is legal.; /// ~~~ {.cpp}; /// url: [proto://][user[:passwd]@]host[:port]/file.ext[?options][#anchor]; /// ~~~; /// Known protocols: http, root, proof, ftp, news and any special protocols; /// defined in the rootrc Url.Special key.; /// The default protocol is ""http"", unless defaultIsFile is true in which; /// case the url is assumed to be of type ""file"".; /// If a passwd contains a @ it must be escaped by a \\, e.g.; /// ""pip@"" becomes ""pip\\@"".; ///; /// Default ports: http=80, root=1094, proof=1093, ftp=20, news=119.; /// Port #1093 has been assigned by IANA (www.iana.org) to proofd.; /// Port #1094 has been assigned by IANA (www.iana.org) to rootd.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:310,Integrability,protocol,protocols,310,"////////////////////////////////////////////////////////////////////////////////; /// Parse url character string and split in its different subcomponents.; /// Use IsValid() to check if URL is legal.; ///~~~ {.cpp}; /// url: [proto://][user[:passwd]@]host[:port]/file.ext[?options][#anchor]; ///~~~; /// Known protocols: http, root, proof, ftp, news and any special protocols; /// defined in the rootrc Url.Special key.; /// The default protocol is ""http"", unless defaultIsFile is true in which; /// case the url is assumed to be of type ""file"".; /// If a passwd contains a @ it must be escaped by a \\, e.g.; /// ""pip@"" becomes ""pip\\@"".; ///; /// Default ports: http=80, root=1094, proof=1093, ftp=20, news=119.; /// Port #1093 has been assigned by IANA (www.iana.org) to proofd.; /// Port #1094 has been assigned by IANA (www.iana.org) to rootd.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:366,Integrability,protocol,protocols,366,"////////////////////////////////////////////////////////////////////////////////; /// Parse url character string and split in its different subcomponents.; /// Use IsValid() to check if URL is legal.; ///~~~ {.cpp}; /// url: [proto://][user[:passwd]@]host[:port]/file.ext[?options][#anchor]; ///~~~; /// Known protocols: http, root, proof, ftp, news and any special protocols; /// defined in the rootrc Url.Special key.; /// The default protocol is ""http"", unless defaultIsFile is true in which; /// case the url is assumed to be of type ""file"".; /// If a passwd contains a @ it must be escaped by a \\, e.g.; /// ""pip@"" becomes ""pip\\@"".; ///; /// Default ports: http=80, root=1094, proof=1093, ftp=20, news=119.; /// Port #1093 has been assigned by IANA (www.iana.org) to proofd.; /// Port #1094 has been assigned by IANA (www.iana.org) to rootd.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:437,Integrability,protocol,protocol,437,"////////////////////////////////////////////////////////////////////////////////; /// Parse url character string and split in its different subcomponents.; /// Use IsValid() to check if URL is legal.; ///~~~ {.cpp}; /// url: [proto://][user[:passwd]@]host[:port]/file.ext[?options][#anchor]; ///~~~; /// Known protocols: http, root, proof, ftp, news and any special protocols; /// defined in the rootrc Url.Special key.; /// The default protocol is ""http"", unless defaultIsFile is true in which; /// case the url is assumed to be of type ""file"".; /// If a passwd contains a @ it must be escaped by a \\, e.g.; /// ""pip@"" becomes ""pip\\@"".; ///; /// Default ports: http=80, root=1094, proof=1093, ftp=20, news=119.; /// Port #1093 has been assigned by IANA (www.iana.org) to proofd.; /// Port #1094 has been assigned by IANA (www.iana.org) to rootd.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:8,Integrability,protocol,protocol,8,"// Find protocol",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:18,Integrability,protocol,protocol,18,"// Handle special protocol cases: ""file:"", etc.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:13,Integrability,protocol,protocol,13,"// case with protocol, like: file:/data/file.root",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:203,Integrability,protocol,protocol,203,"////////////////////////////////////////////////////////////////////////////////; /// Return full URL. If withDflt is kTRUE, explicitly add the port even; /// if it matches the default value for the URL protocol.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:18,Integrability,protocol,protocol,18,"// Handle special protocol cases: file:, etc.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:225,Security,authenticat,authentication,225,"////////////////////////////////////////////////////////////////////////////////; /// Return the file and its options (the string specified behind the ?).; /// Convenience function useful when the option is used to pass; /// authentication/access information for the specified file.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:240,Security,access,access,240,"////////////////////////////////////////////////////////////////////////////////; /// Return the file and its options (the string specified behind the ?).; /// Convenience function useful when the option is used to pass; /// authentication/access information for the specified file.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:90,Integrability,protocol,protocol,90,"////////////////////////////////////////////////////////////////////////////////; /// Set protocol and, optionally, change the port accordingly.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:11,Integrability,protocol,protocol,11,"// generic protocol (no default port)",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:111,Integrability,protocol,protocols,111,"////////////////////////////////////////////////////////////////////////////////; /// Read the list of special protocols from the rootrc files.; /// These protocols will be parsed in a protocol and a file part,; /// no host or other info will be determined. This is typically; /// used for legacy file descriptions like: file:/path/file.root.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:155,Integrability,protocol,protocols,155,"////////////////////////////////////////////////////////////////////////////////; /// Read the list of special protocols from the rootrc files.; /// These protocols will be parsed in a protocol and a file part,; /// no host or other info will be determined. This is typically; /// used for legacy file descriptions like: file:/path/file.root.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:185,Integrability,protocol,protocol,185,"////////////////////////////////////////////////////////////////////////////////; /// Read the list of special protocols from the rootrc files.; /// These protocols will be parsed in a protocol and a file part,; /// no host or other info will be determined. This is typically; /// used for legacy file descriptions like: file:/path/file.root.",MatchSource.CODE_COMMENT,core/base/src/TUrl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:1384,Integrability,Depend,Depending,1384,"s a UUID (Universally Unique IDentifier), also; known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits; long, and if generated according to this algorithm, is either; guaranteed to be different from all other UUIDs/GUIDs generated; until 3400 A.D. or extremely likely to be different. UUIDs were; originally used in the Network Computing System (NCS) and; later in the Open Software Foundation's (OSF) Distributed Computing; Environment (DCE). \note In the way this UUID is constructed, when used outside of; their original concept (NCS), they are actually not Globally unique; and indeed multiple distinct concurrent processes are actually likely; to generate the same UUID. Technically this is because the UUID is; constructed only from the node information and time information.; To make a globally unique number, this needs to be combined with; TProcessUUID. Structure of universal unique IDs (UUIDs). Depending on the network data representation, the multi-; octet unsigned integer fields are subject to byte swapping; when communicated between dissimilar endian machines.; ~~~ {.cpp}; +-----------------------------------+; | low 32 bits of time | 0-3 .fTimeLow; +-------------------------------+----; | mid 16 bits of time | 4-5 .fTimeMid; +-------+-----------------------+; | vers. | hi 12 bits of time | 6-7 .fTimeHiAndVersion; +-------+-------+---------------+; |Res | clkSeqHi | 8 .fClockSeqHiAndReserved; +---------------+; | clkSeqLow | 9 .fClockSeqLow; +---------------+------------------+; | node ID | 10-15 .fNode; +----------------------------------+; ~~~. The adjusted time stamp is split into three fields, and the; clockSeq is split into two fields. The timestamp is a 60-bit value. For UUID version 1, this; is represented by Coordinated Universal Time (UTC/GMT) as; a count of 100-nanosecond intervals since 00:00:00.00,; 15 October 1582 (the date of Gregorian reform to the; Christian calendar). The version number is multiplexed in the 4 most significant; bits of the",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:1085,Performance,concurren,concurrent,1085,"s Rademakers 30/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TUUID; \ingroup Base. This class defines a UUID (Universally Unique IDentifier), also; known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits; long, and if generated according to this algorithm, is either; guaranteed to be different from all other UUIDs/GUIDs generated; until 3400 A.D. or extremely likely to be different. UUIDs were; originally used in the Network Computing System (NCS) and; later in the Open Software Foundation's (OSF) Distributed Computing; Environment (DCE). \note In the way this UUID is constructed, when used outside of; their original concept (NCS), they are actually not Globally unique; and indeed multiple distinct concurrent processes are actually likely; to generate the same UUID. Technically this is because the UUID is; constructed only from the node information and time information.; To make a globally unique number, this needs to be combined with; TProcessUUID. Structure of universal unique IDs (UUIDs). Depending on the network data representation, the multi-; octet unsigned integer fields are subject to byte swapping; when communicated between dissimilar endian machines.; ~~~ {.cpp}; +-----------------------------------+; | low 32 bits of time | 0-3 .fTimeLow; +-------------------------------+----; | mid 16 bits of time | 4-5 .fTimeMid; +-------+-----------------------+; | vers. | hi 12 bits of time | 6-7 .fTimeHiAndVersion; +-------+-------+---------------+; |Res | clkSeqHi | 8 .fClockSeqHiAndReserved; +---------------+; | clkSeqLow | 9 .fClockSeqLow; +---------------+------------------+; | node ID | 10-15 .fNode; +---------------------------",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:4201,Performance,perform,performance,4201,"n number is multiplexed in the 4 most significant; bits of the 'fTimeHiAndVersion' field. There are two defined; versions:; ~~~ {.cpp}; MSB <---; Version 4-Bit Code Description; ------------------------------------------------------------; | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value; ------------------------------------------------------------; ~~~. ## Clock Sequence. The clock sequence value must be changed whenever:. The UUID generator detects that the local value of UTC; has gone backward; this may be due to re-syncing of the system; clock. While a node is operational, the UUID service always saves; the last UTC used to create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicated UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. ## Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. Therefore, the system must also maintain an; adjustment value to be added to the lower-order bits of the; time. Logically, each time the system clock ticks, the; adjustment value is cleared. Every time a UUID is generated,; the current adjustment value is read and incremented, and; then added to the UTC time field of the UUID. ## Clock Overrun. The 100-nanosecond granularity of time should prove sufficient; even for bursts of UUID production in the next generation of; high-performance multiprocessors. If a system overruns the; clock adjustment by requesting too many UUIDs within a single; system clock tick, the UUID generator will stall until the; system clock catches up.; */",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:2954,Safety,detect,detects,2954,"-15 .fNode; +----------------------------------+; ~~~. The adjusted time stamp is split into three fields, and the; clockSeq is split into two fields. The timestamp is a 60-bit value. For UUID version 1, this; is represented by Coordinated Universal Time (UTC/GMT) as; a count of 100-nanosecond intervals since 00:00:00.00,; 15 October 1582 (the date of Gregorian reform to the; Christian calendar). The version number is multiplexed in the 4 most significant; bits of the 'fTimeHiAndVersion' field. There are two defined; versions:; ~~~ {.cpp}; MSB <---; Version 4-Bit Code Description; ------------------------------------------------------------; | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value; ------------------------------------------------------------; ~~~. ## Clock Sequence. The clock sequence value must be changed whenever:. The UUID generator detects that the local value of UTC; has gone backward; this may be due to re-syncing of the system; clock. While a node is operational, the UUID service always saves; the last UTC used to create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicated UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. ## Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. Therefore, the system must also maintain an; adjustment value to be added to the lower-order bits of the; time. Logically, each time the system clock ticks, the; adjustment value is cleared. Every time a UUID is generated,; the current adjustment value is read and incremente",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:3370,Safety,avoid,avoiding,3370,"nosecond intervals since 00:00:00.00,; 15 October 1582 (the date of Gregorian reform to the; Christian calendar). The version number is multiplexed in the 4 most significant; bits of the 'fTimeHiAndVersion' field. There are two defined; versions:; ~~~ {.cpp}; MSB <---; Version 4-Bit Code Description; ------------------------------------------------------------; | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value; ------------------------------------------------------------; ~~~. ## Clock Sequence. The clock sequence value must be changed whenever:. The UUID generator detects that the local value of UTC; has gone backward; this may be due to re-syncing of the system; clock. While a node is operational, the UUID service always saves; the last UTC used to create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicated UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. ## Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. Therefore, the system must also maintain an; adjustment value to be added to the lower-order bits of the; time. Logically, each time the system clock ticks, the; adjustment value is cleared. Every time a UUID is generated,; the current adjustment value is read and incremented, and; then added to the UTC time field of the UUID. ## Clock Overrun. The 100-nanosecond granularity of time should prove sufficient; even for bursts of UUID production in the next generation of; high-performance multiprocessors. If a system overruns the; clock adjustment by requesti",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:2710,Security,Secur,Security,2710," +-------+-----------------------+; | vers. | hi 12 bits of time | 6-7 .fTimeHiAndVersion; +-------+-------+---------------+; |Res | clkSeqHi | 8 .fClockSeqHiAndReserved; +---------------+; | clkSeqLow | 9 .fClockSeqLow; +---------------+------------------+; | node ID | 10-15 .fNode; +----------------------------------+; ~~~. The adjusted time stamp is split into three fields, and the; clockSeq is split into two fields. The timestamp is a 60-bit value. For UUID version 1, this; is represented by Coordinated Universal Time (UTC/GMT) as; a count of 100-nanosecond intervals since 00:00:00.00,; 15 October 1582 (the date of Gregorian reform to the; Christian calendar). The version number is multiplexed in the 4 most significant; bits of the 'fTimeHiAndVersion' field. There are two defined; versions:; ~~~ {.cpp}; MSB <---; Version 4-Bit Code Description; ------------------------------------------------------------; | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value; ------------------------------------------------------------; ~~~. ## Clock Sequence. The clock sequence value must be changed whenever:. The UUID generator detects that the local value of UTC; has gone backward; this may be due to re-syncing of the system; clock. While a node is operational, the UUID service always saves; the last UTC used to create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicated UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. ## Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. T",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:3835,Testability,Log,Logically,3835,"n number is multiplexed in the 4 most significant; bits of the 'fTimeHiAndVersion' field. There are two defined; versions:; ~~~ {.cpp}; MSB <---; Version 4-Bit Code Description; ------------------------------------------------------------; | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value; ------------------------------------------------------------; ~~~. ## Clock Sequence. The clock sequence value must be changed whenever:. The UUID generator detects that the local value of UTC; has gone backward; this may be due to re-syncing of the system; clock. While a node is operational, the UUID service always saves; the last UTC used to create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicated UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. ## Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. Therefore, the system must also maintain an; adjustment value to be added to the lower-order bits of the; time. Logically, each time the system clock ticks, the; adjustment value is cleared. Every time a UUID is generated,; the current adjustment value is read and incremented, and; then added to the UTC time field of the UUID. ## Clock Overrun. The 100-nanosecond granularity of time should prove sufficient; even for bursts of UUID production in the next generation of; high-performance multiprocessors. If a system overruns the; clock adjustment by requesting too many UUIDs within a single; system clock tick, the UUID generator will stall until the; system clock catches up.; */",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:526,Usability,GUID,GUIDs,526,"// @(#)root/base:$Id$; // Author: Fons Rademakers 30/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TUUID; \ingroup Base. This class defines a UUID (Universally Unique IDentifier), also; known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits; long, and if generated according to this algorithm, is either; guaranteed to be different from all other UUIDs/GUIDs generated; until 3400 A.D. or extremely likely to be different. UUIDs were; originally used in the Network Computing System (NCS) and; later in the Open Software Foundation's (OSF) Distributed Computing; Environment (DCE). \note In the way this UUID is constructed, when used outside of; their original concept (NCS), they are actually not Globally unique; and indeed multiple distinct concurrent processes are actually likely; to generate the same UUID. Technically this is because the UUID is; constructed only from the node information and time information.; To make a globally unique number, this needs to be combined with; TProcessUUID. Structure of universal unique IDs (UUIDs). Depending on the network data representation, the multi-; octet unsigned integer fields are subject to byte swapping; when communicated between dissimilar endian machines.; ~~~ {.cpp}; +-----------------------------------+; | low 32 bits of time | 0-3 .fTimeLow; +-------------------------------+----; | mid 16 bits of time | 4-5 .fTimeMid; +-------+-----------------------+; | vers. | hi 12 bits of time | 6-7 .fTimeHiAndVersion; +-------+-------+---------------+; |Res | clkSeqHi | 8 .fClockSeqHiAndReserved; +---------------+; | clkSeqLow | 9 .fClockSeqLow; +---------------+------------------+; | node ID | 10-15 ",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:693,Usability,GUID,GUIDs,693,"// @(#)root/base:$Id$; // Author: Fons Rademakers 30/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TUUID; \ingroup Base. This class defines a UUID (Universally Unique IDentifier), also; known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits; long, and if generated according to this algorithm, is either; guaranteed to be different from all other UUIDs/GUIDs generated; until 3400 A.D. or extremely likely to be different. UUIDs were; originally used in the Network Computing System (NCS) and; later in the Open Software Foundation's (OSF) Distributed Computing; Environment (DCE). \note In the way this UUID is constructed, when used outside of; their original concept (NCS), they are actually not Globally unique; and indeed multiple distinct concurrent processes are actually likely; to generate the same UUID. Technically this is because the UUID is; constructed only from the node information and time information.; To make a globally unique number, this needs to be combined with; TProcessUUID. Structure of universal unique IDs (UUIDs). Depending on the network data representation, the multi-; octet unsigned integer fields are subject to byte swapping; when communicated between dissimilar endian machines.; ~~~ {.cpp}; +-----------------------------------+; | low 32 bits of time | 0-3 .fTimeLow; +-------------------------------+----; | mid 16 bits of time | 4-5 .fTimeMid; +-------+-----------------------+; | vers. | hi 12 bits of time | 6-7 .fTimeHiAndVersion; +-------+-------+---------------+; |Res | clkSeqHi | 8 .fClockSeqHiAndReserved; +---------------+; | clkSeqLow | 9 .fClockSeqLow; +---------------+------------------+; | node ID | 10-15 ",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:3905,Usability,clear,cleared,3905,"n number is multiplexed in the 4 most significant; bits of the 'fTimeHiAndVersion' field. There are two defined; versions:; ~~~ {.cpp}; MSB <---; Version 4-Bit Code Description; ------------------------------------------------------------; | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value; ------------------------------------------------------------; ~~~. ## Clock Sequence. The clock sequence value must be changed whenever:. The UUID generator detects that the local value of UTC; has gone backward; this may be due to re-syncing of the system; clock. While a node is operational, the UUID service always saves; the last UTC used to create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicated UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. ## Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. Therefore, the system must also maintain an; adjustment value to be added to the lower-order bits of the; time. Logically, each time the system clock ticks, the; adjustment value is cleared. Every time a UUID is generated,; the current adjustment value is read and incremented, and; then added to the UTC time field of the UUID. ## Clock Overrun. The 100-nanosecond granularity of time should prove sufficient; even for bursts of UUID production in the next generation of; high-performance multiprocessors. If a system overruns the; clock adjustment by requesting too many UUIDs within a single; system clock tick, the UUID generator will stall until the; system clock catches up.; */",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:34,Safety,safe,safe,34,"// rand and random are not thread safe.",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:160,Integrability,interface,interface,160,"////////////////////////////////////////////////////////////////////////////////; /// Get node identifier. Try first to get network address, if no; /// network interface try random info based on some machine parameters.",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:135,Security,firewall,firewall,135,"// this way to get the machine's IP address is needed because; // GetHostByName() on Win32 contacts the DNS which we don't want; // as firewall tools like ZoneAlarm are likely to catch it and; // alarm the user",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:25,Energy Efficiency,adapt,adapter,25,"// take address of first adapter",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:25,Integrability,adapter,adapter,25,"// take address of first adapter",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:25,Modifiability,adapt,adapter,25,"// take address of first adapter",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:19,Performance,perform,performance,19,"// high resolution performance counter",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:101,Security,hash,hash,101,"////////////////////////////////////////////////////////////////////////////////; /// Compute 16-bit hash value of the UUID.",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:48,Security,hash,hash,48,"// Calculate the value for ""First octet"" of the hash",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:49,Security,hash,hash,49,"// Calculate the value for ""second octet"" of the hash",MatchSource.CODE_COMMENT,core/base/src/TUUID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:819,Availability,Avail,Available,819,"**********************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualFFT; \ingroup Base. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. ## Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. ## Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available. - DCT-I (REDFT00 in FFTW3 notation)- kind=0; - DCT-II (REDFT01 in FFTW3 notation)- kind=1; - DCT-III(REDFT10 in FFTW3 notation)- kind=2; - DCT-IV (REDFT11 in FFTW3 notation)- kind=3; - DST-I (RODFT00 in FFTW3 notation)- kind=4; - DST-II (RODFT01 in FFTW3 notation)- kind=5; - DST-III(RODFT10 in FFT",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:1273,Availability,redundant,redundant,1273,"**********************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualFFT; \ingroup Base. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. ## Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. ## Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available. - DCT-I (REDFT00 in FFTW3 notation)- kind=0; - DCT-II (REDFT01 in FFTW3 notation)- kind=1; - DCT-III(REDFT10 in FFTW3 notation)- kind=2; - DCT-IV (REDFT11 in FFTW3 notation)- kind=3; - DST-I (RODFT00 in FFTW3 notation)- kind=4; - DST-II (RODFT01 in FFTW3 notation)- kind=5; - DST-III(RODFT10 in FFT",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:1802,Availability,avail,available,1802,"lows to change the default library. ## Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. ## Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available. - DCT-I (REDFT00 in FFTW3 notation)- kind=0; - DCT-II (REDFT01 in FFTW3 notation)- kind=1; - DCT-III(REDFT10 in FFTW3 notation)- kind=2; - DCT-IV (REDFT11 in FFTW3 notation)- kind=3; - DST-I (RODFT00 in FFTW3 notation)- kind=4; - DST-II (RODFT01 in FFTW3 notation)- kind=5; - DST-III(RODFT10 in FFTW3 notation)- kind=6; - DST-IV (RODFT11 in FFTW3 notation)- kind=7. Formulas and detailed descriptions can be found in the chapter; ""What FFTW really computes"" of the FFTW manual. NOTE: FFTW computes unnormalized transforms, so doing a transform, followed by its; inverse will give the original array, multiplied by normalization constant; (transform size(N) for FFT, 2*(N-1) for DCT-I, 2*(N+1) for DST-I, 2*N for; other sine/cosine transforms). ## How to use it:; Call to the static function FFT returns a pointer to a fast Fourier transform; with requested parameters. Call to the static function SineCosine returns a; pointer to a sine or cosine transform with reques",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:596,Deployability,install,installed,596,"// @(#)root/base:$Id$; // Author: Anna Kreshuk 10/04/2006; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualFFT; \ingroup Base. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. ## Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. ## Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available. - DCT-I (REDFT00 in FFTW3 notation)- kind=0; - DCT-II (REDFT01 in FFTW3 notation)- kind=1; - DCT-III(REDFT10 in FFTW3 notation)- kind=2; - DCT-IV (REDFT11 in FFTW3 notation)- kind=3; - DST",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:724,Deployability,install,installation,724,"// @(#)root/base:$Id$; // Author: Anna Kreshuk 10/04/2006; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualFFT; \ingroup Base. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. ## Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. ## Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available. - DCT-I (REDFT00 in FFTW3 notation)- kind=0; - DCT-II (REDFT01 in FFTW3 notation)- kind=1; - DCT-III(REDFT10 in FFTW3 notation)- kind=2; - DCT-IV (REDFT11 in FFTW3 notation)- kind=3; - DST",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:474,Integrability,interface,interface,474,"// @(#)root/base:$Id$; // Author: Anna Kreshuk 10/04/2006; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualFFT; \ingroup Base. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. ## Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. ## Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available. - DCT-I (REDFT00 in FFTW3 notation)- kind=0; - DCT-II (REDFT01 in FFTW3 notation)- kind=1; - DCT-III(REDFT10 in FFTW3 notation)- kind=2; - DCT-IV (REDFT11 in FFTW3 notation)- kind=3; - DST",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:1273,Safety,redund,redundant,1273,"**********************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualFFT; \ingroup Base. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. ## Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. ## Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available. - DCT-I (REDFT00 in FFTW3 notation)- kind=0; - DCT-II (REDFT01 in FFTW3 notation)- kind=1; - DCT-III(REDFT10 in FFTW3 notation)- kind=2; - DCT-IV (REDFT11 in FFTW3 notation)- kind=3; - DST-I (RODFT00 in FFTW3 notation)- kind=4; - DST-II (RODFT01 in FFTW3 notation)- kind=5; - DST-III(RODFT10 in FFT",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:1293,Testability,log,logically,1293,"**********************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualFFT; \ingroup Base. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. ## Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. ## Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available. - DCT-I (REDFT00 in FFTW3 notation)- kind=0; - DCT-II (REDFT01 in FFTW3 notation)- kind=1; - DCT-III(REDFT10 in FFTW3 notation)- kind=2; - DCT-IV (REDFT11 in FFTW3 notation)- kind=3; - DST-I (RODFT00 in FFTW3 notation)- kind=4; - DST-II (RODFT01 in FFTW3 notation)- kind=5; - DST-III(RODFT10 in FFT",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:407,Availability,Avail,Available,407,"////////////////////////////////////////////////////////////////////////////////; ///Returns a pointer to the FFT of requested size and type.; ///; /// \param[in] ndim number of transform dimensions; /// \param[in] n sizes of each dimension (an array at least ndim long); /// \param [in] option consists of 3 parts - flag option and an option to create a new TVirtualFFT; /// 1. transform type option:; /// Available transform types are:; /// C2CForward, C2CBackward, C2R, R2C, R2HC, HC2R, DHT; /// see class description for details; /// 2. flag option: choosing how much time should be spent in planning the transform:; /// Possible options:; /// - ""ES"" (from ""estimate"") - no time in preparing the transform,; /// but probably sub-optimal performance; /// - ""M"" (from ""measure"") - some time spend in finding the optimal way; /// to do the transform; /// - ""P"" (from ""patient"") - more time spend in finding the optimal way; /// to do the transform; /// - ""EX"" (from ""exhaustive"") - the most optimal way is found; /// This option should be chosen depending on how many transforms of the; /// same size and type are going to be done.; /// Planning is only done once, for the first transform of this size and type.; /// 3. option allowing to choose between the global fgFFT and a new TVirtualFFT object; /// """" - default, changes and returns the global fgFFT variable; /// ""K"" (from ""keep"")- without touching the global fgFFT,; /// creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; ///; /// Examples of valid options: ""R2C ES K"", ""C2CF M"", ""DHT P K"", etc.",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:1047,Integrability,depend,depending,1047,"////////////////////////////////////////////////////////////////////////////////; ///Returns a pointer to the FFT of requested size and type.; ///; /// \param[in] ndim number of transform dimensions; /// \param[in] n sizes of each dimension (an array at least ndim long); /// \param [in] option consists of 3 parts - flag option and an option to create a new TVirtualFFT; /// 1. transform type option:; /// Available transform types are:; /// C2CForward, C2CBackward, C2R, R2C, R2HC, HC2R, DHT; /// see class description for details; /// 2. flag option: choosing how much time should be spent in planning the transform:; /// Possible options:; /// - ""ES"" (from ""estimate"") - no time in preparing the transform,; /// but probably sub-optimal performance; /// - ""M"" (from ""measure"") - some time spend in finding the optimal way; /// to do the transform; /// - ""P"" (from ""patient"") - more time spend in finding the optimal way; /// to do the transform; /// - ""EX"" (from ""exhaustive"") - the most optimal way is found; /// This option should be chosen depending on how many transforms of the; /// same size and type are going to be done.; /// Planning is only done once, for the first transform of this size and type.; /// 3. option allowing to choose between the global fgFFT and a new TVirtualFFT object; /// """" - default, changes and returns the global fgFFT variable; /// ""K"" (from ""keep"")- without touching the global fgFFT,; /// creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; ///; /// Examples of valid options: ""R2C ES K"", ""C2CF M"", ""DHT P K"", etc.",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:1357,Modifiability,variab,variable,1357,"////////////////////////////////////////////////////////////////////////////////; ///Returns a pointer to the FFT of requested size and type.; ///; /// \param[in] ndim number of transform dimensions; /// \param[in] n sizes of each dimension (an array at least ndim long); /// \param [in] option consists of 3 parts - flag option and an option to create a new TVirtualFFT; /// 1. transform type option:; /// Available transform types are:; /// C2CForward, C2CBackward, C2R, R2C, R2HC, HC2R, DHT; /// see class description for details; /// 2. flag option: choosing how much time should be spent in planning the transform:; /// Possible options:; /// - ""ES"" (from ""estimate"") - no time in preparing the transform,; /// but probably sub-optimal performance; /// - ""M"" (from ""measure"") - some time spend in finding the optimal way; /// to do the transform; /// - ""P"" (from ""patient"") - more time spend in finding the optimal way; /// to do the transform; /// - ""EX"" (from ""exhaustive"") - the most optimal way is found; /// This option should be chosen depending on how many transforms of the; /// same size and type are going to be done.; /// Planning is only done once, for the first transform of this size and type.; /// 3. option allowing to choose between the global fgFFT and a new TVirtualFFT object; /// """" - default, changes and returns the global fgFFT variable; /// ""K"" (from ""keep"")- without touching the global fgFFT,; /// creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; ///; /// Examples of valid options: ""R2C ES K"", ""C2CF M"", ""DHT P K"", etc.",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:741,Performance,perform,performance,741,"////////////////////////////////////////////////////////////////////////////////; ///Returns a pointer to the FFT of requested size and type.; ///; /// \param[in] ndim number of transform dimensions; /// \param[in] n sizes of each dimension (an array at least ndim long); /// \param [in] option consists of 3 parts - flag option and an option to create a new TVirtualFFT; /// 1. transform type option:; /// Available transform types are:; /// C2CForward, C2CBackward, C2R, R2C, R2HC, HC2R, DHT; /// see class description for details; /// 2. flag option: choosing how much time should be spent in planning the transform:; /// Possible options:; /// - ""ES"" (from ""estimate"") - no time in preparing the transform,; /// but probably sub-optimal performance; /// - ""M"" (from ""measure"") - some time spend in finding the optimal way; /// to do the transform; /// - ""P"" (from ""patient"") - more time spend in finding the optimal way; /// to do the transform; /// - ""EX"" (from ""exhaustive"") - the most optimal way is found; /// This option should be chosen depending on how many transforms of the; /// same size and type are going to be done.; /// Planning is only done once, for the first transform of this size and type.; /// 3. option allowing to choose between the global fgFFT and a new TVirtualFFT object; /// """" - default, changes and returns the global fgFFT variable; /// ""K"" (from ""keep"")- without touching the global fgFFT,; /// creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; ///; /// Examples of valid options: ""R2C ES K"", ""C2CF M"", ""DHT P K"", etc.",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:423,Availability,avail,available,423,"////////////////////////////////////////////////////////////////////////////////; ///Returns a pointer to a sine or cosine transform of requested size and kind; ///; ///Parameters:; /// \param [in] ndim number of transform dimensions; /// \param [in] n sizes of each dimension (an array at least ndim long); /// \param [in] r2rkind transform kind for each dimension; /// 4 different kinds of sine and cosine transforms are available; /// - DCT-I - kind=0; /// - DCT-II - kind=1; /// - DCT-III - kind=2; /// - DCT-IV - kind=3; /// - DST-I - kind=4; /// - DST-II - kind=5; /// - DST-III - kind=6; /// - DST-IV - kind=7; /// \param [in] option : consists of 2 parts; /// - flag option and an option to create a new TVirtualFFT; /// - flag option: choosing how much time should be spent in planning the transform:; /// Possible options:; /// - ""ES"" (from ""estimate"") - no time in preparing the transform,; /// but probably sub-optimal performance; /// - ""M"" (from ""measure"") - some time spend in finding the optimal way; /// to do the transform; /// - ""P"" (from ""patient"") - more time spend in finding the optimal way; /// to do the transform; /// - ""EX"" (from ""exhaustive"") - the most optimal way is found; /// This option should be chosen depending on how many transforms of the; /// same size and type are going to be done.; /// Planning is only done once, for the first transform of this size and type.; /// - option allowing to choose between the global fgFFT and a new TVirtualFFT object; /// - """" - default, changes and returns the global fgFFT variable; /// - ""K"" (from ""keep"")- without touching the global fgFFT,; /// creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; /// Examples of valid options: ""ES K"", ""EX"", etc",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:1237,Integrability,depend,depending,1237,"////////////////////////////////////////////////////////////////////////////////; ///Returns a pointer to a sine or cosine transform of requested size and kind; ///; ///Parameters:; /// \param [in] ndim number of transform dimensions; /// \param [in] n sizes of each dimension (an array at least ndim long); /// \param [in] r2rkind transform kind for each dimension; /// 4 different kinds of sine and cosine transforms are available; /// - DCT-I - kind=0; /// - DCT-II - kind=1; /// - DCT-III - kind=2; /// - DCT-IV - kind=3; /// - DST-I - kind=4; /// - DST-II - kind=5; /// - DST-III - kind=6; /// - DST-IV - kind=7; /// \param [in] option : consists of 2 parts; /// - flag option and an option to create a new TVirtualFFT; /// - flag option: choosing how much time should be spent in planning the transform:; /// Possible options:; /// - ""ES"" (from ""estimate"") - no time in preparing the transform,; /// but probably sub-optimal performance; /// - ""M"" (from ""measure"") - some time spend in finding the optimal way; /// to do the transform; /// - ""P"" (from ""patient"") - more time spend in finding the optimal way; /// to do the transform; /// - ""EX"" (from ""exhaustive"") - the most optimal way is found; /// This option should be chosen depending on how many transforms of the; /// same size and type are going to be done.; /// Planning is only done once, for the first transform of this size and type.; /// - option allowing to choose between the global fgFFT and a new TVirtualFFT object; /// - """" - default, changes and returns the global fgFFT variable; /// - ""K"" (from ""keep"")- without touching the global fgFFT,; /// creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; /// Examples of valid options: ""ES K"", ""EX"", etc",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:1548,Modifiability,variab,variable,1548,"////////////////////////////////////////////////////////////////////////////////; ///Returns a pointer to a sine or cosine transform of requested size and kind; ///; ///Parameters:; /// \param [in] ndim number of transform dimensions; /// \param [in] n sizes of each dimension (an array at least ndim long); /// \param [in] r2rkind transform kind for each dimension; /// 4 different kinds of sine and cosine transforms are available; /// - DCT-I - kind=0; /// - DCT-II - kind=1; /// - DCT-III - kind=2; /// - DCT-IV - kind=3; /// - DST-I - kind=4; /// - DST-II - kind=5; /// - DST-III - kind=6; /// - DST-IV - kind=7; /// \param [in] option : consists of 2 parts; /// - flag option and an option to create a new TVirtualFFT; /// - flag option: choosing how much time should be spent in planning the transform:; /// Possible options:; /// - ""ES"" (from ""estimate"") - no time in preparing the transform,; /// but probably sub-optimal performance; /// - ""M"" (from ""measure"") - some time spend in finding the optimal way; /// to do the transform; /// - ""P"" (from ""patient"") - more time spend in finding the optimal way; /// to do the transform; /// - ""EX"" (from ""exhaustive"") - the most optimal way is found; /// This option should be chosen depending on how many transforms of the; /// same size and type are going to be done.; /// Planning is only done once, for the first transform of this size and type.; /// - option allowing to choose between the global fgFFT and a new TVirtualFFT object; /// - """" - default, changes and returns the global fgFFT variable; /// - ""K"" (from ""keep"")- without touching the global fgFFT,; /// creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; /// Examples of valid options: ""ES K"", ""EX"", etc",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:931,Performance,perform,performance,931,"////////////////////////////////////////////////////////////////////////////////; ///Returns a pointer to a sine or cosine transform of requested size and kind; ///; ///Parameters:; /// \param [in] ndim number of transform dimensions; /// \param [in] n sizes of each dimension (an array at least ndim long); /// \param [in] r2rkind transform kind for each dimension; /// 4 different kinds of sine and cosine transforms are available; /// - DCT-I - kind=0; /// - DCT-II - kind=1; /// - DCT-III - kind=2; /// - DCT-IV - kind=3; /// - DST-I - kind=4; /// - DST-II - kind=5; /// - DST-III - kind=6; /// - DST-IV - kind=7; /// \param [in] option : consists of 2 parts; /// - flag option and an option to create a new TVirtualFFT; /// - flag option: choosing how much time should be spent in planning the transform:; /// Possible options:; /// - ""ES"" (from ""estimate"") - no time in preparing the transform,; /// but probably sub-optimal performance; /// - ""M"" (from ""measure"") - some time spend in finding the optimal way; /// to do the transform; /// - ""P"" (from ""patient"") - more time spend in finding the optimal way; /// to do the transform; /// - ""EX"" (from ""exhaustive"") - the most optimal way is found; /// This option should be chosen depending on how many transforms of the; /// same size and type are going to be done.; /// Planning is only done once, for the first transform of this size and type.; /// - option allowing to choose between the global fgFFT and a new TVirtualFFT object; /// - """" - default, changes and returns the global fgFFT variable; /// - ""K"" (from ""keep"")- without touching the global fgFFT,; /// creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; /// Examples of valid options: ""ES K"", ""EX"", etc",MatchSource.CODE_COMMENT,core/base/src/TVirtualFFT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualGL.cxx:273,Availability,avail,available,273,// @(#)root/base:$Id$; // Author: Valery Fine 05/03/97; /** \class TVirtualGL. The TVirtualGL class is an abstract base class defining the; OpenGL interface protocol. All interactions with OpenGL should be; done via the global pointer gVirtualGL. If the OpenGL library is; available this pointer is pointing to an instance of the TGLKernel; class which provides the actual interface to OpenGL. Using this; scheme of ABC we can use OpenGL in other parts of the framework; without having to link with the OpenGL library in case we don't; use the classes using OpenGL.; */,MatchSource.CODE_COMMENT,core/base/src/TVirtualGL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualGL.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualGL.cxx:147,Integrability,interface,interface,147,// @(#)root/base:$Id$; // Author: Valery Fine 05/03/97; /** \class TVirtualGL. The TVirtualGL class is an abstract base class defining the; OpenGL interface protocol. All interactions with OpenGL should be; done via the global pointer gVirtualGL. If the OpenGL library is; available this pointer is pointing to an instance of the TGLKernel; class which provides the actual interface to OpenGL. Using this; scheme of ABC we can use OpenGL in other parts of the framework; without having to link with the OpenGL library in case we don't; use the classes using OpenGL.; */,MatchSource.CODE_COMMENT,core/base/src/TVirtualGL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualGL.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualGL.cxx:157,Integrability,protocol,protocol,157,// @(#)root/base:$Id$; // Author: Valery Fine 05/03/97; /** \class TVirtualGL. The TVirtualGL class is an abstract base class defining the; OpenGL interface protocol. All interactions with OpenGL should be; done via the global pointer gVirtualGL. If the OpenGL library is; available this pointer is pointing to an instance of the TGLKernel; class which provides the actual interface to OpenGL. Using this; scheme of ABC we can use OpenGL in other parts of the framework; without having to link with the OpenGL library in case we don't; use the classes using OpenGL.; */,MatchSource.CODE_COMMENT,core/base/src/TVirtualGL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualGL.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualGL.cxx:373,Integrability,interface,interface,373,// @(#)root/base:$Id$; // Author: Valery Fine 05/03/97; /** \class TVirtualGL. The TVirtualGL class is an abstract base class defining the; OpenGL interface protocol. All interactions with OpenGL should be; done via the global pointer gVirtualGL. If the OpenGL library is; available this pointer is pointing to an instance of the TGLKernel; class which provides the actual interface to OpenGL. Using this; scheme of ABC we can use OpenGL in other parts of the framework; without having to link with the OpenGL library in case we don't; use the classes using OpenGL.; */,MatchSource.CODE_COMMENT,core/base/src/TVirtualGL.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualGL.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMonitoring.cxx:509,Energy Efficiency,Monitor,Monitoring,509,"// @(#)root/base:$Id$; // Author: Andreas-Joachim Peters 15/05/2006; /*************************************************************************; * Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualMonitoring; \ingroup Base. Provides the interface for externel Monitoring; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualMonitoring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMonitoring.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMonitoring.cxx:486,Integrability,interface,interface,486,"// @(#)root/base:$Id$; // Author: Andreas-Joachim Peters 15/05/2006; /*************************************************************************; * Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualMonitoring; \ingroup Base. Provides the interface for externel Monitoring; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualMonitoring.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMonitoring.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMutex.cxx:547,Availability,avail,available,547,"// @(#)root/base:$Id$; // Author: Fons Rademakers 14/02/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualMutex; \ingroup Base. This class implements a mutex interface. The actual work is done via; TMutex which is available as soon as the thread library is loaded. and. TLockGuard. This class provides mutex resource management in a guaranteed and; exception safe way. Use like this:; ~~~ {.cpp}; {; TLockGuard guard(mutex);; ... // do something; }; ~~~; when guard goes out of scope the mutex is unlocked in the TLockGuard; destructor. The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualMutex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMutex.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMutex.cxx:491,Integrability,interface,interface,491,"// @(#)root/base:$Id$; // Author: Fons Rademakers 14/02/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualMutex; \ingroup Base. This class implements a mutex interface. The actual work is done via; TMutex which is available as soon as the thread library is loaded. and. TLockGuard. This class provides mutex resource management in a guaranteed and; exception safe way. Use like this:; ~~~ {.cpp}; {; TLockGuard guard(mutex);; ... // do something; }; ~~~; when guard goes out of scope the mutex is unlocked in the TLockGuard; destructor. The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualMutex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMutex.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMutex.cxx:590,Performance,load,loaded,590,"// @(#)root/base:$Id$; // Author: Fons Rademakers 14/02/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualMutex; \ingroup Base. This class implements a mutex interface. The actual work is done via; TMutex which is available as soon as the thread library is loaded. and. TLockGuard. This class provides mutex resource management in a guaranteed and; exception safe way. Use like this:; ~~~ {.cpp}; {; TLockGuard guard(mutex);; ... // do something; }; ~~~; when guard goes out of scope the mutex is unlocked in the TLockGuard; destructor. The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualMutex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMutex.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMutex.cxx:692,Safety,safe,safe,692,"// @(#)root/base:$Id$; // Author: Fons Rademakers 14/02/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualMutex; \ingroup Base. This class implements a mutex interface. The actual work is done via; TMutex which is available as soon as the thread library is loaded. and. TLockGuard. This class provides mutex resource management in a guaranteed and; exception safe way. Use like this:; ~~~ {.cpp}; {; TLockGuard guard(mutex);; ... // do something; }; ~~~; when guard goes out of scope the mutex is unlocked in the TLockGuard; destructor. The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualMutex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMutex.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMutex.cxx:963,Safety,safe,safe,963,"// @(#)root/base:$Id$; // Author: Fons Rademakers 14/02/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualMutex; \ingroup Base. This class implements a mutex interface. The actual work is done via; TMutex which is available as soon as the thread library is loaded. and. TLockGuard. This class provides mutex resource management in a guaranteed and; exception safe way. Use like this:; ~~~ {.cpp}; {; TLockGuard guard(mutex);; ... // do something; }; ~~~; when guard goes out of scope the mutex is unlocked in the TLockGuard; destructor. The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualMutex.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualMutex.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPad.cxx:179,Usability,clear,cleared,179,"////////////////////////////////////////////////////////////////////////////////; /// Inform context that pad deleted or will be deleted soon; /// Reference on that pad should be cleared",MatchSource.CODE_COMMENT,core/base/src/TVirtualPad.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPad.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPadEditor.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update fill attributes via the pad editor",MatchSource.CODE_COMMENT,core/base/src/TVirtualPadEditor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPadEditor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPadEditor.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update text attributes via the pad editor",MatchSource.CODE_COMMENT,core/base/src/TVirtualPadEditor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPadEditor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPadEditor.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update line attributes via the pad editor",MatchSource.CODE_COMMENT,core/base/src/TVirtualPadEditor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPadEditor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPadEditor.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update marker attributes via the pad editor",MatchSource.CODE_COMMENT,core/base/src/TVirtualPadEditor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPadEditor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPadPainter.cxx:130,Integrability,interface,interface,130,"/** \class TVirtualPadPainter; \ingroup Base. To make it possible to use GL for 2D graphic in a TPad/TCanvas.; TVirtualPadPainter interface must be used instead of TVirtualX.; Internally, non-GL implementation _should_ delegate all calls; to gVirtualX, GL implementation will delegate part of calls; to gVirtualX, and has to implement some of the calls from the scratch.; */; ////////////////////////////////////////////////////////////////////////////////; ///Virtual dtor.",MatchSource.CODE_COMMENT,core/base/src/TVirtualPadPainter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPadPainter.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPerfStats.cxx:481,Integrability,interface,interface,481,"// @(#)root/base:$Id$; // Author: Kristjan Gulbrandsen 11/05/04; /*************************************************************************; * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualPerfStats; \ingroup Base. Provides the interface for the PROOF internal performance measurement; and event tracing.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualPerfStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPerfStats.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPerfStats.cxx:514,Performance,perform,performance,514,"// @(#)root/base:$Id$; // Author: Kristjan Gulbrandsen 11/05/04; /*************************************************************************; * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualPerfStats; \ingroup Base. Provides the interface for the PROOF internal performance measurement; and event tracing.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualPerfStats.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPerfStats.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPS.cxx:489,Integrability,interface,interface,489,"// @(#)root/base:$Id$; // Author: Rene Brun 05/09/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualPS; \ingroup Base; \ingroup PS. TVirtualPS is an abstract interface to Postscript, PDF, SVG. TeX etc... drivers; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualPS.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPS.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:1249,Energy Efficiency,efficient,efficiently,1249,"demakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualViewer3D; \ingroup Base. Abstract 3D shapes viewer. The concrete implementations are:. - TViewerX3D : X3d viewer; - TGLViewer : OpenGL viewer. ## 3D Viewer Infrastructure Overview. The 3D Viewer infrastructure consists of:. - TVirtualViewer3D interface: An abstract handle to the viewer, allowing; client to test preferences, add objects, control the viewer via scripting; (to be added) etc.; -TBuffer3D class hierarchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently. Publishing to a viewer consists of the following steps:. 1. Create / obtain viewer handle; 2. Begin scene on viewer; 3. Fill mandatory parts of TBuffer3D describing object; 4. Add to viewer; 5. Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5 as required; 6. End scene on viewer. ## Creating / Obtaining Viewer. Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); ~~~ {.cpp}; TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; ~~~. "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned. ## Begin / End Scene. Objects must",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:10579,Energy Efficiency,efficient,efficient,10579," potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ## Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; will generate IDs for each physical object internally. In the second you; can specify a unique identifier from the client, which allows the viewer to be more; efficient. It can now cache both logical and physical objects, and only discard; physical objects no longer of interest as part of scene rebuilds. ## Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ## Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:680,Integrability,interface,interface,680,"// @(#)root/base:$Id$; // Author: Olivier Couet 05/10/2004; /*************************************************************************; * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualViewer3D; \ingroup Base. Abstract 3D shapes viewer. The concrete implementations are:. - TViewerX3D : X3d viewer; - TGLViewer : OpenGL viewer. ## 3D Viewer Infrastructure Overview. The 3D Viewer infrastructure consists of:. - TVirtualViewer3D interface: An abstract handle to the viewer, allowing; client to test preferences, add objects, control the viewer via scripting; (to be added) etc.; -TBuffer3D class hierarchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently. Publishing to a viewer consists of the following steps:. 1. Create / obtain viewer handle; 2. Begin scene on viewer; 3. Fill mandatory parts of TBuffer3D describing object; 4. Add to viewer; 5. Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5 as required; 6. End scene on viewer. ## Creating / Obtaining Viewer. Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); ~~~ {.cpp}; TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; ~~~. "" xxxx"" is view",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:2131,Integrability,interface,interface,2131,"ode. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently. Publishing to a viewer consists of the following steps:. 1. Create / obtain viewer handle; 2. Begin scene on viewer; 3. Fill mandatory parts of TBuffer3D describing object; 4. Add to viewer; 5. Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5 as required; 6. End scene on viewer. ## Creating / Obtaining Viewer. Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); ~~~ {.cpp}; TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; ~~~. "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned. ## Begin / End Scene. Objects must be added to viewer between BeginScene/EndScene calls e.g.; ~~~ {.cpp}; v->BeginScene();; .....; v->AddObject(....);; v->AddObject(....);; .....; v->EndScene();; ~~~. The BeginScene call will cause the viewer to suspend redraws etc, and after; the EndScene the viewer will reset the camera to frame the new scene and redraw.; [x3d viewer does not support changing of scenes - objects added after the; first Open/CloseScene pair will be ignored.]. ## Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cop",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:2715,Integrability,interface,interface,2715,"esent [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); ~~~ {.cpp}; TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; ~~~. "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned. ## Begin / End Scene. Objects must be added to viewer between BeginScene/EndScene calls e.g.; ~~~ {.cpp}; v->BeginScene();; .....; v->AddObject(....);; v->AddObject(....);; .....; v->EndScene();; ~~~. The BeginScene call will cause the viewer to suspend redraws etc, and after; the EndScene the viewer will reset the camera to frame the new scene and redraw.; [x3d viewer does not support changing of scenes - objects added after the; first Open/CloseScene pair will be ignored.]. ## Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details).; \image html base_tbuffer3d.png. The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D; are used to test/set/clear these section valid flags. The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw); are sufficient to describe any tessellated shape in a generic fashion.; An additional ShapeSpecific section; in derived shape specific classes allows a more a",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:8031,Integrability,interface,interface,8031," ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ## Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawin",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:2089,Modifiability,plugin,plugin,2089,"ode. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently. Publishing to a viewer consists of the following steps:. 1. Create / obtain viewer handle; 2. Begin scene on viewer; 3. Fill mandatory parts of TBuffer3D describing object; 4. Add to viewer; 5. Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5 as required; 6. End scene on viewer. ## Creating / Obtaining Viewer. Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); ~~~ {.cpp}; TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; ~~~. "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned. ## Begin / End Scene. Objects must be added to viewer between BeginScene/EndScene calls e.g.; ~~~ {.cpp}; v->BeginScene();; .....; v->AddObject(....);; v->AddObject(....);; .....; v->EndScene();; ~~~. The BeginScene call will cause the viewer to suspend redraws etc, and after; the EndScene the viewer will reset the camera to frame the new scene and redraw.; [x3d viewer does not support changing of scenes - objects added after the; first Open/CloseScene pair will be ignored.]. ## Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cop",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:1792,Performance,perform,perform,1792,"rchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently. Publishing to a viewer consists of the following steps:. 1. Create / obtain viewer handle; 2. Begin scene on viewer; 3. Fill mandatory parts of TBuffer3D describing object; 4. Add to viewer; 5. Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5 as required; 6. End scene on viewer. ## Creating / Obtaining Viewer. Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); ~~~ {.cpp}; TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; ~~~. "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned. ## Begin / End Scene. Objects must be added to viewer between BeginScene/EndScene calls e.g.; ~~~ {.cpp}; v->BeginScene();; .....; v->AddObject(....);; v->AddObject(....);; .....; v->EndScene();; ~~~. The BeginScene call will cause the viewer to suspend redraws etc, and after; the EndScene the viewer will reset the camera to frame the new scene and redraw.; [x3d viewer does not support changing of scenes - objects added after the; first Open/CloseScene pair will be ignored.]. ## Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - ot",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:3075,Performance,perform,performance,3075,"enGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned. ## Begin / End Scene. Objects must be added to viewer between BeginScene/EndScene calls e.g.; ~~~ {.cpp}; v->BeginScene();; .....; v->AddObject(....);; v->AddObject(....);; .....; v->EndScene();; ~~~. The BeginScene call will cause the viewer to suspend redraws etc, and after; the EndScene the viewer will reset the camera to frame the new scene and redraw.; [x3d viewer does not support changing of scenes - objects added after the; first Open/CloseScene pair will be ignored.]. ## Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details).; \image html base_tbuffer3d.png. The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D; are used to test/set/clear these section valid flags. The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw); are sufficient to describe any tessellated shape in a generic fashion.; An additional ShapeSpecific section; in derived shape specific classes allows a more abstract shape description; (""a sphere of inner radius x, outer radius y""). This enables a viewer; which knows how to draw (tessellate) the shape itself to do so, which can bring; considerable performance and quality benefits, while providing a generic fallback; suitable for all viewers. The r",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:3912,Performance,perform,performance,3912,"on of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details).; \image html base_tbuffer3d.png. The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D; are used to test/set/clear these section valid flags. The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw); are sufficient to describe any tessellated shape in a generic fashion.; An additional ShapeSpecific section; in derived shape specific classes allows a more abstract shape description; (""a sphere of inner radius x, outer radius y""). This enables a viewer; which knows how to draw (tessellate) the shape itself to do so, which can bring; considerable performance and quality benefits, while providing a generic fallback; suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNone. You must; fill the buffer and mark these sections valid, and pass the buffer again. A; typical code snippet would be:; ~~~ {.cpp}; TBuffer3DSphere sphereBuffer;; // Fill out kCore...; // Fill out kBoundingBox...; // Fill out kShapeSpecific for TBuffer3DSphere; // Try first add to viewer; Int_t reqSections = viewer->AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqSect",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:7649,Performance,cache,cached,7649,"(bounding box and tessellation vertexes) are in local or master (world frame).; fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This; is set by default, and can be reset using SetLocalMasterIdentity() function. ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable o",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:7747,Performance,perform,perform,7747,"atrix (OpenGL column major ordering); for placing the object into the 3D master frame. If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This; is set by default, and can be reset using SetLocalMasterIdentity() function. ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ## Scene Rebuilds. It should be understood that AddObject is not an explici",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:7802,Performance,perform,performance,7802,"atrix (OpenGL column major ordering); for placing the object into the 3D master frame. If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This; is set by default, and can be reset using SetLocalMasterIdentity() function. ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ## Scene Rebuilds. It should be understood that AddObject is not an explici",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:8896,Performance,cache,cached,8896,"ct in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ## Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; ",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:10601,Performance,cache,cache,10601," potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ## Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; will generate IDs for each physical object internally. In the second you; can specify a unique identifier from the client, which allows the viewer to be more; efficient. It can now cache both logical and physical objects, and only discard; physical objects no longer of interest as part of scene rebuilds. ## Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ## Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:10069,Safety,detect,detect,10069,"to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ## Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; will generate IDs for each physical object internally. In the second you; can specify a unique identifier from the client, which allows the viewer to be more; efficient. It can now cache both logical and physical objects, and only discard; physical objects no longer of interest as part of scene rebuilds. ## Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChil",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:745,Testability,test,test,745,"// @(#)root/base:$Id$; // Author: Olivier Couet 05/10/2004; /*************************************************************************; * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualViewer3D; \ingroup Base. Abstract 3D shapes viewer. The concrete implementations are:. - TViewerX3D : X3d viewer; - TGLViewer : OpenGL viewer. ## 3D Viewer Infrastructure Overview. The 3D Viewer infrastructure consists of:. - TVirtualViewer3D interface: An abstract handle to the viewer, allowing; client to test preferences, add objects, control the viewer via scripting; (to be added) etc.; -TBuffer3D class hierarchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently. Publishing to a viewer consists of the following steps:. 1. Create / obtain viewer handle; 2. Begin scene on viewer; 3. Fill mandatory parts of TBuffer3D describing object; 4. Add to viewer; 5. Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5 as required; 6. End scene on viewer. ## Creating / Obtaining Viewer. Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); ~~~ {.cpp}; TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; ~~~. "" xxxx"" is view",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:3454,Testability,test,test,3454,"r; the EndScene the viewer will reset the camera to frame the new scene and redraw.; [x3d viewer does not support changing of scenes - objects added after the; first Open/CloseScene pair will be ignored.]. ## Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details).; \image html base_tbuffer3d.png. The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D; are used to test/set/clear these section valid flags. The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw); are sufficient to describe any tessellated shape in a generic fashion.; An additional ShapeSpecific section; in derived shape specific classes allows a more abstract shape description; (""a sphere of inner radius x, outer radius y""). This enables a viewer; which knows how to draw (tessellate) the shape itself to do so, which can bring; considerable performance and quality benefits, while providing a generic fallback; suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSi",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:7028,Testability,Log,Logical,7028,"ovide.; However to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ## Master/Local Reference Frames. The Core section of TBuffer3D contains two members relating to reference frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer; (bounding box and tessellation vertexes) are in local or master (world frame).; fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This; is set by default, and can be reset using SetLocalMasterIdentity() function. ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interfac",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:7219,Testability,log,logical,7219,"d shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ## Master/Local Reference Frames. The Core section of TBuffer3D contains two members relating to reference frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer; (bounding box and tessellation vertexes) are in local or master (world frame).; fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This; is set by default, and can be reset using SetLocalMasterIdentity() function. ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster pla",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:7405,Testability,log,logical,7405,"vide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ## Master/Local Reference Frames. The Core section of TBuffer3D contains two members relating to reference frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer; (bounding box and tessellation vertexes) are in local or master (world frame).; fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This; is set by default, and can be reset using SetLocalMasterIdentity() function. ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, wi",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:7527,Testability,log,logical,7527," of TBuffer3D contains two members relating to reference frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer; (bounding box and tessellation vertexes) are in local or master (world frame).; fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This; is set by default, and can be reset using SetLocalMasterIdentity() function. ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all client",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:7555,Testability,log,logical,7555," of TBuffer3D contains two members relating to reference frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer; (bounding box and tessellation vertexes) are in local or master (world frame).; fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This; is set by default, and can be reset using SetLocalMasterIdentity() function. ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all client",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:7868,Testability,log,logical,7868,"contain an identity matrix. This; is set by default, and can be reset using SetLocalMasterIdentity() function. ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ## Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The ob",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:8255,Testability,log,logical,8255,"ry large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ## Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer did with it. This enables the viewer to be connected to a client which sends potentia",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:8332,Testability,log,logical,8332,"ry large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ## Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer did with it. This enables the viewer to be connected to a client which sends potentia",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:9498,Testability,log,logical,9498,"hich can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ## Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ## Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; will gen",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:10396,Testability,log,logical,10396," potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ## Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; will generate IDs for each physical object internally. In the second you; can specify a unique identifier from the client, which allows the viewer to be more; efficient. It can now cache both logical and physical objects, and only discard; physical objects no longer of interest as part of scene rebuilds. ## Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ## Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:10612,Testability,log,logical,10612," potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ## Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; will generate IDs for each physical object internally. In the second you; can specify a unique identifier from the client, which allows the viewer to be more; efficient. It can now cache both logical and physical objects, and only discard; physical objects no longer of interest as part of scene rebuilds. ## Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ## Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:1125,Usability,simpl,simple,1125,"demakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualViewer3D; \ingroup Base. Abstract 3D shapes viewer. The concrete implementations are:. - TViewerX3D : X3d viewer; - TGLViewer : OpenGL viewer. ## 3D Viewer Infrastructure Overview. The 3D Viewer infrastructure consists of:. - TVirtualViewer3D interface: An abstract handle to the viewer, allowing; client to test preferences, add objects, control the viewer via scripting; (to be added) etc.; -TBuffer3D class hierarchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently. Publishing to a viewer consists of the following steps:. 1. Create / obtain viewer handle; 2. Begin scene on viewer; 3. Fill mandatory parts of TBuffer3D describing object; 4. Add to viewer; 5. Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5 as required; 6. End scene on viewer. ## Creating / Obtaining Viewer. Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); ~~~ {.cpp}; TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; ~~~. "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned. ## Begin / End Scene. Objects must",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:3399,Usability,Clear,ClearSectionsValid,3399,"r; the EndScene the viewer will reset the camera to frame the new scene and redraw.; [x3d viewer does not support changing of scenes - objects added after the; first Open/CloseScene pair will be ignored.]. ## Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details).; \image html base_tbuffer3d.png. The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D; are used to test/set/clear these section valid flags. The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw); are sufficient to describe any tessellated shape in a generic fashion.; An additional ShapeSpecific section; in derived shape specific classes allows a more abstract shape description; (""a sphere of inner radius x, outer radius y""). This enables a viewer; which knows how to draw (tessellate) the shape itself to do so, which can bring; considerable performance and quality benefits, while providing a generic fallback; suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSi",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:3463,Usability,clear,clear,3463,"r; the EndScene the viewer will reset the camera to frame the new scene and redraw.; [x3d viewer does not support changing of scenes - objects added after the; first Open/CloseScene pair will be ignored.]. ## Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details).; \image html base_tbuffer3d.png. The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D; are used to test/set/clear these section valid flags. The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw); are sufficient to describe any tessellated shape in a generic fashion.; An additional ShapeSpecific section; in derived shape specific classes allows a more abstract shape description; (""a sphere of inner radius x, outer radius y""). This enables a viewer; which knows how to draw (tessellate) the shape itself to do so, which can bring; considerable performance and quality benefits, while providing a generic fallback; suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSi",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:5754,Usability,clear,clear,5754,"fer3DSphere; // Try first add to viewer; Int_t reqSections = viewer->AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqSections & TBuffer3D::kRawSizes) {; // Fill out kRawSizes...; }; if (reqSections & TBuffer3D::kRaw) {; // Fill out kRaw...; }; // Add second time to viewer - ignore return cannot do more; viewer->AddObject(buffer);; }; }; ~~~. ShapeSpecific: If the viewer can directly display the buffer without; filling of the kRaw/kRawSizes section it will not need to request client side; tessellation. Currently we provide the following various shape specific classes,; which the OpenGL viewer can take advantage of (see TBuffer3D.h and TBuffer3DTypes.h). - TBuffer3DSphere - solid, hollow and cut spheres*; - TBuffer3DTubeSeg - angle tube segment; - TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated. Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time. BoundingBox: You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ## Master/Local Reference Frames. The Core section of TBuffer3D contains two members relating to reference frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer; (bounding box and tessellation vertexes) are in local or master (world frame).; fLocalMaster is a standard",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:6404,Usability,simpl,simpler,6404," of (see TBuffer3D.h and TBuffer3DTypes.h). - TBuffer3DSphere - solid, hollow and cut spheres*; - TBuffer3DTubeSeg - angle tube segment; - TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated. Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time. BoundingBox: You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ## Master/Local Reference Frames. The Core section of TBuffer3D contains two members relating to reference frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer; (bounding box and tessellation vertexes) are in local or master (world frame).; fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This; is set by default, and can be reset using SetLocalMasterIdentity() function. ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relative",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:9109,Usability,simpl,simply,9109,"an make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ## Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ## Physical IDs. TVirtualViewer3D pr",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:10368,Usability,simpl,simple,10368," potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ## Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; will generate IDs for each physical object internally. In the second you; can specify a unique identifier from the client, which allows the viewer to be more; efficient. It can now cache both logical and physical objects, and only discard; physical objects no longer of interest as part of scene rebuilds. ## Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ## Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualViewer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:507,Integrability,interface,interface,507,"// @(#)root/base:$Id$; // Author: Fons Rademakers 3/12/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \defgroup GraphicsBackends Graphics' Backends; \ingroup Graphics; Graphics' Backends interface classes.; Graphics classes interfacing ROOT graphics with the low level; native graphics backends(s) like X11, Cocoa, Win32 etc...; These classes are not meant to be used directly by ROOT users.; */; /** \class TVirtualX; \ingroup GraphicsBackends; \ingroup Base; Semi-Abstract base class defining a generic interface to the underlying, low; level, native graphics backend (X11, Win32, MacOS, OpenGL...).; An instance of TVirtualX itself defines a batch interface to the graphics system.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:825,Integrability,interface,interface,825,"// @(#)root/base:$Id$; // Author: Fons Rademakers 3/12/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \defgroup GraphicsBackends Graphics' Backends; \ingroup Graphics; Graphics' Backends interface classes.; Graphics classes interfacing ROOT graphics with the low level; native graphics backends(s) like X11, Cocoa, Win32 etc...; These classes are not meant to be used directly by ROOT users.; */; /** \class TVirtualX; \ingroup GraphicsBackends; \ingroup Base; Semi-Abstract base class defining a generic interface to the underlying, low; level, native graphics backend (X11, Win32, MacOS, OpenGL...).; An instance of TVirtualX itself defines a batch interface to the graphics system.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:971,Integrability,interface,interface,971,"// @(#)root/base:$Id$; // Author: Fons Rademakers 3/12/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \defgroup GraphicsBackends Graphics' Backends; \ingroup Graphics; Graphics' Backends interface classes.; Graphics classes interfacing ROOT graphics with the low level; native graphics backends(s) like X11, Cocoa, Win32 etc...; These classes are not meant to be used directly by ROOT users.; */; /** \class TVirtualX; \ingroup GraphicsBackends; \ingroup Base; Semi-Abstract base class defining a generic interface to the underlying, low; level, native graphics backend (X11, Win32, MacOS, OpenGL...).; An instance of TVirtualX itself defines a batch interface to the graphics system.; */",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:35,Integrability,interface,interface,35,"//Global pointer to batch graphics interface",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:341,Integrability,depend,dependent,341,"////////////////////////////////////////////////////////////////////////////////; /// Looks up the string name of a color ""cname"" with respect to the screen; /// associated with the specified colormap. It returns the exact color value.; /// If the color name is not in the Host Portable Character Encoding,; /// the result is implementation dependent.; ///; /// \param [in] cmap the colormap; /// \param [in] cname the color name string; use of uppercase or lowercase; /// does not matter; /// \param [in] color returns the exact color value for later use; ///; /// The ColorStruct_t structure is set to default. Let system think we; /// could parse color.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:278,Modifiability,Portab,Portable,278,"////////////////////////////////////////////////////////////////////////////////; /// Looks up the string name of a color ""cname"" with respect to the screen; /// associated with the specified colormap. It returns the exact color value.; /// If the color name is not in the Host Portable Character Encoding,; /// the result is implementation dependent.; ///; /// \param [in] cmap the colormap; /// \param [in] cname the color name string; use of uppercase or lowercase; /// does not matter; /// \param [in] color returns the exact color value for later use; ///; /// The ColorStruct_t structure is set to default. Let system think we; /// could parse color.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:86,Energy Efficiency,Allocate,Allocates,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocates a read-only colormap entry corresponding to the closest RGB; /// value supported by the hardware. If no cell could be allocated it; /// returns kFALSE, otherwise kTRUE.; ///; /// The pixel value is set to default. Let system think we could allocate; /// color.; ///; /// \param [in] cmap the colormap; /// \param [in] color specifies and returns the values actually used in the cmap",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:214,Energy Efficiency,allocate,allocated,214,"////////////////////////////////////////////////////////////////////////////////; /// Allocates a read-only colormap entry corresponding to the closest RGB; /// value supported by the hardware. If no cell could be allocated it; /// returns kFALSE, otherwise kTRUE.; ///; /// The pixel value is set to default. Let system think we could allocate; /// color.; ///; /// \param [in] cmap the colormap; /// \param [in] color specifies and returns the values actually used in the cmap",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:336,Energy Efficiency,allocate,allocate,336,"////////////////////////////////////////////////////////////////////////////////; /// Allocates a read-only colormap entry corresponding to the closest RGB; /// value supported by the hardware. If no cell could be allocated it; /// returns kFALSE, otherwise kTRUE.; ///; /// The pixel value is set to default. Let system think we could allocate; /// color.; ///; /// \param [in] cmap the colormap; /// \param [in] color specifies and returns the values actually used in the cmap",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:138,Availability,failure,failure,138,"////////////////////////////////////////////////////////////////////////////////; /// Initializes the X system. Returns kFALSE in case of failure.; /// It is implementation dependent.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:173,Integrability,depend,dependent,173,"////////////////////////////////////////////////////////////////////////////////; /// Initializes the X system. Returns kFALSE in case of failure.; /// It is implementation dependent.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:86,Usability,Clear,Clears,86,"////////////////////////////////////////////////////////////////////////////////; /// Clears the entire area of the current window.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:184,Availability,down,down,184,"////////////////////////////////////////////////////////////////////////////////; /// Draws a box between [x1,y1] and [x2,y2] according to the ""mode"".; ///; /// \param [in] x1,y1 left down corner; /// \param [in] x2,y2 right up corner; /// \param [in] mode drawing mode:; /// - mode = 0 hollow (kHollow); /// - mode = 1 solid (kSolid)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:294,Availability,down,down,294,"////////////////////////////////////////////////////////////////////////////////; /// Draws a cell array. The drawing is done with the pixel precision; /// if (x2-x1)/nx (or y) is not a exact pixel number the position of; /// the top right corner may be wrong.; ///; /// \param [in] x1,y1 left down corner; /// \param [in] x2,y2 right up corner; /// \param [in] nx,ny array size; /// \param [in] ic array",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:238,Modifiability,extend,extend,238,"////////////////////////////////////////////////////////////////////////////////; /// Returns the ascent of the current font (in pixels).; /// The ascent of a font is the distance from the baseline; /// to the highest position characters extend to",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:226,Modifiability,extend,extend,226,"////////////////////////////////////////////////////////////////////////////////; /// Returns the descent of the current font (in pixels.; /// The descent is the distance from the base line; /// to the lowest point characters extend to.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:102,Performance,load,loads,102,"////////////////////////////////////////////////////////////////////////////////; /// If id is NULL - loads the specified gif file at position [x0,y0] in the; /// current window. Otherwise creates pixmap from gif file",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:635,Deployability,release,released,635,"////////////////////////////////////////////////////////////////////////////////; /// Requests Locator position.; ///; /// \param [in] x,y cursor position at moment of button press (output); /// \param [in] ctyp cursor type (input); /// - ctyp = 1 tracking cross; /// - ctyp = 2 cross-hair; /// - ctyp = 3 rubber circle; /// - ctyp = 4 rubber band; /// - ctyp = 5 rubber rectangle; ///; /// \param [in] mode input mode; /// - mode = 0 request; /// - mode = 1 sample; ///; /// \return; /// - in request mode:; /// - 1 = left is pressed; /// - 2 = middle is pressed; /// - 3 = right is pressed; /// - in sample mode:; /// - 11 = left is released; /// - 12 = middle is released; /// - 13 = right is released; /// - -1 = nothing is pressed or released; /// - -2 = leave the window; /// - else = keycode (keyboard is pressed)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:666,Deployability,release,released,666,"////////////////////////////////////////////////////////////////////////////////; /// Requests Locator position.; ///; /// \param [in] x,y cursor position at moment of button press (output); /// \param [in] ctyp cursor type (input); /// - ctyp = 1 tracking cross; /// - ctyp = 2 cross-hair; /// - ctyp = 3 rubber circle; /// - ctyp = 4 rubber band; /// - ctyp = 5 rubber rectangle; ///; /// \param [in] mode input mode; /// - mode = 0 request; /// - mode = 1 sample; ///; /// \return; /// - in request mode:; /// - 1 = left is pressed; /// - 2 = middle is pressed; /// - 3 = right is pressed; /// - in sample mode:; /// - 11 = left is released; /// - 12 = middle is released; /// - 13 = right is released; /// - -1 = nothing is pressed or released; /// - -2 = leave the window; /// - else = keycode (keyboard is pressed)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:696,Deployability,release,released,696,"////////////////////////////////////////////////////////////////////////////////; /// Requests Locator position.; ///; /// \param [in] x,y cursor position at moment of button press (output); /// \param [in] ctyp cursor type (input); /// - ctyp = 1 tracking cross; /// - ctyp = 2 cross-hair; /// - ctyp = 3 rubber circle; /// - ctyp = 4 rubber band; /// - ctyp = 5 rubber rectangle; ///; /// \param [in] mode input mode; /// - mode = 0 request; /// - mode = 1 sample; ///; /// \return; /// - in request mode:; /// - 1 = left is pressed; /// - 2 = middle is pressed; /// - 3 = right is pressed; /// - in sample mode:; /// - 11 = left is released; /// - 12 = middle is released; /// - 13 = right is released; /// - -1 = nothing is pressed or released; /// - -2 = leave the window; /// - else = keycode (keyboard is pressed)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:739,Deployability,release,released,739,"////////////////////////////////////////////////////////////////////////////////; /// Requests Locator position.; ///; /// \param [in] x,y cursor position at moment of button press (output); /// \param [in] ctyp cursor type (input); /// - ctyp = 1 tracking cross; /// - ctyp = 2 cross-hair; /// - ctyp = 3 rubber circle; /// - ctyp = 4 rubber band; /// - ctyp = 5 rubber rectangle; ///; /// \param [in] mode input mode; /// - mode = 0 request; /// - mode = 1 sample; ///; /// \return; /// - in request mode:; /// - 1 = left is pressed; /// - 2 = middle is pressed; /// - 3 = right is pressed; /// - in sample mode:; /// - 11 = left is released; /// - 12 = middle is released; /// - 13 = right is released; /// - -1 = nothing is pressed or released; /// - -2 = leave the window; /// - else = keycode (keyboard is pressed)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:263,Availability,echo,echo,263,"////////////////////////////////////////////////////////////////////////////////; /// Sets the drawing mode.; ///; /// \param [in] mode drawing mode.; /// - mode = 1 copy; /// - mode = 2 xor; /// - mode = 3 invert; /// - mode = 4 set the suitable mode for cursor echo according to the vendor",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:146,Integrability,rout,routine,146,"////////////////////////////////////////////////////////////////////////////////; /// Sets opacity of the current window. This image manipulation routine; /// works by adding to a percent amount of neutral to each pixels RGB.; /// Since it requires quite some additional color map entries is it; /// only supported on displays with more than > 8 color planes (> 256; /// colors).",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:220,Energy Efficiency,green,green,220,"////////////////////////////////////////////////////////////////////////////////; /// Sets color intensities the specified color index ""cindex"".; ///; /// \param [in] cindex color index; /// \param [in] r, g, b the red, green, blue intensities between 0.0 and 1.0",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:270,Performance,load,loading,270,"////////////////////////////////////////////////////////////////////////////////; /// Sets text font to specified name ""fontname"".This function returns 0 if; /// the specified font is found, 1 if it is not.; ///; /// \param [in] fontname font name; /// \param [in] mode loading flag; /// - mode = 0 search if the font exist (kCheck); /// - mode = 1 search the font and load it if it exists (kLoad)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:369,Performance,load,load,369,"////////////////////////////////////////////////////////////////////////////////; /// Sets text font to specified name ""fontname"".This function returns 0 if; /// the specified font is found, 1 if it is not.; ///; /// \param [in] fontname font name; /// \param [in] mode loading flag; /// - mode = 0 search if the font exist (kCheck); /// - mode = 1 search the font and load it if it exists (kLoad)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:86,Deployability,Update,Updates,86,"////////////////////////////////////////////////////////////////////////////////; /// Updates or synchronises client and server once (not permanent).; /// according to ""mode"".; ///; /// \param [in] mode update mode.; /// - mode = 1 update; /// - mode = 0 sync",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:203,Deployability,update,update,203,"////////////////////////////////////////////////////////////////////////////////; /// Updates or synchronises client and server once (not permanent).; /// according to ""mode"".; ///; /// \param [in] mode update mode.; /// - mode = 1 update; /// - mode = 0 sync",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:232,Deployability,update,update,232,"////////////////////////////////////////////////////////////////////////////////; /// Updates or synchronises client and server once (not permanent).; /// according to ""mode"".; ///; /// \param [in] mode update mode.; /// - mode = 1 update; /// - mode = 0 sync",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:153,Deployability,update,updated,153,"////////////////////////////////////////////////////////////////////////////////; /// Notify the low level GUI layer ROOT requires ""tgwindow"" to be; /// updated; ///; /// Returns kTRUE if the notification was desirable and it was sent; ///; /// At the moment only Qt4 layer needs that; ///; /// One needs explicitly cast the first parameter to TGWindow to make; /// it working in the implementation.; ///; /// One needs to process the notification to confine; /// all paint operations within ""expose"" / ""paint"" like low level event; /// or equivalent",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:493,Security,expose,expose,493,"////////////////////////////////////////////////////////////////////////////////; /// Notify the low level GUI layer ROOT requires ""tgwindow"" to be; /// updated; ///; /// Returns kTRUE if the notification was desirable and it was sent; ///; /// At the moment only Qt4 layer needs that; ///; /// One needs explicitly cast the first parameter to TGWindow to make; /// it working in the implementation.; ///; /// One needs to process the notification to confine; /// all paint operations within ""expose"" / ""paint"" like low level event; /// or equivalent",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:155,Performance,perform,performs,155,"////////////////////////////////////////////////////////////////////////////////; /// If the specified window is mapped, ReparentWindow automatically; /// performs an UnmapWindow request on it, removes it from its current; /// position in the hierarchy, and inserts it as the child of the specified; /// parent. The window is placed in the stacking order on top with respect; /// to sibling windows.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:365,Availability,failure,failure,365,"////////////////////////////////////////////////////////////////////////////////; /// Opens connection to display server (if such a thing exist on the; /// current platform). The encoding and interpretation of the display; /// name.; ///; /// On X11 this method returns on success the X display socket descriptor; /// >0, 0 in case of batch mode, and <0 in case of failure (cannot connect; /// to display dpyName).",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:223,Integrability,interface,interface,223,"////////////////////////////////////////////////////////////////////////////////; /// Returns handle to display (might be useful in some cases where; /// direct X11 manipulation outside of TVirtualX is needed, e.g. GL; /// interface).",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:227,Integrability,interface,interface,227,"////////////////////////////////////////////////////////////////////////////////; /// Returns handle to visual.; ///; /// Might be useful in some cases where direct X11 manipulation outside; /// of TVirtualX is needed, e.g. GL interface.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:224,Integrability,interface,interface,224,"////////////////////////////////////////////////////////////////////////////////; /// Returns screen number.; ///; /// Might be useful in some cases where direct X11 manipulation outside; /// of TVirtualX is needed, e.g. GL interface.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:229,Integrability,interface,interface,229,"////////////////////////////////////////////////////////////////////////////////; /// Returns handle to colormap.; ///; /// Might be useful in some cases where direct X11 manipulation outside; /// of TVirtualX is needed, e.g. GL interface.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:345,Integrability,depend,dependent,345,"////////////////////////////////////////////////////////////////////////////////; /// Returns the atom identifier associated with the specified ""atom_name""; /// string. If ""only_if_exists"" is False, the atom is created if it does; /// not exist. If the atom name is not in the Host Portable Character; /// Encoding, the result is implementation dependent. Uppercase and; /// lowercase matter; the strings ""thing"", ""Thing"", and ""thinG"" all; /// designate different atoms.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:282,Modifiability,Portab,Portable,282,"////////////////////////////////////////////////////////////////////////////////; /// Returns the atom identifier associated with the specified ""atom_name""; /// string. If ""only_if_exists"" is False, the atom is created if it does; /// not exist. If the atom name is not in the Host Portable Character; /// Encoding, the result is implementation dependent. Uppercase and; /// lowercase matter; the strings ""thing"", ""Thing"", and ""thinG"" all; /// designate different atoms.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:144,Performance,load,loads,144,"////////////////////////////////////////////////////////////////////////////////; /// Provides the most common way for accessing a font: opens (loads) the; /// specified font and returns a pointer to the appropriate FontStruct_t; /// structure. If the font does not exist, it returns NULL.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:119,Security,access,accessing,119,"////////////////////////////////////////////////////////////////////////////////; /// Provides the most common way for accessing a font: opens (loads) the; /// specified font and returns a pointer to the appropriate FontStruct_t; /// structure. If the font does not exist, it returns NULL.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:142,Performance,Load,LoadQueryFont,142,"////////////////////////////////////////////////////////////////////////////////; /// Explicitly deletes the font structure ""fs"" obtained via LoadQueryFont().",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:169,Availability,mask,mask,169,"////////////////////////////////////////////////////////////////////////////////; /// Creates a graphics context using the provided GCValues_t *gval structure.; /// The mask data member of gval specifies which components in the GC are; /// to be set using the information in the specified values structure.; /// It returns a graphics context handle GContext_t that can be used with any; /// destination drawable or O if the creation falls.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:126,Availability,mask,mask,126,"////////////////////////////////////////////////////////////////////////////////; /// Changes the components specified by the mask in gval for the specified GC.; ///; /// \param [in] gc specifies the GC to be changed; /// \param [in] gval specifies the mask and the values to be set; ///; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:253,Availability,mask,mask,253,"////////////////////////////////////////////////////////////////////////////////; /// Changes the components specified by the mask in gval for the specified GC.; ///; /// \param [in] gc specifies the GC to be changed; /// \param [in] gval specifies the mask and the values to be set; ///; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:183,Availability,mask,mask,183,"////////////////////////////////////////////////////////////////////////////////; /// Copies the specified components from the source GC ""org"" to the; /// destination GC ""dest"". The ""mask"" defines which component to copy; /// and it is a data member of GCValues_t.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:2,Availability,mask,mask,2,/*mask*/,MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:269,Availability,mask,mask,269,"////////////////////////////////////////////////////////////////////////////////; /// Creates a picture pict from data in file ""filename"". The picture; /// attributes ""attr"" are used for input and output. Returns kTRUE in; /// case of success, kFALSE otherwise. If the mask ""pict_mask"" does not; /// exist it is set to kNone.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:267,Availability,mask,mask,267,"////////////////////////////////////////////////////////////////////////////////; /// Creates a picture pict from data in bitmap format. The picture; /// attributes ""attr"" are used for input and output. Returns kTRUE in; /// case of success, kFALSE otherwise. If the mask ""pict_mask"" does not; /// exist it is set to kNone.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:203,Performance,queue,queue,203,"////////////////////////////////////////////////////////////////////////////////; /// Returns the number of events that have been received from the X server; /// but have not been removed from the event queue.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:753,Availability,mask,mask,753,"////////////////////////////////////////////////////////////////////////////////; /// Combines the specified rectangle of ""src"" with the specified rectangle; /// of ""dest"" according to the ""gc"".; ///; /// \param [in] src source rectangle; /// \param [in] dest destination rectangle; /// \param [in] gc graphics context; /// \param [in] src_x, src_y specify the x and y coordinates, which are relative; /// to the origin of the source rectangle and specify; /// upper-left corner.; /// \param [in] width, height the width and height, which are the dimensions of both; /// the source and destination rectangles; /// \param [in] dest_x, dest_y specify the upper-left corner of the destination; /// rectangle; ///; /// GC components in use: function, plane-mask, subwindow-mode,; /// graphics-exposure, clip-x-origin, clip-y-origin, and clip-mask.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:838,Availability,mask,mask,838,"////////////////////////////////////////////////////////////////////////////////; /// Combines the specified rectangle of ""src"" with the specified rectangle; /// of ""dest"" according to the ""gc"".; ///; /// \param [in] src source rectangle; /// \param [in] dest destination rectangle; /// \param [in] gc graphics context; /// \param [in] src_x, src_y specify the x and y coordinates, which are relative; /// to the origin of the source rectangle and specify; /// upper-left corner.; /// \param [in] width, height the width and height, which are the dimensions of both; /// the source and destination rectangles; /// \param [in] dest_x, dest_y specify the upper-left corner of the destination; /// rectangle; ///; /// GC components in use: function, plane-mask, subwindow-mode,; /// graphics-exposure, clip-x-origin, clip-y-origin, and clip-mask.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:188,Availability,mask,mask,188,"////////////////////////////////////////////////////////////////////////////////; /// Changes the attributes of the specified window ""id"" according the; /// values provided in ""attr"". The mask data member of ""attr"" specifies; /// which window attributes are defined in the attributes argument.; /// This mask is the bitwise inclusive OR of the valid attribute mask; /// bits; if it is zero, the attributes are ignored.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:304,Availability,mask,mask,304,"////////////////////////////////////////////////////////////////////////////////; /// Changes the attributes of the specified window ""id"" according the; /// values provided in ""attr"". The mask data member of ""attr"" specifies; /// which window attributes are defined in the attributes argument.; /// This mask is the bitwise inclusive OR of the valid attribute mask; /// bits; if it is zero, the attributes are ignored.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:360,Availability,mask,mask,360,"////////////////////////////////////////////////////////////////////////////////; /// Changes the attributes of the specified window ""id"" according the; /// values provided in ""attr"". The mask data member of ""attr"" specifies; /// which window attributes are defined in the attributes argument.; /// This mask is the bitwise inclusive OR of the valid attribute mask; /// bits; if it is zero, the attributes are ignored.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:433,Usability,simpl,simply,433,"////////////////////////////////////////////////////////////////////////////////; /// Alters the property for the specified window and causes the X server; /// to generate a PropertyNotify event on that window.; ///; /// \param [in] id the window whose property you want to change; /// \param [in] property specifies the property name; /// \param [in] type the type of the property; the X server does not; /// interpret the type but simply passes it back to; /// an application that might ask about the window; /// properties; /// \param [in] data the property data; /// \param [in] len the length of the specified data format",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:253,Availability,mask,mask,253,"////////////////////////////////////////////////////////////////////////////////; /// Uses the components of the specified GC to draw a line between the; /// specified set of points (x1, y1) and (x2, y2).; ///; /// GC components in use: function, plane-mask, line-width, line-style,; /// cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin,; /// and clip-mask.; ///; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:371,Availability,mask,mask,371,"////////////////////////////////////////////////////////////////////////////////; /// Uses the components of the specified GC to draw a line between the; /// specified set of points (x1, y1) and (x2, y2).; ///; /// GC components in use: function, plane-mask, line-width, line-style,; /// cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin,; /// and clip-mask.; ///; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:395,Integrability,depend,dependent,395,"////////////////////////////////////////////////////////////////////////////////; /// Uses the components of the specified GC to draw a line between the; /// specified set of points (x1, y1) and (x2, y2).; ///; /// GC components in use: function, plane-mask, line-width, line-style,; /// cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin,; /// and clip-mask.; ///; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:194,Availability,mask,mask,194,"////////////////////////////////////////////////////////////////////////////////; /// Specifies the event ""ev"" is to be sent to the window ""id"".; /// This function requires you to pass an event mask.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:2,Integrability,message,messageID,2,/*messageID*/,MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:103,Integrability,message,message,103,"////////////////////////////////////////////////////////////////////////////////; /// Tells WM to send message when window is closed via WM.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:572,Availability,down,down,572,"////////////////////////////////////////////////////////////////////////////////; /// Establishes a passive grab on the keyboard. In the future, the; /// keyboard is actively grabbed, the last-keyboard-grab time is set; /// to the time at which the key was pressed (as transmitted in the; /// KeyPress event), and the KeyPress event is reported if all of the; /// following conditions are true:; ///; /// - the keyboard is not grabbed and the specified key (which can; /// itself be a modifier key) is logically pressed when the; /// specified modifier keys are logically down, and no other; /// modifier keys are logically down;; /// - either the grab window ""id"" is an ancestor of (or is) the focus; /// window, or ""id"" is a descendant of the focus window and contains; /// the pointer;; /// - a passive grab on the same key combination does not exist on any; /// ancestor of grab_window; ///; /// \param [in] id window id; /// \param [in] keycode specifies the KeyCode or AnyKey; /// \param [in] modifier specifies the set of keymasks or AnyModifier; the mask is; /// the bitwise inclusive OR of the valid keymask bits; /// \param [in] grab a switch between grab/ungrab key; /// grab = kTRUE grab the key and modifier; /// grab = kFALSE ungrab the key and modifier",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:624,Availability,down,down,624,"////////////////////////////////////////////////////////////////////////////////; /// Establishes a passive grab on the keyboard. In the future, the; /// keyboard is actively grabbed, the last-keyboard-grab time is set; /// to the time at which the key was pressed (as transmitted in the; /// KeyPress event), and the KeyPress event is reported if all of the; /// following conditions are true:; ///; /// - the keyboard is not grabbed and the specified key (which can; /// itself be a modifier key) is logically pressed when the; /// specified modifier keys are logically down, and no other; /// modifier keys are logically down;; /// - either the grab window ""id"" is an ancestor of (or is) the focus; /// window, or ""id"" is a descendant of the focus window and contains; /// the pointer;; /// - a passive grab on the same key combination does not exist on any; /// ancestor of grab_window; ///; /// \param [in] id window id; /// \param [in] keycode specifies the KeyCode or AnyKey; /// \param [in] modifier specifies the set of keymasks or AnyModifier; the mask is; /// the bitwise inclusive OR of the valid keymask bits; /// \param [in] grab a switch between grab/ungrab key; /// grab = kTRUE grab the key and modifier; /// grab = kFALSE ungrab the key and modifier",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:1058,Availability,mask,mask,1058,"////////////////////////////////////////////////////////////////////////////////; /// Establishes a passive grab on the keyboard. In the future, the; /// keyboard is actively grabbed, the last-keyboard-grab time is set; /// to the time at which the key was pressed (as transmitted in the; /// KeyPress event), and the KeyPress event is reported if all of the; /// following conditions are true:; ///; /// - the keyboard is not grabbed and the specified key (which can; /// itself be a modifier key) is logically pressed when the; /// specified modifier keys are logically down, and no other; /// modifier keys are logically down;; /// - either the grab window ""id"" is an ancestor of (or is) the focus; /// window, or ""id"" is a descendant of the focus window and contains; /// the pointer;; /// - a passive grab on the same key combination does not exist on any; /// ancestor of grab_window; ///; /// \param [in] id window id; /// \param [in] keycode specifies the KeyCode or AnyKey; /// \param [in] modifier specifies the set of keymasks or AnyModifier; the mask is; /// the bitwise inclusive OR of the valid keymask bits; /// \param [in] grab a switch between grab/ungrab key; /// grab = kTRUE grab the key and modifier; /// grab = kFALSE ungrab the key and modifier",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:502,Testability,log,logically,502,"////////////////////////////////////////////////////////////////////////////////; /// Establishes a passive grab on the keyboard. In the future, the; /// keyboard is actively grabbed, the last-keyboard-grab time is set; /// to the time at which the key was pressed (as transmitted in the; /// KeyPress event), and the KeyPress event is reported if all of the; /// following conditions are true:; ///; /// - the keyboard is not grabbed and the specified key (which can; /// itself be a modifier key) is logically pressed when the; /// specified modifier keys are logically down, and no other; /// modifier keys are logically down;; /// - either the grab window ""id"" is an ancestor of (or is) the focus; /// window, or ""id"" is a descendant of the focus window and contains; /// the pointer;; /// - a passive grab on the same key combination does not exist on any; /// ancestor of grab_window; ///; /// \param [in] id window id; /// \param [in] keycode specifies the KeyCode or AnyKey; /// \param [in] modifier specifies the set of keymasks or AnyModifier; the mask is; /// the bitwise inclusive OR of the valid keymask bits; /// \param [in] grab a switch between grab/ungrab key; /// grab = kTRUE grab the key and modifier; /// grab = kFALSE ungrab the key and modifier",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:562,Testability,log,logically,562,"////////////////////////////////////////////////////////////////////////////////; /// Establishes a passive grab on the keyboard. In the future, the; /// keyboard is actively grabbed, the last-keyboard-grab time is set; /// to the time at which the key was pressed (as transmitted in the; /// KeyPress event), and the KeyPress event is reported if all of the; /// following conditions are true:; ///; /// - the keyboard is not grabbed and the specified key (which can; /// itself be a modifier key) is logically pressed when the; /// specified modifier keys are logically down, and no other; /// modifier keys are logically down;; /// - either the grab window ""id"" is an ancestor of (or is) the focus; /// window, or ""id"" is a descendant of the focus window and contains; /// the pointer;; /// - a passive grab on the same key combination does not exist on any; /// ancestor of grab_window; ///; /// \param [in] id window id; /// \param [in] keycode specifies the KeyCode or AnyKey; /// \param [in] modifier specifies the set of keymasks or AnyModifier; the mask is; /// the bitwise inclusive OR of the valid keymask bits; /// \param [in] grab a switch between grab/ungrab key; /// grab = kTRUE grab the key and modifier; /// grab = kFALSE ungrab the key and modifier",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:614,Testability,log,logically,614,"////////////////////////////////////////////////////////////////////////////////; /// Establishes a passive grab on the keyboard. In the future, the; /// keyboard is actively grabbed, the last-keyboard-grab time is set; /// to the time at which the key was pressed (as transmitted in the; /// KeyPress event), and the KeyPress event is reported if all of the; /// following conditions are true:; ///; /// - the keyboard is not grabbed and the specified key (which can; /// itself be a modifier key) is logically pressed when the; /// specified modifier keys are logically down, and no other; /// modifier keys are logically down;; /// - either the grab window ""id"" is an ancestor of (or is) the focus; /// window, or ""id"" is a descendant of the focus window and contains; /// the pointer;; /// - a passive grab on the same key combination does not exist on any; /// ancestor of grab_window; ///; /// \param [in] id window id; /// \param [in] keycode specifies the KeyCode or AnyKey; /// \param [in] modifier specifies the set of keymasks or AnyModifier; the mask is; /// the bitwise inclusive OR of the valid keymask bits; /// \param [in] grab a switch between grab/ungrab key; /// grab = kTRUE grab the key and modifier; /// grab = kFALSE ungrab the key and modifier",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:175,Availability,mask,mask,175,"////////////////////////////////////////////////////////////////////////////////; /// Each character image, as defined by the font in the GC, is treated as an; /// additional mask for a fill operation on the drawable.; ///; /// \param [in] id the drawable; /// \param [in] gc the GC; /// \param [in] x, y coordinates, which are relative to the origin of the specified; /// drawable and define the origin of the first character; /// \param [in] s the character string; /// \param [in] len the number of characters in the string argument; ///; /// GC components in use: function, plane-mask, fill-style, font,; /// subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:584,Availability,mask,mask,584,"////////////////////////////////////////////////////////////////////////////////; /// Each character image, as defined by the font in the GC, is treated as an; /// additional mask for a fill operation on the drawable.; ///; /// \param [in] id the drawable; /// \param [in] gc the GC; /// \param [in] x, y coordinates, which are relative to the origin of the specified; /// drawable and define the origin of the first character; /// \param [in] s the character string; /// \param [in] len the number of characters in the string argument; ///; /// GC components in use: function, plane-mask, fill-style, font,; /// subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:668,Availability,mask,mask,668,"////////////////////////////////////////////////////////////////////////////////; /// Each character image, as defined by the font in the GC, is treated as an; /// additional mask for a fill operation on the drawable.; ///; /// \param [in] id the drawable; /// \param [in] gc the GC; /// \param [in] x, y coordinates, which are relative to the origin of the specified; /// drawable and define the origin of the first character; /// \param [in] s the character string; /// \param [in] len the number of characters in the string argument; ///; /// GC components in use: function, plane-mask, fill-style, font,; /// subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:687,Integrability,depend,dependent,687,"////////////////////////////////////////////////////////////////////////////////; /// Each character image, as defined by the font in the GC, is treated as an; /// additional mask for a fill operation on the drawable.; ///; /// \param [in] id the drawable; /// \param [in] gc the GC; /// \param [in] x, y coordinates, which are relative to the origin of the specified; /// drawable and define the origin of the first character; /// \param [in] s the character string; /// \param [in] len the number of characters in the string argument; ///; /// GC components in use: function, plane-mask, fill-style, font,; /// subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:134,Integrability,depend,depends,134,"////////////////////////////////////////////////////////////////////////////////; /// Return length of the string ""s"" in pixels. Size depends on font.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:126,Availability,mask,mask,126,"////////////////////////////////////////////////////////////////////////////////; /// Returns the components specified by the mask in ""gval"" for the; /// specified GC ""gc"" (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:86,Usability,Clear,Clears,86,"////////////////////////////////////////////////////////////////////////////////; /// Clears the entire area in the specified window and it is equivalent to; /// ClearArea(id, 0, 0, 0, 0)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:162,Usability,Clear,ClearArea,162,"////////////////////////////////////////////////////////////////////////////////; /// Clears the entire area in the specified window and it is equivalent to; /// ClearArea(id, 0, 0, 0, 0)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:229,Integrability,depend,dependent,229,"////////////////////////////////////////////////////////////////////////////////; /// Converts the ""keysym"" to the appropriate keycode. For example,; /// keysym is a letter and keycode is the matching keyboard key (which; /// is dependent on the current keyboard mapping). If the specified; /// ""keysym"" is not defined for any keycode, returns zero.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:243,Availability,mask,mask,243,"////////////////////////////////////////////////////////////////////////////////; /// Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h].; /// using the GC you specify.; ///; /// GC components in use are: function, plane-mask, fill-style,; /// subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:317,Availability,mask,mask,317,"////////////////////////////////////////////////////////////////////////////////; /// Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h].; /// using the GC you specify.; ///; /// GC components in use are: function, plane-mask, fill-style,; /// subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:336,Integrability,depend,dependent,336,"////////////////////////////////////////////////////////////////////////////////; /// Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h].; /// using the GC you specify.; ///; /// GC components in use are: function, plane-mask, fill-style,; /// subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:194,Availability,mask,mask,194,"////////////////////////////////////////////////////////////////////////////////; /// Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]; ///; /// GC components in use: function, plane-mask, line-width, line-style,; /// cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,; /// clip-y-origin, clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:320,Availability,mask,mask,320,"////////////////////////////////////////////////////////////////////////////////; /// Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]; ///; /// GC components in use: function, plane-mask, line-width, line-style,; /// cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,; /// clip-y-origin, clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:339,Integrability,depend,dependent,339,"////////////////////////////////////////////////////////////////////////////////; /// Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]; ///; /// GC components in use: function, plane-mask, line-width, line-style,; /// cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,; /// clip-y-origin, clip-mask.; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:411,Availability,mask,mask,411,"////////////////////////////////////////////////////////////////////////////////; /// Draws multiple line segments. Each line is specified by a pair of points.; ///; /// \param [in] id Drawable identifier; /// \param [in] gc graphics context; /// \param [in] *seg specifies an array of segments; /// \param [in] nseg specifies the number of segments in the array; ///; /// GC components in use: function, plane-mask, line-width, line-style,; /// cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,; /// clip-y-origin, clip-mask.; ///; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:537,Availability,mask,mask,537,"////////////////////////////////////////////////////////////////////////////////; /// Draws multiple line segments. Each line is specified by a pair of points.; ///; /// \param [in] id Drawable identifier; /// \param [in] gc graphics context; /// \param [in] *seg specifies an array of segments; /// \param [in] nseg specifies the number of segments in the array; ///; /// GC components in use: function, plane-mask, line-width, line-style,; /// cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,; /// clip-y-origin, clip-mask.; ///; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:561,Integrability,depend,dependent,561,"////////////////////////////////////////////////////////////////////////////////; /// Draws multiple line segments. Each line is specified by a pair of points.; ///; /// \param [in] id Drawable identifier; /// \param [in] gc graphics context; /// \param [in] *seg specifies an array of segments; /// \param [in] nseg specifies the number of segments in the array; ///; /// GC components in use: function, plane-mask, line-width, line-style,; /// cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,; /// clip-y-origin, clip-mask.; ///; /// GC mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:206,Availability,mask,mask,206,"////////////////////////////////////////////////////////////////////////////////; /// Defines which input events the window is interested in. By default; /// events are propagated up the window stack. This mask can also be; /// set at window creation time via the SetWindowAttributes_t::fEventMask; /// attribute.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:494,Availability,mask,mask,494,"////////////////////////////////////////////////////////////////////////////////; /// Fills the region closed by the specified path. The path is closed; /// automatically if the last point in the list does not coincide with the; /// first point.; ///; /// \param [in] id window identifier; /// \param [in] gc graphics context; /// \param [in] *points specifies an array of points; /// \param [in] npnt specifies the number of points in the array; ///; /// GC components in use: function, plane-mask, fill-style, fill-rule,; /// subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC; /// mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:583,Availability,mask,mask,583,"////////////////////////////////////////////////////////////////////////////////; /// Fills the region closed by the specified path. The path is closed; /// automatically if the last point in the list does not coincide with the; /// first point.; ///; /// \param [in] id window identifier; /// \param [in] gc graphics context; /// \param [in] *points specifies an array of points; /// \param [in] npnt specifies the number of points in the array; ///; /// GC components in use: function, plane-mask, fill-style, fill-rule,; /// subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC; /// mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:602,Integrability,depend,dependent,602,"////////////////////////////////////////////////////////////////////////////////; /// Fills the region closed by the specified path. The path is closed; /// automatically if the last point in the list does not coincide with the; /// first point.; ///; /// \param [in] id window identifier; /// \param [in] gc graphics context; /// \param [in] *points specifies an array of points; /// \param [in] npnt specifies the number of points in the array; ///; /// GC components in use: function, plane-mask, fill-style, fill-rule,; /// subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC; /// mode-dependent components: foreground, background, tile, stipple,; /// tile-stipple-x-origin, and tile-stipple-y-origin.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:609,Availability,mask,mask,609,"////////////////////////////////////////////////////////////////////////////////; /// Returns the root window the pointer is logically on and the pointer; /// coordinates relative to the root window's origin.; ///; /// \param [in] id specifies the window; /// \param [in] rootw the root window that the pointer is in; /// \param [in] childw the child window that the pointer is located in, if any; /// \param [in] root_x, root_y the pointer coordinates relative to the root window's; /// origin; /// \param [in] win_x, win_y the pointer coordinates relative to the specified; /// window ""id""; /// \param [in] mask the current state of the modifier keys and pointer; /// buttons",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:125,Testability,log,logically,125,"////////////////////////////////////////////////////////////////////////////////; /// Returns the root window the pointer is logically on and the pointer; /// coordinates relative to the root window's origin.; ///; /// \param [in] id specifies the window; /// \param [in] rootw the root window that the pointer is in; /// \param [in] childw the child window that the pointer is located in, if any; /// \param [in] root_x, root_y the pointer coordinates relative to the root window's; /// origin; /// \param [in] win_x, win_y the pointer coordinates relative to the specified; /// window ""id""; /// \param [in] mask the current state of the modifier keys and pointer; /// buttons",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:182,Availability,mask,mask,182,"////////////////////////////////////////////////////////////////////////////////; /// Sets the foreground color for the specified GC (shortcut for ChangeGC; /// with only foreground mask set).; ///; /// \param [in] gc specifies the GC; /// \param [in] foreground the foreground you want to set; ///; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:251,Availability,mask,mask,251,"////////////////////////////////////////////////////////////////////////////////; /// Sets clipping rectangles in graphics context. [x,y] specify the origin; /// of the rectangles. ""recs"" specifies an array of rectangles that define; /// the clipping mask and ""n"" is the number of rectangles.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:117,Integrability,synchroniz,synchronizes,117,"////////////////////////////////////////////////////////////////////////////////; /// Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer.; /// Flush flushes output buffer. Sync flushes buffer and waits till all; /// requests have been processed by X server.",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:86,Deployability,Update,Updates,86,"////////////////////////////////////////////////////////////////////////////////; /// Updates the destination region from a union of the specified rectangle; /// and the specified source region.; ///; /// \param [in] rect specifies the rectangle; /// \param [in] src specifies the source region to be used; /// \param [in] dest returns the destination region",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:201,Performance,perform,perform,201,"////////////////////////////////////////////////////////////////////////////////; /// Computes the union of two regions.; ///; /// \param [in] rega, regb specify the two regions with which you want to perform; /// the computation; /// \param [in] result returns the result of the computation",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:208,Performance,perform,perform,208,"////////////////////////////////////////////////////////////////////////////////; /// Computes the intersection of two regions.; ///; /// \param [in] rega, regb specify the two regions with which you want to perform; /// the computation; /// \param [in] result returns the result of the computation",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:248,Performance,perform,perform,248,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the difference between the union and intersection of; /// two regions.; ///; /// \param [in] rega, regb specify the two regions with which you want to perform; /// the computation; /// \param [in] result returns the result of the computation",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:460,Integrability,depend,dependent,460,"////////////////////////////////////////////////////////////////////////////////; /// Returns list of font names matching fontname regexp, like ""-*-times-*"".; /// The pattern string can contain any characters, but each asterisk (*); /// is a wildcard for any number of characters, and each question mark (?); /// is a wildcard for a single character. If the pattern string is not in; /// the Host Portable Character Encoding, the result is implementation; /// dependent. Use of uppercase or lowercase does not matter. Each returned; /// string is null-terminated.; ///; /// \param [in] fontname specifies the null-terminated pattern string that can; /// contain wildcard characters; /// \param [in] max specifies the maximum number of names to be returned; /// \param [in] count returns the actual number of font names",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:397,Modifiability,Portab,Portable,397,"////////////////////////////////////////////////////////////////////////////////; /// Returns list of font names matching fontname regexp, like ""-*-times-*"".; /// The pattern string can contain any characters, but each asterisk (*); /// is a wildcard for any number of characters, and each question mark (?); /// is a wildcard for a single character. If the pattern string is not in; /// the Host Portable Character Encoding, the result is implementation; /// dependent. Use of uppercase or lowercase does not matter. Each returned; /// string is null-terminated.; ///; /// \param [in] fontname specifies the null-terminated pattern string that can; /// contain wildcard characters; /// \param [in] max specifies the maximum number of names to be returned; /// \param [in] count returns the actual number of font names",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:86,Energy Efficiency,Allocate,Allocates,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocates the memory needed for an drawable.; ///; /// \param [in] width the width of the image, in pixels; /// \param [in] height the height of the image, in pixels",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:828,Availability,mask,mask,828,"////////////////////////////////////////////////////////////////////////////////; /// Combines an image with a rectangle of the specified drawable. The; /// section of the image defined by the x, y, width, and height arguments; /// is drawn on the specified part of the drawable.; ///; /// \param [in] id the drawable; /// \param [in] gc the GC; /// \param [in] img the image you want combined with the rectangle; /// \param [in] dx the offset in X from the left edge of the image; /// \param [in] dy the offset in Y from the top edge of the image; /// \param [in] x, y coordinates, which are relative to the origin of the; /// drawable and are the coordinates of the subimage; /// \param [in] w, h the width and height of the subimage, which define the; /// rectangle dimensions; ///; /// GC components in use: function, plane-mask, subwindow-mode,; /// clip-x-origin, clip-y-origin, and clip-mask.; /// GC mode-dependent components: foreground and background.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:894,Availability,mask,mask,894,"////////////////////////////////////////////////////////////////////////////////; /// Combines an image with a rectangle of the specified drawable. The; /// section of the image defined by the x, y, width, and height arguments; /// is drawn on the specified part of the drawable.; ///; /// \param [in] id the drawable; /// \param [in] gc the GC; /// \param [in] img the image you want combined with the rectangle; /// \param [in] dx the offset in X from the left edge of the image; /// \param [in] dy the offset in Y from the top edge of the image; /// \param [in] x, y coordinates, which are relative to the origin of the; /// drawable and are the coordinates of the subimage; /// \param [in] w, h the width and height of the subimage, which define the; /// rectangle dimensions; ///; /// GC components in use: function, plane-mask, subwindow-mode,; /// clip-x-origin, clip-y-origin, and clip-mask.; /// GC mode-dependent components: foreground and background.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:913,Integrability,depend,dependent,913,"////////////////////////////////////////////////////////////////////////////////; /// Combines an image with a rectangle of the specified drawable. The; /// section of the image defined by the x, y, width, and height arguments; /// is drawn on the specified part of the drawable.; ///; /// \param [in] id the drawable; /// \param [in] gc the GC; /// \param [in] img the image you want combined with the rectangle; /// \param [in] dx the offset in X from the left edge of the image; /// \param [in] dy the offset in Y from the top edge of the image; /// \param [in] x, y coordinates, which are relative to the origin of the; /// drawable and are the coordinates of the subimage; /// \param [in] w, h the width and height of the subimage, which define the; /// rectangle dimensions; ///; /// GC components in use: function, plane-mask, subwindow-mode,; /// clip-x-origin, clip-y-origin, and clip-mask.; /// GC mode-dependent components: foreground and background.; /// (see also the GCValues_t structure)",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:243,Availability,error,error,243,"////////////////////////////////////////////////////////////////////////////////; /// Returns 1 if window system server supports extension given by the; /// argument, returns 0 in case extension is not supported and returns -1; /// in case of error (like server not initialized).",MatchSource.CODE_COMMENT,core/base/src/TVirtualX.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/test/TErrorTests.cxx:49,Availability,error,error,49,"// The TROOT destructor re-installed the minimal error handler",MatchSource.CODE_COMMENT,core/base/test/TErrorTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/test/TErrorTests.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/test/TErrorTests.cxx:27,Deployability,install,installed,27,"// The TROOT destructor re-installed the minimal error handler",MatchSource.CODE_COMMENT,core/base/test/TErrorTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/test/TErrorTests.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/test/TErrorTests.cxx:59,Energy Efficiency,allocate,allocated,59,"// Again, should reuse the now enlarged, thread-local heap-allocated buffer",MatchSource.CODE_COMMENT,core/base/test/TErrorTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/test/TErrorTests.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/test/TQObjectTests.cxx:76,Safety,avoid,avoids,76,"// The interpreter needs to know about RQ_OBJECTTester and using this trick avoids moving this non-reusable class into; // its own header file.",MatchSource.CODE_COMMENT,core/base/test/TQObjectTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/test/TQObjectTests.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/test/TSystemTests.cxx:3,Testability,test,test,3,"// test with 512 bits, longer keys may not work",MatchSource.CODE_COMMENT,core/base/test/TSystemTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/test/TSystemTests.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx:231,Usability,Feedback,Feedback,231,"/// \file ROOT/RDirectory.hxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-07-31; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RDirectory.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx:4,Testability,Log,Logging,4,"/// Logging for generic IO functionality.",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RDirectory.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx:133,Security,hash,hashed,133,"// TODO: ContentMap_t should allow lookup by string_view while still providing; // storage of names.; /// The directory content is a hashed map of name => `Internal::RDirectoryEntry`.",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RDirectory.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx:185,Performance,multi-thread,multi-threaded,185,"/// Dedicated, process-wide RDirectory.; ///; /// \note This is *not* thread-safe. You will need to syncronize yourself. In; /// general it's a bad idea to use a global collection in a multi-threaded; /// environment; ROOT itself does not make use of it. It is merely offered for; /// historical, process-wide object registration by name. Instead, pass a; /// pointer to the object where you need to access it - this is also much; /// faster than a lookup by name.",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RDirectory.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx:77,Safety,safe,safe,77,"/// Dedicated, process-wide RDirectory.; ///; /// \note This is *not* thread-safe. You will need to syncronize yourself. In; /// general it's a bad idea to use a global collection in a multi-threaded; /// environment; ROOT itself does not make use of it. It is merely offered for; /// historical, process-wide object registration by name. Instead, pass a; /// pointer to the object where you need to access it - this is also much; /// faster than a lookup by name.",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RDirectory.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx:400,Security,access,access,400,"/// Dedicated, process-wide RDirectory.; ///; /// \note This is *not* thread-safe. You will need to syncronize yourself. In; /// general it's a bad idea to use a global collection in a multi-threaded; /// environment; ROOT itself does not make use of it. It is merely offered for; /// historical, process-wide object registration by name. Instead, pass a; /// pointer to the object where you need to access it - this is also much; /// faster than a lookup by name.",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RDirectory.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectoryEntry.hxx:236,Usability,Feedback,Feedback,236,"/// \file ROOT/RDirectoryEntry.hxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-07-31; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RDirectoryEntry.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectoryEntry.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectoryEntry.hxx:61,Deployability,update,update,61,"/// Inform the entry that it has been modified, and needs to update its; /// last-changed time stamp.",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RDirectoryEntry.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectoryEntry.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx:366,Energy Efficiency,charge,charge,366,"/**; * Conversion functions between full- and half-precision floats. The code used here is taken (with some modifications); * from the `half` C++ library (https://half.sourceforge.net/index.html), distributed under the MIT license.; *; * Original license:; *; * The MIT License; *; * Copyright (c) 2012-2021 Christian Rau; *; * Permission is hereby granted, free of charge, to any person obtaining a copy; * of this software and associated documentation files (the ""Software""), to deal; * in the Software without restriction, including without limitation the rights; * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; * copies of the Software, and to permit persons to whom the Software is; * furnished to do so, subject to the following conditions:; *; * The above copyright notice and this permission notice shall be included in; * all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN; * THE SOFTWARE.; */",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RFloat16.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx:1260,Integrability,CONTRACT,CONTRACT,1260,"/**; * Conversion functions between full- and half-precision floats. The code used here is taken (with some modifications); * from the `half` C++ library (https://half.sourceforge.net/index.html), distributed under the MIT license.; *; * Original license:; *; * The MIT License; *; * Copyright (c) 2012-2021 Christian Rau; *; * Permission is hereby granted, free of charge, to any person obtaining a copy; * of this software and associated documentation files (the ""Software""), to deal; * in the Software without restriction, including without limitation the rights; * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; * copies of the Software, and to permit persons to whom the Software is; * furnished to do so, subject to the following conditions:; *; * The above copyright notice and this permission notice shall be included in; * all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN; * THE SOFTWARE.; */",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RFloat16.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx:249,Performance,perform,performance,249,"/// Enable F16C intruction set intrinsics.; /// Defining this to 1 enables the use of [F16C compiler intrinsics](https://en.wikipedia.org/wiki/F16C) for converting; /// between half-precision and single-precision values which may result in improved performance. This will not perform; /// additional checks for support of the F16C instruction set, so an appropriate target platform is required when; /// enabling this feature.; ///; /// Unless predefined it will be enabled automatically when the `__F16C__` symbol is defined, which some compilers do on; /// supporting platforms.",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RFloat16.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx:276,Performance,perform,perform,276,"/// Enable F16C intruction set intrinsics.; /// Defining this to 1 enables the use of [F16C compiler intrinsics](https://en.wikipedia.org/wiki/F16C) for converting; /// between half-precision and single-precision values which may result in improved performance. This will not perform; /// additional checks for support of the F16C instruction set, so an appropriate target platform is required when; /// enabling this feature.; ///; /// Unless predefined it will be enabled automatically when the `__F16C__` symbol is defined, which some compilers do on; /// supporting platforms.",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RFloat16.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx:322,Testability,Log,Logical,322,"////////////////////////////////////////////////////////////////////////////////; /// \brief Round the given half-precision number to the nearest representable value.; ///; /// \param[in] value The finite half-precision number to round; /// \param[in] guardBit The most significant discarded bit; /// \param[in] stickyBit Logical OR of all but the most significant discarded bits; ///; /// \return The nearest-rounded half-precision value",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RFloat16.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RFloat16.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RIndexIter.hxx:231,Usability,Feedback,Feedback,231,"/// \file ROOT/RIndexIter.hxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2016-01-19; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2016, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,core/base/v7/inc/ROOT/RIndexIter.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RIndexIter.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/v7/src/RDirectory.cxx:226,Usability,Feedback,Feedback,226,"/// \file RDirectory.cxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2020-12-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,core/base/v7/src/RDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/src/RDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate SIZE bytes of memory. */,MatchSource.CODE_COMMENT,core/clib/res/mmalloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h:6,Energy Efficiency,allocate,allocate,6,"/* Re-allocate the previously allocated block in PTR, making the new block; SIZE bytes long. */",MatchSource.CODE_COMMENT,core/clib/res/mmalloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h:30,Energy Efficiency,allocate,allocated,30,"/* Re-allocate the previously allocated block in PTR, making the new block; SIZE bytes long. */",MatchSource.CODE_COMMENT,core/clib/res/mmalloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate NMEMB elements of SIZE bytes each, all initialized to 0. */",MatchSource.CODE_COMMENT,core/clib/res/mmalloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h:16,Energy Efficiency,allocate,allocated,16,"/* Free a block allocated by `mmalloc', `mrealloc' or `mcalloc'. */",MatchSource.CODE_COMMENT,core/clib/res/mmalloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate SIZE bytes allocated to ALIGNMENT bytes. */,MatchSource.CODE_COMMENT,core/clib/res/mmalloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h:23,Energy Efficiency,allocate,allocated,23,/* Allocate SIZE bytes allocated to ALIGNMENT bytes. */,MatchSource.CODE_COMMENT,core/clib/res/mmalloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate SIZE bytes on a page boundary. */,MatchSource.CODE_COMMENT,core/clib/res/mmalloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmalloc.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:181,Energy Efficiency,power,powers,181,"/* The allocator divides the heap into blocks of fixed size; large; requests receive one or more whole blocks, and small requests; receive a fragment of a block. Fragment sizes are powers of two,; and all fragments of a block are the same size. When all the; fragments in a block have been freed, the block itself is freed. */",MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:141,Energy Efficiency,reduce,reduce,141,"/* Where to start searching the free list when looking for new memory.; The two possible values are 0 and heapindex. Starting at 0 seems; to reduce total memory usage, while starting at heapindex seems to; run faster. */",MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:51,Testability,log,logarithm,51,"/* Zero for a large block, or positive giving the; logarithm to the base two of the fragment size. */",MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:18,Energy Efficiency,allocate,allocated,18,/* List of blocks allocated with `mmemalign' (or `mvalloc'). */,MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:14,Availability,avail,available,14,"/* Statistics available to the user.; FIXME: By design, the internals of the malloc package are no longer; exported to the user via an include file, so access to this data needs; to be via some other mechanism, such as mmstat_<something> where the; return value is the <something> the user is interested in. */",MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:152,Security,access,access,152,"/* Statistics available to the user.; FIXME: By design, the internals of the malloc package are no longer; exported to the user via an include file, so access to this data needs; to be via some other mechanism, such as mmstat_<something> where the; return value is the <something> the user is interested in. */",MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:10,Energy Efficiency,allocate,allocated,10,/* Chunks allocated by the user. */,MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:22,Energy Efficiency,allocate,allocated,22,/* Byte total of user-allocated chunks. */,MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:50,Safety,sanity check,sanity check,50,"/* The size in bytes of this structure, used as a sanity check when reusing; a previously created mapped file. */",MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:185,Integrability,rout,routine,185,"/* Pointer to the function that is used to get more core, or return core; to the system, for requests using this malloc descriptor. For memory; mapped regions, this is the mmap() based routine. There may also be; a single malloc descriptor that points to an sbrk() based routine; for systems without mmap() or for applications that call the mmalloc(); package with a NULL malloc descriptor. FIXME: For mapped regions shared by more than one process, this; needs to be maintained on a per-process basis. */",MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:271,Integrability,rout,routine,271,"/* Pointer to the function that is used to get more core, or return core; to the system, for requests using this malloc descriptor. For memory; mapped regions, this is the mmap() based routine. There may also be; a single malloc descriptor that points to an sbrk() based routine; for systems without mmap() or for applications that call the mmalloc(); package with a NULL malloc descriptor. FIXME: For mapped regions shared by more than one process, this; needs to be maintained on a per-process basis. */",MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:42,Safety,abort,abort,42,"/* Pointer to the function that causes an abort when the memory checking; features are activated. By default this is set to abort(), but can; be set to another function by the application using mmalloc(). FIXME: For mapped regions shared by more than one process, this; needs to be maintained on a per-process basis. */",MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:124,Safety,abort,abort,124,"/* Pointer to the function that causes an abort when the memory checking; features are activated. By default this is set to abort(), but can; be set to another function by the application using mmalloc(). FIXME: For mapped regions shared by more than one process, this; needs to be maintained on a per-process basis. */",MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:29,Energy Efficiency,Allocate,Allocated,29,/* Block information table.; Allocated with malign/__mmalloc_free (not mmalloc/mfree). */; /* Table indexed by block number giving per-block information. */,MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:18,Energy Efficiency,allocate,allocated,18,/* List of blocks allocated by memalign. */,MatchSource.CODE_COMMENT,core/clib/res/mmprivate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/inc/root_std_complex.h:3,Testability,Assert,Asserts,3,"// Asserts about the size of the complex",MatchSource.CODE_COMMENT,core/clingutils/inc/root_std_complex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/inc/root_std_complex.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:211,Modifiability,variab,variable,211,"//______________________________________________________________________________; // Return (in the argument 'output') a mangled version of the C++ symbol/type (pass as 'input'); // that can be used in C++ as a variable name.",MatchSource.CODE_COMMENT,core/clingutils/res/TClingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:368,Integrability,rout,routine,368,"//______________________________________________________________________________; // Return the type normalized for ROOT,; // keeping only the ROOT opaque typedef (Double32_t, etc.) and; // adding default template argument for all types except those explicitly; // requested to be drop by the user.; // Default template for STL collections are not yet removed by this routine.",MatchSource.CODE_COMMENT,core/clingutils/res/TClingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:204,Safety,avoid,avoid,204,"//______________________________________________________________________________; // Overload the template for typedefs, because they don't contain; // isThisDeclarationADefinition method. (Use inline to avoid violating ODR)",MatchSource.CODE_COMMENT,core/clingutils/res/TClingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:103,Availability,error,error,103,"//______________________________________________________________________________; // Inclusive minimum error level a message needs to get handled",MatchSource.CODE_COMMENT,core/clingutils/res/TClingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:117,Integrability,message,message,117,"//______________________________________________________________________________; // Inclusive minimum error level a message needs to get handled",MatchSource.CODE_COMMENT,core/clingutils/res/TClingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:30,Availability,error,errors,30,"// Keep track of the warnings/errors we printed.",MatchSource.CODE_COMMENT,core/clingutils/res/TClingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:114,Availability,error,error,114,"//______________________________________________________________________________; // Use this function in case an error occured.",MatchSource.CODE_COMMENT,core/clingutils/res/TClingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:140,Availability,error,error,140,"//______________________________________________________________________________; // Use this function in case a system (OS or GUI) related error occured.",MatchSource.CODE_COMMENT,core/clingutils/res/TClingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:121,Integrability,message,messages,121,"//______________________________________________________________________________; // Use this function for informational messages.",MatchSource.CODE_COMMENT,core/clingutils/res/TClingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:122,Availability,error,error,122,"//______________________________________________________________________________; // Use this function in case of a fatal error. It will abort the program.",MatchSource.CODE_COMMENT,core/clingutils/res/TClingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:137,Safety,abort,abort,137,"//______________________________________________________________________________; // Use this function in case of a fatal error. It will abort the program.",MatchSource.CODE_COMMENT,core/clingutils/res/TClingUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/complexLinkdef.h:173,Security,checksum,checksum,173,"// IO Rules; // From OSx to ROOT; // There the datamembers are called __re_ and __im_; // #pragma read sourceClass=""complex<float>"" \; // targetClass=""complex<float>"" \; // checksum=[3671150135] \; // source=""float __re_;"" \; // target="""" \; // code=""{ newObj->real(onfile.__re_);}""; //; // #pragma read sourceClass=""complex<float>"" \; // targetClass=""complex<float>"" \; // checksum=[3671150135] \; // source=""float __im_;"" \; // target="""" \; // code=""{ newObj->imag(onfile.__im_);}""",MatchSource.CODE_COMMENT,core/clingutils/src/complexLinkdef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/complexLinkdef.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/complexLinkdef.h:374,Security,checksum,checksum,374,"// IO Rules; // From OSx to ROOT; // There the datamembers are called __re_ and __im_; // #pragma read sourceClass=""complex<float>"" \; // targetClass=""complex<float>"" \; // checksum=[3671150135] \; // source=""float __re_;"" \; // target="""" \; // code=""{ newObj->real(onfile.__re_);}""; //; // #pragma read sourceClass=""complex<float>"" \; // targetClass=""complex<float>"" \; // checksum=[3671150135] \; // source=""float __im_;"" \; // target="""" \; // code=""{ newObj->imag(onfile.__im_);}""",MatchSource.CODE_COMMENT,core/clingutils/src/complexLinkdef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/complexLinkdef.h
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/RStl.cxx:108,Integrability,wrap,wrappers,108,"// This function writes the TGeneraticClassInfo initialiser; // and the auxiliary functions (new and delete wrappers) for; // each of the STL containers that have been registered",MatchSource.CODE_COMMENT,core/clingutils/src/RStl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/RStl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:547,Integrability,wrap,wrappers,547,"// @(#)root/metautils:$Id$; // Author: Paul Russo, 2009-10-06; /*************************************************************************; * Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //______________________________________________________________________________; // //; // ROOT::TMetaUtils provides utility wrappers around //; // cling, the LLVM-based interpreter. It's an internal set of tools //; // used by TCling and rootcling. //; // //; //______________________________________________________________________________",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:93,Integrability,rout,routine,93,"////////////////////////////////////////////////////////////////////////////////; /// Helper routine to ry hard to avoid looking up in the Cling database as; /// this could enduce an unwanted autoparsing.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:115,Safety,avoid,avoid,115,"////////////////////////////////////////////////////////////////////////////////; /// Helper routine to ry hard to avoid looking up in the Cling database as; /// this could enduce an unwanted autoparsing.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:111,Usability,simpl,simple,111,"////////////////////////////////////////////////////////////////////////////////; /// We assume that we have a simple type:; /// [const] typename[*&][const]",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:161,Availability,redundant,redundant,161,"// Try hard to avoid looking up in the Cling database as this could enduce; // an unwanted autoparsing.; // Note: this is always done by the callers and thus is redundant.; // Maybe replace with",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:15,Safety,avoid,avoid,15,"// Try hard to avoid looking up in the Cling database as this could enduce; // an unwanted autoparsing.; // Note: this is always done by the callers and thus is redundant.; // Maybe replace with",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:161,Safety,redund,redundant,161,"// Try hard to avoid looking up in the Cling database as this could enduce; // an unwanted autoparsing.; // Note: this is always done by the callers and thus is redundant.; // Maybe replace with",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:95,Performance,load,loading,95,"// Since we already check via other means (TClassTable which is populated by; // the dictonary loading, and the gROOT list of classes and enums, which are; // populated via TProtoClass/Enum), we should be able to disable the autoloading; // ... which requires access to libCore or libCling ...",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:260,Security,access,access,260,"// Since we already check via other means (TClassTable which is populated by; // the dictonary loading, and the gROOT list of classes and enums, which are; // populated via TProtoClass/Enum), we should be able to disable the autoloading; // ... which requires access to libCore or libCling ...",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:111,Integrability,rout,routine,111,"////////////////////////////////////////////////////////////////////////////////; // TClassEdit will call this routine as soon as any of its static variable (used; // for caching) is destroyed.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:148,Modifiability,variab,variable,148,"////////////////////////////////////////////////////////////////////////////////; // TClassEdit will call this routine as soon as any of its static variable (used; // for caching) is destroyed.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:3,Safety,Detect,Detect,3,"// Detect if the class has a DirectoryAutoAdd; // Detect if the class or one of its parent has a DirectoryAutoAdd",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:50,Safety,Detect,Detect,50,"// Detect if the class has a DirectoryAutoAdd; // Detect if the class or one of its parent has a DirectoryAutoAdd",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:3,Safety,Detect,Detect,3,"// Detect if the class has a 'new' Merge function.; // Detect if the class or one of its parent has a DirectoryAutoAdd",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:55,Safety,Detect,Detect,55,"// Detect if the class has a 'new' Merge function.; // Detect if the class or one of its parent has a DirectoryAutoAdd",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:3,Safety,Detect,Detect,3,"// Detect if the class has an old fashion Merge function.; // Detect if the class or one of its parent has a DirectoryAutoAdd",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:62,Safety,Detect,Detect,62,"// Detect if the class has an old fashion Merge function.; // Detect if the class or one of its parent has a DirectoryAutoAdd",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:3,Safety,Detect,Detect,3,"// Detect if the class has a 'new' Merge function.; // bool hasMethod = cl.HasMethod(""DirectoryAutoAdd"");; // Detect if the class or one of its parent has a DirectoryAutoAdd",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:110,Safety,Detect,Detect,110,"// Detect if the class has a 'new' Merge function.; // bool hasMethod = cl.HasMethod(""DirectoryAutoAdd"");; // Detect if the class or one of its parent has a DirectoryAutoAdd",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:49,Modifiability,variab,variables,49,"// The CINT based code was filtering away static variables (they are not part of; // the list starting with field_begin in clang), and const enums (which should; // also not be part of this list).; // It was also filtering out the 'G__virtualinfo' artificial member.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:103,Availability,ERROR,ERROR,103,"// std::string type_name;; // type_name = GetQualifiedName( instanceType, *clxx );; // fprintf(stderr,""ERROR: Could not findS TST for %s\n"",type_name.c_str());",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:2,Availability,Error,Error,2,"//Error(0,""Could not find the clang::Type for %s\n"",cl.GetNormalizedName());",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:14,Availability,Error,Error,14,"//TMetaUtils::Error(0,""Could not cast Attribute to AnnotatedAttribute\n"");",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:14,Availability,Error,Error,14,"//TMetaUtils::Error(0,""Could not find property name-value separator (%s)\n"",ROOT::TMetaUtils::PropertyNameValSeparator.c_str());",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:80,Security,access,accessible,80,"// The GenerateInitInstance for STL are not unique and should not be externally accessible",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:13,Security,attack,attack,13,"// Let's now attack regular properties",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:25,Integrability,wrap,wrapper,25,"// write the constructor wrapper only for concrete classes",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:57,Integrability,depend,depend,57,"// This is a non-ClassDef(), complex function - it might depend on state; // and thus we'll need the runtime and cannot determine the result; // statically.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:247,Modifiability,variab,variable,247,"// ClassDef controls the content of Class_Version() but not the return; // expression which is CPP expanded from what the user provided as second; // ClassDef argument. It's usually just be an integer literal but it could; // also be an enum or a variable template for all we know.; // Go through ICE to be more general.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:3,Security,Integrity,Integrity,3,"// Integrity check in case this array changes its size at some point.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:22,Safety,detect,detect,22,"// In particular this detect if the class has a version number.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:480,Testability,test,test,480,"// Don't add the default paramater onto std classes.; // We really need this for __shared_ptr which add a enum constant value which; // is spelled in its 'numeral' form and thus the resulting type name is; // incorrect. We also can used this for any of the STL collections where we; // know we don't want the default argument. For the other members of the; // std namespace this is dubious (because TMetaUtils::GetNormalizedName would; // not drop those defaults). [I.e. the real test ought to be is std and; // name is __shared_ptr or vector or list or set or etc.]",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:80,Availability,error,error,80,"// The substition can fail, in which case there would have been compilation; // error printed on the screen.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:34,Energy Efficiency,allocate,allocate,34,"// If we added default parameter, allocate new type in the AST.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:3,Availability,Error,Error,3,"// Error we only access integer.; //NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) is not an interger\n"",; // member.MemberOf()->Name(), member.Name(), current);",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:63,Availability,error,error,63,"// Error we only access integer.; //NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) is not an interger\n"",; // member.MemberOf()->Name(), member.Name(), current);",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:17,Security,access,access,17,"// Error we only access integer.; //NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) is not an interger\n"",; // member.MemberOf()->Name(), member.Name(), current);",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:44,Availability,down,down,44,"// Let's see if it has already been written down in the; // Streamer.; // Let's see if we already wrote it down in the; // streamer.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:107,Availability,down,down,107,"// Let's see if it has already been written down in the; // Streamer.; // Let's see if we already wrote it down in the; // streamer.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:129,Availability,error,error,129,"// we reached the current data member before; // reaching the index so we have not written it yet!; //NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) has not been defined before the array \n"",; // member.MemberOf()->Name(), member.Name(), current);",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:29,Availability,error,error,29,"//NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) is not int \n"",; // member.MemberOf()->Name(), member.Name(), current);",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:15,Modifiability,variab,variable,15,"// There is no variable by this name in this class, let see; // the base classes!:",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:81,Availability,error,error,81,"// We found a data member but it is the wrong type; //NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) is not int \n"",; // member.MemberOf()->Name(), member.Name(), current);",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:29,Availability,error,error,29,"//NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) is not int \n"",; // member.MemberOf()->Name(), member.Name(), current);",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:29,Availability,error,error,29,"//NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) is a private member of %s \n"",",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:29,Availability,error,error,29,"//NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) is not known \n"",; // member.MemberOf()->Name(), member.Name(), indexvar);",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:2,Performance,Cache,CacheFailures,2,/*CacheFailures*/,MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:189,Deployability,A/B,A/B,189,"// Now headerFID references the last valid system header or the original; // user file.; // Find out how to include it by matching file name to include paths.; // We assume that the file ""/A/B/C/D.h"" can at some level be included as; // ""C/D.h"". Be we cannot know whether that happens to be a different file; // with the same name. Thus we first find the longest stem that can be; // reached, say B/C/D.h. Then we find the shortest one, say C/D.h, that; // points to the same file as the long version. If such a short version; // exists it will be returned. If it doesn't the long version is returned.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:20,Availability,avail,available,20,"// Find the longest available match.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:31,Security,secur,security,31,"// Check if this is a type for security",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:20,Testability,test,tests,20,"// Now the equality tests for non template specialisations.; // The easy cases:; // template <class T=double> class A; or; // template <class T=A<float>> class B;",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:80,Availability,error,error,80,"// The substition can fail, in which case there would have been compilation; // error printed on the screen.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:74,Availability,down,down,74,"// Loop over the template parameters and arguments recursively.; // We go down the two lanes: the one of template parameters (decls) and the; // one of template arguments (QualTypes) in parallel. The former are a; // property of the template, independent of its instantiations.; // The latter are a property of the instance itself.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:157,Integrability,rout,routine,157,"// Stop if the normalized TemplateSpecializationType has less arguments than; // the one index is pointing at.; // We piggy back on the AddDefaultParameters routine basically.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:178,Safety,avoid,avoid,178,"// This is the last template parameter in the template declaration; // but it is signaling that there can be an arbitrary number of arguments; // in the template instance. So to avoid inadvertenly dropping those; // arguments we just process all remaining argument and exit the main loop.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:22,Integrability,rout,routine,22,"// The result of this routine is by definition a fully qualified name. There is an implicit starting '::' at the beginning of the name.; // Depending on how the user typed their code, in particular typedef declarations, we may end up with an explicit '::' being; // part of the result string. For consistency, we must remove it.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:140,Integrability,Depend,Depending,140,"// The result of this routine is by definition a fully qualified name. There is an implicit starting '::' at the beginning of the name.; // Depending on how the user typed their code, in particular typedef declarations, we may end up with an explicit '::' being; // part of the result string. For consistency, we must remove it.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:34,Integrability,rout,routine,34,"// FIXME: We should optimize this routine instead making it do the wrong thing; // returning an empty comment if the decl came from the AST.; // In order to do that we need to: check if the decl has an attribute and; // return the attribute content (including walking the redecl chain) and if; // this is not the case we should try finding it in the header file.; // This will allow us to move the implementation of TCling*Info::Title() in; // TClingDeclInfo.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:20,Performance,optimiz,optimize,20,"// FIXME: We should optimize this routine instead making it do the wrong thing; // returning an empty comment if the decl came from the AST.; // In order to do that we need to: check if the decl has an attribute and; // return the attribute content (including walking the redecl chain) and if; // this is not the case we should try finding it in the header file.; // This will allow us to move the implementation of TCling*Info::Title() in; // TClingDeclInfo.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:17,Energy Efficiency,reduce,reduce,17,"// Might need to reduce it to shared_ptr and STL collection.s",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:52,Security,hash,hashtable,52,"// Return true if the decl is of type.; // A proper hashtable for caching results would be the ideal solution; // 1) Only one lookup per type; // 2) No string comparison; // We may use a map which becomes an unordered map if c++11 is enabled?",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:29,Testability,assert,assert,29,"// this would be probably an assert given that this state is not reachable unless a mistake is somewhere",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:8,Integrability,rout,routine,8,"// This routine could be enhanced to also support:; //; // testAlloc: if true, we test allocator, if it is not default result is negative; // result: 0 : not stl container; // abs(result): code of container 1=vector,2=list,3=deque,4=map; // 5=multimap,6=set,7=multiset; // positive val: we have a vector or list with default allocator to any depth; // like vector<list<vector<int>>>; // negative val: STL container other than vector or list, or non default allocator; // For example: vector<deque<int>> has answer -1",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:25,Modifiability,enhance,enhanced,25,"// This routine could be enhanced to also support:; //; // testAlloc: if true, we test allocator, if it is not default result is negative; // result: 0 : not stl container; // abs(result): code of container 1=vector,2=list,3=deque,4=map; // 5=multimap,6=set,7=multiset; // positive val: we have a vector or list with default allocator to any depth; // like vector<list<vector<int>>>; // negative val: STL container other than vector or list, or non default allocator; // For example: vector<deque<int>> has answer -1",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:59,Testability,test,testAlloc,59,"// This routine could be enhanced to also support:; //; // testAlloc: if true, we test allocator, if it is not default result is negative; // result: 0 : not stl container; // abs(result): code of container 1=vector,2=list,3=deque,4=map; // 5=multimap,6=set,7=multiset; // positive val: we have a vector or list with default allocator to any depth; // like vector<list<vector<int>>>; // negative val: STL container other than vector or list, or non default allocator; // For example: vector<deque<int>> has answer -1",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:82,Testability,test,test,82,"// This routine could be enhanced to also support:; //; // testAlloc: if true, we test allocator, if it is not default result is negative; // result: 0 : not stl container; // abs(result): code of container 1=vector,2=list,3=deque,4=map; // 5=multimap,6=set,7=multiset; // positive val: we have a vector or list with default allocator to any depth; // like vector<list<vector<int>>>; // negative val: STL container other than vector or list, or non default allocator; // For example: vector<deque<int>> has answer -1",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:60,Usability,guid,guiding,60,"// if there is no typedef in instance then there is nothing guiding any; // template parameter typedef replacement.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:32,Availability,redundant,redundant,32,/* the following is likely just redundant */,MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:32,Safety,redund,redundant,32,/* the following is likely just redundant */,MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:26,Energy Efficiency,allocate,allocate,26,"// If desugaring happened allocate new type in the AST.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:13,Usability,simpl,simple,13,"// inline or simple namespace",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:42,Integrability,inject,inject,42,"// If this is an explicit specialization, inject it into cling, too, such that it can have; // externalLexicalStorage, see TCling.cxx's ExtVisibleStorageAdder::VisitClassTemplateSpecializationDecl.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:42,Security,inject,inject,42,"// If this is an explicit specialization, inject it into cling, too, such that it can have; // externalLexicalStorage, see TCling.cxx's ExtVisibleStorageAdder::VisitClassTemplateSpecializationDecl.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:20,Safety,avoid,avoid,20,"// Add a \n here to avoid long lines which contain duplications, for example (from MathCore):; // namespace ROOT { namespace Math { class IBaseFunctionMultiDim; } }namespace ROOT { namespace Fit { template <typename FunType> class Chi2FCN; } }; // namespace ROOT { namespace Math { class IGradientFunctionMultiDim; } }namespace ROOT { namespace Fit { template <typename FunType> class Chi2FCN; } }",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:14,Safety,avoid,avoid,14,"// Heuristic: avoid entities like myclass<myType1, myType2::xyz>",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:77,Usability,simpl,simple,77,"// Start Recursion if the underlying type is a TypedefNameDecl; // Note: the simple cast w/o the getSingleStepDesugaredType call; // does not work in case the typedef is in a namespace.",MatchSource.CODE_COMMENT,core/clingutils/src/TClingUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx:70,Testability,test,tests,70,"/// \file TClingUtilsTests.cxx; ///; /// \brief The file contain unit tests which test the TClingUtils.h; ///; /// \author Vassil Vassilev <vvasilev@cern.ch>; ///; /// \date Aug, 2019; ///; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,core/clingutils/test/TClingUtilsTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx:82,Testability,test,test,82,"/// \file TClingUtilsTests.cxx; ///; /// \brief The file contain unit tests which test the TClingUtils.h; ///; /// \author Vassil Vassilev <vvasilev@cern.ch>; ///; /// \date Aug, 2019; ///; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,core/clingutils/test/TClingUtilsTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx:49,Modifiability,variab,variable,49,"// Test for converting a string to a valid C/C++ variable name",MatchSource.CODE_COMMENT,core/clingutils/test/TClingUtilsTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx:3,Testability,Test,Test,3,"// Test for converting a string to a valid C/C++ variable name",MatchSource.CODE_COMMENT,core/clingutils/test/TClingUtilsTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBits.h:3,Deployability,Update,Update,3,"// Update the allocated size.",MatchSource.CODE_COMMENT,core/cont/inc/TBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBits.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBits.h:14,Energy Efficiency,allocate,allocated,14,"// Update the allocated size.",MatchSource.CODE_COMMENT,core/cont/inc/TBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBits.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBtree.h:127,Modifiability,inherit,inherits,127,"//////////////////////////////////////////////////////////////////////////; // //; // TBtree //; // //; // Btree class. TBtree inherits from the TSeqCollection ABC. //; // //; // For a more extensive algorithmic description see the TBtree source. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TBtree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBtree.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBtree.h:30,Security,access,access,30,"//order*2+1 (assumes a memory access is; //cheaper than a multiply and increment by one",MatchSource.CODE_COMMENT,core/cont/inc/TBtree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBtree.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBtree.h:152,Deployability,update,updated,152,"// for inner node 1 <= fLast <= fInnerMaxIndex; // for leaf node 1 <= fLast <= fLeafMaxIndex; // (fLast==0 only temporarily while the tree is being; // updated)",MatchSource.CODE_COMMENT,core/cont/inc/TBtree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBtree.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:155,Modifiability,inherit,inherits,155,"//////////////////////////////////////////////////////////////////////////; // //; // TCollection //; // //; // Collection abstract base class. This class inherits from TObject //; // because we want to be able to have collections of collections. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:268,Performance,concurren,concurrent,268,"// #define R__CHECK_COLLECTION_MULTI_ACCESS; // When R__CHECK_COLLECTION_MULTI_ACCESS is turned on (defined),; // the normal (not locked) ROOT TCollections are instrumented with a; // pseudo read-write lock which does not halt the execution but detects; // and report concurrent access to the same collections.; // Multiple readers are allowed.; // Multiple concurrent writer is reported as a Conflict; // Readers access while a write is running is reported as Conflict; // Re-entrant writing call by the same Writer thread are allowed.; // Entering a writing section by a single Reader thread is allowed.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:358,Performance,concurren,concurrent,358,"// #define R__CHECK_COLLECTION_MULTI_ACCESS; // When R__CHECK_COLLECTION_MULTI_ACCESS is turned on (defined),; // the normal (not locked) ROOT TCollections are instrumented with a; // pseudo read-write lock which does not halt the execution but detects; // and report concurrent access to the same collections.; // Multiple readers are allowed.; // Multiple concurrent writer is reported as a Conflict; // Readers access while a write is running is reported as Conflict; // Re-entrant writing call by the same Writer thread are allowed.; // Entering a writing section by a single Reader thread is allowed.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:245,Safety,detect,detects,245,"// #define R__CHECK_COLLECTION_MULTI_ACCESS; // When R__CHECK_COLLECTION_MULTI_ACCESS is turned on (defined),; // the normal (not locked) ROOT TCollections are instrumented with a; // pseudo read-write lock which does not halt the execution but detects; // and report concurrent access to the same collections.; // Multiple readers are allowed.; // Multiple concurrent writer is reported as a Conflict; // Readers access while a write is running is reported as Conflict; // Re-entrant writing call by the same Writer thread are allowed.; // Entering a writing section by a single Reader thread is allowed.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:279,Security,access,access,279,"// #define R__CHECK_COLLECTION_MULTI_ACCESS; // When R__CHECK_COLLECTION_MULTI_ACCESS is turned on (defined),; // the normal (not locked) ROOT TCollections are instrumented with a; // pseudo read-write lock which does not halt the execution but detects; // and report concurrent access to the same collections.; // Multiple readers are allowed.; // Multiple concurrent writer is reported as a Conflict; // Readers access while a write is running is reported as Conflict; // Re-entrant writing call by the same Writer thread are allowed.; // Entering a writing section by a single Reader thread is allowed.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:414,Security,access,access,414,"// #define R__CHECK_COLLECTION_MULTI_ACCESS; // When R__CHECK_COLLECTION_MULTI_ACCESS is turned on (defined),; // the normal (not locked) ROOT TCollections are instrumented with a; // pseudo read-write lock which does not halt the execution but detects; // and report concurrent access to the same collections.; // Multiple readers are allowed.; // Multiple concurrent writer is reported as a Conflict; // Readers access while a write is running is reported as Conflict; // Re-entrant writing call by the same Writer thread are allowed.; // Entering a writing section by a single Reader thread is allowed.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:22,Safety,detect,detect,22,"//! Special 'lock' to detect multiple access to a collection.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:38,Security,access,access,38,"//! Special 'lock' to detect multiple access to a collection.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:98,Energy Efficiency,allocate,allocated,98,"/// Return the *capacity* of the collection, i.e. the current total amount of space that has been allocated so far.; /// Same as `Capacity`. Use `GetEntries` to get the number of elements currently in the collection.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:115,Integrability,wrap,wrapper,115,"//////////////////////////////////////////////////////////////////////////; // //; // TIter //; // //; // Iterator wrapper. Type of iterator used depends on type of //; // collection. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:146,Integrability,depend,depends,146,"//////////////////////////////////////////////////////////////////////////; // //; // TIter //; // //; // Iterator wrapper. Type of iterator used depends on type of //; // collection. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:11,Integrability,wrap,wrapper,11,"//Iterator wrapper",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:136,Modifiability,inherit,inherits,136,"// namespace Internal; /// Special implementation of ROOT::RRangeCast for TCollection, including a; /// check that the cast target type inherits from TObject and a new constructor; /// that takes the TCollection by pointer.; /// \tparam T The new type to convert to.; /// \tparam isDynamic If `true`, `dynamic_cast` is used, otherwise `static_cast` is used.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:34,Energy Efficiency,adapt,adapter,34,"/// @brief TRangeStaticCast is an adapter class that allows the typed iteration; /// through a TCollection. This requires the collection to contain elements; /// of the type requested (or a derived class). Any deviation from this expectation; /// will only be caught/reported by an assert in debug builds.; ///; /// This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; ///; /// The typical use is:; /// ```{.cpp}; /// for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// ```; /// \tparam T The new type to convert to.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:34,Integrability,adapter,adapter,34,"/// @brief TRangeStaticCast is an adapter class that allows the typed iteration; /// through a TCollection. This requires the collection to contain elements; /// of the type requested (or a derived class). Any deviation from this expectation; /// will only be caught/reported by an assert in debug builds.; ///; /// This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; ///; /// The typical use is:; /// ```{.cpp}; /// for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// ```; /// \tparam T The new type to convert to.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:34,Modifiability,adapt,adapter,34,"/// @brief TRangeStaticCast is an adapter class that allows the typed iteration; /// through a TCollection. This requires the collection to contain elements; /// of the type requested (or a derived class). Any deviation from this expectation; /// will only be caught/reported by an assert in debug builds.; ///; /// This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; ///; /// The typical use is:; /// ```{.cpp}; /// for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// ```; /// \tparam T The new type to convert to.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:282,Testability,assert,assert,282,"/// @brief TRangeStaticCast is an adapter class that allows the typed iteration; /// through a TCollection. This requires the collection to contain elements; /// of the type requested (or a derived class). Any deviation from this expectation; /// will only be caught/reported by an assert in debug builds.; ///; /// This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; ///; /// The typical use is:; /// ```{.cpp}; /// for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// ```; /// \tparam T The new type to convert to.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:50,Energy Efficiency,adapt,adapter,50,"// namespace ROOT; /// @brief TRangeDynCast is an adapter class that allows the typed iteration; /// through a TCollection.; ///; /// The typical use is:; /// ```{.cpp}; /// for(auto bcl : TRangeDynCast<TBaseClass>( *cl->GetListOfBases() )) {; /// if (!bcl) continue;; /// ... use bcl as a TBaseClass*; /// }; /// for(auto bcl : TRangeDynCast<TBaseClass>( cl->GetListOfBases() )) {; /// if (!bcl) continue;; /// ... use bcl as a TBaseClass*; /// }; /// ```; /// \tparam T The new type to convert to.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:50,Integrability,adapter,adapter,50,"// namespace ROOT; /// @brief TRangeDynCast is an adapter class that allows the typed iteration; /// through a TCollection.; ///; /// The typical use is:; /// ```{.cpp}; /// for(auto bcl : TRangeDynCast<TBaseClass>( *cl->GetListOfBases() )) {; /// if (!bcl) continue;; /// ... use bcl as a TBaseClass*; /// }; /// for(auto bcl : TRangeDynCast<TBaseClass>( cl->GetListOfBases() )) {; /// if (!bcl) continue;; /// ... use bcl as a TBaseClass*; /// }; /// ```; /// \tparam T The new type to convert to.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:50,Modifiability,adapt,adapter,50,"// namespace ROOT; /// @brief TRangeDynCast is an adapter class that allows the typed iteration; /// through a TCollection.; ///; /// The typical use is:; /// ```{.cpp}; /// for(auto bcl : TRangeDynCast<TBaseClass>( *cl->GetListOfBases() )) {; /// if (!bcl) continue;; /// ... use bcl as a TBaseClass*; /// }; /// for(auto bcl : TRangeDynCast<TBaseClass>( cl->GetListOfBases() )) {; /// if (!bcl) continue;; /// ... use bcl as a TBaseClass*; /// }; /// ```; /// \tparam T The new type to convert to.",MatchSource.CODE_COMMENT,core/cont/inc/TCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:112,Security,access,access,112,"/** @class ROOT::Detail::TCollectionProxyInfo::Iterators; *; * Small helper to implement the function to create,access and destroy; * iterators.; *; **/",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:44,Safety,avoid,avoid,44,"// For Vector we take an extra short cut to avoid derefencing; // the iterator all the time and redefine the 'address' of the; // iterator as the iterator itself. This requires special handling; // in the looper (see TStreamerInfoAction) but is much faster.",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:26,Safety,Safe,Safe,26,"// coverity[past_the_end] Safe on other platforms",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:338,Deployability,update,update,338,"// Should not be used.; // In the case of vector, so that the I/O can perform better,; // the begin_arena and the end_arena are *not* set to the; // address of any iterator rather they are set to the value of; // the beginning (and end) address of the vector's data.; // Hence this routine (which takes the value of fBegin) can; // *not* update where its points to (which in the case of vector; // would require update the value of fBegin).",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:412,Deployability,update,update,412,"// Should not be used.; // In the case of vector, so that the I/O can perform better,; // the begin_arena and the end_arena are *not* set to the; // address of any iterator rather they are set to the value of; // the beginning (and end) address of the vector's data.; // Hence this routine (which takes the value of fBegin) can; // *not* update where its points to (which in the case of vector; // would require update the value of fBegin).",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:282,Integrability,rout,routine,282,"// Should not be used.; // In the case of vector, so that the I/O can perform better,; // the begin_arena and the end_arena are *not* set to the; // address of any iterator rather they are set to the value of; // the beginning (and end) address of the vector's data.; // Hence this routine (which takes the value of fBegin) can; // *not* update where its points to (which in the case of vector; // would require update the value of fBegin).",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:70,Performance,perform,perform,70,"// Should not be used.; // In the case of vector, so that the I/O can perform better,; // the begin_arena and the end_arena are *not* set to the; // address of any iterator rather they are set to the value of; // the beginning (and end) address of the vector's data.; // Hence this routine (which takes the value of fBegin) can; // *not* update where its points to (which in the case of vector; // would require update the value of fBegin).",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:97,Security,access,accesses,97,/** @class ROOT::Detail::TCollectionProxyInfo::Type; *; * Small helper to encapsulate basic data accesses for; * all STL continers.; *; * @author M.Frank; * @version 1.0; * @date 10/10/2004; */,MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:109,Security,access,accesses,109,"/** @class ROOT::Detail::TCollectionProxyInfo::Pushback; *; * Small helper to encapsulate all necessary data accesses for; * containers like vector, list, deque; *; * @author M.Frank; * @version 1.0; * @date 10/10/2004; */",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:110,Security,access,accesses,110,/** @class ROOT::Detail::TCollectionProxyInfo::Pushfront; *; * Small helper to encapsulate all necessary data accesses for; * containers like forward_list; *; * @author D.Piparo; * @version 1.0; * @date 26/02/2015; */,MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:107,Security,access,accesses,107,"/** @class ROOT::Detail::TCollectionProxyInfo::Insert; *; * Small helper to encapsulate all necessary data accesses for; * containers like set, multiset etc.; *; * @author M.Frank; * @version 1.0; * @date 10/10/2004; */",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:110,Security,access,accesses,110,"/** @class ROOT::Detail::TCollectionProxyInfo::MapInsert; *; * Small helper to encapsulate all necessary data accesses for; * containers like set, multiset etc.; *; * @author M.Frank; * @version 1.0; * @date 10/10/2004; */",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:272,Energy Efficiency,allocate,allocated,272,"// begin_arena and end_arena should contain the location of memory arena of size fgIteratorSize.; // If the collection iterator are of that size or less, the iterators will be constructed in place in those location (new with placement); // Otherwise the iterators will be allocated via a regular new and their address returned by modifying the value of begin_arena and end_arena.",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:300,Energy Efficiency,allocate,allocated,300,"// Copy the iterator source, into dest. dest should contain should contain the location of memory arena of size fgIteratorSize.; // If the collection iterator are of that size or less, the iterator will be constructed in place in this location (new with placement); // Otherwise the iterator will be allocated via a regular new and its address returned by modifying the value of dest.",MatchSource.CODE_COMMENT,core/cont/inc/TCollectionProxyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:453,Modifiability,inherit,inheriting,453,"//////////////////////////////////////////////////////////////////////////; // //; // THashList //; // //; // THashList implements a hybrid collection class consisting of a //; // hash table and a list to store TObject's. The hash table is used for //; // quick access and lookup of objects while the list allows the objects //; // to be ordered. The hash value is calculated using the value returned //; // by the TObject's Hash() function. Each class inheriting from TObject //; // can override Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:180,Security,hash,hash,180,"//////////////////////////////////////////////////////////////////////////; // //; // THashList //; // //; // THashList implements a hybrid collection class consisting of a //; // hash table and a list to store TObject's. The hash table is used for //; // quick access and lookup of objects while the list allows the objects //; // to be ordered. The hash value is calculated using the value returned //; // by the TObject's Hash() function. Each class inheriting from TObject //; // can override Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:226,Security,hash,hash,226,"//////////////////////////////////////////////////////////////////////////; // //; // THashList //; // //; // THashList implements a hybrid collection class consisting of a //; // hash table and a list to store TObject's. The hash table is used for //; // quick access and lookup of objects while the list allows the objects //; // to be ordered. The hash value is calculated using the value returned //; // by the TObject's Hash() function. Each class inheriting from TObject //; // can override Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:262,Security,access,access,262,"//////////////////////////////////////////////////////////////////////////; // //; // THashList //; // //; // THashList implements a hybrid collection class consisting of a //; // hash table and a list to store TObject's. The hash table is used for //; // quick access and lookup of objects while the list allows the objects //; // to be ordered. The hash value is calculated using the value returned //; // by the TObject's Hash() function. Each class inheriting from TObject //; // can override Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:351,Security,hash,hash,351,"//////////////////////////////////////////////////////////////////////////; // //; // THashList //; // //; // THashList implements a hybrid collection class consisting of a //; // hash table and a list to store TObject's. The hash table is used for //; // quick access and lookup of objects while the list allows the objects //; // to be ordered. The hash value is calculated using the value returned //; // by the TObject's Hash() function. Each class inheriting from TObject //; // can override Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:425,Security,Hash,Hash,425,"//////////////////////////////////////////////////////////////////////////; // //; // THashList //; // //; // THashList implements a hybrid collection class consisting of a //; // hash table and a list to store TObject's. The hash table is used for //; // quick access and lookup of objects while the list allows the objects //; // to be ordered. The hash value is calculated using the value returned //; // by the TObject's Hash() function. Each class inheriting from TObject //; // can override Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:497,Security,Hash,Hash,497,"//////////////////////////////////////////////////////////////////////////; // //; // THashList //; // //; // THashList implements a hybrid collection class consisting of a //; // hash table and a list to store TObject's. The hash table is used for //; // quick access and lookup of objects while the list allows the objects //; // to be ordered. The hash value is calculated using the value returned //; // by the TObject's Hash() function. Each class inheriting from TObject //; // can override Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:2,Security,Hash,Hashtable,2,"//Hashtable used for quick lookup of objects",MatchSource.CODE_COMMENT,core/cont/inc/THashList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:26,Security,hash,hashtable,26,"//Doubly linked list with hashtable for lookup",MatchSource.CODE_COMMENT,core/cont/inc/THashList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:279,Modifiability,inherit,inheriting,279,"//////////////////////////////////////////////////////////////////////////; // //; // THashTable //; // //; // THashTable implements a hash table to store TObject's. The hash //; // value is calculated using the value returned by the TObject's //; // Hash() function. Each class inheriting from TObject can override //; // Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:135,Security,hash,hash,135,"//////////////////////////////////////////////////////////////////////////; // //; // THashTable //; // //; // THashTable implements a hash table to store TObject's. The hash //; // value is calculated using the value returned by the TObject's //; // Hash() function. Each class inheriting from TObject can override //; // Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:170,Security,hash,hash,170,"//////////////////////////////////////////////////////////////////////////; // //; // THashTable //; // //; // THashTable implements a hash table to store TObject's. The hash //; // value is calculated using the value returned by the TObject's //; // Hash() function. Each class inheriting from TObject can override //; // Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:251,Security,Hash,Hash,251,"//////////////////////////////////////////////////////////////////////////; // //; // THashTable //; // //; // THashTable implements a hash table to store TObject's. The hash //; // value is calculated using the value returned by the TObject's //; // Hash() function. Each class inheriting from TObject can override //; // Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:323,Security,Hash,Hash,323,"//////////////////////////////////////////////////////////////////////////; // //; // THashTable //; // //; // THashTable implements a hash table to store TObject's. The hash //; // value is calculated using the value returned by the TObject's //; // Hash() function. Each class inheriting from TObject can override //; // Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:2,Security,Hash,Hash,2,"//Hash table (table of lists)",MatchSource.CODE_COMMENT,core/cont/inc/THashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:4,Security,hash,hash,4,"//A hash table",MatchSource.CODE_COMMENT,core/cont/inc/THashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:127,Security,hash,hash,127,"//////////////////////////////////////////////////////////////////////////; // //; // THashTableIter //; // //; // Iterator of hash table. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/THashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:2,Security,hash,hash,2,"//hash table being iterated",MatchSource.CODE_COMMENT,core/cont/inc/THashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:2,Security,Hash,Hash,2,"//Hash table iterator",MatchSource.CODE_COMMENT,core/cont/inc/THashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TIterator.h:169,Integrability,interface,interface,169,"//////////////////////////////////////////////////////////////////////////; // //; // TIterator //; // //; // Iterator abstract base class. This base class provides the interface //; // for collection iterators. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TIterator.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h:193,Energy Efficiency,efficient,efficient,193,"//////////////////////////////////////////////////////////////////////////; // //; // TMap //; // //; // TMap implements an associative array of (key,value) pairs using a //; // hash table for efficient retrieval (therefore TMap does not conserve //; // the order of the entries). The hash value is calculated //; // using the value returned by the keys Hash() function. Both key and //; // value need to inherit from TObject. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h:405,Modifiability,inherit,inherit,405,"//////////////////////////////////////////////////////////////////////////; // //; // TMap //; // //; // TMap implements an associative array of (key,value) pairs using a //; // hash table for efficient retrieval (therefore TMap does not conserve //; // the order of the entries). The hash value is calculated //; // using the value returned by the keys Hash() function. Both key and //; // value need to inherit from TObject. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h:178,Security,hash,hash,178,"//////////////////////////////////////////////////////////////////////////; // //; // TMap //; // //; // TMap implements an associative array of (key,value) pairs using a //; // hash table for efficient retrieval (therefore TMap does not conserve //; // the order of the entries). The hash value is calculated //; // using the value returned by the keys Hash() function. Both key and //; // value need to inherit from TObject. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h:285,Security,hash,hash,285,"//////////////////////////////////////////////////////////////////////////; // //; // TMap //; // //; // TMap implements an associative array of (key,value) pairs using a //; // hash table for efficient retrieval (therefore TMap does not conserve //; // the order of the entries). The hash value is calculated //; // using the value returned by the keys Hash() function. Both key and //; // value need to inherit from TObject. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h:354,Security,Hash,Hash,354,"//////////////////////////////////////////////////////////////////////////; // //; // TMap //; // //; // TMap implements an associative array of (key,value) pairs using a //; // hash table for efficient retrieval (therefore TMap does not conserve //; // the order of the entries). The hash value is calculated //; // using the value returned by the keys Hash() function. Both key and //; // value need to inherit from TObject. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h:2,Security,Hash,Hash,2,"//Hash table used to store TPair's",MatchSource.CODE_COMMENT,core/cont/inc/TMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TObjectTable.h:444,Deployability,toggle,toggle,444,"//////////////////////////////////////////////////////////////////////////; // //; // TObjectTable //; // //; // This class registers all instances of TObject and its derived //; // classes in a hash table. The Add() and Remove() members are called //; // from the TObject ctor and dtor, repectively. Using the Print() //; // member one can see all currently active objects in the system. //; // Using the runtime flag: Root.ObjectStat one can toggle this feature //; // on or off. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TObjectTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TObjectTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TObjectTable.h:195,Security,hash,hash,195,"//////////////////////////////////////////////////////////////////////////; // //; // TObjectTable //; // //; // This class registers all instances of TObject and its derived //; // classes in a hash table. The Add() and Remove() members are called //; // from the TObject ctor and dtor, repectively. Using the Print() //; // member one can see all currently active objects in the system. //; // Using the runtime flag: Root.ObjectStat one can toggle this feature //; // on or off. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TObjectTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TObjectTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TRefTable.h:14,Energy Efficiency,allocate,allocated,14,"//![fNumPIDs] allocated size of array fParentIDs for each ProcessID",MatchSource.CODE_COMMENT,core/cont/inc/TRefTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TRefTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TRefTable.h:4,Performance,cache,cache,4,"//! cache of pid to index in fProcessGUIDs",MatchSource.CODE_COMMENT,core/cont/inc/TRefTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TRefTable.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TSortedList.h:162,Modifiability,inherit,inheriting,162,"//////////////////////////////////////////////////////////////////////////; // //; // TSortedList //; // //; // A sorted doubly linked list. All sortable classes inheriting from //; // TObject can be inserted in a TSortedList. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TSortedList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TSortedList.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:132,Integrability,interface,interface,132,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualCollectionProxy //; // //; // Virtual interface of a proxy object for a collection class //; // In particular this is used to implement splitting, emulation, //; // and TTreeFormula access to STL containers. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:276,Security,access,access,276,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualCollectionProxy //; // //; // Virtual interface of a proxy object for a collection class //; // In particular this is used to implement splitting, emulation, //; // and TTreeFormula access to STL containers. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:56,Integrability,interface,interface,56,"// Macro indicating the version of the Collection Proxy interface followed; // by this ROOT build (See also Reflex/Builder/CollectionProxy.h).",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:82,Integrability,interface,interface,82,"// clang-format off; /**; \class TVirtualCollectionProxy; \brief Defines a common interface to inspect/change the contents of an object that represents a collection. Specifically, an object of a class that derives from TVirtualCollectionProxy relays accesses to any object that; matches the proxied collection type.; The interface provides two families of functions: (i) for direct manipulation, e.g. `Insert()` or `At()`; and; (ii) iterator-based, e.g. `GetFunctionCreateIterators()` or `GetFunctionNext()`.; TVirtualCollectionProxy objects are stateful; in particular, many functions require to set the object to operate; on via `PushProxy()` / `PopProxy()`. The `TPushPop` RAII class is provided for convenience.; A collection proxy for a given class can be permanently set using `TClass::CopyCollectionProxy()`.; The `Generate()` function should be overridden in derived classes to return a clean object of the most-derived class.; */; // clang-format on",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:321,Integrability,interface,interface,321,"// clang-format off; /**; \class TVirtualCollectionProxy; \brief Defines a common interface to inspect/change the contents of an object that represents a collection. Specifically, an object of a class that derives from TVirtualCollectionProxy relays accesses to any object that; matches the proxied collection type.; The interface provides two families of functions: (i) for direct manipulation, e.g. `Insert()` or `At()`; and; (ii) iterator-based, e.g. `GetFunctionCreateIterators()` or `GetFunctionNext()`.; TVirtualCollectionProxy objects are stateful; in particular, many functions require to set the object to operate; on via `PushProxy()` / `PopProxy()`. The `TPushPop` RAII class is provided for convenience.; A collection proxy for a given class can be permanently set using `TClass::CopyCollectionProxy()`.; The `Generate()` function should be overridden in derived classes to return a clean object of the most-derived class.; */; // clang-format on",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:250,Security,access,accesses,250,"// clang-format off; /**; \class TVirtualCollectionProxy; \brief Defines a common interface to inspect/change the contents of an object that represents a collection. Specifically, an object of a class that derives from TVirtualCollectionProxy relays accesses to any object that; matches the proxied collection type.; The interface provides two families of functions: (i) for direct manipulation, e.g. `Insert()` or `At()`; and; (ii) iterator-based, e.g. `GetFunctionCreateIterators()` or `GetFunctionNext()`.; TVirtualCollectionProxy objects are stateful; in particular, many functions require to set the object to operate; on via `PushProxy()` / `PopProxy()`. The `TPushPop` RAII class is provided for convenience.; A collection proxy for a given class can be permanently set using `TClass::CopyCollectionProxy()`.; The `Generate()` function should be overridden in derived classes to return a clean object of the most-derived class.; */; // clang-format on",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:70,Integrability,depend,depends,70,"/// Return the offset between two consecutive in-memory values (which depends on the `sizeof()` and alignment of the; /// value type).",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:4,Usability,Clear,Clear,4,"/// Clear the container",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:4,Energy Efficiency,Allocate,Allocates,4,"/// Allocates space for storing at least `n` elements. This function returns a pointer to the actual object on; /// which insertions should take place. For associative collections, this function returns a pointer to a temporary; /// buffer known as the staging area. If the insertion happened in a staging area (i.e. the returned pointer !=; /// proxied object), `Commit()` should be called on the value returned by this function.",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:52,Energy Efficiency,Allocate,Allocate,52,"/// Commits pending elements in a staging area (see Allocate() for more information).",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:43,Energy Efficiency,allocate,allocated,43,"/// The size of a small buffer that can be allocated on the stack to store iterator-specific information",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:325,Energy Efficiency,allocate,allocated,325,"// greater than sizeof(void*) + sizeof(UInt_t); /// `*begin_arena` and `*end_arena` should contain the location of a memory arena of size `fgIteratorArenaSize`.; /// If iterator-specific information is of that size or less, the iterators will be constructed in place in the given; /// locations. Otherwise, iterators will be allocated via `new` and their address returned by modifying the value; /// of `*begin_arena` and `*end_arena`.; /// As a special case, given that iterators for array-backed containers are just pointers, the required information; /// will be directly stored in `*(begin|end)_arena`.",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:297,Energy Efficiency,allocate,allocated,297,"/// Copy the iterator `source` into `dest`. `dest` should contain the location of a memory arena of size; /// `fgIteratorArenaSize`.; /// If iterator-specific information is of that size or less, the iterators will be constructed in place in the given; /// locations. Otherwise, iterators will be allocated via `new` and their address returned by modifying the value; /// of `*begin_arena` and `*end_arena`. The actual address of the iterator is returned in any case.",MatchSource.CODE_COMMENT,core/cont/inc/TVirtualCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/ROOT/TSeq.hxx:837,Security,access,access,837,"/**; \class ROOT::TSeq; \brief A pseudo container class which is a generator of indices. \tparam T Type of the numerical sequence.; \ingroup Containers; A pseudo container class which is a generator of indices. The model is the `xrange`; built-in function of Python.; Possible usages:; Loop on a sequence of integers; ~~~{.cpp}; for (auto i : TSeqI(10)) {; cout << ""Element "" << i << endl;; }; ~~~; Loop on a sequence of integers in steps; ~~~{.cpp}; for (auto i : TSeqI(-5, 29, 6)) {; cout << ""Element "" << i << endl;; }; ~~~; Loop backwards on a sequence of integers; ~~~{.cpp}; for (auto i : TSeqI(50, 30, -3)) {; cout << ""Element "" << i << endl;; }; ~~~; Use an stl algorithm, for_each; ~~~{.cpp}; TSeqUL ulSeq(2,30,3);; std::for_each(std::begin(ulSeq),std::end(ulSeq),[](ULong_t i){cout << ""For each: "" << i <<endl;});; ~~~; Random access:; ~~~{.cpp}; cout << ""Random access: 3rd element is "" << ulSeq[2] << endl;; ~~~; A function to create sequences inferring the type:; ~~~{.cpp}; for (auto i : MakeSeq(1000000000000UL, 1000000000003UL)) {; cout << ""Element "" << i << endl;; }; ~~~. **/",MatchSource.CODE_COMMENT,core/cont/inc/ROOT/TSeq.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/ROOT/TSeq.hxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/ROOT/TSeq.hxx:873,Security,access,access,873,"/**; \class ROOT::TSeq; \brief A pseudo container class which is a generator of indices. \tparam T Type of the numerical sequence.; \ingroup Containers; A pseudo container class which is a generator of indices. The model is the `xrange`; built-in function of Python.; Possible usages:; Loop on a sequence of integers; ~~~{.cpp}; for (auto i : TSeqI(10)) {; cout << ""Element "" << i << endl;; }; ~~~; Loop on a sequence of integers in steps; ~~~{.cpp}; for (auto i : TSeqI(-5, 29, 6)) {; cout << ""Element "" << i << endl;; }; ~~~; Loop backwards on a sequence of integers; ~~~{.cpp}; for (auto i : TSeqI(50, 30, -3)) {; cout << ""Element "" << i << endl;; }; ~~~; Use an stl algorithm, for_each; ~~~{.cpp}; TSeqUL ulSeq(2,30,3);; std::for_each(std::begin(ulSeq),std::end(ulSeq),[](ULong_t i){cout << ""For each: "" << i <<endl;});; ~~~; Random access:; ~~~{.cpp}; cout << ""Random access: 3rd element is "" << ulSeq[2] << endl;; ~~~; A function to create sequences inferring the type:; ~~~{.cpp}; for (auto i : MakeSeq(1000000000000UL, 1000000000003UL)) {; cout << ""Element "" << i << endl;; }; ~~~. **/",MatchSource.CODE_COMMENT,core/cont/inc/ROOT/TSeq.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/ROOT/TSeq.hxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TArray.cxx:112,Availability,error,error,112,"////////////////////////////////////////////////////////////////////////////////; /// Generate an out-of-bounds error. Always returns false.",MatchSource.CODE_COMMENT,core/cont/src/TArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TArray.cxx:118,Usability,Simpl,Simplified,118,"////////////////////////////////////////////////////////////////////////////////; /// Read TArray object from buffer. Simplified version of; /// TBuffer::ReadObject (does not keep track of multiple; /// references to same array).",MatchSource.CODE_COMMENT,core/cont/src/TArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TArray.cxx:117,Usability,Simpl,Simplified,117,"////////////////////////////////////////////////////////////////////////////////; /// Write TArray object to buffer. Simplified version of; /// TBuffer::WriteObject (does not keep track of multiple; /// references to the same array).",MatchSource.CODE_COMMENT,core/cont/src/TArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:465,Energy Efficiency,reduce,reduce,465,"// @(#)root/cont:$Id$; // Author: Philippe Canal 05/02/2001; // Feb 5 2001: Creation; // Feb 6 2001: Changed all int to unsigned int.; /** \class TBits; \ingroup Containers; Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0.; */",MatchSource.CODE_COMMENT,core/cont/src/TBits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:409,Modifiability,extend,extended,409,"// @(#)root/cont:$Id$; // Author: Philippe Canal 05/02/2001; // Feb 5 2001: Creation; // Feb 6 2001: Changed all int to unsigned int.; /** \class TBits; \ingroup Containers; Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0.; */",MatchSource.CODE_COMMENT,core/cont/src/TBits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:266,Testability,test,tested,266,"// @(#)root/cont:$Id$; // Author: Philippe Canal 05/02/2001; // Feb 5 2001: Creation; // Feb 6 2001: Changed all int to unsigned int.; /** \class TBits; \ingroup Containers; Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0.; */",MatchSource.CODE_COMMENT,core/cont/src/TBits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:309,Testability,Test,TestBitNumber,309,"// @(#)root/cont:$Id$; // Author: Philippe Canal 05/02/2001; // Feb 5 2001: Creation; // Feb 6 2001: Changed all int to unsigned int.; /** \class TBits; \ingroup Containers; Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0.; */",MatchSource.CODE_COMMENT,core/cont/src/TBits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:454,Testability,test,tested,454,"// @(#)root/cont:$Id$; // Author: Philippe Canal 05/02/2001; // Feb 5 2001: Creation; // Feb 6 2001: Changed all int to unsigned int.; /** \class TBits; \ingroup Containers; Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0.; */",MatchSource.CODE_COMMENT,core/cont/src/TBits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:215,Usability,simpl,simple,215,"// @(#)root/cont:$Id$; // Author: Philippe Canal 05/02/2001; // Feb 5 2001: Creation; // Feb 6 2001: Changed all int to unsigned int.; /** \class TBits; \ingroup Containers; Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0.; */",MatchSource.CODE_COMMENT,core/cont/src/TBits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:11,Availability,redundant,redundant,11,"// this is redundant only with libNew",MatchSource.CODE_COMMENT,core/cont/src/TBits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:11,Safety,redund,redundant,11,"// this is redundant only with libNew",MatchSource.CODE_COMMENT,core/cont/src/TBits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear the value.",MatchSource.CODE_COMMENT,core/cont/src/TBits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:86,Energy Efficiency,Reduce,Reduce,86,"////////////////////////////////////////////////////////////////////////////////; /// Reduce the storage used by the object to a minimun",MatchSource.CODE_COMMENT,core/cont/src/TBits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:43,Safety,safe,safe,43,"// do it in this order to remain exception-safe.",MatchSource.CODE_COMMENT,core/cont/src/TBits.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:669,Energy Efficiency,adapt,adapt,669,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/10/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBtree; \ingroup Containers; B-tree class. TBtree inherits from the TSeqCollection ABC. ## B-tree Implementation notes. This implements B-trees with several refinements. Most of them can be found; in Knuth Vol 3, but some were developed to adapt to restrictions imposed; by C++. First, a restatement of Knuth's properties that a B-tree must; satisfy, assuming we make the enhancement he suggests in the paragraph; at the bottom of page 476. Instead of storing null pointers to non-existent; nodes (which Knuth calls the leaves) we utilize the space to store keys.; Therefore, what Knuth calls level (l-1) is the bottom of our tree, and; we call the nodes at this level LeafNodes. Other nodes are called InnerNodes.; The other enhancement we have adopted is in the paragraph at the bottom of; page 477: overflow control. The following are modifications of Knuth's properties on page 478:. 1. Every InnerNode has at most Order keys, and at most Order+1 sub-trees.; 2. Every LeafNode has at most 2*(Order+1) keys.; 3. An InnerNode with k keys has k+1 sub-trees.; 4. Every InnerNode that is not the root has at least InnerLowWaterMark keys.; 5. Every LeafNode that is not the root has at least LeafLowWaterMark keys.; 6. If the root is a LeafNode, it has at least one key.; 7. If the root is an InnerNode, it has at least one key and two sub-trees.; 8. All LeafNodes are the same distance from the root as all the other; LeafNodes.; 9. For InnerNode n with key n[i].key, then sub-tree n[i-1].tree contains; all keys < n[i].key, and sub-tree n[i].tree contains all keys; >= n[i",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:4026,Energy Efficiency,allocate,allocated,4026,"d here. However,; if the order is kept small (< 6?) any inefficiency is negligible for; in-memory sorting. Knuth points out that balanced trees are actually; preferable for memory sorting. I'm not sure that I believe this, but; it's interesting. Also, deleting elements from balanced binary trees, being; beyond the scope of Knuth's book (p. 465), is beyond my scope. B-trees; are good enough. A B-tree is declared to be of a certain ORDER (3 by default). This number; determines the number of keys contained in any interior node of the tree.; Each interior node will contain ORDER keys, and therefore ORDER+1 pointers; to sub-trees. The keys are numbered and indexed 1 to ORDER while the; pointers are numbered and indexed 0 to ORDER. The 0th ptr points to the; sub-tree of all elements that are less than key[1]. Ptr[1] points to the; sub-tree that contains all the elements greater than key[1] and less than; key[2]. etc. The array of pointers and keys is allocated as ORDER+1; pairs of keys and nodes, meaning that one key field (key[0]) is not used; and therefore wasted. Given that the number of interior nodes is; small, that this waste allows fewer cases of special code, and that it; is useful in certain of the methods, it was felt to be a worthwhile waste. The size of the exterior nodes (leaf nodes) does not need to be related to; the size of the interior nodes at all. Since leaf nodes contain only; keys, they may be as large or small as we like independent of the size; of the interior nodes. For no particular reason other than it seems like; a good idea, we will allocate 2*(ORDER+1) keys in each leaf node, and they; will be numbered and indexed from 0 to 2*ORDER+1. It does have the advantage; of keeping the size of the leaf and interior arrays the same, so that if we; find allocation and de-allocation of these arrays expensive, we can modify; their allocation to use a garbage ring, or something. Both of these numbers will be run-time constants associated with each tree; (ea",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:4648,Energy Efficiency,allocate,allocate,4648,"efore ORDER+1 pointers; to sub-trees. The keys are numbered and indexed 1 to ORDER while the; pointers are numbered and indexed 0 to ORDER. The 0th ptr points to the; sub-tree of all elements that are less than key[1]. Ptr[1] points to the; sub-tree that contains all the elements greater than key[1] and less than; key[2]. etc. The array of pointers and keys is allocated as ORDER+1; pairs of keys and nodes, meaning that one key field (key[0]) is not used; and therefore wasted. Given that the number of interior nodes is; small, that this waste allows fewer cases of special code, and that it; is useful in certain of the methods, it was felt to be a worthwhile waste. The size of the exterior nodes (leaf nodes) does not need to be related to; the size of the interior nodes at all. Since leaf nodes contain only; keys, they may be as large or small as we like independent of the size; of the interior nodes. For no particular reason other than it seems like; a good idea, we will allocate 2*(ORDER+1) keys in each leaf node, and they; will be numbered and indexed from 0 to 2*ORDER+1. It does have the advantage; of keeping the size of the leaf and interior arrays the same, so that if we; find allocation and de-allocation of these arrays expensive, we can modify; their allocation to use a garbage ring, or something. Both of these numbers will be run-time constants associated with each tree; (each tree at run-time can be of a different order). The variable ""order""; is the order of the tree, and the inclusive upper limit on the indices of; the keys in the interior nodes. The variable ""order2"" is the inclusive; upper limit on the indices of the leaf nodes, and is designed; ~~~ {.cpp}; (1) to keep the sizes of the two kinds of nodes the same;; (2) to keep the expressions involving the arrays of keys looking; somewhat the same: lower limit upper limit; for inner nodes: 1 order; for leaf nodes: 0 order2; Remember that index 0 of the inner nodes is special.; ~~~; Currently, order2 = 2*(",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:479,Modifiability,inherit,inherits,479,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/10/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBtree; \ingroup Containers; B-tree class. TBtree inherits from the TSeqCollection ABC. ## B-tree Implementation notes. This implements B-trees with several refinements. Most of them can be found; in Knuth Vol 3, but some were developed to adapt to restrictions imposed; by C++. First, a restatement of Knuth's properties that a B-tree must; satisfy, assuming we make the enhancement he suggests in the paragraph; at the bottom of page 476. Instead of storing null pointers to non-existent; nodes (which Knuth calls the leaves) we utilize the space to store keys.; Therefore, what Knuth calls level (l-1) is the bottom of our tree, and; we call the nodes at this level LeafNodes. Other nodes are called InnerNodes.; The other enhancement we have adopted is in the paragraph at the bottom of; page 477: overflow control. The following are modifications of Knuth's properties on page 478:. 1. Every InnerNode has at most Order keys, and at most Order+1 sub-trees.; 2. Every LeafNode has at most 2*(Order+1) keys.; 3. An InnerNode with k keys has k+1 sub-trees.; 4. Every InnerNode that is not the root has at least InnerLowWaterMark keys.; 5. Every LeafNode that is not the root has at least LeafLowWaterMark keys.; 6. If the root is a LeafNode, it has at least one key.; 7. If the root is an InnerNode, it has at least one key and two sub-trees.; 8. All LeafNodes are the same distance from the root as all the other; LeafNodes.; 9. For InnerNode n with key n[i].key, then sub-tree n[i-1].tree contains; all keys < n[i].key, and sub-tree n[i].tree contains all keys; >= n[i",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:669,Modifiability,adapt,adapt,669,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/10/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBtree; \ingroup Containers; B-tree class. TBtree inherits from the TSeqCollection ABC. ## B-tree Implementation notes. This implements B-trees with several refinements. Most of them can be found; in Knuth Vol 3, but some were developed to adapt to restrictions imposed; by C++. First, a restatement of Knuth's properties that a B-tree must; satisfy, assuming we make the enhancement he suggests in the paragraph; at the bottom of page 476. Instead of storing null pointers to non-existent; nodes (which Knuth calls the leaves) we utilize the space to store keys.; Therefore, what Knuth calls level (l-1) is the bottom of our tree, and; we call the nodes at this level LeafNodes. Other nodes are called InnerNodes.; The other enhancement we have adopted is in the paragraph at the bottom of; page 477: overflow control. The following are modifications of Knuth's properties on page 478:. 1. Every InnerNode has at most Order keys, and at most Order+1 sub-trees.; 2. Every LeafNode has at most 2*(Order+1) keys.; 3. An InnerNode with k keys has k+1 sub-trees.; 4. Every InnerNode that is not the root has at least InnerLowWaterMark keys.; 5. Every LeafNode that is not the root has at least LeafLowWaterMark keys.; 6. If the root is a LeafNode, it has at least one key.; 7. If the root is an InnerNode, it has at least one key and two sub-trees.; 8. All LeafNodes are the same distance from the root as all the other; LeafNodes.; 9. For InnerNode n with key n[i].key, then sub-tree n[i-1].tree contains; all keys < n[i].key, and sub-tree n[i].tree contains all keys; >= n[i",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:801,Modifiability,enhance,enhancement,801,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/10/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBtree; \ingroup Containers; B-tree class. TBtree inherits from the TSeqCollection ABC. ## B-tree Implementation notes. This implements B-trees with several refinements. Most of them can be found; in Knuth Vol 3, but some were developed to adapt to restrictions imposed; by C++. First, a restatement of Knuth's properties that a B-tree must; satisfy, assuming we make the enhancement he suggests in the paragraph; at the bottom of page 476. Instead of storing null pointers to non-existent; nodes (which Knuth calls the leaves) we utilize the space to store keys.; Therefore, what Knuth calls level (l-1) is the bottom of our tree, and; we call the nodes at this level LeafNodes. Other nodes are called InnerNodes.; The other enhancement we have adopted is in the paragraph at the bottom of; page 477: overflow control. The following are modifications of Knuth's properties on page 478:. 1. Every InnerNode has at most Order keys, and at most Order+1 sub-trees.; 2. Every LeafNode has at most 2*(Order+1) keys.; 3. An InnerNode with k keys has k+1 sub-trees.; 4. Every InnerNode that is not the root has at least InnerLowWaterMark keys.; 5. Every LeafNode that is not the root has at least LeafLowWaterMark keys.; 6. If the root is a LeafNode, it has at least one key.; 7. If the root is an InnerNode, it has at least one key and two sub-trees.; 8. All LeafNodes are the same distance from the root as all the other; LeafNodes.; 9. For InnerNode n with key n[i].key, then sub-tree n[i-1].tree contains; all keys < n[i].key, and sub-tree n[i].tree contains all keys; >= n[i",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:1155,Modifiability,enhance,enhancement,1155,"; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBtree; \ingroup Containers; B-tree class. TBtree inherits from the TSeqCollection ABC. ## B-tree Implementation notes. This implements B-trees with several refinements. Most of them can be found; in Knuth Vol 3, but some were developed to adapt to restrictions imposed; by C++. First, a restatement of Knuth's properties that a B-tree must; satisfy, assuming we make the enhancement he suggests in the paragraph; at the bottom of page 476. Instead of storing null pointers to non-existent; nodes (which Knuth calls the leaves) we utilize the space to store keys.; Therefore, what Knuth calls level (l-1) is the bottom of our tree, and; we call the nodes at this level LeafNodes. Other nodes are called InnerNodes.; The other enhancement we have adopted is in the paragraph at the bottom of; page 477: overflow control. The following are modifications of Knuth's properties on page 478:. 1. Every InnerNode has at most Order keys, and at most Order+1 sub-trees.; 2. Every LeafNode has at most 2*(Order+1) keys.; 3. An InnerNode with k keys has k+1 sub-trees.; 4. Every InnerNode that is not the root has at least InnerLowWaterMark keys.; 5. Every LeafNode that is not the root has at least LeafLowWaterMark keys.; 6. If the root is a LeafNode, it has at least one key.; 7. If the root is an InnerNode, it has at least one key and two sub-trees.; 8. All LeafNodes are the same distance from the root as all the other; LeafNodes.; 9. For InnerNode n with key n[i].key, then sub-tree n[i-1].tree contains; all keys < n[i].key, and sub-tree n[i].tree contains all keys; >= n[i].key.; 10. Order is at least 3. The values of InnerLowWaterMark and LeafLowWaterMark may actually be set; by the user when the tree is initialized, but currently they are set; automatically to:;",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:5121,Modifiability,variab,variable,5121,"des is; small, that this waste allows fewer cases of special code, and that it; is useful in certain of the methods, it was felt to be a worthwhile waste. The size of the exterior nodes (leaf nodes) does not need to be related to; the size of the interior nodes at all. Since leaf nodes contain only; keys, they may be as large or small as we like independent of the size; of the interior nodes. For no particular reason other than it seems like; a good idea, we will allocate 2*(ORDER+1) keys in each leaf node, and they; will be numbered and indexed from 0 to 2*ORDER+1. It does have the advantage; of keeping the size of the leaf and interior arrays the same, so that if we; find allocation and de-allocation of these arrays expensive, we can modify; their allocation to use a garbage ring, or something. Both of these numbers will be run-time constants associated with each tree; (each tree at run-time can be of a different order). The variable ""order""; is the order of the tree, and the inclusive upper limit on the indices of; the keys in the interior nodes. The variable ""order2"" is the inclusive; upper limit on the indices of the leaf nodes, and is designed; ~~~ {.cpp}; (1) to keep the sizes of the two kinds of nodes the same;; (2) to keep the expressions involving the arrays of keys looking; somewhat the same: lower limit upper limit; for inner nodes: 1 order; for leaf nodes: 0 order2; Remember that index 0 of the inner nodes is special.; ~~~; Currently, order2 = 2*(order+1).; ~~~ {.cpp}; Picture: (also see Knuth Vol 3 pg 478). +--+--+--+--+--+--...; | | | | | |; parent--->| | | |; | | | |; +*-+*-+*-+--+--+--...; | | |; +----+ | +-----+; | +-----+ |; V | V; +----------+ | +----------+; | | | | |; this->| | | | |<--sib; +----------+ | +----------+; V; data; ~~~; It is conceptually VERY convenient to think of the data as being the; very first element of the sib node. Any primitive that tells sib to; perform some action on n nodes should include this 'hidden' element.; For Inn",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:5250,Modifiability,variab,variable,5250,"was felt to be a worthwhile waste. The size of the exterior nodes (leaf nodes) does not need to be related to; the size of the interior nodes at all. Since leaf nodes contain only; keys, they may be as large or small as we like independent of the size; of the interior nodes. For no particular reason other than it seems like; a good idea, we will allocate 2*(ORDER+1) keys in each leaf node, and they; will be numbered and indexed from 0 to 2*ORDER+1. It does have the advantage; of keeping the size of the leaf and interior arrays the same, so that if we; find allocation and de-allocation of these arrays expensive, we can modify; their allocation to use a garbage ring, or something. Both of these numbers will be run-time constants associated with each tree; (each tree at run-time can be of a different order). The variable ""order""; is the order of the tree, and the inclusive upper limit on the indices of; the keys in the interior nodes. The variable ""order2"" is the inclusive; upper limit on the indices of the leaf nodes, and is designed; ~~~ {.cpp}; (1) to keep the sizes of the two kinds of nodes the same;; (2) to keep the expressions involving the arrays of keys looking; somewhat the same: lower limit upper limit; for inner nodes: 1 order; for leaf nodes: 0 order2; Remember that index 0 of the inner nodes is special.; ~~~; Currently, order2 = 2*(order+1).; ~~~ {.cpp}; Picture: (also see Knuth Vol 3 pg 478). +--+--+--+--+--+--...; | | | | | |; parent--->| | | |; | | | |; +*-+*-+*-+--+--+--...; | | |; +----+ | +-----+; | +-----+ |; V | V; +----------+ | +----------+; | | | | |; this->| | | | |<--sib; +----------+ | +----------+; V; data; ~~~; It is conceptually VERY convenient to think of the data as being the; very first element of the sib node. Any primitive that tells sib to; perform some action on n nodes should include this 'hidden' element.; For InnerNodes, the hidden element has (physical) index 0 in the array,; and in LeafNodes, the hidden element has (virtual) in",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:6104,Performance,perform,perform,6104,"variable ""order""; is the order of the tree, and the inclusive upper limit on the indices of; the keys in the interior nodes. The variable ""order2"" is the inclusive; upper limit on the indices of the leaf nodes, and is designed; ~~~ {.cpp}; (1) to keep the sizes of the two kinds of nodes the same;; (2) to keep the expressions involving the arrays of keys looking; somewhat the same: lower limit upper limit; for inner nodes: 1 order; for leaf nodes: 0 order2; Remember that index 0 of the inner nodes is special.; ~~~; Currently, order2 = 2*(order+1).; ~~~ {.cpp}; Picture: (also see Knuth Vol 3 pg 478). +--+--+--+--+--+--...; | | | | | |; parent--->| | | |; | | | |; +*-+*-+*-+--+--+--...; | | |; +----+ | +-----+; | +-----+ |; V | V; +----------+ | +----------+; | | | | |; this->| | | | |<--sib; +----------+ | +----------+; V; data; ~~~; It is conceptually VERY convenient to think of the data as being the; very first element of the sib node. Any primitive that tells sib to; perform some action on n nodes should include this 'hidden' element.; For InnerNodes, the hidden element has (physical) index 0 in the array,; and in LeafNodes, the hidden element has (virtual) index -1 in the array.; Therefore, there are two 'size' primitives for nodes:; ~~~ {.cpp}; Psize - the physical size: how many elements are contained in the; array in the node.; Vsize - the 'virtual' size; if the node is pointed to by; element 0 of the parent node, then Vsize == Psize;; otherwise the element in the parent item that points to this; node 'belongs' to this node, and Vsize == Psize+1;; ~~~; Parent nodes are always InnerNodes. These are the primitive operations on Nodes:; ~~~ {.cpp}; Append(elt) - adds an element to the end of the array of elements in a; node. It must never be called where appending the element; would fill the node.; Split() - divide a node in two, and create two new nodes.; SplitWith(sib) - create a third node between this node and the sib node,; divvying up the elements of their ar",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:2987,Security,access,access,2987,"].key.; 10. Order is at least 3. The values of InnerLowWaterMark and LeafLowWaterMark may actually be set; by the user when the tree is initialized, but currently they are set; automatically to:; ~~~ {.cpp}; InnerLowWaterMark = ceiling(Order/2); LeafLowWaterMark = Order - 1; ~~~; If the tree is only filled, then all the nodes will be at least 2/3 full.; They will almost all be exactly 2/3 full if the elements are added to the; tree in order (either increasing or decreasing). [Knuth says McCreight's; experiments showed almost 100% memory utilization. I don't see how that; can be given the algorithms that Knuth gives. McCreight must have used; a different scheme for balancing. [No, he used a different scheme for; splitting: he did a two-way split instead of the three way split as we do; here. Which means that McCreight does better on insertion of ordered data,; but we should do better on insertion of random data.]]. It must also be noted that B-trees were designed for DISK access algorithms,; not necessarily in-memory sorting, as we intend it to be used here. However,; if the order is kept small (< 6?) any inefficiency is negligible for; in-memory sorting. Knuth points out that balanced trees are actually; preferable for memory sorting. I'm not sure that I believe this, but; it's interesting. Also, deleting elements from balanced binary trees, being; beyond the scope of Knuth's book (p. 465), is beyond my scope. B-trees; are good enough. A B-tree is declared to be of a certain ORDER (3 by default). This number; determines the number of keys contained in any interior node of the tree.; Each interior node will contain ORDER keys, and therefore ORDER+1 pointers; to sub-trees. The keys are numbered and indexed 1 to ORDER while the; pointers are numbered and indexed 0 to ORDER. The 0th ptr points to the; sub-tree of all elements that are less than key[1]. Ptr[1] points to the; sub-tree that contains all the elements greater than key[1] and less than; key[2]. etc. The array",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:7475,Security,access,access,7475,"--------+ | +----------+; | | | | |; this->| | | | |<--sib; +----------+ | +----------+; V; data; ~~~; It is conceptually VERY convenient to think of the data as being the; very first element of the sib node. Any primitive that tells sib to; perform some action on n nodes should include this 'hidden' element.; For InnerNodes, the hidden element has (physical) index 0 in the array,; and in LeafNodes, the hidden element has (virtual) index -1 in the array.; Therefore, there are two 'size' primitives for nodes:; ~~~ {.cpp}; Psize - the physical size: how many elements are contained in the; array in the node.; Vsize - the 'virtual' size; if the node is pointed to by; element 0 of the parent node, then Vsize == Psize;; otherwise the element in the parent item that points to this; node 'belongs' to this node, and Vsize == Psize+1;; ~~~; Parent nodes are always InnerNodes. These are the primitive operations on Nodes:; ~~~ {.cpp}; Append(elt) - adds an element to the end of the array of elements in a; node. It must never be called where appending the element; would fill the node.; Split() - divide a node in two, and create two new nodes.; SplitWith(sib) - create a third node between this node and the sib node,; divvying up the elements of their arrays.; PushLeft(n) - move n elements into the left sibling; PushRight(n) - move n elements into the right sibling; BalanceWithRight() - even up the number of elements in the two nodes.; BalanceWithLeft() - ditto; ~~~; To allow this implementation of btrees to also be an implementation of; sorted arrays/lists, the overhead is included to allow O(log n) access; of elements by their rank (`give me the 5th largest element').; Therefore, each Item keeps track of the number of keys in and below it; in the tree (remember, each item's tree is all keys to the RIGHT of the; item's own key).; ~~~ {.cpp}; [ [ < 0 1 2 3 > 4 < 5 6 7 > 8 < 9 10 11 12 > ] 13 [ < 14 15 16 > 17 < 18 19 20 > ] ]; 4 1 1 1 1 4 1 1 1 5 1 1 1 1 7 3 1 1 1 4 1 1 1; ~~~; */",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:7468,Testability,log,log,7468,"--------+ | +----------+; | | | | |; this->| | | | |<--sib; +----------+ | +----------+; V; data; ~~~; It is conceptually VERY convenient to think of the data as being the; very first element of the sib node. Any primitive that tells sib to; perform some action on n nodes should include this 'hidden' element.; For InnerNodes, the hidden element has (physical) index 0 in the array,; and in LeafNodes, the hidden element has (virtual) index -1 in the array.; Therefore, there are two 'size' primitives for nodes:; ~~~ {.cpp}; Psize - the physical size: how many elements are contained in the; array in the node.; Vsize - the 'virtual' size; if the node is pointed to by; element 0 of the parent node, then Vsize == Psize;; otherwise the element in the parent item that points to this; node 'belongs' to this node, and Vsize == Psize+1;; ~~~; Parent nodes are always InnerNodes. These are the primitive operations on Nodes:; ~~~ {.cpp}; Append(elt) - adds an element to the end of the array of elements in a; node. It must never be called where appending the element; would fill the node.; Split() - divide a node in two, and create two new nodes.; SplitWith(sib) - create a third node between this node and the sib node,; divvying up the elements of their arrays.; PushLeft(n) - move n elements into the left sibling; PushRight(n) - move n elements into the right sibling; BalanceWithRight() - even up the number of elements in the two nodes.; BalanceWithLeft() - ditto; ~~~; To allow this implementation of btrees to also be an implementation of; sorted arrays/lists, the overhead is included to allow O(log n) access; of elements by their rank (`give me the 5th largest element').; Therefore, each Item keeps track of the number of keys in and below it; in the tree (remember, each item's tree is all keys to the RIGHT of the; item's own key).; ~~~ {.cpp}; [ [ < 0 1 2 3 > 4 < 5 6 7 > 8 < 9 10 11 12 > ] 13 [ < 14 15 16 > 17 < 18 19 20 > ] ]; 4 1 1 1 1 4 1 1 1 5 1 1 1 1 7 3 1 1 1 4 1 1 1; ~~~; */",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:57,Security,access,access,57,"// BUG in the cxx compiler. cxx complains that it cannot access fTree; // from TBtInnerNode. To reproduce the cxx bug uncomment the following line; // and delete the line after.; // fTree = p->fTree;",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:219,Availability,DOWN,DOWN,219,"////////////////////////////////////////////////////////////////////////////////; /// FindRankUp is FindRank in reverse.; /// Whereas FindRank looks for the object and computes the rank; /// along the way while walking DOWN the tree, FindRankUp already; /// knows where the object is and has to walk UP the tree from the; /// object to compute the rank.",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:249,Deployability,Update,Update,249,"////////////////////////////////////////////////////////////////////////////////; /// The operation is three steps:; /// - Step I. Make room for the incoming keys in RIGHTSIB.; /// - Step II. Move the items from THIS into RIGHTSIB.; /// - Step III. Update the length of THIS.",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:188,Deployability,update,updated,188,"// do this kind of assignment on TBtInnerNode items only when; // the parent fields of the moved items do not change, as they; // don't here.; // Otherwise, use SetItem so the parents are updated appropriately.",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:12,Deployability,update,update,12,"// Step VI. update NofKeys",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:163,Usability,simpl,simply,163,"////////////////////////////////////////////////////////////////////////////////; /// A convenience function, does not worry about the element in; /// the parent, simply moves elements from SRC[start] to SRC[stop]; /// into the current array.; /// This should never create a full node.; /// That is, it is not used anywhere where THIS could possibly be; /// near full.; /// Does NOT handle nofKeys.",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:264,Deployability,Update,Update,264,"// The operation is five steps:; // Step I. Make room for the incoming keys in RIGHTSIB.; // Step II. Move the key in the parent into RIGHTSIB.; // Step III. Move the items from THIS into RIGHTSIB.; // Step IV. Move the item from THIS into the parent.; // Step V. Update the length of THIS.; //; // Step I.: make space for noFromThis items; //",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:12,Deployability,update,update,12,"// Step VI. update nofKeys",MatchSource.CODE_COMMENT,core/cont/src/TBtree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:765,Safety,safe,safe,765,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 11/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TClassTable; \ingroup Containers; This class registers for all classes their name, id and dictionary; function in a hash table. Classes are automatically added by the; ctor of a special init class when a global of this init class is; initialized when the program starts (see the ClassImp macro). All functions in TClassTable are thread-safe.; */",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:545,Security,hash,hash,545,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 11/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TClassTable; \ingroup Containers; This class registers for all classes their name, id and dictionary; function in a hash table. Classes are automatically added by the; ctor of a special init class when a global of this init class is; initialized when the program starts (see the ClassImp macro). All functions in TClassTable are thread-safe.; */",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:8,Integrability,wrap,wrapper,8,"// This wrapper class allow to avoid putting #include <map> in the; // TROOT.h header file.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:31,Safety,avoid,avoid,31,"// This wrapper class allow to avoid putting #include <map> in the; // TROOT.h header file.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:10,Safety,avoid,avoid,10,"// Try to avoid spurious warning from memory leak checkers.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:65,Performance,load,load,65,"// This is the very rare case (i.e. called before any dictionary load); // so we don't need to execute this outside of the critical section.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:251,Deployability,update,update,251,"// && oldcl->GetClassInfo()) {; // As a work-around to ROOT-6012, we need to register the class even if; // it is not a template instance, because a forward declaration in the header; // files loaded by the current dictionary wil also de-activate the update; // class info mechanism!; // The TClass exist and already has a class info, so it must; // correspond to a class template instantiation which the interpreter; // was able to make with the library containing the TClass Init.; // Because it is already known to the interpreter, the update class info; // will not be triggered, we need to force it.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:539,Deployability,update,update,539,"// && oldcl->GetClassInfo()) {; // As a work-around to ROOT-6012, we need to register the class even if; // it is not a template instance, because a forward declaration in the header; // files loaded by the current dictionary wil also de-activate the update; // class info mechanism!; // The TClass exist and already has a class info, so it must; // correspond to a class template instantiation which the interpreter; // was able to make with the library containing the TClass Init.; // Because it is already known to the interpreter, the update class info; // will not be triggered, we need to force it.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:193,Performance,load,loaded,193,"// && oldcl->GetClassInfo()) {; // As a work-around to ROOT-6012, we need to register the class even if; // it is not a template instance, because a forward declaration in the header; // files loaded by the current dictionary wil also de-activate the update; // class info mechanism!; // The TClass exist and already has a class info, so it must; // correspond to a class template instantiation which the interpreter; // was able to make with the library containing the TClass Init.; // Because it is already known to the interpreter, the update class info; // will not be triggered, we need to force it.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:251,Deployability,update,update,251,"// && oldcl->GetClassInfo()) {; // As a work-around to ROOT-6012, we need to register the class even if; // it is not a template instance, because a forward declaration in the header; // files loaded by the current dictionary wil also de-activate the update; // class info mechanism!",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:193,Performance,load,loaded,193,"// && oldcl->GetClassInfo()) {; // As a work-around to ROOT-6012, we need to register the class even if; // it is not a template instance, because a forward declaration in the header; // files loaded by the current dictionary wil also de-activate the update; // class info mechanism!",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:133,Security,hash,hash,133,"////////////////////////////////////////////////////////////////////////////////; /// Find a class by name in the class table (using hash of name). Returns; /// 0 if the class is not in the table. Unless arguments insert is true in; /// which case a new entry is created and returned.; /// `cname` must be the normalized name of the class.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:12,Integrability,rout,routine,12,"// Internal routine, no explicit lock needed here.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:163,Security,hash,hash,163,"////////////////////////////////////////////////////////////////////////////////; /// Given the class name returns the Dictionary() function of a class; /// (uses hash of name).",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:167,Security,hash,hash,167,"////////////////////////////////////////////////////////////////////////////////; /// Given the std::type_info returns the Dictionary() function of a class; /// (uses hash of std::type_info::name()).",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:174,Security,hash,hash,174,"////////////////////////////////////////////////////////////////////////////////; /// Given the normalized class name returns the Dictionary() function of a class; /// (uses hash of name).",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:164,Security,hash,hash,164,"////////////////////////////////////////////////////////////////////////////////; /// Given the class name returns the TClassProto object for the class.; /// (uses hash of name).",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:175,Security,hash,hash,175,"////////////////////////////////////////////////////////////////////////////////; /// Given the class normalized name returns the TClassProto object for the class.; /// (uses hash of name).",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:34,Safety,avoid,avoid,34,"// Do not use TClass::GetClass to avoid any risk of autoloading.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:44,Safety,risk,risk,44,"// Do not use TClass::GetClass to avoid any risk of autoloading.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:12,Integrability,rout,routine,12,"// Internal routine.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:19,Performance,load,loaded,19,"// If a library is loaded before gROOT is initialized we can assume; // it is hard linked along side libCore (or is libCore) thus can't; // really be unloaded.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:8,Integrability,rout,routine,8,"// This routine is meant to be called (indirectly) by dlclose so we; // we are guaranteed that the library initialization has completed.",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:105,Deployability,update,update,105,"////////////////////////////////////////////////////////////////////////////////; /// Global function to update the version number.; /// This is called via the RootClassVersion macro.; ///; /// if cl!=0 and cname==-1, set the new class version if and only is; /// greater than the existing one and greater or equal to 2;; /// and also ignore the request if fVersionUsed is true.; ///; /// Note on class version number:; /// - If no class has been specified, TClass::GetVersion will return -1; /// - The Class Version 0 request the whole object to be transient; /// - The Class Version 1, unless specify via ClassDef indicates that the; /// I/O should use the TClass checksum to distinguish the layout of the class",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:666,Security,checksum,checksum,666,"////////////////////////////////////////////////////////////////////////////////; /// Global function to update the version number.; /// This is called via the RootClassVersion macro.; ///; /// if cl!=0 and cname==-1, set the new class version if and only is; /// greater than the existing one and greater or equal to 2;; /// and also ignore the request if fVersionUsed is true.; ///; /// Note on class version number:; /// - If no class has been specified, TClass::GetVersion will return -1; /// - The Class Version 0 request the whole object to be transient; /// - The Class Version 1, unless specify via ClassDef indicates that the; /// I/O should use the TClass checksum to distinguish the layout of the class",MatchSource.CODE_COMMENT,core/cont/src/TClassTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2402,Availability,error,error,2402," or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClones",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2564,Availability,recover,recovered,2564,"d constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; wh",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2775,Availability,error,errors,2775,"structedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more me",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:544,Energy Efficiency,allocate,allocated,544,"// @(#)root/cont:$Id$; // Author: Rene Brun 11/02/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TClonesArray; \ingroup Containers; An array of clone (identical) objects. Memory for the objects; stored in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):; ~~~ {.cpp}; TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; ~~~; One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a ",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:707,Energy Efficiency,reduce,reduce,707,"// @(#)root/cont:$Id$; // Author: Rene Brun 11/02/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TClonesArray; \ingroup Containers; An array of clone (identical) objects. Memory for the objects; stored in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):; ~~~ {.cpp}; TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; ~~~; One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a ",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:1089,Energy Efficiency,reduce,reduces,1089,"***********************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TClonesArray; \ingroup Containers; An array of clone (identical) objects. Memory for the objects; stored in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):; ~~~ {.cpp}; TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; ~~~; One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Ad",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:1419,Energy Efficiency,reduce,reduce,1419,"ed in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):; ~~~ {.cpp}; TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; ~~~; One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *alw",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2368,Energy Efficiency,allocate,allocated,2368," or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClones",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2541,Energy Efficiency,allocate,allocated,2541,"d constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; wh",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2591,Energy Efficiency,efficient,efficiently,2591,"d constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; wh",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2684,Energy Efficiency,allocate,allocate,2684,"sArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do n",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2890,Energy Efficiency,reduce,reduce,2890,"structedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more me",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3404,Energy Efficiency,allocate,allocated,3404,"mory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray ob",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:4124,Energy Efficiency,allocate,allocate,4124," new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added object.; - To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run.; */",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:4684,Energy Efficiency,allocate,allocated,4684," new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added object.; - To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run.; */",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:4783,Energy Efficiency,reduce,reduce,4783," new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added object.; - To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run.; */",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3226,Performance,perform,performance,3226,"lowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid ",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2564,Safety,recover,recovered,2564,"d constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; wh",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3159,Safety,avoid,avoiding,3159,"lowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid ",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3677,Safety,avoid,avoid,3677,"ic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added obje",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:4145,Safety,avoid,avoid,4145," new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added object.; - To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run.; */",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2922,Security,access,access,2922,"structedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more me",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:1383,Usability,Clear,Clear,1383,"********************/; /** \class TClonesArray; \ingroup Containers; An array of clone (identical) objects. Memory for the objects; stored in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):; ~~~ {.cpp}; TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; ~~~; One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a ",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:1396,Usability,Clear,Clear,1396,"ed in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):; ~~~ {.cpp}; TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; ~~~; One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *alw",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:1914,Usability,Clear,Clear,1914,"for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; ~~~; One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory a",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:1931,Usability,Clear,Clear,1931,",...);; ...; ...; }; ...; a.Delete();; }; ~~~; One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive ",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3328,Usability,Clear,Clear,3328,"lity of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() met",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3573,Usability,Clear,Clear,3573,"memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Cl",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3987,Usability,Clear,Clear,3987," new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added object.; - To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run.; */",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3998,Usability,Clear,Clear,3998," new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added object.; - To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run.; */",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:4181,Usability,Clear,Clear,4181," new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added object.; - To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run.; */",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:4210,Usability,clear,clearing,4210," new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added object.; - To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run.; */",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:4296,Usability,Clear,Clear,4296," new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added object.; - To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run.; */",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:4550,Usability,Clear,Clear,4550," new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added object.; - To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run.; */",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:42,Deployability,release,release,42,"/// Internal Utility routine to correctly release the memory for an object",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:21,Integrability,rout,routine,21,"/// Internal Utility routine to correctly release the memory for an object",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:148,Modifiability,inherit,inherit,148,"////////////////////////////////////////////////////////////////////////////////; /// Create an array of clone objects of classname. The class must inherit from; /// TObject.; /// The second argument s indicates an approximate number of objects; /// that will be entered in the array. If more than s objects are entered,; /// the array will be automatically expanded.; ///; /// The third argument is not used anymore and only there for backward; /// compatibility reasons.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:147,Modifiability,inherit,inherit,147,"////////////////////////////////////////////////////////////////////////////////; /// Create an array of clone objects of class cl. The class must inherit from; /// TObject.; /// The second argument, s, indicates an approximate number of objects; /// that will be entered in the array. If more than s objects are entered,; /// the array will be automatically expanded.; ///; /// The third argument is not used anymore and only there for backward; /// compatibility reasons.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:245,Performance,perform,performance,245,"////////////////////////////////////////////////////////////////////////////////; /// When the kBypassStreamer bit is set, the automatically; /// generated Streamer can call directly TClass::WriteBuffer.; /// Bypassing the Streamer improves the performance when writing/reading; /// the objects in the TClonesArray. However there is a drawback:; /// When a TClonesArray is written with split=0 bypassing the Streamer,; /// the StreamerInfo of the class in the array being optimized,; /// one cannot use later the TClonesArray with split>0. For example,; /// there is a problem with the following scenario:; /// 1. A class Foo has a TClonesArray of Bar objects; /// 2. The Foo object is written with split=0 to Tree T1.; /// In this case the StreamerInfo for the class Bar is created; /// in optimized mode in such a way that data members of the same type; /// are written as an array improving the I/O performance.; /// 3. In a new program, T1 is read and a new Tree T2 is created; /// with the object Foo in split>1; /// 4. When the T2 branch is created, the StreamerInfo for the class Bar; /// is created with no optimization (mandatory for the split mode).; /// The optimized Bar StreamerInfo is going to be used to read; /// the TClonesArray in T1. The result will be Bar objects with; /// data member values not in the right sequence.; /// The solution to this problem is to call BypassStreamer(kFALSE); /// for the TClonesArray. In this case, the normal Bar::Streamer function; /// will be called. The Bar::Streamer function works OK independently; /// if the Bar StreamerInfo had been generated in optimized mode or not.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:472,Performance,optimiz,optimized,472,"////////////////////////////////////////////////////////////////////////////////; /// When the kBypassStreamer bit is set, the automatically; /// generated Streamer can call directly TClass::WriteBuffer.; /// Bypassing the Streamer improves the performance when writing/reading; /// the objects in the TClonesArray. However there is a drawback:; /// When a TClonesArray is written with split=0 bypassing the Streamer,; /// the StreamerInfo of the class in the array being optimized,; /// one cannot use later the TClonesArray with split>0. For example,; /// there is a problem with the following scenario:; /// 1. A class Foo has a TClonesArray of Bar objects; /// 2. The Foo object is written with split=0 to Tree T1.; /// In this case the StreamerInfo for the class Bar is created; /// in optimized mode in such a way that data members of the same type; /// are written as an array improving the I/O performance.; /// 3. In a new program, T1 is read and a new Tree T2 is created; /// with the object Foo in split>1; /// 4. When the T2 branch is created, the StreamerInfo for the class Bar; /// is created with no optimization (mandatory for the split mode).; /// The optimized Bar StreamerInfo is going to be used to read; /// the TClonesArray in T1. The result will be Bar objects with; /// data member values not in the right sequence.; /// The solution to this problem is to call BypassStreamer(kFALSE); /// for the TClonesArray. In this case, the normal Bar::Streamer function; /// will be called. The Bar::Streamer function works OK independently; /// if the Bar StreamerInfo had been generated in optimized mode or not.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:791,Performance,optimiz,optimized,791,"////////////////////////////////////////////////////////////////////////////////; /// When the kBypassStreamer bit is set, the automatically; /// generated Streamer can call directly TClass::WriteBuffer.; /// Bypassing the Streamer improves the performance when writing/reading; /// the objects in the TClonesArray. However there is a drawback:; /// When a TClonesArray is written with split=0 bypassing the Streamer,; /// the StreamerInfo of the class in the array being optimized,; /// one cannot use later the TClonesArray with split>0. For example,; /// there is a problem with the following scenario:; /// 1. A class Foo has a TClonesArray of Bar objects; /// 2. The Foo object is written with split=0 to Tree T1.; /// In this case the StreamerInfo for the class Bar is created; /// in optimized mode in such a way that data members of the same type; /// are written as an array improving the I/O performance.; /// 3. In a new program, T1 is read and a new Tree T2 is created; /// with the object Foo in split>1; /// 4. When the T2 branch is created, the StreamerInfo for the class Bar; /// is created with no optimization (mandatory for the split mode).; /// The optimized Bar StreamerInfo is going to be used to read; /// the TClonesArray in T1. The result will be Bar objects with; /// data member values not in the right sequence.; /// The solution to this problem is to call BypassStreamer(kFALSE); /// for the TClonesArray. In this case, the normal Bar::Streamer function; /// will be called. The Bar::Streamer function works OK independently; /// if the Bar StreamerInfo had been generated in optimized mode or not.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:902,Performance,perform,performance,902,"////////////////////////////////////////////////////////////////////////////////; /// When the kBypassStreamer bit is set, the automatically; /// generated Streamer can call directly TClass::WriteBuffer.; /// Bypassing the Streamer improves the performance when writing/reading; /// the objects in the TClonesArray. However there is a drawback:; /// When a TClonesArray is written with split=0 bypassing the Streamer,; /// the StreamerInfo of the class in the array being optimized,; /// one cannot use later the TClonesArray with split>0. For example,; /// there is a problem with the following scenario:; /// 1. A class Foo has a TClonesArray of Bar objects; /// 2. The Foo object is written with split=0 to Tree T1.; /// In this case the StreamerInfo for the class Bar is created; /// in optimized mode in such a way that data members of the same type; /// are written as an array improving the I/O performance.; /// 3. In a new program, T1 is read and a new Tree T2 is created; /// with the object Foo in split>1; /// 4. When the T2 branch is created, the StreamerInfo for the class Bar; /// is created with no optimization (mandatory for the split mode).; /// The optimized Bar StreamerInfo is going to be used to read; /// the TClonesArray in T1. The result will be Bar objects with; /// data member values not in the right sequence.; /// The solution to this problem is to call BypassStreamer(kFALSE); /// for the TClonesArray. In this case, the normal Bar::Streamer function; /// will be called. The Bar::Streamer function works OK independently; /// if the Bar StreamerInfo had been generated in optimized mode or not.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:1115,Performance,optimiz,optimization,1115,"////////////////////////////////////////////////////////////////////////////////; /// When the kBypassStreamer bit is set, the automatically; /// generated Streamer can call directly TClass::WriteBuffer.; /// Bypassing the Streamer improves the performance when writing/reading; /// the objects in the TClonesArray. However there is a drawback:; /// When a TClonesArray is written with split=0 bypassing the Streamer,; /// the StreamerInfo of the class in the array being optimized,; /// one cannot use later the TClonesArray with split>0. For example,; /// there is a problem with the following scenario:; /// 1. A class Foo has a TClonesArray of Bar objects; /// 2. The Foo object is written with split=0 to Tree T1.; /// In this case the StreamerInfo for the class Bar is created; /// in optimized mode in such a way that data members of the same type; /// are written as an array improving the I/O performance.; /// 3. In a new program, T1 is read and a new Tree T2 is created; /// with the object Foo in split>1; /// 4. When the T2 branch is created, the StreamerInfo for the class Bar; /// is created with no optimization (mandatory for the split mode).; /// The optimized Bar StreamerInfo is going to be used to read; /// the TClonesArray in T1. The result will be Bar objects with; /// data member values not in the right sequence.; /// The solution to this problem is to call BypassStreamer(kFALSE); /// for the TClonesArray. In this case, the normal Bar::Streamer function; /// will be called. The Bar::Streamer function works OK independently; /// if the Bar StreamerInfo had been generated in optimized mode or not.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:1169,Performance,optimiz,optimized,1169,"////////////////////////////////////////////////////////////////////////////////; /// When the kBypassStreamer bit is set, the automatically; /// generated Streamer can call directly TClass::WriteBuffer.; /// Bypassing the Streamer improves the performance when writing/reading; /// the objects in the TClonesArray. However there is a drawback:; /// When a TClonesArray is written with split=0 bypassing the Streamer,; /// the StreamerInfo of the class in the array being optimized,; /// one cannot use later the TClonesArray with split>0. For example,; /// there is a problem with the following scenario:; /// 1. A class Foo has a TClonesArray of Bar objects; /// 2. The Foo object is written with split=0 to Tree T1.; /// In this case the StreamerInfo for the class Bar is created; /// in optimized mode in such a way that data members of the same type; /// are written as an array improving the I/O performance.; /// 3. In a new program, T1 is read and a new Tree T2 is created; /// with the object Foo in split>1; /// 4. When the T2 branch is created, the StreamerInfo for the class Bar; /// is created with no optimization (mandatory for the split mode).; /// The optimized Bar StreamerInfo is going to be used to read; /// the TClonesArray in T1. The result will be Bar objects with; /// data member values not in the right sequence.; /// The solution to this problem is to call BypassStreamer(kFALSE); /// for the TClonesArray. In this case, the normal Bar::Streamer function; /// will be called. The Bar::Streamer function works OK independently; /// if the Bar StreamerInfo had been generated in optimized mode or not.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:1605,Performance,optimiz,optimized,1605,"////////////////////////////////////////////////////////////////////////////////; /// When the kBypassStreamer bit is set, the automatically; /// generated Streamer can call directly TClass::WriteBuffer.; /// Bypassing the Streamer improves the performance when writing/reading; /// the objects in the TClonesArray. However there is a drawback:; /// When a TClonesArray is written with split=0 bypassing the Streamer,; /// the StreamerInfo of the class in the array being optimized,; /// one cannot use later the TClonesArray with split>0. For example,; /// there is a problem with the following scenario:; /// 1. A class Foo has a TClonesArray of Bar objects; /// 2. The Foo object is written with split=0 to Tree T1.; /// In this case the StreamerInfo for the class Bar is created; /// in optimized mode in such a way that data members of the same type; /// are written as an array improving the I/O performance.; /// 3. In a new program, T1 is read and a new Tree T2 is created; /// with the object Foo in split>1; /// 4. When the T2 branch is created, the StreamerInfo for the class Bar; /// is created with no optimization (mandatory for the split mode).; /// The optimized Bar StreamerInfo is going to be used to read; /// the TClonesArray in T1. The result will be Bar objects with; /// data member values not in the right sequence.; /// The solution to this problem is to call BypassStreamer(kFALSE); /// for the TClonesArray. In this case, the normal Bar::Streamer function; /// will be called. The Bar::Streamer function works OK independently; /// if the Bar StreamerInfo had been generated in optimized mode or not.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:194,Energy Efficiency,allocate,allocated,194,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, it is the callers; /// responsibility to insure that the object is returned to a known state,; /// usually by calling the Clear method on the TClonesArray.; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:245,Energy Efficiency,allocate,allocated,245,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, it is the callers; /// responsibility to insure that the object is returned to a known state,; /// usually by calling the Clear method on the TClonesArray.; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:743,Energy Efficiency,allocate,allocate,743,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, it is the callers; /// responsibility to insure that the object is returned to a known state,; /// usually by calling the Clear method on the TClonesArray.; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:463,Testability,Test,Tests,463,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, it is the callers; /// responsibility to insure that the object is returned to a known state,; /// usually by calling the Clear method on the TClonesArray.; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:419,Usability,Clear,Clear,419,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, it is the callers; /// responsibility to insure that the object is returned to a known state,; /// usually by calling the Clear method on the TClonesArray.; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:815,Usability,Clear,Clear,815,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, it is the callers; /// responsibility to insure that the object is returned to a known state,; /// usually by calling the Clear method on the TClonesArray.; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:194,Energy Efficiency,allocate,allocated,194,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, the function Clear; /// will be called and passed the value of 'clear_options'; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:245,Energy Efficiency,allocate,allocated,245,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, the function Clear; /// will be called and passed the value of 'clear_options'; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:666,Energy Efficiency,allocate,allocate,666,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, the function Clear; /// will be called and passed the value of 'clear_options'; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:386,Testability,Test,Tests,386,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, the function Clear; /// will be called and passed the value of 'clear_options'; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:310,Usability,Clear,Clear,310,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, the function Clear; /// will be called and passed the value of 'clear_options'; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:738,Usability,Clear,Clear,738,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, the function Clear; /// will be called and passed the value of 'clear_options'; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:161,Energy Efficiency,allocate,allocate,161,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Only use this routine when your objects don't; /// allocate memory since it will not call the object dtors.; /// However, if the class in the TClonesArray implements the function; /// Clear(Option_t *option) and if option = ""C"" the function Clear(); /// is called for all objects in the array. In the function Clear(), one; /// can delete objects or dynamic arrays allocated in the class.; /// This procedure is much faster than calling TClonesArray::Delete().; /// When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; /// are in turn cleared with the option ""xyz""",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:475,Energy Efficiency,allocate,allocated,475,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Only use this routine when your objects don't; /// allocate memory since it will not call the object dtors.; /// However, if the class in the TClonesArray implements the function; /// Clear(Option_t *option) and if option = ""C"" the function Clear(); /// is called for all objects in the array. In the function Clear(), one; /// can delete objects or dynamic arrays allocated in the class.; /// This procedure is much faster than calling TClonesArray::Delete().; /// When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; /// are in turn cleared with the option ""xyz""",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:124,Integrability,rout,routine,124,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Only use this routine when your objects don't; /// allocate memory since it will not call the object dtors.; /// However, if the class in the TClonesArray implements the function; /// Clear(Option_t *option) and if option = ""C"" the function Clear(); /// is called for all objects in the array. In the function Clear(), one; /// can delete objects or dynamic arrays allocated in the class.; /// This procedure is much faster than calling TClonesArray::Delete().; /// When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; /// are in turn cleared with the option ""xyz""",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Only use this routine when your objects don't; /// allocate memory since it will not call the object dtors.; /// However, if the class in the TClonesArray implements the function; /// Clear(Option_t *option) and if option = ""C"" the function Clear(); /// is called for all objects in the array. In the function Clear(), one; /// can delete objects or dynamic arrays allocated in the class.; /// This procedure is much faster than calling TClonesArray::Delete().; /// When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; /// are in turn cleared with the option ""xyz""",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:294,Usability,Clear,Clear,294,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Only use this routine when your objects don't; /// allocate memory since it will not call the object dtors.; /// However, if the class in the TClonesArray implements the function; /// Clear(Option_t *option) and if option = ""C"" the function Clear(); /// is called for all objects in the array. In the function Clear(), one; /// can delete objects or dynamic arrays allocated in the class.; /// This procedure is much faster than calling TClonesArray::Delete().; /// When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; /// are in turn cleared with the option ""xyz""",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:351,Usability,Clear,Clear,351,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Only use this routine when your objects don't; /// allocate memory since it will not call the object dtors.; /// However, if the class in the TClonesArray implements the function; /// Clear(Option_t *option) and if option = ""C"" the function Clear(); /// is called for all objects in the array. In the function Clear(), one; /// can delete objects or dynamic arrays allocated in the class.; /// This procedure is much faster than calling TClonesArray::Delete().; /// When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; /// are in turn cleared with the option ""xyz""",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:420,Usability,Clear,Clear,420,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Only use this routine when your objects don't; /// allocate memory since it will not call the object dtors.; /// However, if the class in the TClonesArray implements the function; /// Clear(Option_t *option) and if option = ""C"" the function Clear(); /// is called for all objects in the array. In the function Clear(), one; /// can delete objects or dynamic arrays allocated in the class.; /// This procedure is much faster than calling TClonesArray::Delete().; /// When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; /// are in turn cleared with the option ""xyz""",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:663,Usability,clear,cleared,663,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Only use this routine when your objects don't; /// allocate memory since it will not call the object dtors.; /// However, if the class in the TClonesArray implements the function; /// Clear(Option_t *option) and if option = ""C"" the function Clear(); /// is called for all objects in the array. In the function Clear(), one; /// can delete objects or dynamic arrays allocated in the class.; /// This procedure is much faster than calling TClonesArray::Delete().; /// When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; /// are in turn cleared with the option ""xyz""",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:145,Energy Efficiency,allocate,allocate,145,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Use this routine when your objects allocate; /// memory (e.g. objects inheriting from TNamed or containing TStrings; /// allocate memory). If not you better use Clear() since if is faster.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:231,Energy Efficiency,allocate,allocate,231,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Use this routine when your objects allocate; /// memory (e.g. objects inheriting from TNamed or containing TStrings; /// allocate memory). If not you better use Clear() since if is faster.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:119,Integrability,rout,routine,119,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Use this routine when your objects allocate; /// memory (e.g. objects inheriting from TNamed or containing TStrings; /// allocate memory). If not you better use Clear() since if is faster.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:180,Modifiability,inherit,inheriting,180,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Use this routine when your objects allocate; /// memory (e.g. objects inheriting from TNamed or containing TStrings; /// allocate memory). If not you better use Clear() since if is faster.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Use this routine when your objects allocate; /// memory (e.g. objects inheriting from TNamed or containing TStrings; /// allocate memory). If not you better use Clear() since if is faster.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:271,Usability,Clear,Clear,271,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Use this routine when your objects allocate; /// memory (e.g. objects inheriting from TNamed or containing TStrings; /// allocate memory). If not you better use Clear() since if is faster.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3,Deployability,release,release,3,"// release allocated space in fKeep and set to 0 so; // Expand() will shrink correctly",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:11,Energy Efficiency,allocate,allocated,11,"// release allocated space in fKeep and set to 0 so; // Expand() will shrink correctly",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:260,Energy Efficiency,allocate,allocated,260,"////////////////////////////////////////////////////////////////////////////////; /// Expand or shrink the array to n elements and create the clone; /// objects by calling their default ctor. If n is less than the current size; /// the array is shrunk and the allocated space is freed.; /// This routine is typically used to create a clonesarray into which; /// one can directly copy object data without going via the; /// ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:296,Integrability,rout,routine,296,"////////////////////////////////////////////////////////////////////////////////; /// Expand or shrink the array to n elements and create the clone; /// objects by calling their default ctor. If n is less than the current size; /// the array is shrunk and the allocated space is freed.; /// This routine is typically used to create a clonesarray into which; /// one can directly copy object data without going via the; /// ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:260,Energy Efficiency,allocate,allocated,260,"////////////////////////////////////////////////////////////////////////////////; /// Expand or shrink the array to n elements and create the clone; /// objects by calling their default ctor. If n is less than the current size; /// the array is shrunk but the allocated space is _not_ freed.; /// This routine is typically used to create a clonesarray into which; /// one can directly copy object data without going via the; /// ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; /// This is a simplified version of ExpandCreate used in the TTree mechanism.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:302,Integrability,rout,routine,302,"////////////////////////////////////////////////////////////////////////////////; /// Expand or shrink the array to n elements and create the clone; /// objects by calling their default ctor. If n is less than the current size; /// the array is shrunk but the allocated space is _not_ freed.; /// This routine is typically used to create a clonesarray into which; /// one can directly copy object data without going via the; /// ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; /// This is a simplified version of ExpandCreate used in the TTree mechanism.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:509,Usability,simpl,simplified,509,"////////////////////////////////////////////////////////////////////////////////; /// Expand or shrink the array to n elements and create the clone; /// objects by calling their default ctor. If n is less than the current size; /// the array is shrunk but the allocated space is _not_ freed.; /// This routine is typically used to create a clonesarray into which; /// one can directly copy object data without going via the; /// ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; /// This is a simplified version of ExpandCreate used in the TTree mechanism.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:147,Modifiability,inherit,inherit,147,"////////////////////////////////////////////////////////////////////////////////; /// Create an array of clone objects of class cl. The class must inherit from; /// TObject.; /// The second argument s indicates an approximate number of objects; /// that will be entered in the array. If more than s objects are entered,; /// the array will be automatically expanded.; ///; /// NB: This function should not be called in the TClonesArray is already; /// initialized with a class.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:180,Modifiability,inherit,inherits,180,"////////////////////////////////////////////////////////////////////////////////; /// A TClonesArray is always the owner of the object it contains.; /// However the collection its inherits from (TObjArray) does not.; /// Hence this member function needs to be a nop for TClonesArray.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:96,Availability,error,error,96,"//this case may happen when switching from an emulated class to the real class; //may not be an error. fClass may point to a deleted object; //Error(""Streamer"", ""expecting objects of type %s, finding objects""; // "" of type %s"", fClass->GetName(), cl->GetName());; //return;",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:143,Availability,Error,Error,143,"//this case may happen when switching from an emulated class to the real class; //may not be an error. fClass may point to a deleted object; //Error(""Streamer"", ""expecting objects of type %s, finding objects""; // "" of type %s"", fClass->GetName(), cl->GetName());; //return;",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:33,Performance,optimiz,optimized,33,"//Make sure TStreamerInfo is not optimized, otherwise it will not be; //possible to support schema evolution in read mode.; //In case the StreamerInfo has already been computed and optimized,; //one must disable the option BypassStreamer",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:181,Performance,optimiz,optimized,181,"//Make sure TStreamerInfo is not optimized, otherwise it will not be; //possible to support schema evolution in read mode.; //In case the StreamerInfo has already been computed and optimized,; //one must disable the option BypassStreamer",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:197,Integrability,interface,interface,197,"// Reset the bit so that:; // obj = myClonesArray[i];; // ! obj->IsDestructed(); // will behave correctly.; // TObject::kNotDeleted is one of the higher bit that is not settable via the public; // interface. But luckily we are its friend.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:190,Availability,error,error,190,"////////////////////////////////////////////////////////////////////////////////; /// Create an object of type fClass with the default ctor at the specified; /// index. Returns 0 in case of error.",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3,Testability,test,tests,3,"// tests",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3,Testability,test,tests,3,"// tests",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3,Performance,cache,cache,3,"// cache the sorted status",MatchSource.CODE_COMMENT,core/cont/src/TClonesArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:1324,Deployability,release,release,1324,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 13/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TCollection; \ingroup Containers; Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsibility to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the respective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized.; */",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:526,Integrability,protocol,protocol,526,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 13/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TCollection; \ingroup Containers; Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsibility to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the respective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized.; */",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:1094,Integrability,Depend,Depending,1094,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 13/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TCollection; \ingroup Containers; Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsibility to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the respective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized.; */",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:644,Modifiability,inherit,inherit,644,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 13/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TCollection; \ingroup Containers; Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsibility to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the respective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized.; */",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:1229,Modifiability,inherit,inherits,1229,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 13/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TCollection; \ingroup Containers; Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsibility to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the respective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized.; */",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:17,Availability,Error,Error,17,"// std::cerr << ""Error in "" << function << "": Access ("" << accesstype << "") to a collection ("" <<; // collection->IsA()->GetName() << "":"" << collection <<; // "") from multiple threads at a time. holder="" << ""0x"" << std::hex << holder << "" readers="" << fReadSet.size() <<; // ""0x"" << std::hex << local << std::endl;",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:46,Security,Access,Access,46,"// std::cerr << ""Error in "" << function << "": Access ("" << accesstype << "") to a collection ("" <<; // collection->IsA()->GetName() << "":"" << collection <<; // "") from multiple threads at a time. holder="" << ""0x"" << std::hex << holder << "" readers="" << fReadSet.size() <<; // ""0x"" << std::hex << local << std::endl;",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:59,Security,access,accesstype,59,"// std::cerr << ""Error in "" << function << "": Access ("" << accesstype << "") to a collection ("" <<; // collection->IsA()->GetName() << "":"" << collection <<; // "") from multiple threads at a time. holder="" << ""0x"" << std::hex << holder << "" readers="" << fReadSet.size() <<; // ""0x"" << std::hex << local << std::endl;",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:114,Modifiability,variab,variable,114,"// fWriteCurrent was not the default id and is still the 'holder' thread id; // this id is now also in the holder variable",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:198,Performance,load,load,198,"// fWriteCurrent was local and is now none.; // std::cerr << ""#"" << ""0x"" << std::hex << local << "" zero and cleaned : "" << std::dec << fWriteCurrentRecurse; // << "" 0x"" << std::hex << fWriteCurrent.load() << "" lock:"" << this << std::endl;",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:175,Performance,load,load,175,"// fWriteCurrent was not local, just live it as is.; // std::cerr << ""#"" << ""0x"" << std::hex << local << "" zero but somebody else : "" << ""0x"" << std::hex <<; // fWriteCurrent.load() << "" lock:"" << this << std::endl;",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:147,Performance,load,load,147,"// std::cerr << ""#"" << ""0x"" << std::hex << local << "" ended with : "" << std::dec << fWriteCurrentRecurse << "" 0x"" <<; // std::hex << fWriteCurrent.load() << "" lock:"" << this << std::endl;",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:22,Safety,safe,safe,22,"// this is not thread safe ...",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:22,Safety,safe,safe,22,"// this is not thread safe ...",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:127,Modifiability,inherit,inherit,127,"////////////////////////////////////////////////////////////////////////////////; /// Make sure all objects in this collection inherit from class cl.",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:322,Energy Efficiency,efficient,efficient,322,"////////////////////////////////////////////////////////////////////////////////; /// Find an object in this collection using the object's IsEqual(); /// member function. Requires a sequential scan till the object has; /// been found. Returns 0 if object is not found.; /// Typically this function is overridden by a more efficient version; /// in concrete collection classes (e.g. THashTable).",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:190,Performance,perform,perform,190,"////////////////////////////////////////////////////////////////////////////////; /// For given collection entry return the string that is used to; /// identify the object and, potentially, perform wildcard/regexp; /// filtering on.",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:106,Security,access,accessible,106,"////////////////////////////////////////////////////////////////////////////////; /// Return the globally accessible collection.",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:125,Security,access,accessible,125,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to be the globally accessible collection.",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:357,Integrability,depend,depending,357,"////////////////////////////////////////////////////////////////////////////////; /// Set whether this collection is the owner (enable==true); /// of its content. If it is the owner of its contents,; /// these objects will be deleted whenever the collection itself; /// is deleted. The objects might also be deleted or destructed when Clear; /// is called (depending on the collection).",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:335,Usability,Clear,Clear,335,"////////////////////////////////////////////////////////////////////////////////; /// Set whether this collection is the owner (enable==true); /// of its content. If it is the owner of its contents,; /// these objects will be deleted whenever the collection itself; /// is deleted. The objects might also be deleted or destructed when Clear; /// is called (depending on the collection).",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:153,Safety,safe,safe,153,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to use a RW lock upon access, making it thread safe.; /// Return the previous state.; ///; /// Note: To test whether the usage is enabled do:; /// collection->TestBit(TCollection::kUseRWLock);",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:128,Security,access,access,128,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to use a RW lock upon access, making it thread safe.; /// Return the previous state.; ///; /// Note: To test whether the usage is enabled do:; /// collection->TestBit(TCollection::kUseRWLock);",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:210,Testability,test,test,210,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to use a RW lock upon access, making it thread safe.; /// Return the previous state.; ///; /// Note: To test whether the usage is enabled do:; /// collection->TestBit(TCollection::kUseRWLock);",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:265,Testability,Test,TestBit,265,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to use a RW lock upon access, making it thread safe.; /// Return the previous state.; ///; /// Note: To test whether the usage is enabled do:; /// collection->TestBit(TCollection::kUseRWLock);",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:106,Modifiability,inherit,inherits,106,"////////////////////////////////////////////////////////////////////////////////; /// Return true if 'cl' inherits from 'base'.",MatchSource.CODE_COMMENT,core/cont/src/TCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:492,Security,hash,hash,492,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 26/05/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TExMap. This class stores a (key,value) pair using an external hash.; The (key,value) are Long64_t's and therefore can contain object; pointers or any longs. The map uses an open addressing hashing; method (linear probing).; */",MatchSource.CODE_COMMENT,core/cont/src/TExMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:619,Security,hash,hashing,619,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 26/05/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TExMap. This class stores a (key,value) pair using an external hash.; The (key,value) are Long64_t's and therefore can contain object; pointers or any longs. The map uses an open addressing hashing; method (linear probing).; */",MatchSource.CODE_COMMENT,core/cont/src/TExMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:3,Safety,Avoid,Avoid,3,"// Avoid calling NextPrime for the common case:",MatchSource.CODE_COMMENT,core/cont/src/TExMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:234,Security,hash,hash,234,"////////////////////////////////////////////////////////////////////////////////; /// Add an (key,value) pair to the table. The key should be unique.; /// If the 'slot' is open, use it to store the value,; /// otherwise revert to Add(hash,key,value); /// This is usually used in conjunction with GetValue with 3 parameters:; /// ~~~ {.cpp}; /// if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {; /// ...; /// } else {; /// fMap->AddAt(slot,hash,key,value);; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/cont/src/TExMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:382,Security,hash,hash,382,"////////////////////////////////////////////////////////////////////////////////; /// Add an (key,value) pair to the table. The key should be unique.; /// If the 'slot' is open, use it to store the value,; /// otherwise revert to Add(hash,key,value); /// This is usually used in conjunction with GetValue with 3 parameters:; /// ~~~ {.cpp}; /// if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {; /// ...; /// } else {; /// fMap->AddAt(slot,hash,key,value);; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/cont/src/TExMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:453,Security,hash,hash,453,"////////////////////////////////////////////////////////////////////////////////; /// Add an (key,value) pair to the table. The key should be unique.; /// If the 'slot' is open, use it to store the value,; /// otherwise revert to Add(hash,key,value); /// This is usually used in conjunction with GetValue with 3 parameters:; /// ~~~ {.cpp}; /// if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {; /// ...; /// } else {; /// fMap->AddAt(slot,hash,key,value);; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/cont/src/TExMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:163,Security,hash,hash,163,"////////////////////////////////////////////////////////////////////////////////; /// Return a reference to the value belonging to the key with the; /// specified hash value. If the key does not exist it will be added.; /// NOTE: the reference will be invalidated an Expand() triggered by; /// an Add() or another operator() call.",MatchSource.CODE_COMMENT,core/cont/src/TExMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:134,Security,hash,hash,134,"////////////////////////////////////////////////////////////////////////////////; /// Return the value belonging to specified key and hash value. If key not; /// found return 0.",MatchSource.CODE_COMMENT,core/cont/src/TExMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:134,Security,hash,hash,134,"////////////////////////////////////////////////////////////////////////////////; /// Return the value belonging to specified key and hash value. If key not; /// found return 0.; /// In 'slot', return the index of the slot used or the first empty slot.; /// (to be used with AddAt).",MatchSource.CODE_COMMENT,core/cont/src/TExMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:115,Security,hash,hash,115,"////////////////////////////////////////////////////////////////////////////////; /// Find an entry with specified hash and key in the TExMap.; /// Returns the slot of the key or the next empty slot.",MatchSource.CODE_COMMENT,core/cont/src/TExMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:780,Modifiability,inherit,inheriting,780,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashList; \ingroup Containers; THashList implements a hybrid collection class consisting of a; hash table and a list to store TObject's. The hash table is used for; quick access and lookup of objects while the list allows the objects; to be ordered. The hash value is calculated using the value returned; by the TObject's Hash() function. Each class inheriting from TObject; can override Hash() as it sees fit.; */",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:525,Security,hash,hash,525,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashList; \ingroup Containers; THashList implements a hybrid collection class consisting of a; hash table and a list to store TObject's. The hash table is used for; quick access and lookup of objects while the list allows the objects; to be ordered. The hash value is calculated using the value returned; by the TObject's Hash() function. Each class inheriting from TObject; can override Hash() as it sees fit.; */",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:571,Security,hash,hash,571,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashList; \ingroup Containers; THashList implements a hybrid collection class consisting of a; hash table and a list to store TObject's. The hash table is used for; quick access and lookup of objects while the list allows the objects; to be ordered. The hash value is calculated using the value returned; by the TObject's Hash() function. Each class inheriting from TObject; can override Hash() as it sees fit.; */",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:601,Security,access,access,601,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashList; \ingroup Containers; THashList implements a hybrid collection class consisting of a; hash table and a list to store TObject's. The hash table is used for; quick access and lookup of objects while the list allows the objects; to be ordered. The hash value is calculated using the value returned; by the TObject's Hash() function. Each class inheriting from TObject; can override Hash() as it sees fit.; */",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:684,Security,hash,hash,684,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashList; \ingroup Containers; THashList implements a hybrid collection class consisting of a; hash table and a list to store TObject's. The hash table is used for; quick access and lookup of objects while the list allows the objects; to be ordered. The hash value is calculated using the value returned; by the TObject's Hash() function. Each class inheriting from TObject; can override Hash() as it sees fit.; */",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:752,Security,Hash,Hash,752,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashList; \ingroup Containers; THashList implements a hybrid collection class consisting of a; hash table and a list to store TObject's. The hash table is used for; quick access and lookup of objects while the list allows the objects; to be ordered. The hash value is calculated using the value returned; by the TObject's Hash() function. Each class inheriting from TObject; can override Hash() as it sees fit.; */",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:818,Security,Hash,Hash,818,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashList; \ingroup Containers; THashList implements a hybrid collection class consisting of a; hash table and a list to store TObject's. The hash table is used for; quick access and lookup of objects while the list allows the objects; to be ordered. The hash value is calculated using the value returned; by the TObject's Hash() function. Each class inheriting from TObject; can override Hash() as it sees fit.; */",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:436,Energy Efficiency,reduce,reduce,436,"////////////////////////////////////////////////////////////////////////////////; /// Create a THashList object. Capacity is the initial hashtable capacity; /// (i.e. number of slots), by default kInitHashTableCapacity = 17, and; /// rehash is the value at which a rehash will be triggered. I.e. when the; /// average size of the linked lists at a slot becomes longer than rehash; /// then the hashtable will be resized and refilled to reduce the collision; /// rate to about 1. The higher the collision rate, i.e. the longer the; /// linked lists, the longer lookup will take. If rehash=0 the table will; /// NOT automatically be rehashed. Use Rehash() for manual rehashing.; ///; /// WARNING !!!; /// If the name of an object in the HashList is modified, The hashlist; /// must be Rehashed",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:137,Security,hash,hashtable,137,"////////////////////////////////////////////////////////////////////////////////; /// Create a THashList object. Capacity is the initial hashtable capacity; /// (i.e. number of slots), by default kInitHashTableCapacity = 17, and; /// rehash is the value at which a rehash will be triggered. I.e. when the; /// average size of the linked lists at a slot becomes longer than rehash; /// then the hashtable will be resized and refilled to reduce the collision; /// rate to about 1. The higher the collision rate, i.e. the longer the; /// linked lists, the longer lookup will take. If rehash=0 the table will; /// NOT automatically be rehashed. Use Rehash() for manual rehashing.; ///; /// WARNING !!!; /// If the name of an object in the HashList is modified, The hashlist; /// must be Rehashed",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:394,Security,hash,hashtable,394,"////////////////////////////////////////////////////////////////////////////////; /// Create a THashList object. Capacity is the initial hashtable capacity; /// (i.e. number of slots), by default kInitHashTableCapacity = 17, and; /// rehash is the value at which a rehash will be triggered. I.e. when the; /// average size of the linked lists at a slot becomes longer than rehash; /// then the hashtable will be resized and refilled to reduce the collision; /// rate to about 1. The higher the collision rate, i.e. the longer the; /// linked lists, the longer lookup will take. If rehash=0 the table will; /// NOT automatically be rehashed. Use Rehash() for manual rehashing.; ///; /// WARNING !!!; /// If the name of an object in the HashList is modified, The hashlist; /// must be Rehashed",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:735,Security,Hash,HashList,735,"////////////////////////////////////////////////////////////////////////////////; /// Create a THashList object. Capacity is the initial hashtable capacity; /// (i.e. number of slots), by default kInitHashTableCapacity = 17, and; /// rehash is the value at which a rehash will be triggered. I.e. when the; /// average size of the linked lists at a slot becomes longer than rehash; /// then the hashtable will be resized and refilled to reduce the collision; /// rate to about 1. The higher the collision rate, i.e. the longer the; /// linked lists, the longer lookup will take. If rehash=0 the table will; /// NOT automatically be rehashed. Use Rehash() for manual rehashing.; ///; /// WARNING !!!; /// If the name of an object in the HashList is modified, The hashlist; /// must be Rehashed",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:761,Security,hash,hashlist,761,"////////////////////////////////////////////////////////////////////////////////; /// Create a THashList object. Capacity is the initial hashtable capacity; /// (i.e. number of slots), by default kInitHashTableCapacity = 17, and; /// rehash is the value at which a rehash will be triggered. I.e. when the; /// average size of the linked lists at a slot becomes longer than rehash; /// then the hashtable will be resized and refilled to reduce the collision; /// rate to about 1. The higher the collision rate, i.e. the longer the; /// linked lists, the longer lookup will take. If rehash=0 the table will; /// NOT automatically be rehashed. Use Rehash() for manual rehashing.; ///; /// WARNING !!!; /// If the name of an object in the HashList is modified, The hashlist; /// must be Rehashed",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:95,Security,hash,hashlist,95,"////////////////////////////////////////////////////////////////////////////////; /// Delete a hashlist. Objects are not deleted unless the THashList is the; /// owner (set via SetOwner()).",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:276,Performance,perform,perform,276,"////////////////////////////////////////////////////////////////////////////////; /// Return the average collision rate. The higher the number the longer; /// the linked lists in the hashtable, the slower the lookup. If the number; /// is high, or lookup noticeably too slow, perform a Rehash().",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:183,Security,hash,hashtable,183,"////////////////////////////////////////////////////////////////////////////////; /// Return the average collision rate. The higher the number the longer; /// the linked lists in the hashtable, the slower the lookup. If the number; /// is high, or lookup noticeably too slow, perform a Rehash().",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:3,Usability,clear,clear,3,"// clear table so not more lookups",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:345,Security,access,access,345,"////////////////////////////////////////////////////////////////////////////////; /// Remove all objects from the list AND delete all heap based objects.; /// If option=""slow"" then keep list consistent during delete. This allows; /// recursive list operations during the delete (e.g. during the dtor; /// of an object in this list one can still access the list to search for; /// other not yet deleted objects).",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:3,Usability,clear,clear,3,"// clear table so no more lookups",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:25,Security,access,access,25,"// In case somebody else access it.",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:28,Availability,down,down,28,"// tlk reference count goes down 1.",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:123,Security,hash,hash,123,"////////////////////////////////////////////////////////////////////////////////; /// Find object using its name. Uses the hash value returned by the; /// TString::Hash() after converting name to a TString.",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:164,Security,Hash,Hash,164,"////////////////////////////////////////////////////////////////////////////////; /// Find object using its name. Uses the hash value returned by the; /// TString::Hash() after converting name to a TString.",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:108,Security,hash,hash,108,"////////////////////////////////////////////////////////////////////////////////; /// Find object using its hash value (returned by its Hash() member).",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:136,Security,Hash,Hash,136,"////////////////////////////////////////////////////////////////////////////////; /// Find object using its hash value (returned by its Hash() member).",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:168,Security,hash,hash,168,"////////////////////////////////////////////////////////////////////////////////; /// Return the THashTable's list (bucket) in which obj can be found based on; /// its hash; see THashTable::GetListForObject().",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:168,Security,hash,hash,168,"////////////////////////////////////////////////////////////////////////////////; /// Return the THashTable's list (bucket) in which obj can be found based on; /// its hash; see THashTable::GetListForObject().",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:415,Availability,avail,available,415,"////////////////////////////////////////////////////////////////////////////////; /// Remove object from this collection and recursively remove the object; /// from all other objects (and collections).; /// This function overrides TCollection::RecursiveRemove that calls; /// the Remove function. THashList::Remove cannot be called because; /// it uses the hash value of the hash table. This hash value; /// is not available anymore when RecursiveRemove is called from; /// the TObject destructor.",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:357,Security,hash,hash,357,"////////////////////////////////////////////////////////////////////////////////; /// Remove object from this collection and recursively remove the object; /// from all other objects (and collections).; /// This function overrides TCollection::RecursiveRemove that calls; /// the Remove function. THashList::Remove cannot be called because; /// it uses the hash value of the hash table. This hash value; /// is not available anymore when RecursiveRemove is called from; /// the TObject destructor.",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:375,Security,hash,hash,375,"////////////////////////////////////////////////////////////////////////////////; /// Remove object from this collection and recursively remove the object; /// from all other objects (and collections).; /// This function overrides TCollection::RecursiveRemove that calls; /// the Remove function. THashList::Remove cannot be called because; /// it uses the hash value of the hash table. This hash value; /// is not available anymore when RecursiveRemove is called from; /// the TObject destructor.",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:392,Security,hash,hash,392,"////////////////////////////////////////////////////////////////////////////////; /// Remove object from this collection and recursively remove the object; /// from all other objects (and collections).; /// This function overrides TCollection::RecursiveRemove that calls; /// the Remove function. THashList::Remove cannot be called because; /// it uses the hash value of the hash table. This hash value; /// is not available anymore when RecursiveRemove is called from; /// the TObject destructor.",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:212,Performance,bottleneck,bottleneck,212,"// It might not be safe to rely on TROOT::RecursiveRemove to take the readlock in case user code; // is calling directly gROOT->GetListOfCleanups()->RecursiveRemove(...); // However this can become a significant bottleneck if there are a very large number of; // TDirectory object.; // If we need to enabling this read lock, we need to move the fSize check afterwards.; // TList::RecursiveRemove has the same pattern.; // R__COLLECTION_READ_LOCKGUARD(ROOT::gCoreMutex);",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:19,Safety,safe,safe,19,"// It might not be safe to rely on TROOT::RecursiveRemove to take the readlock in case user code; // is calling directly gROOT->GetListOfCleanups()->RecursiveRemove(...); // However this can become a significant bottleneck if there are a very large number of; // TDirectory object.; // If we need to enabling this read lock, we need to move the fSize check afterwards.; // TList::RecursiveRemove has the same pattern.; // R__COLLECTION_READ_LOCKGUARD(ROOT::gCoreMutex);",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:325,Performance,perform,performance,325,"////////////////////////////////////////////////////////////////////////////////; /// Rehash the hashlist. If the collision rate becomes too high (i.e.; /// the average size of the linked lists become too long) then lookup; /// efficiency decreases since relatively long lists have to be searched; /// every time. To improve performance rehash the hashtable. This resizes; /// the table to newCapacity slots and refills the table. Use; /// AverageCollisions() to check if you need to rehash.",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:97,Security,hash,hashlist,97,"////////////////////////////////////////////////////////////////////////////////; /// Rehash the hashlist. If the collision rate becomes too high (i.e.; /// the average size of the linked lists become too long) then lookup; /// efficiency decreases since relatively long lists have to be searched; /// every time. To improve performance rehash the hashtable. This resizes; /// the table to newCapacity slots and refills the table. Use; /// AverageCollisions() to check if you need to rehash.",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:348,Security,hash,hashtable,348,"////////////////////////////////////////////////////////////////////////////////; /// Rehash the hashlist. If the collision rate becomes too high (i.e.; /// the average size of the linked lists become too long) then lookup; /// efficiency decreases since relatively long lists have to be searched; /// every time. To improve performance rehash the hashtable. This resizes; /// the table to newCapacity slots and refills the table. Use; /// AverageCollisions() to check if you need to rehash.",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:153,Safety,safe,safe,153,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to use a RW lock upon access, making it thread safe.; /// Return the previous state.; ///; /// Note: To test whether the usage is enabled do:; /// collection->TestBit(TCollection::kUseRWLock);",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:128,Security,access,access,128,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to use a RW lock upon access, making it thread safe.; /// Return the previous state.; ///; /// Note: To test whether the usage is enabled do:; /// collection->TestBit(TCollection::kUseRWLock);",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:210,Testability,test,test,210,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to use a RW lock upon access, making it thread safe.; /// Return the previous state.; ///; /// Note: To test whether the usage is enabled do:; /// collection->TestBit(TCollection::kUseRWLock);",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:265,Testability,Test,TestBit,265,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to use a RW lock upon access, making it thread safe.; /// Return the previous state.; ///; /// Note: To test whether the usage is enabled do:; /// collection->TestBit(TCollection::kUseRWLock);",MatchSource.CODE_COMMENT,core/cont/src/THashList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:618,Modifiability,inherit,inheriting,618,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 27/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashTable; \ingroup Containers; THashTable implements a hash table to store TObject's. The hash; value is calculated using the value returned by the TObject's; Hash() function. Each class inheriting from TObject can override; Hash() as it sees fit. THashTable does not preserve the insertion order of the objects.; If the insertion order is important AND fast retrieval is needed; use THashList instead.; */",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:486,Security,hash,hash,486,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 27/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashTable; \ingroup Containers; THashTable implements a hash table to store TObject's. The hash; value is calculated using the value returned by the TObject's; Hash() function. Each class inheriting from TObject can override; Hash() as it sees fit. THashTable does not preserve the insertion order of the objects.; If the insertion order is important AND fast retrieval is needed; use THashList instead.; */",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:521,Security,hash,hash,521,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 27/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashTable; \ingroup Containers; THashTable implements a hash table to store TObject's. The hash; value is calculated using the value returned by the TObject's; Hash() function. Each class inheriting from TObject can override; Hash() as it sees fit. THashTable does not preserve the insertion order of the objects.; If the insertion order is important AND fast retrieval is needed; use THashList instead.; */",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:590,Security,Hash,Hash,590,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 27/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashTable; \ingroup Containers; THashTable implements a hash table to store TObject's. The hash; value is calculated using the value returned by the TObject's; Hash() function. Each class inheriting from TObject can override; Hash() as it sees fit. THashTable does not preserve the insertion order of the objects.; If the insertion order is important AND fast retrieval is needed; use THashList instead.; */",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:656,Security,Hash,Hash,656,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 27/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashTable; \ingroup Containers; THashTable implements a hash table to store TObject's. The hash; value is calculated using the value returned by the TObject's; Hash() function. Each class inheriting from TObject can override; Hash() as it sees fit. THashTable does not preserve the insertion order of the objects.; If the insertion order is important AND fast retrieval is needed; use THashList instead.; */",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:447,Energy Efficiency,reduce,reduce,447,"////////////////////////////////////////////////////////////////////////////////; /// Create a THashTable object. Capacity is the initial hashtable capacity; /// (i.e. number of slots), by default kInitHashTableCapacity = 17, and; /// rehashlevel is the value at which a rehash will be triggered. I.e. when; /// the average size of the linked lists at a slot becomes longer than; /// rehashlevel then the hashtable will be resized and refilled to reduce; /// the collision rate to about 1. The higher the collision rate, i.e. the; /// longer the linked lists, the longer lookup will take. If rehashlevel=0; /// the table will NOT automatically be rehashed. Use Rehash() for manual; /// rehashing.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:138,Security,hash,hashtable,138,"////////////////////////////////////////////////////////////////////////////////; /// Create a THashTable object. Capacity is the initial hashtable capacity; /// (i.e. number of slots), by default kInitHashTableCapacity = 17, and; /// rehashlevel is the value at which a rehash will be triggered. I.e. when; /// the average size of the linked lists at a slot becomes longer than; /// rehashlevel then the hashtable will be resized and refilled to reduce; /// the collision rate to about 1. The higher the collision rate, i.e. the; /// longer the linked lists, the longer lookup will take. If rehashlevel=0; /// the table will NOT automatically be rehashed. Use Rehash() for manual; /// rehashing.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:405,Security,hash,hashtable,405,"////////////////////////////////////////////////////////////////////////////////; /// Create a THashTable object. Capacity is the initial hashtable capacity; /// (i.e. number of slots), by default kInitHashTableCapacity = 17, and; /// rehashlevel is the value at which a rehash will be triggered. I.e. when; /// the average size of the linked lists at a slot becomes longer than; /// rehashlevel then the hashtable will be resized and refilled to reduce; /// the collision rate to about 1. The higher the collision rate, i.e. the; /// longer the linked lists, the longer lookup will take. If rehashlevel=0; /// the table will NOT automatically be rehashed. Use Rehash() for manual; /// rehashing.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:95,Security,hash,hashtable,95,"////////////////////////////////////////////////////////////////////////////////; /// Delete a hashtable. Objects are not deleted unless the THashTable is the; /// owner (set via SetOwner()).",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:104,Security,hash,hash,104,"////////////////////////////////////////////////////////////////////////////////; /// Add object to the hash table. Its position in the table will be; /// determined by the value returned by its Hash() function.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:195,Security,Hash,Hash,195,"////////////////////////////////////////////////////////////////////////////////; /// Add object to the hash table. Its position in the table will be; /// determined by the value returned by its Hash() function.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:104,Security,hash,hash,104,"////////////////////////////////////////////////////////////////////////////////; /// Add object to the hash table. Its position in the table will be; /// determined by the value returned by its Hash() function.; /// If and only if 'before' is in the same bucket as obj, obj is added; /// in front of 'before' within the bucket's list.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:195,Security,Hash,Hash,195,"////////////////////////////////////////////////////////////////////////////////; /// Add object to the hash table. Its position in the table will be; /// determined by the value returned by its Hash() function.; /// If and only if 'before' is in the same bucket as obj, obj is added; /// in front of 'before' within the bucket's list.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:168,Energy Efficiency,efficient,efficient,168,"////////////////////////////////////////////////////////////////////////////////; /// Add all objects from collection col to this collection.; /// Implemented for more efficient rehashing.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:3,Security,Hash,Hashing,3,"// Hashing after AddAll can be much more expensive than; // hashing before, as we need to add more elements.; // We assume an ideal hash, i.e. fUsedSlots==fSize.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:60,Security,hash,hashing,60,"// Hashing after AddAll can be much more expensive than; // hashing before, as we need to add more elements.; // We assume an ideal hash, i.e. fUsedSlots==fSize.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:132,Security,hash,hash,132,"// Hashing after AddAll can be much more expensive than; // hashing before, as we need to add more elements.; // We assume an ideal hash, i.e. fUsedSlots==fSize.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:84,Security,hash,hash,84,"// If we didn't Rehash before, we might have to do it; // now, due to a non-perfect hash function.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:36,Usability,Clear,Clear,36,"// option ""nodelete"" is passed when Clear is called from; // THashList::Clear() or THashList::Delete() or Rehash().",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:72,Usability,Clear,Clear,72,"// option ""nodelete"" is passed when Clear is called from; // THashList::Clear() or THashList::Delete() or Rehash().",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:202,Security,hash,hash,202,"////////////////////////////////////////////////////////////////////////////////; /// Returns the number of collisions for an object with a certain name; /// (i.e. number of objects in same slot in the hash table, i.e. length; /// of linked list).",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:182,Security,hash,hash,182,"////////////////////////////////////////////////////////////////////////////////; /// Returns the number of collisions for an object (i.e. number of objects; /// in same slot in the hash table, i.e. length of linked list).",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:123,Security,hash,hash,123,"////////////////////////////////////////////////////////////////////////////////; /// Find object using its name. Uses the hash value returned by the; /// TString::Hash() after converting name to a TString.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:164,Security,Hash,Hash,164,"////////////////////////////////////////////////////////////////////////////////; /// Find object using its name. Uses the hash value returned by the; /// TString::Hash() after converting name to a TString.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:108,Security,hash,hash,108,"////////////////////////////////////////////////////////////////////////////////; /// Find object using its hash value (returned by its Hash() member).",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:136,Security,Hash,Hash,136,"////////////////////////////////////////////////////////////////////////////////; /// Find object using its hash value (returned by its Hash() member).",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:140,Security,hash,hash,140,"////////////////////////////////////////////////////////////////////////////////; /// Return the TList corresponding to object's name based hash value.; /// One can iterate this list ""manually"" to find, e.g. objects with; /// the same name.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:129,Security,hash,hash,129,"////////////////////////////////////////////////////////////////////////////////; /// Return the TList corresponding to object's hash value.; /// One can iterate this list ""manually"" to find, e.g. identical; /// objects.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:96,Security,hash,hash,96,"////////////////////////////////////////////////////////////////////////////////; /// Returns a hash table iterator.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:385,Security,hash,hash-slots,385,"////////////////////////////////////////////////////////////////////////////; /// Print the collection header and its elements.; ///; /// If recurse is non-zero, descend into printing of; /// collection-entries with recurse - 1.; /// This means, if recurse is negative, the recursion is infinite.; ///; /// If option contains ""details"", Print will show the content of; /// each of the hash-slots.; ///; /// Option is passed recursively.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:326,Performance,perform,performance,326,"////////////////////////////////////////////////////////////////////////////////; /// Rehash the hashtable. If the collision rate becomes too high (i.e.; /// the average size of the linked lists become too long) then lookup; /// efficiency decreases since relatively long lists have to be searched; /// every time. To improve performance rehash the hashtable. This resizes; /// the table to newCapacity slots and refills the table. Use; /// AverageCollisions() to check if you need to rehash. Set checkObjValidity; /// to kFALSE if you know that all objects in the table are still valid; /// (i.e. have not been deleted from the system in the meanwhile).",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:97,Security,hash,hashtable,97,"////////////////////////////////////////////////////////////////////////////////; /// Rehash the hashtable. If the collision rate becomes too high (i.e.; /// the average size of the linked lists become too long) then lookup; /// efficiency decreases since relatively long lists have to be searched; /// every time. To improve performance rehash the hashtable. This resizes; /// the table to newCapacity slots and refills the table. Use; /// AverageCollisions() to check if you need to rehash. Set checkObjValidity; /// to kFALSE if you know that all objects in the table are still valid; /// (i.e. have not been deleted from the system in the meanwhile).",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:349,Security,hash,hashtable,349,"////////////////////////////////////////////////////////////////////////////////; /// Rehash the hashtable. If the collision rate becomes too high (i.e.; /// the average size of the linked lists become too long) then lookup; /// efficiency decreases since relatively long lists have to be searched; /// every time. To improve performance rehash the hashtable. This resizes; /// the table to newCapacity slots and refills the table. Use; /// AverageCollisions() to check if you need to rehash. Set checkObjValidity; /// to kFALSE if you know that all objects in the table are still valid; /// (i.e. have not been deleted from the system in the meanwhile).",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:55,Security,hash,hash,55,"// Somehow in the process of copy the pointer from one hash to; // other we ended up inducing the addition of more element to; // the table. Most likely those elements have not been copied ....; // i.e. Adding *during* the Rehashing is illegal and fatal.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:89,Security,hash,hash,89,"// this should not happen, but it will prevent an endless loop; // in case of a very bad hash function",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:109,Security,hash,hashtable,109,"////////////////////////////////////////////////////////////////////////////////; /// Remove object from the hashtable.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:109,Security,hash,hashtable,109,"////////////////////////////////////////////////////////////////////////////////; /// Remove object from the hashtable without using the hash value.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:137,Security,hash,hash,137,"////////////////////////////////////////////////////////////////////////////////; /// Remove object from the hashtable without using the hash value.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:39,Security,hash,hash,39,/** \class THashTableIter; Iterator of hash table.; */,MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:95,Security,hash,hashtable,95,"////////////////////////////////////////////////////////////////////////////////; /// Create a hashtable iterator. By default the iteration direction; /// is kIterForward. To go backward use kIterBackward.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:93,Security,hash,hashtable,93,"////////////////////////////////////////////////////////////////////////////////; /// Delete hashtable iterator.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:108,Security,hash,hashtable,108,"////////////////////////////////////////////////////////////////////////////////; /// Return next object in hashtable. Returns 0 when no more objects in table.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:144,Integrability,depend,depending,144,"////////////////////////////////////////////////////////////////////////////////; /// Reset the hashtable iterator. Either to beginning or end, depending on; /// the initial iteration direction.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:96,Security,hash,hashtable,96,"////////////////////////////////////////////////////////////////////////////////; /// Reset the hashtable iterator. Either to beginning or end, depending on; /// the initial iteration direction.",MatchSource.CODE_COMMENT,core/cont/src/THashTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TIterator.cxx:520,Integrability,interface,interface,520,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 13/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TIterator; \ingroup Containers; Iterator abstract base class. This base class provides the interface; for collection iterators.; */",MatchSource.CODE_COMMENT,core/cont/src/TIterator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TIterator.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:603,Integrability,wrap,wrapped,603,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TList; \ingroup Containers; A doubly linked list. All classes inheriting from TObject can be; inserted in a TList. Before being inserted into the list the object; pointer is wrapped in a TObjLink object which contains, besides; the object pointer also a previous and next pointer. There are several ways to iterate over a TList; in order of preference, if; not forced by other constraints:. 1. (Preferred way) Using the C++ range-based `for` or `begin()` / `end()`:; ~~~ {.cpp}; for(TObject *obj: *GetListOfPrimitives()); obj->Write();; ~~~; 2. Using the R__FOR_EACH macro:; ~~~ {.cpp}; GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);; ~~~; 3. Using the TList iterator TListIter (via the wrapper class TIter):; ~~~ {.cpp}; TIter next(GetListOfPrimitives());; while (TObject *obj = next()); obj->Draw(next.GetOption());; ~~~; 4. Using the TList iterator TListIter and std::for_each algorithm:; ~~~ {.cpp}; // A function object, which will be applied to each element; // of the given range.; struct STestFunctor {; bool operator()(TObject *aObj) {; ...; return true;; }; }; ...; ...; TIter iter(mylist);; for_each( iter.Begin(), TIter::End(), STestFunctor() );; ~~~; 5. Using the TObjLink list entries (that wrap the TObject*):; ~~~ {.cpp}; TObjLink *lnk = GetListOfPrimitives()->FirstLink();; while (lnk) {; lnk->GetObject()->Draw(lnk->GetOption());; lnk = lnk->Next();; }; ~~~; 6. Using the TList's After() and Before() member functions:; ~~~ {.cpp}; TFree *idcur = this;; while (idcur) {; ...; ...; idcur = (TFree*)GetListOfFree()->After(idcur);; }; ~~~; Metho",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:1128,Integrability,wrap,wrapper,1128,"**************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TList; \ingroup Containers; A doubly linked list. All classes inheriting from TObject can be; inserted in a TList. Before being inserted into the list the object; pointer is wrapped in a TObjLink object which contains, besides; the object pointer also a previous and next pointer. There are several ways to iterate over a TList; in order of preference, if; not forced by other constraints:. 1. (Preferred way) Using the C++ range-based `for` or `begin()` / `end()`:; ~~~ {.cpp}; for(TObject *obj: *GetListOfPrimitives()); obj->Write();; ~~~; 2. Using the R__FOR_EACH macro:; ~~~ {.cpp}; GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);; ~~~; 3. Using the TList iterator TListIter (via the wrapper class TIter):; ~~~ {.cpp}; TIter next(GetListOfPrimitives());; while (TObject *obj = next()); obj->Draw(next.GetOption());; ~~~; 4. Using the TList iterator TListIter and std::for_each algorithm:; ~~~ {.cpp}; // A function object, which will be applied to each element; // of the given range.; struct STestFunctor {; bool operator()(TObject *aObj) {; ...; return true;; }; }; ...; ...; TIter iter(mylist);; for_each( iter.Begin(), TIter::End(), STestFunctor() );; ~~~; 5. Using the TObjLink list entries (that wrap the TObject*):; ~~~ {.cpp}; TObjLink *lnk = GetListOfPrimitives()->FirstLink();; while (lnk) {; lnk->GetObject()->Draw(lnk->GetOption());; lnk = lnk->Next();; }; ~~~; 6. Using the TList's After() and Before() member functions:; ~~~ {.cpp}; TFree *idcur = this;; while (idcur) {; ...; ...; idcur = (TFree*)GetListOfFree()->After(idcur);; }; ~~~; Methods 3, 4 and 5 can also easily iterate backwards using either; a backward TIter (using argument kIterBackward) or by usi",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:1646,Integrability,wrap,wrap,1646,"akers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TList; \ingroup Containers; A doubly linked list. All classes inheriting from TObject can be; inserted in a TList. Before being inserted into the list the object; pointer is wrapped in a TObjLink object which contains, besides; the object pointer also a previous and next pointer. There are several ways to iterate over a TList; in order of preference, if; not forced by other constraints:. 1. (Preferred way) Using the C++ range-based `for` or `begin()` / `end()`:; ~~~ {.cpp}; for(TObject *obj: *GetListOfPrimitives()); obj->Write();; ~~~; 2. Using the R__FOR_EACH macro:; ~~~ {.cpp}; GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);; ~~~; 3. Using the TList iterator TListIter (via the wrapper class TIter):; ~~~ {.cpp}; TIter next(GetListOfPrimitives());; while (TObject *obj = next()); obj->Draw(next.GetOption());; ~~~; 4. Using the TList iterator TListIter and std::for_each algorithm:; ~~~ {.cpp}; // A function object, which will be applied to each element; // of the given range.; struct STestFunctor {; bool operator()(TObject *aObj) {; ...; return true;; }; }; ...; ...; TIter iter(mylist);; for_each( iter.Begin(), TIter::End(), STestFunctor() );; ~~~; 5. Using the TObjLink list entries (that wrap the TObject*):; ~~~ {.cpp}; TObjLink *lnk = GetListOfPrimitives()->FirstLink();; while (lnk) {; lnk->GetObject()->Draw(lnk->GetOption());; lnk = lnk->Next();; }; ~~~; 6. Using the TList's After() and Before() member functions:; ~~~ {.cpp}; TFree *idcur = this;; while (idcur) {; ...; ...; idcur = (TFree*)GetListOfFree()->After(idcur);; }; ~~~; Methods 3, 4 and 5 can also easily iterate backwards using either; a backward TIter (using argument kIterBackward) or by using; LastLink() and lnk->Prev() or by using the Before() member.; */",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:491,Modifiability,inherit,inheriting,491,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TList; \ingroup Containers; A doubly linked list. All classes inheriting from TObject can be; inserted in a TList. Before being inserted into the list the object; pointer is wrapped in a TObjLink object which contains, besides; the object pointer also a previous and next pointer. There are several ways to iterate over a TList; in order of preference, if; not forced by other constraints:. 1. (Preferred way) Using the C++ range-based `for` or `begin()` / `end()`:; ~~~ {.cpp}; for(TObject *obj: *GetListOfPrimitives()); obj->Write();; ~~~; 2. Using the R__FOR_EACH macro:; ~~~ {.cpp}; GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);; ~~~; 3. Using the TList iterator TListIter (via the wrapper class TIter):; ~~~ {.cpp}; TIter next(GetListOfPrimitives());; while (TObject *obj = next()); obj->Draw(next.GetOption());; ~~~; 4. Using the TList iterator TListIter and std::for_each algorithm:; ~~~ {.cpp}; // A function object, which will be applied to each element; // of the given range.; struct STestFunctor {; bool operator()(TObject *aObj) {; ...; return true;; }; }; ...; ...; TIter iter(mylist);; for_each( iter.Begin(), TIter::End(), STestFunctor() );; ~~~; 5. Using the TObjLink list entries (that wrap the TObject*):; ~~~ {.cpp}; TObjLink *lnk = GetListOfPrimitives()->FirstLink();; while (lnk) {; lnk->GetObject()->Draw(lnk->GetOption());; lnk = lnk->Next();; }; ~~~; 6. Using the TList's After() and Before() member functions:; ~~~ {.cpp}; TFree *idcur = this;; while (idcur) {; ...; ...; idcur = (TFree*)GetListOfFree()->After(idcur);; }; ~~~; Metho",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:432,Usability,Clear,Clear,432,"////////////////////////////////////////////////////////////////////////////////; /// Remove all objects from the list. Does not delete the objects; /// unless the TList is the owner (set via SetOwner()) and option; /// ""nodelete"" is not set.; /// If option=""nodelete"" then don't delete any heap objects that were; /// marked with the kCanDelete bit, otherwise these objects will be; /// deleted (this option is used by THashTable::Clear()).",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:177,Usability,Clear,Clear,177,"// In some case, for example TParallelCoord, a list (the pad's list of; // primitives) will contain both the container and the containees; // (the TParallelCoordVar) but if the Clear is being called from; // the destructor of the container of this list, one of the first; // thing done will be the remove the container (the pad) for the; // list (of Primitives of the canvas) that was connecting it; // (indirectly) to the list of cleanups.; // Note: The Code in TParallelCoordVar was changed (circa June 2017),; // to no longer have this behavior and thus rely on this code (by moving; // from using Draw to Paint) but the structure might still exist elsewhere; // so we keep this comment here.; // To preserve this connection (without introducing one when there was none),; // we re-use fCache to inform RecursiveRemove of the node currently; // being cleared/deleted.",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:854,Usability,clear,cleared,854,"// In some case, for example TParallelCoord, a list (the pad's list of; // primitives) will contain both the container and the containees; // (the TParallelCoordVar) but if the Clear is being called from; // the destructor of the container of this list, one of the first; // thing done will be the remove the container (the pad) for the; // list (of Primitives of the canvas) that was connecting it; // (indirectly) to the list of cleanups.; // Note: The Code in TParallelCoordVar was changed (circa June 2017),; // to no longer have this behavior and thus rely on this code (by moving; // from using Draw to Paint) but the structure might still exist elsewhere; // so we keep this comment here.; // To preserve this connection (without introducing one when there was none),; // we re-use fCache to inform RecursiveRemove of the node currently; // being cleared/deleted.",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:13,Availability,avail,available,13,"// Make node available to RecursiveRemove",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:41,Usability,clear,clear,41,"// delete only heap objects marked OK to clear",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:345,Security,access,access,345,"////////////////////////////////////////////////////////////////////////////////; /// Remove all objects from the list AND delete all heap based objects.; /// If option=""slow"" then keep list consistent during delete. This allows; /// recursive list operations during the delete (e.g. during the dtor; /// of an object in this list one can still access the list to search for; /// other not yet deleted objects).",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:176,Usability,Clear,Clear,176,"// In some case, for example TParallelCoord, a list (the pad's list of; // primitives) will contain both the container and the containees; // (the TParallelCoorVar) but if the Clear is being called from; // the destructor of the container of this list, one of the first; // thing done will be the remove the container (the pad) for the; // list (of Primitives of the canvas) that was connecting it; // (indirectly) to the list of cleanups.; // To preserve this connection (without introducing one when there was none),; // we re-use fCache to inform RecursiveRemove of the node currently; // being cleared/deleted.",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:598,Usability,clear,cleared,598,"// In some case, for example TParallelCoord, a list (the pad's list of; // primitives) will contain both the container and the containees; // (the TParallelCoorVar) but if the Clear is being called from; // the destructor of the container of this list, one of the first; // thing done will be the remove the container (the pad) for the; // list (of Primitives of the canvas) that was connecting it; // (indirectly) to the list of cleanups.; // To preserve this connection (without introducing one when there was none),; // we re-use fCache to inform RecursiveRemove of the node currently; // being cleared/deleted.",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:13,Availability,avail,available,13,"// Make node available to RecursiveRemove",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:90,Usability,clear,cleared,90,"// When fCache is set and has no previous and next node, it represents; // the node being cleared and/or deleted.",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:89,Integrability,depend,depending,89,"// return object found, which may be (pointer wise) different than the; // input object (depending on what IsEqual() is doing)",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:16,Availability,alive,alive,16,"// lnk is still alive as we have either fLast; // or the 'new' fFirst->fPrev pointing to it.",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:16,Availability,alive,alive,16,"// lnk is still alive as we have either fLast; // or the 'new' fFirst->fPrev pointing to it.",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:144,Integrability,Depend,Depending,144,"////////////////////////////////////////////////////////////////////////////////; /// Compares the objects stored in the TObjLink objects.; /// Depending on the flag IsAscending() the function returns; /// true if the object in l1 <= l2 (ascending) or l2 <= l1 (descending).",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:21,Integrability,Wrap,Wrapper,21,"/** \class TObjLink; Wrapper around a TObject so it can be stored in a TList.; */; ////////////////////////////////////////////////////////////////////////////////; /// Insert a new link in the chain.",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:162,Modifiability,inherit,inheriting,162,"// We compared equal only two iterator of the same type.; // Since this is a function of TListIter, we consequently know that; // both this and aIter are of type inheriting from TListIter.",MatchSource.CODE_COMMENT,core/cont/src/TList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:538,Energy Efficiency,efficient,efficient,538,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 12/11/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMap; \ingroup Containers; TMap implements an associative array of (key,value) pairs using a; THashTable for efficient retrieval (therefore TMap does not conserve; the order of the entries). The hash value is calculated; using the value returned by the keys Hash() function and the; key comparison is done via the IsEqual() function.; Both key and value must inherit from TObject.; */",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:788,Modifiability,inherit,inherit,788,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 12/11/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMap; \ingroup Containers; TMap implements an associative array of (key,value) pairs using a; THashTable for efficient retrieval (therefore TMap does not conserve; the order of the entries). The hash value is calculated; using the value returned by the keys Hash() function and the; key comparison is done via the IsEqual() function.; Both key and value must inherit from TObject.; */",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:624,Security,hash,hash,624,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 12/11/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMap; \ingroup Containers; TMap implements an associative array of (key,value) pairs using a; THashTable for efficient retrieval (therefore TMap does not conserve; the order of the entries). The hash value is calculated; using the value returned by the keys Hash() function and the; key comparison is done via the IsEqual() function.; Both key and value must inherit from TObject.; */",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:687,Security,Hash,Hash,687,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 12/11/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMap; \ingroup Containers; TMap implements an associative array of (key,value) pairs using a; THashTable for efficient retrieval (therefore TMap does not conserve; the order of the entries). The hash value is calculated; using the value returned by the keys Hash() function and the; key comparison is done via the IsEqual() function.; Both key and value must inherit from TObject.; */",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:116,Security,hash,hashtable,116,"////////////////////////////////////////////////////////////////////////////////; /// Return number of slots in the hashtable. Use GetSize() to get the; /// number of objects stored in the TMap.",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:162,Integrability,depend,depending,162,"////////////////////////////////////////////////////////////////////////////////; /// Remove all (key,value) pairs from the map. The keys/values are; /// deleted depending on the state of key-ownership (SetOwner()) and; /// value-ownership (SetOwnerValue()).; ///; /// To delete these objects regardless of the ownership state use:; /// - Delete() to delete only keys;; /// - DeleteValues() to delete only values;; /// - DeleteAll() to delete both keys and values.",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:198,Security,hash,hash,198,"////////////////////////////////////////////////////////////////////////////////; /// Returns the number of collisions for a key with a certain name; /// (i.e. number of objects in same slot in the hash table, i.e. length; /// of linked list).",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:178,Security,hash,hash,178,"////////////////////////////////////////////////////////////////////////////////; /// Returns the number of collisions for a key (i.e. number of objects; /// in same slot in the hash table, i.e. length of linked list).",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:167,Energy Efficiency,allocate,allocated,167,"////////////////////////////////////////////////////////////////////////////////; /// Remove all (key,value) pairs from the map AND delete the keys; /// when they are allocated on the heap.",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:169,Energy Efficiency,allocate,allocated,169,"////////////////////////////////////////////////////////////////////////////////; /// Remove all (key,value) pairs from the map AND delete the values; /// when they are allocated on the heap.",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:178,Energy Efficiency,allocate,allocated,178,"////////////////////////////////////////////////////////////////////////////////; /// Remove all (key,value) pairs from the map AND delete the keys AND; /// values when they are allocated on the heap.",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:185,Availability,down,downcast,185,"////////////////////////////////////////////////////////////////////////////////; /// Check if a (key,value) pair exists with keyname as name of the key.; /// Returns a TPair* (need to downcast from TObject). Use Key() and; /// Value() to get the pointers to the key and value, respectively.; /// Returns 0 if not found.",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:169,Availability,down,downcast,169,"////////////////////////////////////////////////////////////////////////////////; /// Check if a (key,value) pair exists with key as key.; /// Returns a TPair* (need to downcast from TObject). Use Key() and; /// Value() to get the pointers to the key and value, respectively.; /// Returns 0 if not found.",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:349,Integrability,depend,depending,349,"////////////////////////////////////////////////////////////////////////////////; /// Set whether this map is the owner (enable==true); /// of its values. If it is the owner of its contents,; /// these objects will be deleted whenever the collection itself; /// is deleted. The objects might also be deleted or destructed when Clear; /// is called (depending on the collection).",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:327,Usability,Clear,Clear,327,"////////////////////////////////////////////////////////////////////////////////; /// Set whether this map is the owner (enable==true); /// of its values. If it is the owner of its contents,; /// these objects will be deleted whenever the collection itself; /// is deleted. The objects might also be deleted or destructed when Clear; /// is called (depending on the collection).",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,core/cont/src/TMap.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx:1003,Usability,Clear,Clear,1003,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 11/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObjArray; \ingroup Containers; An array of TObjects. The array expands automatically when; objects are added (shrinking can be done by hand using Expand(),; how nice to have meaningful names -:)).; Use operator[] to have ""real"" array behaviour. Note on ownership and copy:; By default the TObjArray does not own the objects it points to and; will not delete them unless explicitly asked (via a call to the; Delete member function). To assign ownership of the content to; the array, call:; ~~~ {.cpp}; myarr->SetOwner(kTRUE);; ~~~; When the array owns its content a call to Clear or the deletion of; the array itself will lead to the deletion of its contents. You can either make a shallow copy of the array:; ~~~ {.cpp}; otherarr = new TObjArray(*myarr);; *otherarr = *myarr;; ~~~; in which case ownership (if any) is not transfered but the other; array points to the same object as the original array. Note that; if the content of either array is deleted the other array is not; notified in any way (i.e. still points to the now deleted objects). You can also make a deep copy of the array:; ~~~ {.cpp}; otherarr = (TObjArray*)myarr->Clone();; ~~~; in which case the array and the content are both duplicated (i.e.; otherarr and myarr do not point to the same objects). If myarr; is set to the be the owner of its content, otherarr will also be; set to the owner of its own content.; */",MatchSource.CODE_COMMENT,core/cont/src/TObjArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx:122,Availability,error,error,122,"////////////////////////////////////////////////////////////////////////////////; /// Add object at position ids. Give an error when idx is out of bounds; /// (i.e. the array is not expanded).",MatchSource.CODE_COMMENT,core/cont/src/TObjArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx:177,Usability,Clear,Clear,177,"// In some case, for example TParallelCoord, a list (the pad's list of; // primitives) will contain both the container and the containees; // (the TParallelCoordVar) but if the Clear is being called from; // the destructor of the container of this list, one of the first; // thing done will be the remove the container (the pad) from the; // list (of Primitives of the canvas) that was connecting it; // (indirectly) to the list of cleanups.; // Note: The Code in TParallelCoordVar was changed (circa June 2017),; // to no longer have this behavior and thus rely on this code (by moving; // from using Draw to Paint) but the structure might still exist elsewhere; // so we keep this comment here.",MatchSource.CODE_COMMENT,core/cont/src/TObjArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx:322,Energy Efficiency,efficient,efficient,322,"////////////////////////////////////////////////////////////////////////////////; /// Find an object in this collection using the object's IsEqual(); /// member function. Requires a sequential scan till the object has; /// been found. Returns 0 if object is not found.; /// Typically this function is overridden by a more efficient version; /// in concrete collection classes (e.g. THashTable).",MatchSource.CODE_COMMENT,core/cont/src/TObjArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx:39,Deployability,update,update,39,"// For efficiency we need sometimes to update fLast so we have; // to cast const away. Ugly, but making GetAbsLast() not const breaks; // many other const functions.",MatchSource.CODE_COMMENT,core/cont/src/TObjArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx:262,Performance,concurren,concurrently,262,"////////////////////////////////////////////////////////////////////////////////; /// Return the number of objects in array (i.e. number of non-empty slots).; /// This is a thread-unsafe version of GetEntriesFast. Use it only if sure; /// it will not be invoked concurrently.",MatchSource.CODE_COMMENT,core/cont/src/TObjArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx:180,Safety,unsafe,unsafe,180,"////////////////////////////////////////////////////////////////////////////////; /// Return the number of objects in array (i.e. number of non-empty slots).; /// This is a thread-unsafe version of GetEntriesFast. Use it only if sure; /// it will not be invoked concurrently.",MatchSource.CODE_COMMENT,core/cont/src/TObjArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx:112,Availability,error,error,112,"////////////////////////////////////////////////////////////////////////////////; /// Generate an out-of-bounds error. Always returns false.",MatchSource.CODE_COMMENT,core/cont/src/TObjArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx:781,Deployability,toggle,toggle,781,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 11/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObjectTable; \ingroup Containers; This class registers all instances of TObject and its derived; classes in a hash table. The Add() and Remove() members are called; from the TObject ctor and dtor, respectively. Using the Print(); member one can see all currently active objects in the system.; Using the resource (in .rootrc): Root.ObjectStat one can toggle this; feature on or off. Using the compile option R__NOSTATS one can de-active this feature; for the entire system (for maximum performance in highly time; critical applications). The following output has been produced in a ROOT interactive session; via the command gObjectTable->Print(); ~~~ {.cpp}; class cnt on heap size total size heap size; ============================================================================; TKey 4 4 72 288 288; TClass 84 84 80 6720 6720; TDataMember 276 276 24 6624 6624; TObject 11 11 12 132 132; TMethod 1974 1974 64 126336 126336; TDataType 34 34 56 1904 1904; TList 2328 2328 36 83808 83808; TH1F 1 1 448 448 448; TText 2688 2688 56 150528 150528; TGaxis 1 0 120 120 0; TAxis 6 3 88 528 264; TBox 57 57 52 2964 2964; TLine 118 118 40 4720 4720; TWbox 1 1 56 56 56; TArrow 1 1 64 64 64; TPaveText 59 59 124 7316 7316; TPave 1 1 92 92 92; TFile 1 1 136 136 136; TCanvas 3 3 444 1332 1332; TPad 1 1 312 312 312; TContextMenu 3 3 48 144 144; TMethodArg 2166 2166 44 95304 95304; TPaveLabel 1 1 120 120 120; THtml 1 1 32 32 32; TROOT 1 0 208 208 0; TApplication 1 1 28 28 28; TFileHandler 1 1 20 20 20; TColor 163 163 40 6520 6520; TStyle 1 1 364 364 364; TRealData 117 117 28 327",MatchSource.CODE_COMMENT,core/cont/src/TObjectTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx:916,Performance,perform,performance,916,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 11/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObjectTable; \ingroup Containers; This class registers all instances of TObject and its derived; classes in a hash table. The Add() and Remove() members are called; from the TObject ctor and dtor, respectively. Using the Print(); member one can see all currently active objects in the system.; Using the resource (in .rootrc): Root.ObjectStat one can toggle this; feature on or off. Using the compile option R__NOSTATS one can de-active this feature; for the entire system (for maximum performance in highly time; critical applications). The following output has been produced in a ROOT interactive session; via the command gObjectTable->Print(); ~~~ {.cpp}; class cnt on heap size total size heap size; ============================================================================; TKey 4 4 72 288 288; TClass 84 84 80 6720 6720; TDataMember 276 276 24 6624 6624; TObject 11 11 12 132 132; TMethod 1974 1974 64 126336 126336; TDataType 34 34 56 1904 1904; TList 2328 2328 36 83808 83808; TH1F 1 1 448 448 448; TText 2688 2688 56 150528 150528; TGaxis 1 0 120 120 0; TAxis 6 3 88 528 264; TBox 57 57 52 2964 2964; TLine 118 118 40 4720 4720; TWbox 1 1 56 56 56; TArrow 1 1 64 64 64; TPaveText 59 59 124 7316 7316; TPave 1 1 92 92 92; TFile 1 1 136 136 136; TCanvas 3 3 444 1332 1332; TPad 1 1 312 312 312; TContextMenu 3 3 48 144 144; TMethodArg 2166 2166 44 95304 95304; TPaveLabel 1 1 120 120 120; THtml 1 1 32 32 32; TROOT 1 0 208 208 0; TApplication 1 1 28 28 28; TFileHandler 1 1 20 20 20; TColor 163 163 40 6520 6520; TStyle 1 1 364 364 364; TRealData 117 117 28 327",MatchSource.CODE_COMMENT,core/cont/src/TObjectTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx:540,Security,hash,hash,540,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 11/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObjectTable; \ingroup Containers; This class registers all instances of TObject and its derived; classes in a hash table. The Add() and Remove() members are called; from the TObject ctor and dtor, respectively. Using the Print(); member one can see all currently active objects in the system.; Using the resource (in .rootrc): Root.ObjectStat one can toggle this; feature on or off. Using the compile option R__NOSTATS one can de-active this feature; for the entire system (for maximum performance in highly time; critical applications). The following output has been produced in a ROOT interactive session; via the command gObjectTable->Print(); ~~~ {.cpp}; class cnt on heap size total size heap size; ============================================================================; TKey 4 4 72 288 288; TClass 84 84 80 6720 6720; TDataMember 276 276 24 6624 6624; TObject 11 11 12 132 132; TMethod 1974 1974 64 126336 126336; TDataType 34 34 56 1904 1904; TList 2328 2328 36 83808 83808; TH1F 1 1 448 448 448; TText 2688 2688 56 150528 150528; TGaxis 1 0 120 120 0; TAxis 6 3 88 528 264; TBox 57 57 52 2964 2964; TLine 118 118 40 4720 4720; TWbox 1 1 56 56 56; TArrow 1 1 64 64 64; TPaveText 59 59 124 7316 7316; TPave 1 1 92 92 92; TFile 1 1 136 136 136; TCanvas 3 3 444 1332 1332; TPad 1 1 312 312 312; TContextMenu 3 3 48 144 144; TMethodArg 2166 2166 44 95304 95304; TPaveLabel 1 1 120 120 120; THtml 1 1 32 32 32; TROOT 1 0 208 208 0; TApplication 1 1 28 28 28; TFileHandler 1 1 20 20 20; TColor 163 163 40 6520 6520; TStyle 1 1 364 364 364; TRealData 117 117 28 327",MatchSource.CODE_COMMENT,core/cont/src/TObjectTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx:341,Performance,perform,performed,341,"////////////////////////////////////////////////////////////////////////////////; /// Remove an object from the object table. If op is 0 or not in the table; /// don't complain. Currently only used by the TClonesArray dtor. Should not; /// be used anywhere else, except in places where ""special"" allocation and; /// de-allocation tricks are performed.",MatchSource.CODE_COMMENT,core/cont/src/TObjectTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx:172,Testability,test,test,172,"////////////////////////////////////////////////////////////////////////////////; /// Find an object in the object table. Returns the slot where to put; /// the object. To test if the object is actually already in the table; /// use PtrIsValid().",MatchSource.CODE_COMMENT,core/cont/src/TObjectTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TOrdCollection.cxx:133,Availability,error,error,133,"////////////////////////////////////////////////////////////////////////////////; /// Return true when index out of bounds and print error.",MatchSource.CODE_COMMENT,core/cont/src/TOrdCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TOrdCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx:1499,Availability,error,error,1499," array expands automatically; when objects are added (shrinking can be done by hand using Expand() ). The TRefArray can be filled with:; ~~~ {.cpp}; array.Add(obj); array.AddAt(obj,i); but not array[i] = obj !!!; ~~~; The array elements can be retrieved with:; ~~~ {.cpp}; TObject *obj = array.At(i);; ~~~; By default the TRefArray 'points' to the current process and can only; receive object that have been created in this process.; To point the TRefArray to a different process do:; ~~~ {.cpp}; TRefArray array( processId );; ~~~; For example, if 'obj' is an instance that was created in the different; process and you do:; ~~~ {.cpp}; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; ~~~; Then; ~~~ {.cpp}; array.Add(obj);; ~~~; is correct (obj comes from the process the array is pointed to; while; ~~~ {.cpp}; TObject *nobj = new TObject;; array.Add(nobj);; ~~~; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; ~~~ {.cpp}; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....); ~~~; When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. ### RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process. Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 ob",MatchSource.CODE_COMMENT,core/cont/src/TRefArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx:1527,Availability,Error,Error,1527,"hrinking can be done by hand using Expand() ). The TRefArray can be filled with:; ~~~ {.cpp}; array.Add(obj); array.AddAt(obj,i); but not array[i] = obj !!!; ~~~; The array elements can be retrieved with:; ~~~ {.cpp}; TObject *obj = array.At(i);; ~~~; By default the TRefArray 'points' to the current process and can only; receive object that have been created in this process.; To point the TRefArray to a different process do:; ~~~ {.cpp}; TRefArray array( processId );; ~~~; For example, if 'obj' is an instance that was created in the different; process and you do:; ~~~ {.cpp}; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; ~~~; Then; ~~~ {.cpp}; array.Add(obj);; ~~~; is correct (obj comes from the process the array is pointed to; while; ~~~ {.cpp}; TObject *nobj = new TObject;; array.Add(nobj);; ~~~; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; ~~~ {.cpp}; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....); ~~~; When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. ### RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process. Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 objects), we switch to new one TProcessID; maximum 65535 ",MatchSource.CODE_COMMENT,core/cont/src/TRefArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx:3033,Availability,Error,Error,3033,"....); ~~~; When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. ### RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process. Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 objects), we switch to new one TProcessID; maximum 65535 including the TProcessIDs read from file).; However TRefArray can not switch to new TProcessID if they already; contain objects. When the TProcessID has been switched due to overflow and an new; object is added to an existing, empty TRefArray, you will see:. ~~~ {.cpp}; Warning in <TRefArray::AddAtAndExpand>: The ProcessID for the 0x5f83819e8 has been switched to ProcessID4/6c89f37e-8259-11e2-9717-166ee183beef:4; ~~~; If the TRefArray was not empty, you will see:. ~~~ {.cpp}; Error in <TRefArray::AddAtAndExpand>: The object at %p can not be registered in the process the TRefArray points to (pid = ProcessID4/6c89f37e-8259-11e2-9717-166ee183beef) because the ProcessID has too many objects and the TRefArray already contains other objects.; ~~~; When running out of TProcessIds, you will see:. ~~~ {.cpp}; Warning in <TProcessID::AddProcessID>: Maximum number of TProcessID (65535) is almost reached (one left). TRef will stop being functional when the limit is reached.; Fatal in <TProcessID::AddProcessID>: Maximum number of TProcessID (65535) has been reached. TRef are not longer functional.; ~~~; */",MatchSource.CODE_COMMENT,core/cont/src/TRefArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx:1505,Integrability,message,message,1505," array expands automatically; when objects are added (shrinking can be done by hand using Expand() ). The TRefArray can be filled with:; ~~~ {.cpp}; array.Add(obj); array.AddAt(obj,i); but not array[i] = obj !!!; ~~~; The array elements can be retrieved with:; ~~~ {.cpp}; TObject *obj = array.At(i);; ~~~; By default the TRefArray 'points' to the current process and can only; receive object that have been created in this process.; To point the TRefArray to a different process do:; ~~~ {.cpp}; TRefArray array( processId );; ~~~; For example, if 'obj' is an instance that was created in the different; process and you do:; ~~~ {.cpp}; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; ~~~; Then; ~~~ {.cpp}; array.Add(obj);; ~~~; is correct (obj comes from the process the array is pointed to; while; ~~~ {.cpp}; TObject *nobj = new TObject;; array.Add(nobj);; ~~~; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; ~~~ {.cpp}; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....); ~~~; When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. ### RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process. Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 ob",MatchSource.CODE_COMMENT,core/cont/src/TRefArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx:2013,Testability,test,test,2013,"rray( processId );; ~~~; For example, if 'obj' is an instance that was created in the different; process and you do:; ~~~ {.cpp}; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; ~~~; Then; ~~~ {.cpp}; array.Add(obj);; ~~~; is correct (obj comes from the process the array is pointed to; while; ~~~ {.cpp}; TObject *nobj = new TObject;; array.Add(nobj);; ~~~; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; ~~~ {.cpp}; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....); ~~~; When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. ### RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process. Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 objects), we switch to new one TProcessID; maximum 65535 including the TProcessIDs read from file).; However TRefArray can not switch to new TProcessID if they already; contain objects. When the TProcessID has been switched due to overflow and an new; object is added to an existing, empty TRefArray, you will see:. ~~~ {.cpp}; Warning in <TRefArray::AddAtAndExpand>: The ProcessID for the 0x5f83819e8 has been switched to ProcessID4/6c89f37e-8259-11e2-9717-166ee183beef:4; ~~~; If the TRefArray was not empty,",MatchSource.CODE_COMMENT,core/cont/src/TRefArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx:122,Availability,error,error,122,"////////////////////////////////////////////////////////////////////////////////; /// Add object at position ids. Give an error when idx is out of bounds; /// (i.e. the array is not expanded).",MatchSource.CODE_COMMENT,core/cont/src/TRefArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx:39,Deployability,update,update,39,"// For efficiency we need sometimes to update fLast so we have; // to cast const away. Ugly, but making GetAbsLast() not const breaks; // many other const functions.",MatchSource.CODE_COMMENT,core/cont/src/TRefArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx:112,Availability,error,error,112,"////////////////////////////////////////////////////////////////////////////////; /// Generate an out-of-bounds error. Always returns false.",MatchSource.CODE_COMMENT,core/cont/src/TRefArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx:132,Availability,Error,Error,132,"/*; if (GetAbsLast() == -1 || fSorted) return;; for (Int_t i = 0; i < fSize; i++); if (fUIDs[i]) {; if (!fUIDs[i]->IsSortable()) {; Error(""Sort"", ""objects in array are not sortable"");; return;; }; }. QSort(fUIDs, 0, TMath::Min(fSize, upto-fLowerBound));. fLast = -2;; fSorted = kTRUE;; */",MatchSource.CODE_COMMENT,core/cont/src/TRefArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx:98,Availability,Error,Error,98,"/*; Int_t base, position, last, result = 0;; TObject *op2;. if (!op) return -1;. if (!fSorted) {; Error(""BinarySearch"", ""array must first be sorted"");; return -1;; }. base = 0;; last = TMath::Min(fSize, upto-fLowerBound) - 1;. while (last >= base) {; //position = (base+last) / 2;; //op2 = fCont[position];; //if (op2 && (result = op->Compare(op2)) == 0); // return position + fLowerBound;; //if (!op2 || result < 0); // last = position-1;; //else; // base = position+1;; }; */",MatchSource.CODE_COMMENT,core/cont/src/TRefArray.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefArray.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:792,Performance,load,loaded,792,"// @(#)root/cont:$Id$; // Author: Rene Brun 28/09/2001; /*************************************************************************; * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TRefTable; \ingroup Containers; A TRefTable maintains the association between a referenced object; and the parent object supporting this referenced object. The parent object is typically a branch of a TTree. For each object; referenced in a TTree entry, the corresponding entry in the TTree's; TBranchRef::fRefTable contains the index of the branch that; needs to be loaded to bring the object into memory. Persistency of a TRefTable is split into two parts:; - entry specific information is stored (read) by FillBuffer; (ReadBuffer). For each referenced object the object's fUniqueID; and the referencing TRef::fPID is stored (to allow the TRefTable; to autoload references created by different processes).; - non-entry specific, i.e. global information is stored (read) by; the Streamer function. This comprises all members marked as; persistent. As TObject::fUniqueID is only unique for a given TProcessID, a table; of unique IDs is kept for each used TProcessID. There is no natural; order of TProcessIDs, so TRefTable stores a vector of the TGUID of; all known TProcessIDs in fProcessGUIDs; the index of a TProcessID in; this vector defines the index of the auto-loading info in fParentIDs; for that TProcessID. The mapping of TProcessID* to index is cached; for quick non-persistent lookup.; */",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:1593,Performance,load,loading,1593,"// @(#)root/cont:$Id$; // Author: Rene Brun 28/09/2001; /*************************************************************************; * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TRefTable; \ingroup Containers; A TRefTable maintains the association between a referenced object; and the parent object supporting this referenced object. The parent object is typically a branch of a TTree. For each object; referenced in a TTree entry, the corresponding entry in the TTree's; TBranchRef::fRefTable contains the index of the branch that; needs to be loaded to bring the object into memory. Persistency of a TRefTable is split into two parts:; - entry specific information is stored (read) by FillBuffer; (ReadBuffer). For each referenced object the object's fUniqueID; and the referencing TRef::fPID is stored (to allow the TRefTable; to autoload references created by different processes).; - non-entry specific, i.e. global information is stored (read) by; the Streamer function. This comprises all members marked as; persistent. As TObject::fUniqueID is only unique for a given TProcessID, a table; of unique IDs is kept for each used TProcessID. There is no natural; order of TProcessIDs, so TRefTable stores a vector of the TGUID of; all known TProcessIDs in fProcessGUIDs; the index of a TProcessID in; this vector defines the index of the auto-loading info in fParentIDs; for that TProcessID. The mapping of TProcessID* to index is cached; for quick non-persistent lookup.; */",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:1681,Performance,cache,cached,1681,"// @(#)root/cont:$Id$; // Author: Rene Brun 28/09/2001; /*************************************************************************; * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TRefTable; \ingroup Containers; A TRefTable maintains the association between a referenced object; and the parent object supporting this referenced object. The parent object is typically a branch of a TTree. For each object; referenced in a TTree entry, the corresponding entry in the TTree's; TBranchRef::fRefTable contains the index of the branch that; needs to be loaded to bring the object into memory. Persistency of a TRefTable is split into two parts:; - entry specific information is stored (read) by FillBuffer; (ReadBuffer). For each referenced object the object's fUniqueID; and the referencing TRef::fPID is stored (to allow the TRefTable; to autoload references created by different processes).; - non-entry specific, i.e. global information is stored (read) by; the Streamer function. This comprises all members marked as; persistent. As TObject::fUniqueID is only unique for a given TProcessID, a table; of unique IDs is kept for each used TProcessID. There is no natural; order of TProcessIDs, so TRefTable stores a vector of the TGUID of; all known TProcessIDs in fProcessGUIDs; the index of a TProcessID in; this vector defines the index of the auto-loading info in fParentIDs; for that TProcessID. The mapping of TProcessID* to index is cached; for quick non-persistent lookup.; */",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:11,Deployability,update,update,11,"// need to update",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear all entries in the table.",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:134,Usability,GUID,GUID,134,"////////////////////////////////////////////////////////////////////////////////; /// Get fProcessGUIDs' index of the TProcessID with GUID guid",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:139,Usability,guid,guid,139,"////////////////////////////////////////////////////////////////////////////////; /// Get fProcessGUIDs' index of the TProcessID with GUID guid",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:188,Usability,GUID,GUID,188,"////////////////////////////////////////////////////////////////////////////////; /// Get the index for fProcessIDs, fAllocSize, etc given a PID.; /// Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:188,Usability,GUID,GUID,188,"////////////////////////////////////////////////////////////////////////////////; /// Get the index for fProcessIDs, fAllocSize, etc given a PID.; /// Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear all entries in the table.",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:35,Performance,cache,cached,35,"// -- The branch already has an id cached, just use it.",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:39,Performance,cache,cached,39,"// -- The branch does *not* have an id cached, find it or generate one.; // Lookup the branch.",MatchSource.CODE_COMMENT,core/cont/src/TRefTable.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TSortedList.cxx:513,Modifiability,inherit,inheriting,513,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 14/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TSortedList; \ingroup Containers; A sorted doubly linked list. All sortable classes inheriting from; TObject can be inserted in a TSortedList.; */",MatchSource.CODE_COMMENT,core/cont/src/TSortedList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TSortedList.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/test/testTypedIteration.cxx:21,Availability,failure,failure,21,"/// Test compilation failure",MatchSource.CODE_COMMENT,core/cont/test/testTypedIteration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/test/testTypedIteration.cxx
https://github.com/root-project/root/tree/v6-32-06/core/cont/test/testTypedIteration.cxx:4,Testability,Test,Test,4,"/// Test compilation failure",MatchSource.CODE_COMMENT,core/cont/test/testTypedIteration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/test/testTypedIteration.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h:3,Performance,Cache,Cached,3,"// Cached for performance",MatchSource.CODE_COMMENT,core/dictgen/res/BaseSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h:14,Performance,perform,performance,14,"// Cached for performance",MatchSource.CODE_COMMENT,core/dictgen/res/BaseSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h:12,Performance,cache,cache,12,"// Fill the cache for performant attribute retrival",MatchSource.CODE_COMMENT,core/dictgen/res/BaseSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h:22,Performance,perform,performant,22,"// Fill the cache for performant attribute retrival",MatchSource.CODE_COMMENT,core/dictgen/res/BaseSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h:17,Testability,test,test,17,"// Checks if the test string matches against the pattern (which has produced the list of sub-patterns patterns_list). There is; // difference if we are processing linkdef.h or selection.xmlpatterns",MatchSource.CODE_COMMENT,core/dictgen/res/BaseSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h:34,Security,access,access,34,"// Explicit request to be able to access protected member from the interpreter.",MatchSource.CODE_COMMENT,core/dictgen/res/ClassSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h:34,Security,access,access,34,"// Explicit request to be able to access private member from the interpreter.",MatchSource.CODE_COMMENT,core/dictgen/res/ClassSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h:18,Modifiability,Variab,VariableSelectionRule,18,"//const std::list<VariableSelectionRule>& getFieldSelectionRules(); //gets the field selections list",MatchSource.CODE_COMMENT,core/dictgen/res/ClassSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h:40,Modifiability,inherit,inheritable,40,"//checks if the class selection rule is inheritable",MatchSource.CODE_COMMENT,core/dictgen/res/ClassSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h:11,Modifiability,inherit,inheritance,11,"//sets the inheritance rule for the class",MatchSource.CODE_COMMENT,core/dictgen/res/ClassSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/cygpath.h:11,Deployability,install,install,11,"// Get the install location of cygwin.",MatchSource.CODE_COMMENT,core/dictgen/res/cygpath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/cygpath.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/cygpath.h:42,Modifiability,variab,variable,42,"// Search for cygpath in PATH environment variable",MatchSource.CODE_COMMENT,core/dictgen/res/cygpath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/cygpath.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h:6544,Modifiability,inherit,inherits,6544,"ments<2>):; * - @c A<char> &rarr; @c A<char,float>; * - @c A<char,float> &rarr; @c A<char,int>; * - @c myVector<float> &rarr; @c myVector<A<char,int>,myAllocator<A<char,int>>>; * - @c myVector<A<char>> &rarr; @c myVector<float,myAllocator<float>>; *; * A brief description of the properties that can be assigned to data members; * with the @c ROOT::Meta::Selection MemberAttributes class:; * 1. @c kTransient : the data member is transient, not persistified by the; * ROOT I/O.; * 2. @c kAutoSelected : the type of the data member is selected without the; * need of specifying its class explicitely.; *; * For example:; * @code; * [...]; * class classTransientMember {; * private:; * int transientMember;; * };; * class classAutoselected {};; * class classTestAutoselect {; * private:; * classAutoselected autoselected;; * };; *; * namespace ROOT {; * namespace Meta {; * namespace Selection {; * class classTestAutoselect {; * MemberAttributes<kAutoSelected> autoselected;; * };; * class classTransientMember {; * MemberAttributes<kTransient> transientMember;; * };; * }; * }; * }; * @endcode; * would lead to the creation of selection rules for @c classTransientMember; * specifying that @c transientMember is transient, @c classTestAutoselect and; * @c classAutoselected.; *; * Another trait class present in the @c ROOT::Meta::Selection is; * @c SelectNoInstance. If a template in the selection namespace inherits from; * this class, none of its instantiations will be automatically selected but; * all of the properties specified otherwise, like transient members or; * number of template arguments to keep, will be transmitted to all of the; * instantiations selected by other means.; * For example; * @code; * [...]; * template< class T, class BASE >; * class MyDataVector : KeepFirstTemplateArguments< 1 >, SelectNoInstance {; * MemberAttributes< kTransient + kAutoSelected > m_isMostDerived;; * MemberAttributes< kNonSplittable + kAutoSelected > m_isNonSplit;; * };; * [...]; * @endcode; **/",MatchSource.CODE_COMMENT,core/dictgen/res/DictSelectionReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h:810,Usability,simpl,simplest,810,"/**; * @file DictSelectionReader.h; * @author Danilo Piparo; * @date January 2014; * @brief Select classes and assign properties using C++ syntax.; *; * @details When generating dictionary information for a class,; * one sometimes wants to specify additional information; * beyond the class definition itself, for example, to specify; * that certain members are to be treated as transient by the persistency; * system. This can be done by associating a dictionary selection class; * with the class for which dictionary information is being generated.; * The contents of this selection class encode the additional information.; * Below, we first discuss how to associate a selection class; * with your class; then we list the current Set of information; * which may appear inside the selection class.; *; * The simplest case is for the case of a non-template class @c C.; * By default, the Name of the selection class is then; * @c ROOT::Meta::Selection::C. If you have such a class, it will be found; * automatically. If @c C is in a namespace, @c NS::C, then; * the selection class should be in the same namespace:; * @c ROOT::Meta::Selection::NS::C.; *; * Examples:; *; * The DictSelectionReader is used to create selection rules starting from; * C++ the constructs of the @c ROOT::Meta::Selection namespace. All rules; * are matching by name.; * A brief description of the operations that lead to class selection:; * 1. If a class declaration is present in the selection namespace, a class; * with the same name is selected outside the selection namespace.; * 2. If a template class declaration and a template instantiation is present; * in the selection namespace, all the instances of the template are; * selected outside the namespace.; *; * For example:; * @code; * [...]; * class classVanilla{};; * template <class A> class classTemplateVanilla {};; * classTemplateVanilla<char> t0;; * namespace ROOT {; * namespace Meta {; * namespace Selection {; * class classVanilla {};; * template <typena",MatchSource.CODE_COMMENT,core/dictgen/res/DictSelectionReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h:3631,Usability,clear,clear,3631,"ttable> {};; * }; * }; * }; * @endcode; * would create a selection rule which selects class @c classWithAttributes and; * assignes to it the property described by @c kNonSplittable. Multiple; * properties can be assigned to a single class with this syntax:; * @code; * [...]; * namespace ROOT {; * namespace Meta {; * namespace Selection {; * class classWithAttributes :; * ClassAttributes <kProperty1 + kProperty2 + ... + kPropertyN> {};; * }; * }; * }; * @endcode; *; * The @c ROOT::Meta::Selection syntax allows to alter the number of template; * parameters of a certain template class within the ROOT type system, TClass.; * Technically it allows to alter the way in which the ""normalized name"" (in; * other words, the ""ROOT name"") of the class is created. The key is the usage; * of the @c KeepFirstTemplateArguments traits class.; * It is possible to select the maximum number of template arguments considered; * if not different from the default. A concrete example can be more clear than; * a long explaination in this case:; * @code; * [...]; * template <class T, class U = int, int V = 3> class A {...};; * template <class T, class Alloc = myAllocator<T> > class myVector {...};; * A<char> a1;; * A<char, float> a2;; * myVector<float> v1;; * myVector<A<char>> v2;; *; * namespace ROOT {; * namespace Meta {; * namespace Selection {; * template <class T, class U = int, int V = 3> class A; * : KeepFirstTemplateArguments<1> {};; * A<double> a;; * template <class T, class Alloc = myAllocator<T> > class myVector; * : KeepFirstTemplateArguments<1> {};; * myVector<double> vd;; * }; * }; * }; * @endcode; *; * Consistently with what described above, all the instances of @c A and; * @c myvector will be selected. In addition, only the first template parameter; * will be kept.; * In absence of any @c KeepFirstTemplateArguments trait, the normalization; * would be:; * - @c A<char> &rarr; @c A<char,float,3>; * - @c A<char,float> &rarr; @c A<char,int,3>; * - @c myVector<float> &rarr; @c myVec",MatchSource.CODE_COMMENT,core/dictgen/res/DictSelectionReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h:78,Integrability,interface,interfaces,78,"/// Take the selection rules as input (for consistency w/ other selector; /// interfaces)",MatchSource.CODE_COMMENT,core/dictgen/res/DictSelectionReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/LinkdefReader.h:21,Availability,error,error,21,"// lines count - for error messages",MatchSource.CODE_COMMENT,core/dictgen/res/LinkdefReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/LinkdefReader.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/LinkdefReader.h:27,Integrability,message,messages,27,"// lines count - for error messages",MatchSource.CODE_COMMENT,core/dictgen/res/LinkdefReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/LinkdefReader.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:1622,Deployability,install,install,1622,"he code to The Lean Mean C++ Option Parser.; * The ""Software"" does NOT refer to any other files which you; * may have received alongside this file (e.g. as part of a larger project that; * incorporates The Lean Mean C++ Option Parser).; *; * Permission is hereby granted, free of charge, to any person obtaining a copy; * of this software, to deal in the Software without restriction, including; * without limitation the rights to use, copy, modify, merge, publish,; * distribute, sublicense, and/or sell copies of the Software, and to permit; * persons to whom the Software is furnished to do so, subject to the following; * conditions:; * The above copyright notice and this permission notice shall be included in; * all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; * SOFTWARE.; */; /*; * NOTE: It is recommended that you read the processed HTML doxygen documentation; * rather than this source. If you don't know doxygen, it's like javadoc for C++.; * If you don't want to install doxygen you can find a copy of the processed; * documentation at; *; * http://optionparser.sourceforge.net/; *; */; /*; Danio Piparo - Since we import this parser from tan external source, we keep; track of the changes:. New Features 6-7-12:; o Added FullArg class from the examples in the header. Bugs Fixed 8-7-12:; o Cov: Add initialisation of screenlen variable in LinePartIterator; o Cov: LineWrapper databuf, lenbuf and wrote_something are now initialised; o Cov: Option::operator= now returns Option& (return *this;) and not void; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:450,Energy Efficiency,charge,charge,450,"/*; * The Lean Mean C++ Option Parser; *; * Copyright (C) 2012 Matthias S. Benkmann; *; * The ""Software"" in the following 2 paragraphs refers to this file containing; * the code to The Lean Mean C++ Option Parser.; * The ""Software"" does NOT refer to any other files which you; * may have received alongside this file (e.g. as part of a larger project that; * incorporates The Lean Mean C++ Option Parser).; *; * Permission is hereby granted, free of charge, to any person obtaining a copy; * of this software, to deal in the Software without restriction, including; * without limitation the rights to use, copy, modify, merge, publish,; * distribute, sublicense, and/or sell copies of the Software, and to permit; * persons to whom the Software is furnished to do so, subject to the following; * conditions:; * The above copyright notice and this permission notice shall be included in; * all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; * SOFTWARE.; */; /*; * NOTE: It is recommended that you read the processed HTML doxygen documentation; * rather than this source. If you don't know doxygen, it's like javadoc for C++.; * If you don't want to install doxygen you can find a copy of the processed; * documentation at; *; * http://optionparser.sourceforge.net/; *; */; /*; Danio Piparo - Since we import this parser from tan external source, we keep; track of the changes:. New Features 6-7-12:; o Added FullArg class from the examples in the header. Bugs Fixed 8-7-12:; o Cov: Add initialisation of screenlen variable in Li",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:1289,Integrability,CONTRACT,CONTRACT,1289,"he code to The Lean Mean C++ Option Parser.; * The ""Software"" does NOT refer to any other files which you; * may have received alongside this file (e.g. as part of a larger project that; * incorporates The Lean Mean C++ Option Parser).; *; * Permission is hereby granted, free of charge, to any person obtaining a copy; * of this software, to deal in the Software without restriction, including; * without limitation the rights to use, copy, modify, merge, publish,; * distribute, sublicense, and/or sell copies of the Software, and to permit; * persons to whom the Software is furnished to do so, subject to the following; * conditions:; * The above copyright notice and this permission notice shall be included in; * all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; * SOFTWARE.; */; /*; * NOTE: It is recommended that you read the processed HTML doxygen documentation; * rather than this source. If you don't know doxygen, it's like javadoc for C++.; * If you don't want to install doxygen you can find a copy of the processed; * documentation at; *; * http://optionparser.sourceforge.net/; *; */; /*; Danio Piparo - Since we import this parser from tan external source, we keep; track of the changes:. New Features 6-7-12:; o Added FullArg class from the examples in the header. Bugs Fixed 8-7-12:; o Cov: Add initialisation of screenlen variable in LinePartIterator; o Cov: LineWrapper databuf, lenbuf and wrote_something are now initialised; o Cov: Option::operator= now returns Option& (return *this;) and not void; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:1987,Modifiability,variab,variable,1987,"he code to The Lean Mean C++ Option Parser.; * The ""Software"" does NOT refer to any other files which you; * may have received alongside this file (e.g. as part of a larger project that; * incorporates The Lean Mean C++ Option Parser).; *; * Permission is hereby granted, free of charge, to any person obtaining a copy; * of this software, to deal in the Software without restriction, including; * without limitation the rights to use, copy, modify, merge, publish,; * distribute, sublicense, and/or sell copies of the Software, and to permit; * persons to whom the Software is furnished to do so, subject to the following; * conditions:; * The above copyright notice and this permission notice shall be included in; * all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; * SOFTWARE.; */; /*; * NOTE: It is recommended that you read the processed HTML doxygen documentation; * rather than this source. If you don't know doxygen, it's like javadoc for C++.; * If you don't want to install doxygen you can find a copy of the processed; * documentation at; *; * http://optionparser.sourceforge.net/; *; */; /*; Danio Piparo - Since we import this parser from tan external source, we keep; track of the changes:. New Features 6-7-12:; o Added FullArg class from the examples in the header. Bugs Fixed 8-7-12:; o Cov: Add initialisation of screenlen variable in LinePartIterator; o Cov: LineWrapper databuf, lenbuf and wrote_something are now initialised; o Cov: Option::operator= now returns Option& (return *this;) and not void; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:2305,Availability,Down,Download,2305,") == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n; * Despite these features the code size remains tiny.; * It is smaller than <a href=""http://uclibc.org"">uClibc</a>'s GNU getopt() and just a; * couple 100 bytes larger than uClibc's SUSv3 getopt(). @n; * (This does not include the usage formatter, of course. But you don't have to use that.); *; * @par Download:; * Tarball with examples and test programs:; * <a style=""font-size:larger;font-weight:bold"" href=""http://sourceforge.net/projects/optionparser/files/optionparser-1.3.tar.gz/download"">optionparser-1.3.tar.gz</a> @n; * Just the header (this is all you really need):; * <a style=""font-size:larger;font-weight:bold"" href=""http://optionparser.sourceforge.net/optionparser.h"">optionparser.h</a>; *; * @par Changelog:; * <b>Version 1.3:</b> Compatible with Microsoft Visual C++. @n; * <b>Version 1.2:</b> Added @ref ROOT::option::Option::namelen ""Option::namelen"" and removed the extraction; * of short option characters into a special buffer. @n; * Changed @ref ROOT::option::Arg::Optional ""Arg::Optional"" to accept arguments if they are attached; * rather than separate. This is what GNU getopt() does and how POSIX recommends; * utilities should interpret their arguments.@n; * <b>Version 1.1:</b> Optional mode with argument reordering as done by GNU getopt(), so that; * options and non-options can be mixed. See; * @ref ROOT::option::Parser::parse(",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:2488,Availability,down,download,2488,"tions[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n; * Despite these features the code size remains tiny.; * It is smaller than <a href=""http://uclibc.org"">uClibc</a>'s GNU getopt() and just a; * couple 100 bytes larger than uClibc's SUSv3 getopt(). @n; * (This does not include the usage formatter, of course. But you don't have to use that.); *; * @par Download:; * Tarball with examples and test programs:; * <a style=""font-size:larger;font-weight:bold"" href=""http://sourceforge.net/projects/optionparser/files/optionparser-1.3.tar.gz/download"">optionparser-1.3.tar.gz</a> @n; * Just the header (this is all you really need):; * <a style=""font-size:larger;font-weight:bold"" href=""http://optionparser.sourceforge.net/optionparser.h"">optionparser.h</a>; *; * @par Changelog:; * <b>Version 1.3:</b> Compatible with Microsoft Visual C++. @n; * <b>Version 1.2:</b> Added @ref ROOT::option::Option::namelen ""Option::namelen"" and removed the extraction; * of short option characters into a special buffer. @n; * Changed @ref ROOT::option::Arg::Optional ""Arg::Optional"" to accept arguments if they are attached; * rather than separate. This is what GNU getopt() does and how POSIX recommends; * utilities should interpret their arguments.@n; * <b>Version 1.1:</b> Optional mode with argument reordering as done by GNU getopt(), so that; * options and non-options can be mixed. See; * @ref ROOT::option::Parser::parse() ""Parser::parse()"".; *; * @par Feedback:; * Send questions, bug reports, feature requests etc. to: <tt><b>optionparser-feedback<span id=",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:4686,Availability,error,error,4686,"eir documentation.); * @code; * #include <iostream>; * #include ""optionparser.h""; *; * enum optionIndex { UNKNOWN, HELP, PLUS };; * const option::Descriptor usage[] =; * {; * {UNKNOWN, 0,"""" , """" ,option::Arg::None, ""USAGE: example [options]\n\n""; * ""Options:"" },; * {HELP, 0,"""" , ""help"",option::Arg::None, "" --help \tPrint usage and exit."" },; * {PLUS, 0,""p"", ""plus"",option::Arg::None, "" --plus, -p \tIncrement count."" },; * {UNKNOWN, 0,"""" , """" ,option::Arg::None, ""\nExamples:\n""; * "" example --unknown -- --this_is_no_option\n""; * "" example -unk --plus -ppp file1 file2\n"" },; * {0,0,0,0,0,0}; * };; *; * int main(int argc, char* argv[]); * {; * argc-=(argc>0); argv+=(argc>0); // skip program name argv[0] if present; * option::Stats stats(usage, argc, argv);; * option::Option options[stats.options_max], buffer[stats.buffer_max];; * option::Parser parse(usage, argc, argv, options, buffer);; *; * if (parse.error()); * return 1;; *; * if (options[HELP] || argc == 0) {; * option::printUsage(std::cout, usage);; * return 0;; * }; *; * std::cout << ""--plus count: "" <<; * options[PLUS].count() << ""\n"";; *; * for (option::Option* opt = options[UNKNOWN]; opt; opt = opt->next()); * std::cout << ""Unknown option: "" << opt->name << ""\n"";; *; * for (int i = 0; i < parse.nonOptionsCount(); ++i); * std::cout << ""Non-option #"" << i << "": "" << parse.nonOption(i) << ""\n"";; * }; * @endcode; *; * @par Option syntax:; * @li The Lean Mean C++ Option Parser follows POSIX <code>getopt()</code> conventions and supports; * GNU-style <code>getopt_long()</code> long options as well as Perl-style single-minus; * long options (<code>getopt_long_only()</code>).; * @li short options have the format @c -X where @c X is any character that fits in a char.; * @li short options can be grouped, i.e. <code>-X -Y</code> is equivalent to @c -XY.; * @li a short option may take an argument either separate (<code>-X foo</code>) or; * attached (@c -Xfoo). You can make the parser accept the additional format @c -X=foo b",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:8591,Availability,error,error,8591,"is permitted as separate argument to both long and short options.; * @li Arguments to both short and long options may start with a @c '-' character. E.g.; * <code> -X-X </code>, <code>-X -X</code> or <code> --long-X=-X </code>. If @c -X; * and @c --long-X take an argument, that argument will be @c ""-X"" in all 3 cases.; * @li If using the built-in @ref ROOT::option::Arg::Optional ""Arg::Optional"", optional arguments must; * be attached.; * @li the special option @c -- (i.e. without a name) terminates the list of; * options. Everything that follows is a non-option argument, even if it starts with; * a @c '-' character. The @c -- itself will not appear in the parse results.; * @li the first argument that doesn't start with @c '-' or @c '--' and does not belong to; * a preceding argument-taking option, will terminate the option list and is the; * first non-option argument. All following command line arguments are treated as; * non-option arguments, even if they start with @c '-' . @n; * NOTE: This behaviour is mandated by POSIX, but GNU getopt() only honours this if it is; * explicitly requested (e.g. by setting POSIXLY_CORRECT). @n; * You can enable the GNU behaviour by passing @c true as first argument to; * e.g. @ref ROOT::option::Parser::parse() ""Parser::parse()"".; * @li Arguments that look like options (i.e. @c '-' followed by at least 1 character) but; * aren't, are NOT treated as non-option arguments. They are treated as unknown options and; * are collected into a list of unknown options for error reporting. @n; * This means that in order to pass a first non-option; * argument beginning with the minus character it is required to use the; * @c -- special option, e.g.; * @code; * program -x -- --strange-filename; * @endcode; * In this example, @c --strange-filename is a non-option argument. If the @c --; * were omitted, it would be treated as an unknown option. @n; * See @ref ROOT::option::Descriptor::longopt for information on how to collect unknown options.; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:844,Energy Efficiency,adapt,adapts,844,"/**; * @file; *; * @brief This is the only file required to use The Lean Mean C++ Option Parser.; * Just \#include it and you're set.; *; * The Lean Mean C++ Option Parser handles the program's command line arguments; * (argc, argv).; * It supports the short and long option formats of getopt(), getopt_long(); * and getopt_long_only() but has a more convenient interface.; * The following features set it apart from other option parsers:; *; * @par Highlights:; * <ul style=""padding-left:1em;margin-left:0"">; * <li> It is a header-only library. Just <code>\#include ""optionparser.h""</code> and you're set.; * <li> It is freestanding. There are no dependencies whatsoever, not even the; * C or C++ standard library.; * <li> It has a usage message formatter that supports column alignment and; * line wrapping. This aids localization because it adapts to; * translated strings that are shorter or longer (even if they contain; * Asian wide characters).; * <li> Unlike getopt() and derivatives it doesn't force you to loop through; * options sequentially. Instead you can access options directly like this:; * <ul style=""margin-top:.5em"">; * <li> Test for presence of a switch in the argument vector:; * @code if ( options[QUIET] ) ... @endcode; * <li> Evaluate --enable-foo/--disable-foo pair where the last one used wins:; * @code if ( options[FOO].last()->type() == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:362,Integrability,interface,interface,362,"/**; * @file; *; * @brief This is the only file required to use The Lean Mean C++ Option Parser.; * Just \#include it and you're set.; *; * The Lean Mean C++ Option Parser handles the program's command line arguments; * (argc, argv).; * It supports the short and long option formats of getopt(), getopt_long(); * and getopt_long_only() but has a more convenient interface.; * The following features set it apart from other option parsers:; *; * @par Highlights:; * <ul style=""padding-left:1em;margin-left:0"">; * <li> It is a header-only library. Just <code>\#include ""optionparser.h""</code> and you're set.; * <li> It is freestanding. There are no dependencies whatsoever, not even the; * C or C++ standard library.; * <li> It has a usage message formatter that supports column alignment and; * line wrapping. This aids localization because it adapts to; * translated strings that are shorter or longer (even if they contain; * Asian wide characters).; * <li> Unlike getopt() and derivatives it doesn't force you to loop through; * options sequentially. Instead you can access options directly like this:; * <ul style=""margin-top:.5em"">; * <li> Test for presence of a switch in the argument vector:; * @code if ( options[QUIET] ) ... @endcode; * <li> Evaluate --enable-foo/--disable-foo pair where the last one used wins:; * @code if ( options[FOO].last()->type() == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:648,Integrability,depend,dependencies,648,"/**; * @file; *; * @brief This is the only file required to use The Lean Mean C++ Option Parser.; * Just \#include it and you're set.; *; * The Lean Mean C++ Option Parser handles the program's command line arguments; * (argc, argv).; * It supports the short and long option formats of getopt(), getopt_long(); * and getopt_long_only() but has a more convenient interface.; * The following features set it apart from other option parsers:; *; * @par Highlights:; * <ul style=""padding-left:1em;margin-left:0"">; * <li> It is a header-only library. Just <code>\#include ""optionparser.h""</code> and you're set.; * <li> It is freestanding. There are no dependencies whatsoever, not even the; * C or C++ standard library.; * <li> It has a usage message formatter that supports column alignment and; * line wrapping. This aids localization because it adapts to; * translated strings that are shorter or longer (even if they contain; * Asian wide characters).; * <li> Unlike getopt() and derivatives it doesn't force you to loop through; * options sequentially. Instead you can access options directly like this:; * <ul style=""margin-top:.5em"">; * <li> Test for presence of a switch in the argument vector:; * @code if ( options[QUIET] ) ... @endcode; * <li> Evaluate --enable-foo/--disable-foo pair where the last one used wins:; * @code if ( options[FOO].last()->type() == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:739,Integrability,message,message,739,"/**; * @file; *; * @brief This is the only file required to use The Lean Mean C++ Option Parser.; * Just \#include it and you're set.; *; * The Lean Mean C++ Option Parser handles the program's command line arguments; * (argc, argv).; * It supports the short and long option formats of getopt(), getopt_long(); * and getopt_long_only() but has a more convenient interface.; * The following features set it apart from other option parsers:; *; * @par Highlights:; * <ul style=""padding-left:1em;margin-left:0"">; * <li> It is a header-only library. Just <code>\#include ""optionparser.h""</code> and you're set.; * <li> It is freestanding. There are no dependencies whatsoever, not even the; * C or C++ standard library.; * <li> It has a usage message formatter that supports column alignment and; * line wrapping. This aids localization because it adapts to; * translated strings that are shorter or longer (even if they contain; * Asian wide characters).; * <li> Unlike getopt() and derivatives it doesn't force you to loop through; * options sequentially. Instead you can access options directly like this:; * <ul style=""margin-top:.5em"">; * <li> Test for presence of a switch in the argument vector:; * @code if ( options[QUIET] ) ... @endcode; * <li> Evaluate --enable-foo/--disable-foo pair where the last one used wins:; * @code if ( options[FOO].last()->type() == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:800,Integrability,wrap,wrapping,800,"/**; * @file; *; * @brief This is the only file required to use The Lean Mean C++ Option Parser.; * Just \#include it and you're set.; *; * The Lean Mean C++ Option Parser handles the program's command line arguments; * (argc, argv).; * It supports the short and long option formats of getopt(), getopt_long(); * and getopt_long_only() but has a more convenient interface.; * The following features set it apart from other option parsers:; *; * @par Highlights:; * <ul style=""padding-left:1em;margin-left:0"">; * <li> It is a header-only library. Just <code>\#include ""optionparser.h""</code> and you're set.; * <li> It is freestanding. There are no dependencies whatsoever, not even the; * C or C++ standard library.; * <li> It has a usage message formatter that supports column alignment and; * line wrapping. This aids localization because it adapts to; * translated strings that are shorter or longer (even if they contain; * Asian wide characters).; * <li> Unlike getopt() and derivatives it doesn't force you to loop through; * options sequentially. Instead you can access options directly like this:; * <ul style=""margin-top:.5em"">; * <li> Test for presence of a switch in the argument vector:; * @code if ( options[QUIET] ) ... @endcode; * <li> Evaluate --enable-foo/--disable-foo pair where the last one used wins:; * @code if ( options[FOO].last()->type() == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:844,Modifiability,adapt,adapts,844,"/**; * @file; *; * @brief This is the only file required to use The Lean Mean C++ Option Parser.; * Just \#include it and you're set.; *; * The Lean Mean C++ Option Parser handles the program's command line arguments; * (argc, argv).; * It supports the short and long option formats of getopt(), getopt_long(); * and getopt_long_only() but has a more convenient interface.; * The following features set it apart from other option parsers:; *; * @par Highlights:; * <ul style=""padding-left:1em;margin-left:0"">; * <li> It is a header-only library. Just <code>\#include ""optionparser.h""</code> and you're set.; * <li> It is freestanding. There are no dependencies whatsoever, not even the; * C or C++ standard library.; * <li> It has a usage message formatter that supports column alignment and; * line wrapping. This aids localization because it adapts to; * translated strings that are shorter or longer (even if they contain; * Asian wide characters).; * <li> Unlike getopt() and derivatives it doesn't force you to loop through; * options sequentially. Instead you can access options directly like this:; * <ul style=""margin-top:.5em"">; * <li> Test for presence of a switch in the argument vector:; * @code if ( options[QUIET] ) ... @endcode; * <li> Evaluate --enable-foo/--disable-foo pair where the last one used wins:; * @code if ( options[FOO].last()->type() == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:1070,Security,access,access,1070,"ser.; * Just \#include it and you're set.; *; * The Lean Mean C++ Option Parser handles the program's command line arguments; * (argc, argv).; * It supports the short and long option formats of getopt(), getopt_long(); * and getopt_long_only() but has a more convenient interface.; * The following features set it apart from other option parsers:; *; * @par Highlights:; * <ul style=""padding-left:1em;margin-left:0"">; * <li> It is a header-only library. Just <code>\#include ""optionparser.h""</code> and you're set.; * <li> It is freestanding. There are no dependencies whatsoever, not even the; * C or C++ standard library.; * <li> It has a usage message formatter that supports column alignment and; * line wrapping. This aids localization because it adapts to; * translated strings that are shorter or longer (even if they contain; * Asian wide characters).; * <li> Unlike getopt() and derivatives it doesn't force you to loop through; * options sequentially. Instead you can access options directly like this:; * <ul style=""margin-top:.5em"">; * <li> Test for presence of a switch in the argument vector:; * @code if ( options[QUIET] ) ... @endcode; * <li> Evaluate --enable-foo/--disable-foo pair where the last one used wins:; * @code if ( options[FOO].last()->type() == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n; * Despite these features the code size remains tiny.; * It is smaller than <a href=""http:",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:1145,Testability,Test,Test,1145,"he program's command line arguments; * (argc, argv).; * It supports the short and long option formats of getopt(), getopt_long(); * and getopt_long_only() but has a more convenient interface.; * The following features set it apart from other option parsers:; *; * @par Highlights:; * <ul style=""padding-left:1em;margin-left:0"">; * <li> It is a header-only library. Just <code>\#include ""optionparser.h""</code> and you're set.; * <li> It is freestanding. There are no dependencies whatsoever, not even the; * C or C++ standard library.; * <li> It has a usage message formatter that supports column alignment and; * line wrapping. This aids localization because it adapts to; * translated strings that are shorter or longer (even if they contain; * Asian wide characters).; * <li> Unlike getopt() and derivatives it doesn't force you to loop through; * options sequentially. Instead you can access options directly like this:; * <ul style=""margin-top:.5em"">; * <li> Test for presence of a switch in the argument vector:; * @code if ( options[QUIET] ) ... @endcode; * <li> Evaluate --enable-foo/--disable-foo pair where the last one used wins:; * @code if ( options[FOO].last()->type() == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n; * Despite these features the code size remains tiny.; * It is smaller than <a href=""http://uclibc.org"">uClibc</a>'s GNU getopt() and just a; * couple 100 bytes larger than uClibc",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:2344,Testability,test,test,2344,") == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n; * Despite these features the code size remains tiny.; * It is smaller than <a href=""http://uclibc.org"">uClibc</a>'s GNU getopt() and just a; * couple 100 bytes larger than uClibc's SUSv3 getopt(). @n; * (This does not include the usage formatter, of course. But you don't have to use that.); *; * @par Download:; * Tarball with examples and test programs:; * <a style=""font-size:larger;font-weight:bold"" href=""http://sourceforge.net/projects/optionparser/files/optionparser-1.3.tar.gz/download"">optionparser-1.3.tar.gz</a> @n; * Just the header (this is all you really need):; * <a style=""font-size:larger;font-weight:bold"" href=""http://optionparser.sourceforge.net/optionparser.h"">optionparser.h</a>; *; * @par Changelog:; * <b>Version 1.3:</b> Compatible with Microsoft Visual C++. @n; * <b>Version 1.2:</b> Added @ref ROOT::option::Option::namelen ""Option::namelen"" and removed the extraction; * of short option characters into a special buffer. @n; * Changed @ref ROOT::option::Arg::Optional ""Arg::Optional"" to accept arguments if they are attached; * rather than separate. This is what GNU getopt() does and how POSIX recommends; * utilities should interpret their arguments.@n; * <b>Version 1.1:</b> Optional mode with argument reordering as done by GNU getopt(), so that; * options and non-options can be mixed. See; * @ref ROOT::option::Parser::parse(",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:3394,Usability,Feedback,Feedback,3394,"/sourceforge.net/projects/optionparser/files/optionparser-1.3.tar.gz/download"">optionparser-1.3.tar.gz</a> @n; * Just the header (this is all you really need):; * <a style=""font-size:larger;font-weight:bold"" href=""http://optionparser.sourceforge.net/optionparser.h"">optionparser.h</a>; *; * @par Changelog:; * <b>Version 1.3:</b> Compatible with Microsoft Visual C++. @n; * <b>Version 1.2:</b> Added @ref ROOT::option::Option::namelen ""Option::namelen"" and removed the extraction; * of short option characters into a special buffer. @n; * Changed @ref ROOT::option::Arg::Optional ""Arg::Optional"" to accept arguments if they are attached; * rather than separate. This is what GNU getopt() does and how POSIX recommends; * utilities should interpret their arguments.@n; * <b>Version 1.1:</b> Optional mode with argument reordering as done by GNU getopt(), so that; * options and non-options can be mixed. See; * @ref ROOT::option::Parser::parse() ""Parser::parse()"".; *; * @par Feedback:; * Send questions, bug reports, feature requests etc. to: <tt><b>optionparser-feedback<span id=""antispam"">&nbsp;(a)&nbsp;</span>lists.sourceforge.net</b></tt>; * @htmlonly <script type=""text/javascript"">document.getElementById(""antispam"").innerHTML=""@""</script> @endhtmlonly; *; *; * @par Example program:; * (Note: @c option::* identifiers are links that take you to their documentation.); * @code; * #include <iostream>; * #include ""optionparser.h""; *; * enum optionIndex { UNKNOWN, HELP, PLUS };; * const option::Descriptor usage[] =; * {; * {UNKNOWN, 0,"""" , """" ,option::Arg::None, ""USAGE: example [options]\n\n""; * ""Options:"" },; * {HELP, 0,"""" , ""help"",option::Arg::None, "" --help \tPrint usage and exit."" },; * {PLUS, 0,""p"", ""plus"",option::Arg::None, "" --plus, -p \tIncrement count."" },; * {UNKNOWN, 0,"""" , """" ,option::Arg::None, ""\nExamples:\n""; * "" example --unknown -- --this_is_no_option\n""; * "" example -unk --plus -ppp file1 file2\n"" },; * {0,0,0,0,0,0}; * };; *; * int main(int argc, char* argv[]); * {; ",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:3482,Usability,feedback,feedback,3482,">optionparser-1.3.tar.gz</a> @n; * Just the header (this is all you really need):; * <a style=""font-size:larger;font-weight:bold"" href=""http://optionparser.sourceforge.net/optionparser.h"">optionparser.h</a>; *; * @par Changelog:; * <b>Version 1.3:</b> Compatible with Microsoft Visual C++. @n; * <b>Version 1.2:</b> Added @ref ROOT::option::Option::namelen ""Option::namelen"" and removed the extraction; * of short option characters into a special buffer. @n; * Changed @ref ROOT::option::Arg::Optional ""Arg::Optional"" to accept arguments if they are attached; * rather than separate. This is what GNU getopt() does and how POSIX recommends; * utilities should interpret their arguments.@n; * <b>Version 1.1:</b> Optional mode with argument reordering as done by GNU getopt(), so that; * options and non-options can be mixed. See; * @ref ROOT::option::Parser::parse() ""Parser::parse()"".; *; * @par Feedback:; * Send questions, bug reports, feature requests etc. to: <tt><b>optionparser-feedback<span id=""antispam"">&nbsp;(a)&nbsp;</span>lists.sourceforge.net</b></tt>; * @htmlonly <script type=""text/javascript"">document.getElementById(""antispam"").innerHTML=""@""</script> @endhtmlonly; *; *; * @par Example program:; * (Note: @c option::* identifiers are links that take you to their documentation.); * @code; * #include <iostream>; * #include ""optionparser.h""; *; * enum optionIndex { UNKNOWN, HELP, PLUS };; * const option::Descriptor usage[] =; * {; * {UNKNOWN, 0,"""" , """" ,option::Arg::None, ""USAGE: example [options]\n\n""; * ""Options:"" },; * {HELP, 0,"""" , ""help"",option::Arg::None, "" --help \tPrint usage and exit."" },; * {PLUS, 0,""p"", ""plus"",option::Arg::None, "" --plus, -p \tIncrement count."" },; * {UNKNOWN, 0,"""" , """" ,option::Arg::None, ""\nExamples:\n""; * "" example --unknown -- --this_is_no_option\n""; * "" example -unk --plus -ppp file1 file2\n"" },; * {0,0,0,0,0,0}; * };; *; * int main(int argc, char* argv[]); * {; * argc-=(argc>0); argv+=(argc>0); // skip program name argv[0] if present; * o",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:684,Availability,error,error,684,"/**; * @brief Signature of functions that check if an argument is valid for a certain type of option.; *; * Every Option has such a function assigned in its Descriptor.; * @code; * Descriptor usage[] = { {UNKNOWN, 0, """", """", Arg::None, """"}, ... };; * @endcode; *; * A CheckArg function has the following signature:; * @code ArgStatus CheckArg(const Option& option, bool msg); @endcode; *; * It is used to check if a potential argument would be acceptable for the option.; * It will even be called if there is no argument. In that case @c option.arg will be @c NULL.; *; * If @c msg is @c true and the function determines that an argument is not acceptable and; * that this is a fatal error, it should output a message to the user before; * returning @ref ARG_ILLEGAL. If @c msg is @c false the function should remain silent (or you; * will get duplicate messages).; *; * See @ref ArgStatus for the meaning of the return values.; *; * While you can provide your own functions,; * often the following pre-defined checks (which never return @ref ARG_ILLEGAL) will suffice:; *; * @li @c Arg::None @copybrief Arg::None; * @li @c Arg::Optional @copybrief Arg::Optional; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:710,Integrability,message,message,710,"/**; * @brief Signature of functions that check if an argument is valid for a certain type of option.; *; * Every Option has such a function assigned in its Descriptor.; * @code; * Descriptor usage[] = { {UNKNOWN, 0, """", """", Arg::None, """"}, ... };; * @endcode; *; * A CheckArg function has the following signature:; * @code ArgStatus CheckArg(const Option& option, bool msg); @endcode; *; * It is used to check if a potential argument would be acceptable for the option.; * It will even be called if there is no argument. In that case @c option.arg will be @c NULL.; *; * If @c msg is @c true and the function determines that an argument is not acceptable and; * that this is a fatal error, it should output a message to the user before; * returning @ref ARG_ILLEGAL. If @c msg is @c false the function should remain silent (or you; * will get duplicate messages).; *; * See @ref ArgStatus for the meaning of the return values.; *; * While you can provide your own functions,; * often the following pre-defined checks (which never return @ref ARG_ILLEGAL) will suffice:; *; * @li @c Arg::None @copybrief Arg::None; * @li @c Arg::Optional @copybrief Arg::Optional; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:854,Integrability,message,messages,854,"/**; * @brief Signature of functions that check if an argument is valid for a certain type of option.; *; * Every Option has such a function assigned in its Descriptor.; * @code; * Descriptor usage[] = { {UNKNOWN, 0, """", """", Arg::None, """"}, ... };; * @endcode; *; * A CheckArg function has the following signature:; * @code ArgStatus CheckArg(const Option& option, bool msg); @endcode; *; * It is used to check if a potential argument would be acceptable for the option.; * It will even be called if there is no argument. In that case @c option.arg will be @c NULL.; *; * If @c msg is @c true and the function determines that an argument is not acceptable and; * that this is a fatal error, it should output a message to the user before; * returning @ref ARG_ILLEGAL. If @c msg is @c false the function should remain silent (or you; * will get duplicate messages).; *; * See @ref ArgStatus for the meaning of the return values.; *; * While you can provide your own functions,; * often the following pre-defined checks (which never return @ref ARG_ILLEGAL) will suffice:; *; * @li @c Arg::None @copybrief Arg::None; * @li @c Arg::Optional @copybrief Arg::Optional; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:1464,Availability,error,error,1464,"/**; * @brief The long option name (without the leading @c -- ).; *; * If this Descriptor should not have a long option name, use the empty; * string """". NULL is not permitted here!; *; * While @ref shortopt allows multiple short option characters, each; * Descriptor can have only a single long option name. If you have multiple; * long option names referring to the same option use separate Descriptors; * that have the same @ref index and @ref type. You may repeat; * short option characters in such an alias Descriptor but there's no need to.; *; * @par Dummy Descriptors:; * You can use dummy Descriptors with an; * empty string for both @ref shortopt and @ref longopt to add text to; * the usage that is not related to a specific option. See @ref help.; * The first dummy Descriptor will be used for unknown options (see below).; *; * @par Unknown Option Descriptor:; * The first dummy Descriptor in the list of Descriptors,; * whose @ref shortopt and @ref longopt are both the empty string, will be used; * as the Descriptor for unknown options. An unknown option is a string in; * the argument vector that is not a lone minus @c '-' but starts with a minus; * character and does not match any Descriptor's @ref shortopt or @ref longopt. @n; * Note that the dummy descriptor's @ref check_arg function @e will be called and; * its return value will be evaluated as usual. I.e. if it returns @ref ARG_ILLEGAL; * the parsing will be aborted with <code>Parser::error()==true</code>. @n; * if @c check_arg does not return @ref ARG_ILLEGAL the descriptor's; * @ref index @e will be used to pick the linked list into which; * to put the unknown option. @n; * If there is no dummy descriptor, unknown options will be dropped silently.; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:1437,Safety,abort,aborted,1437,"/**; * @brief The long option name (without the leading @c -- ).; *; * If this Descriptor should not have a long option name, use the empty; * string """". NULL is not permitted here!; *; * While @ref shortopt allows multiple short option characters, each; * Descriptor can have only a single long option name. If you have multiple; * long option names referring to the same option use separate Descriptors; * that have the same @ref index and @ref type. You may repeat; * short option characters in such an alias Descriptor but there's no need to.; *; * @par Dummy Descriptors:; * You can use dummy Descriptors with an; * empty string for both @ref shortopt and @ref longopt to add text to; * the usage that is not related to a specific option. See @ref help.; * The first dummy Descriptor will be used for unknown options (see below).; *; * @par Unknown Option Descriptor:; * The first dummy Descriptor in the list of Descriptors,; * whose @ref shortopt and @ref longopt are both the empty string, will be used; * as the Descriptor for unknown options. An unknown option is a string in; * the argument vector that is not a lone minus @c '-' but starts with a minus; * character and does not match any Descriptor's @ref shortopt or @ref longopt. @n; * Note that the dummy descriptor's @ref check_arg function @e will be called and; * its return value will be evaluated as usual. I.e. if it returns @ref ARG_ILLEGAL; * the parsing will be aborted with <code>Parser::error()==true</code>. @n; * if @c check_arg does not return @ref ARG_ILLEGAL the descriptor's; * @ref index @e will be used to pick the linked list into which; * to put the unknown option. @n; * If there is no dummy descriptor, unknown options will be dropped silently.; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:137,Integrability,message,message,137,"/**; * @brief The usage text associated with the options in this Descriptor.; *; * You can use option::printUsage() to format your usage message based on; * the @c help texts. You can use dummy Descriptors where; * @ref shortopt and @ref longopt are both the empty string to add text to; * the usage that is not related to a specific option.; *; * See option::printUsage() for special formatting characters you can use in; * @c help to get a column layout.; *; * @attention; * Must be UTF-8-encoded. If your compiler supports C++11 you can use the ""u8""; * prefix to make sure string literals are properly encoded.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:331,Testability,Test,Test,331,"/**; * @brief A parsed option from the command line together with its argument if it has one.; *; * The Parser chains all parsed options with the same Descriptor::index together; * to form a linked list. This allows you to easily implement all of the common ways; * of handling repeated options and enable/disable pairs.; *; * @li Test for presence of a switch in the argument vector:; * @code if ( options[QUIET] ) ... @endcode; * @li Evaluate --enable-foo/--disable-foo pair where the last one used wins:; * @code if ( options[FOO].last()->type() == DISABLE ) ... @endcode; * @li Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * @li Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:311,Testability,test,test,311,/**; * @brief Pointer to this Option's Descriptor.; *; * Remember that the first dummy descriptor (see @ref Descriptor::longopt) is used; * for unknown options.; *; * @attention; * @c desc==NULL signals that this Option is unused. This is the default state of; * elements in the result array. You don't need to test @c desc explicitly. You; * can simply write something like this:; * @code; * if (options[CREATE]); * {; * ...; * }; * @endcode; * This works because of <code> operator const Option*() </code>.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:347,Usability,simpl,simply,347,/**; * @brief Pointer to this Option's Descriptor.; *; * Remember that the first dummy descriptor (see @ref Descriptor::longopt) is used; * for unknown options.; *; * @attention; * @c desc==NULL signals that this Option is unused. This is the default state of; * elements in the result array. You don't need to test @c desc explicitly. You; * can simply write something like this:; * @code; * if (options[CREATE]); * {; * ...; * }; * @endcode; * This works because of <code> operator const Option*() </code>.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:138,Integrability,message,messages,138,"/**; * @brief The name of the option as used on the command line.; *; * The main purpose of this string is to be presented to the user in messages.; *; * In the case of a long option, this is the actual @c argv pointer, i.e. the first; * character is a '-'. In the case of a short option this points to the option; * character within the @c argv string.; *; * Note that in the case of a short option group or an attached option argument, this; * string will contain additional characters following the actual name. Use @ref namelen; * to filter out the actual option name only.; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:714,Modifiability,extend,extend,714,"/**; * @brief The length of the option @ref name.; *; * Because @ref name points into the actual @c argv string, the option name may be; * followed by more characters (e.g. other short options in the same short option group).; * This value is the number of bytes (not characters!) that are part of the actual name.; *; * For a short option, this length is always 1. For a long option this length is always; * at least 2 if single minus long options are permitted and at least 3 if they are disabled.; *; * @note; * In the pathological case of a minus within a short option group (e.g. @c -xf-z), this; * length is incorrect, because this case will be misinterpreted as a long option and the; * name will therefore extend to the string's 0-terminator or a following '="" character; * if there is one. This is irrelevant for most uses of @ref name and @c namelen. If you; * really need to distinguish the case of a long and a short option, compare @ref name to; * the @c argv pointers. A long option's @c name is always identical to one of them,; * whereas a short option's is never.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:284,Testability,test,testing,284,"/**; * @brief Returns Descriptor::type of this Option's Descriptor, or 0 if this Option; * is invalid (unused).; *; * Because this method (and last(), too) can be used even on unused Options with desc==0, you can (provided; * you arrange your types properly) switch on type() without testing validity first.; * @code; * enum OptionType { UNUSED=0, DISABLED=0, ENABLED=1 };; * enum OptionIndex { FOO };; * const Descriptor usage[] = {; * { FOO, ENABLED, """", ""enable-foo"", Arg::None, 0 },; * { FOO, DISABLED, """", ""disable-foo"", Arg::None, 0 },; * { 0, 0, 0, 0, 0, 0 } };; * ...; * switch(options[FOO].last()->type()) // no validity check required!; * {; * case ENABLED: ...; * case DISABLED: ... // UNUSED==DISABLED !; * }; * @endcode; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:80,Integrability,wrap,wrap-around,80,/**; * @brief Returns a pointer to the previous element of the linked list with wrap-around from; * first() to last().; *; * If called on first() this method returns last(). Otherwise it will return the; * option with the same Descriptor::index that precedes this option on the command; * line.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:76,Integrability,wrap,wrap-around,76,/**; * @brief Returns a pointer to the next element of the linked list with wrap-around from; * last() to first().; *; * If called on last() this method returns first(). Otherwise it will return the; * option with the same Descriptor::index that follows this option on the command; * line.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:188,Testability,test,testing,188,"/**; * @brief Casts from Option to const Option* but only if this Option is valid.; *; * If this Option is valid (i.e. @c desc!=NULL), returns this.; * Otherwise returns NULL. This allows testing an Option directly; * in an if-clause to see if it is used:; * @code; * if (options[CREATE]); * {; * ...; * }; * @endcode; * It also allows you to write loops like this:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:182,Testability,test,testing,182,"/**; * @brief Casts from Option to Option* but only if this Option is valid.; *; * If this Option is valid (i.e. @c desc!=NULL), returns this.; * Otherwise returns NULL. This allows testing an Option directly; * in an if-clause to see if it is used:; * @code; * if (options[CREATE]); * {; * ...; * }; * @endcode; * It also allows you to write loops like this:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:301,Modifiability,extend,extend,301,"/**; * @brief Creates a new Option that is a one-element linked list and has the given; * values for @ref desc, @ref name and @ref arg.; *; * If @c name_ points at a character other than '-' it will be assumed to refer to a; * short option and @ref namelen will be set to 1. Otherwise the length will extend to; * the first '=' character or the string's 0-terminator.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:278,Modifiability,extend,extend,278,/**; * @internal; * @brief Sets the fields of this Option to the given values (extracting @c name if necessary).; *; * If @c name_ points at a character other than '-' it will be assumed to refer to a; * short option and @ref namelen will be set to 1. Otherwise the length will extend to; * the first '=' character or the string's 0-terminator.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:379,Availability,ERROR,ERROR,379,"/**; * @brief Functions for checking the validity of option arguments.; *; * @copydetails CheckArg; *; * The following example code; * can serve as starting place for writing your own more complex CheckArg functions:; * @code; * struct Arg: public option::Arg; * {; * static void printError(const char* msg1, const option::Option& opt, const char* msg2); * {; * fprintf(stderr, ""ERROR: %s"", msg1);; * fwrite(opt.name, opt.namelen, 1, stderr);; * fprintf(stderr, ""%s"", msg2);; * }; *; * static option::ArgStatus Unknown(const option::Option& option, bool msg); * {; * if (msg) printError(""Unknown option '"", option, ""'\n"");; * return option::ARG_ILLEGAL;; * }; *; * static option::ArgStatus Required(const option::Option& option, bool msg); * {; * if (option.arg != 0); * return option::ARG_OK;; *; * if (msg) printError(""Option '"", option, ""' requires an argument\n"");; * return option::ARG_ILLEGAL;; * }; *; * static option::ArgStatus NonEmpty(const option::Option& option, bool msg); * {; * if (option.arg != 0 && option.arg[0] != 0); * return option::ARG_OK;; *; * if (msg) printError(""Option '"", option, ""' requires a non-empty argument\n"");; * return option::ARG_ILLEGAL;; * }; *; * static option::ArgStatus Numeric(const option::Option& option, bool msg); * {; * char* endptr = 0;; * if (option.arg != 0 && strtol(option.arg, &endptr, 10)){};; * if (endptr != option.arg && *endptr == 0); * return option::ARG_OK;; *; * if (msg) printError(""Option '"", option, ""' requires a numeric argument\n"");; * return option::ARG_ILLEGAL;; * }; * };; * @endcode; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:176,Energy Efficiency,allocate,allocated,176,"/**; * @brief Determines the minimum lengths of the buffer and options arrays used for Parser.; *; * Because Parser doesn't use dynamic memory its output arrays have to be pre-allocated.; * If you don't want to use fixed size arrays (which may turn out too small, causing; * command line arguments to be dropped), you can use Stats to determine the correct sizes.; * Stats work cumulative. You can first pass in your default options and then the real; * options and afterwards the counts will reflect the union.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:318,Integrability,depend,depends,318,"/**; * @brief Number of elements needed for an @c options[] array to be used for; * @ref Parser::parse() ""parsing"" the same argument vectors that were fed; * into this Stats object.; *; * @note; * @li This number is always 1 greater than the actual number needed, to give; * you a sentinel element.; * @li This number depends only on the @c usage, not the argument vectors, because; * the @c options array needs exactly one slot for each possible Descriptor::index.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:57,Deployability,update,updates,57,"/**; * @brief Creates a new Stats object and immediately updates it for the; * given @c usage and argument vector. You may pass 0 for @c argc and/or @c argv,; * if you just want to update @ref options_max.; *; * @note; * The calls to Stats methods must match the later calls to Parser methods.; * See Parser::parse() for the meaning of the arguments.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:181,Deployability,update,update,181,"/**; * @brief Creates a new Stats object and immediately updates it for the; * given @c usage and argument vector. You may pass 0 for @c argc and/or @c argv,; * if you just want to update @ref options_max.; *; * @note; * The calls to Stats methods must match the later calls to Parser methods.; * See Parser::parse() for the meaning of the arguments.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:14,Deployability,Update,Updates,14,"/**; * @brief Updates this Stats object for the; * given @c usage and argument vector. You may pass 0 for @c argc and/or @c argv,; * if you just want to update @ref options_max.; *; * @note; * The calls to Stats methods must match the later calls to Parser methods.; * See Parser::parse() for the meaning of the arguments.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:153,Deployability,update,update,153,"/**; * @brief Updates this Stats object for the; * given @c usage and argument vector. You may pass 0 for @c argc and/or @c argv,; * if you just want to update @ref options_max.; *; * @note; * The calls to Stats methods must match the later calls to Parser methods.; * See Parser::parse() for the meaning of the arguments.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:458,Availability,error,error,458,"/**; * @brief Checks argument vectors for validity and parses them into data; * structures that are easier to work with.; *; * @par Example:; * @code; * int main(int argc, char* argv[]); * {; * argc-=(argc>0); argv+=(argc>0); // skip program name argv[0] if present; * option::Stats stats(usage, argc, argv);; * option::Option options[stats.options_max], buffer[stats.buffer_max];; * option::Parser parse(usage, argc, argv, options, buffer);; *; * if (parse.error()); * return 1;; *; * if (options[HELP]); * ...; * @endcode; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:26,Availability,error,error,26,"//!< @internal @brief see error()",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:3649,Security,access,access,3649,"if it was; * the full long option (e.g. @c --foob=10 will be interpreted as if it was; * @c --foobar=10 ), as long as the prefix has at least @c min_abbr_len characters; * (not counting the @c -- ) and is unambiguous.; * @n Be careful if combining @c min_abbr_len=1 with @c single_minus_longopt=true; * because the ambiguity check does not consider short options and abbreviated; * single minus long options will take precedence over short options.; * @param single_minus_longopt Passing @c true for this option allows long options to begin with; * a single minus. The double minus form will still be recognized. Note that; * single minus long options take precedence over short options and short option; * groups. E.g. @c -file would be interpreted as @c --file and not as; * <code> -f -i -l -e </code> (assuming a long option named @c ""file"" exists).; * @param bufmax The greatest index in the @c buffer[] array that parse() will write to is; * @c bufmax-1. If there are more options, they will be processed (in particular; * their CheckArg will be called) but not stored. @n; * If you used Stats::buffer_max to dimension this array, you can pass; * -1 (or not pass @c bufmax at all) which tells parse() that the buffer is; * ""large enough"".; * @attention; * Remember that @c options and @c buffer store Option @e objects, not pointers. Therefore it; * is not possible for the same object to be in both arrays. For those options that are found in; * both @c buffer[] and @c options[] the respective objects are independent copies. And only the; * objects in @c options[] are properly linked via Option::next() and Option::prev().; * You can iterate over @c buffer[] to; * process all options in the order they appear in the argument vector, but if you want access to; * the other Options with the same Descriptor::index, then you @e must access the linked list via; * @c options[]. You can get the linked list in options from a buffer object via something like; * @c options[buffer[i].index()].; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:3730,Security,access,access,3730,"if it was; * the full long option (e.g. @c --foob=10 will be interpreted as if it was; * @c --foobar=10 ), as long as the prefix has at least @c min_abbr_len characters; * (not counting the @c -- ) and is unambiguous.; * @n Be careful if combining @c min_abbr_len=1 with @c single_minus_longopt=true; * because the ambiguity check does not consider short options and abbreviated; * single minus long options will take precedence over short options.; * @param single_minus_longopt Passing @c true for this option allows long options to begin with; * a single minus. The double minus form will still be recognized. Note that; * single minus long options take precedence over short options and short option; * groups. E.g. @c -file would be interpreted as @c --file and not as; * <code> -f -i -l -e </code> (assuming a long option named @c ""file"" exists).; * @param bufmax The greatest index in the @c buffer[] array that parse() will write to is; * @c bufmax-1. If there are more options, they will be processed (in particular; * their CheckArg will be called) but not stored. @n; * If you used Stats::buffer_max to dimension this array, you can pass; * -1 (or not pass @c bufmax at all) which tells parse() that the buffer is; * ""large enough"".; * @attention; * Remember that @c options and @c buffer store Option @e objects, not pointers. Therefore it; * is not possible for the same object to be in both arrays. For those options that are found in; * both @c buffer[] and @c options[] the respective objects are independent copies. And only the; * objects in @c options[] are properly linked via Option::next() and Option::prev().; * You can iterate over @c buffer[] to; * process all options in the order they appear in the argument vector, but if you want access to; * the other Options with the same Descriptor::index, then you @e must access the linked list via; * @c options[]. You can get the linked list in options from a buffer object via something like; * @c options[buffer[i].index()].; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:50,Availability,error,error,50,"/**; * @brief Returns @c true if an unrecoverable error occurred while parsing options.; *; * An illegal argument to an option (i.e. CheckArg returns @ref ARG_ILLEGAL) is an; * unrecoverable error that aborts the parse. Unknown options are only an error if; * their CheckArg function returns @ref ARG_ILLEGAL. Otherwise they are collected.; * In that case if you want to exit the program if either an illegal argument; * or an unknown option has been passed, use code like this; *; * @code; * if (parser.error() || options[UNKNOWN]); * exit(1);; * @endcode; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:191,Availability,error,error,191,"/**; * @brief Returns @c true if an unrecoverable error occurred while parsing options.; *; * An illegal argument to an option (i.e. CheckArg returns @ref ARG_ILLEGAL) is an; * unrecoverable error that aborts the parse. Unknown options are only an error if; * their CheckArg function returns @ref ARG_ILLEGAL. Otherwise they are collected.; * In that case if you want to exit the program if either an illegal argument; * or an unknown option has been passed, use code like this; *; * @code; * if (parser.error() || options[UNKNOWN]); * exit(1);; * @endcode; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:248,Availability,error,error,248,"/**; * @brief Returns @c true if an unrecoverable error occurred while parsing options.; *; * An illegal argument to an option (i.e. CheckArg returns @ref ARG_ILLEGAL) is an; * unrecoverable error that aborts the parse. Unknown options are only an error if; * their CheckArg function returns @ref ARG_ILLEGAL. Otherwise they are collected.; * In that case if you want to exit the program if either an illegal argument; * or an unknown option has been passed, use code like this; *; * @code; * if (parser.error() || options[UNKNOWN]); * exit(1);; * @endcode; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:504,Availability,error,error,504,"/**; * @brief Returns @c true if an unrecoverable error occurred while parsing options.; *; * An illegal argument to an option (i.e. CheckArg returns @ref ARG_ILLEGAL) is an; * unrecoverable error that aborts the parse. Unknown options are only an error if; * their CheckArg function returns @ref ARG_ILLEGAL. Otherwise they are collected.; * In that case if you want to exit the program if either an illegal argument; * or an unknown option has been passed, use code like this; *; * @code; * if (parser.error() || options[UNKNOWN]); * exit(1);; * @endcode; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:202,Safety,abort,aborts,202,"/**; * @brief Returns @c true if an unrecoverable error occurred while parsing options.; *; * An illegal argument to an option (i.e. CheckArg returns @ref ARG_ILLEGAL) is an; * unrecoverable error that aborts the parse. Unknown options are only an error if; * their CheckArg function returns @ref ARG_ILLEGAL. Otherwise they are collected.; * In that case if you want to exit the program if either an illegal argument; * or an unknown option has been passed, use code like this; *; * @code; * if (parser.error() || options[UNKNOWN]); * exit(1);; * @endcode; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:118,Availability,error,error,118,/**; * @internal; * @brief This is the core function that does all the parsing.; * @retval false iff an unrecoverable error occurred.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:27,Integrability,Interface,Interface,27,/**; * @internal; * @brief Interface for actions Parser::workhorse() should perform for each Option it; * parses.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:76,Performance,perform,perform,76,/**; * @internal; * @brief Interface for actions Parser::workhorse() should perform for each Option it; * parses.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:253,Availability,error,error,253,/**; * @brief Called by Parser::workhorse() for each Option that has been successfully; * parsed (including unknown; * options if they have a Descriptor whose Descriptor::check_arg does not return; * @ref ARG_ILLEGAL.; *; * Returns @c false iff a fatal error has occured and the parse should be aborted.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:295,Safety,abort,aborted,295,/**; * @brief Called by Parser::workhorse() for each Option that has been successfully; * parsed (including unknown; * options if they have a Descriptor whose Descriptor::check_arg does not return; * @ref ARG_ILLEGAL.; *; * Returns @c false iff a fatal error has occured and the parse should be aborted.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:256,Availability,error,error,256,/**; * @brief Called by Parser::workhorse() after finishing the parse.; * @param numargs the number of non-option arguments remaining; * @param args pointer to the first remaining non-option argument (if numargs > 0).; *; * @return; * @c false iff a fatal error has occurred.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:102,Deployability,update,updated,102,"/**; * @brief Creates a new StoreOption action.; * @param parser_ the parser whose op_count should be updated.; * @param options_ each Option @c o is chained into the linked list @c options_[o.desc->index]; * @param buffer_ each Option is appended to this array as long as there's a free slot.; * @param bufmax_ number of slots in @c buffer_. @c -1 means ""large enough"".; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:6,Testability,test,testing,6,"//for testing a potential -long-option",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:7,Testability,test,test,7,"// now test if the match is unambiguous by checking for another match",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:27,Integrability,Interface,Interface,27,/**; * @internal; * @brief Interface for Functors that write (part of) a string somewhere.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:345,Integrability,wrap,wrapping,345,"/**; * @internal; * @brief Splits a @c Descriptor[] array into tables, rows, lines and columns and; * iterates over these components.; *; * The top-level organizational unit is the @e table.; * A table begins at a Descriptor with @c help!=NULL and extends up to; * a Descriptor with @c help==NULL.; *; * A table consists of @e rows. Due to line-wrapping and explicit breaks; * a row may take multiple lines on screen. Rows within the table are separated; * by \\n. They never cross Descriptor boundaries. This means a row ends either; * at \\n or the 0 at the end of the help string.; *; * A row consists of columns/cells. Columns/cells within a row are separated by \\t.; * Line breaks within a cell are marked by \\v.; *; * Rows in the same table need not have the same number of columns/cells. The; * extreme case are interjections, which are rows that contain neither \\t nor \\v.; * These are NOT treated specially by LinePartIterator, but they are treated; * specially by printUsage().; *; * LinePartIterator iterates through the usage at 3 levels: table, row and part.; * Tables and rows are as described above. A @e part is a line within a cell.; * LinePartIterator iterates through 1st parts of all cells, then through the 2nd; * parts of all cells (if any),... @n; * Example: The row <code> ""1 \v 3 \t 2 \v 4"" </code> has 2 cells/columns and 4 parts.; * The parts will be returned in the order 1, 2, 3, 4.; *; * It is possible that some cells have fewer parts than others. In this case; * LinePartIterator will ""fill up"" these cells with 0-length parts. IOW, LinePartIterator; * always returns the same number of parts for each column. Note that this is different; * from the way rows and columns are handled. LinePartIterator does @e not guarantee that; * the same number of columns will be returned for each row.; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:248,Modifiability,extend,extends,248,"/**; * @internal; * @brief Splits a @c Descriptor[] array into tables, rows, lines and columns and; * iterates over these components.; *; * The top-level organizational unit is the @e table.; * A table begins at a Descriptor with @c help!=NULL and extends up to; * a Descriptor with @c help==NULL.; *; * A table consists of @e rows. Due to line-wrapping and explicit breaks; * a row may take multiple lines on screen. Rows within the table are separated; * by \\n. They never cross Descriptor boundaries. This means a row ends either; * at \\n or the 0 at the end of the help string.; *; * A row consists of columns/cells. Columns/cells within a row are separated by \\t.; * Line breaks within a cell are marked by \\v.; *; * Rows in the same table need not have the same number of columns/cells. The; * extreme case are interjections, which are rows that contain neither \\t nor \\v.; * These are NOT treated specially by LinePartIterator, but they are treated; * specially by printUsage().; *; * LinePartIterator iterates through the usage at 3 levels: table, row and part.; * Tables and rows are as described above. A @e part is a line within a cell.; * LinePartIterator iterates through 1st parts of all cells, then through the 2nd; * parts of all cells (if any),... @n; * Example: The row <code> ""1 \v 3 \t 2 \v 4"" </code> has 2 cells/columns and 4 parts.; * The parts will be returned in the order 1, 2, 3, 4.; *; * It is possible that some cells have fewer parts than others. In this case; * LinePartIterator will ""fill up"" these cells with 0-length parts. IOW, LinePartIterator; * always returns the same number of parts for each column. Note that this is different; * from the way rows and columns are handled. LinePartIterator does @e not guarantee that; * the same number of columns will be returned for each row.; *; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:3,Availability,mask,mask,3,"// mask out length bits, we don't verify their correctness",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:34,Safety,avoid,avoid,34,"// the test for 0x1100 is here to avoid the function call in the Latin case",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:7,Testability,test,test,7,"// the test for 0x1100 is here to avoid the function call in the Latin case",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:48,Integrability,wrap,wraps,48,"/**; * @internal; * @brief Takes input and line wraps it, writing out one line at a time so that; * it can be interleaved with output from other columns.; *; * The LineWrapper is used to handle the last column of each table as well as interjections.; * The LineWrapper is called once for each line of output. If the data given to it fits; * into the designated width of the last column it is simply written out. If there; * is too much data, an appropriate split point is located and only the data up to this; * split point is written out. The rest of the data is queued for the next line.; * That way the last column can be line wrapped and interleaved with data from; * other columns. The following example makes this clearer:; * @code; * Column 1,1 Column 2,1 This is a long text; * Column 1,2 Column 2,2 that does not fit into; * a single line.; * @endcode; *; * The difficulty in producing this output is that the whole string; * ""This is a long text that does not fit into a single line"" is the; * 1st and only part of column 3. In order to produce the above; * output the string must be output piecemeal, interleaved with; * the data from the other columns.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:630,Integrability,wrap,wrapped,630,"/**; * @internal; * @brief Takes input and line wraps it, writing out one line at a time so that; * it can be interleaved with output from other columns.; *; * The LineWrapper is used to handle the last column of each table as well as interjections.; * The LineWrapper is called once for each line of output. If the data given to it fits; * into the designated width of the last column it is simply written out. If there; * is too much data, an appropriate split point is located and only the data up to this; * split point is written out. The rest of the data is queued for the next line.; * That way the last column can be line wrapped and interleaved with data from; * other columns. The following example makes this clearer:; * @code; * Column 1,1 Column 2,1 This is a long text; * Column 1,2 Column 2,2 that does not fit into; * a single line.; * @endcode; *; * The difficulty in producing this output is that the whole string; * ""This is a long text that does not fit into a single line"" is the; * 1st and only part of column 3. In order to produce the above; * output the string must be output piecemeal, interleaved with; * the data from the other columns.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:564,Performance,queue,queued,564,"/**; * @internal; * @brief Takes input and line wraps it, writing out one line at a time so that; * it can be interleaved with output from other columns.; *; * The LineWrapper is used to handle the last column of each table as well as interjections.; * The LineWrapper is called once for each line of output. If the data given to it fits; * into the designated width of the last column it is simply written out. If there; * is too much data, an appropriate split point is located and only the data up to this; * split point is written out. The rest of the data is queued for the next line.; * That way the last column can be line wrapped and interleaved with data from; * other columns. The following example makes this clearer:; * @code; * Column 1,1 Column 2,1 This is a long text; * Column 1,2 Column 2,2 that does not fit into; * a single line.; * @endcode; *; * The difficulty in producing this output is that the whole string; * ""This is a long text that does not fit into a single line"" is the; * 1st and only part of column 3. In order to produce the above; * output the string must be output piecemeal, interleaved with; * the data from the other columns.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:392,Usability,simpl,simply,392,"/**; * @internal; * @brief Takes input and line wraps it, writing out one line at a time so that; * it can be interleaved with output from other columns.; *; * The LineWrapper is used to handle the last column of each table as well as interjections.; * The LineWrapper is called once for each line of output. If the data given to it fits; * into the designated width of the last column it is simply written out. If there; * is too much data, an appropriate split point is located and only the data up to this; * split point is written out. The rest of the data is queued for the next line.; * That way the last column can be line wrapped and interleaved with data from; * other columns. The following example makes this clearer:; * @code; * Column 1,1 Column 2,1 This is a long text; * Column 1,2 Column 2,2 that does not fit into; * a single line.; * @endcode; *; * The difficulty in producing this output is that the whole string; * ""This is a long text that does not fit into a single line"" is the; * 1st and only part of column 3. In order to produce the above; * output the string must be output piecemeal, interleaved with; * the data from the other columns.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:720,Usability,clear,clearer,720,"/**; * @internal; * @brief Takes input and line wraps it, writing out one line at a time so that; * it can be interleaved with output from other columns.; *; * The LineWrapper is used to handle the last column of each table as well as interjections.; * The LineWrapper is called once for each line of output. If the data given to it fits; * into the designated width of the last column it is simply written out. If there; * is too much data, an appropriate split point is located and only the data up to this; * split point is written out. The rest of the data is queued for the next line.; * That way the last column can be line wrapped and interleaved with data from; * other columns. The following example makes this clearer:; * @code; * Column 1,1 Column 2,1 This is a long text; * Column 1,2 Column 2,2 that does not fit into; * a single line.; * @endcode; *; * The difficulty in producing this output is that the whole string; * ""This is a long text that does not fit into a single line"" is the; * 1st and only part of column 3. In order to produce the above; * output the string must be output piecemeal, interleaved with; * the data from the other columns.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:15,Energy Efficiency,power,power,15,"//!< Must be a power of 2 minus 1.; /**; * @brief Ring buffer for length component of pair (data, length).; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:46,Integrability,wrap,wrap,46,/**; * @brief The width of the column to line wrap.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:181,Integrability,contract,contract,181,//!< @brief index for next read - 1 (i.e. increment tail BEFORE read); /**; * @brief Multiple methods of LineWrapper may decide to flush part of the buffer to; * free up space. The contract of process() says that only 1 line is output. So; * this variable is used to track whether something has output a line. It is; * reset at the beginning of process() and checked at the end to decide if; * output has already occurred or is still needed.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:247,Modifiability,variab,variable,247,//!< @brief index for next read - 1 (i.e. increment tail BEFORE read); /**; * @brief Multiple methods of LineWrapper may decide to flush part of the buffer to; * free up space. The contract of process() says that only 1 line is output. So; * this variable is used to track whether something has output a line. It is; * reset at the beginning of process() and checked at the end to decide if; * output has already occurred or is still needed.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:23,Integrability,wrap,wrap,23,"/**; * @brief Process, wrap and output the next piece of data.; *; * process() will output at least one line of output. This is not necessarily; * the @c data passed in. It may be data queued from a prior call to process().; * If the internal buffer is full, more than 1 line will be output.; *; * process() assumes that the a proper amount of indentation has already been; * output. It won't write any further indentation before the 1st line. If; * more than 1 line is written due to buffer constraints, the lines following; * the first will be indented by this method, though.; *; * No \\n is written by this method after the last line that is written.; *; * @param write where to write the data.; * @param data the new chunk of data to write.; * @param len the length of the chunk of data to write.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:185,Performance,queue,queued,185,"/**; * @brief Process, wrap and output the next piece of data.; *; * process() will output at least one line of output. This is not necessarily; * the @c data passed in. It may be data queued from a prior call to process().; * If the internal buffer is full, more than 1 line will be output.; *; * process() assumes that the a proper amount of indentation has already been; * output. It won't write any further indentation before the 1st line. If; * more than 1 line is written due to buffer constraints, the lines following; * the first will be indented by this method, though.; *; * No \\n is written by this method after the last line that is written.; *; * @param write where to write the data.; * @param data the new chunk of data to write.; * @param len the length of the chunk of data to write.; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:9,Testability,test,test,9,"// quick test that works because utf8width <= len (all wide chars have at least 2 bytes)",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:3,Availability,mask,mask,3,"// mask out length bits, we don't verify their correctness",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:34,Safety,avoid,avoid,34,"// the test for 0x1100 is here to avoid the function call in the Latin case",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:7,Testability,test,test,7,"// the test for 0x1100 is here to avoid the function call in the Latin case",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:44,Integrability,wrap,wraps,44,/**; * @brief Constructs a LineWrapper that wraps its output to fit into; * screen columns @c x1 (incl.) to @c x2 (excl.).; *; * @c x1 gives the indentation LineWrapper uses if it needs to indent.; */,MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:6281,Availability,avail,available,6281,"age() always interprets Descriptor::help as UTF-8 and always produces UTF-8-encoded; * output. If your system uses a different charset, you must do your own conversion. You; * may also need to change the font of the console to see non-ASCII characters properly.; * This is particularly true for Windows.; * @li @b Security @b warning: Do not insert untrusted strings (such as user-supplied arguments); * into the usage. printUsage() has no protection against malicious UTF-8 sequences.; *; * @param prn The output method to use. See the examples above.; * @param usage the Descriptor[] array whose @c help texts will be formatted.; * @param width the maximum number of characters per output line. Note that this number is; * in actual characters, not bytes. printUsage() supports UTF-8 in @c help and will; * count multi-byte UTF-8 sequences properly. Asian wide characters are counted; * as 2 characters.; * @param last_column_min_percent (0-100) The minimum percentage of @c width that should be available; * for the last column (which typically contains the textual explanation of an option).; * If less space is available, the last column will be printed on its own line, indented; * according to @c last_column_own_line_max_percent.; * @param last_column_own_line_max_percent (0-100) If the last column is printed on its own line due to; * less than @c last_column_min_percent of the width being available, then only; * @c last_column_own_line_max_percent of the extra line(s) will be used for the; * last column's text. This ensures an indentation. See example below.; *; * @code; * // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); * --3456789 1234567890; * 1234567890; *; * // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); * // last_column_own_line_max_percent=75; * --3456789; * 123456789012345; * 67890; *; * // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); * // last_column_own_line_max_percent=33 (i.e. max. 5); * --3456",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:6399,Availability,avail,available,6399,"lways produces UTF-8-encoded; * output. If your system uses a different charset, you must do your own conversion. You; * may also need to change the font of the console to see non-ASCII characters properly.; * This is particularly true for Windows.; * @li @b Security @b warning: Do not insert untrusted strings (such as user-supplied arguments); * into the usage. printUsage() has no protection against malicious UTF-8 sequences.; *; * @param prn The output method to use. See the examples above.; * @param usage the Descriptor[] array whose @c help texts will be formatted.; * @param width the maximum number of characters per output line. Note that this number is; * in actual characters, not bytes. printUsage() supports UTF-8 in @c help and will; * count multi-byte UTF-8 sequences properly. Asian wide characters are counted; * as 2 characters.; * @param last_column_min_percent (0-100) The minimum percentage of @c width that should be available; * for the last column (which typically contains the textual explanation of an option).; * If less space is available, the last column will be printed on its own line, indented; * according to @c last_column_own_line_max_percent.; * @param last_column_own_line_max_percent (0-100) If the last column is printed on its own line due to; * less than @c last_column_min_percent of the width being available, then only; * @c last_column_own_line_max_percent of the extra line(s) will be used for the; * last column's text. This ensures an indentation. See example below.; *; * @code; * // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); * --3456789 1234567890; * 1234567890; *; * // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); * // last_column_own_line_max_percent=75; * --3456789; * 123456789012345; * 67890; *; * // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); * // last_column_own_line_max_percent=33 (i.e. max. 5); * --3456789; * 12345; * 67890; * 12345; * 67890; * @endcode; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:6684,Availability,avail,available,6684,"lways produces UTF-8-encoded; * output. If your system uses a different charset, you must do your own conversion. You; * may also need to change the font of the console to see non-ASCII characters properly.; * This is particularly true for Windows.; * @li @b Security @b warning: Do not insert untrusted strings (such as user-supplied arguments); * into the usage. printUsage() has no protection against malicious UTF-8 sequences.; *; * @param prn The output method to use. See the examples above.; * @param usage the Descriptor[] array whose @c help texts will be formatted.; * @param width the maximum number of characters per output line. Note that this number is; * in actual characters, not bytes. printUsage() supports UTF-8 in @c help and will; * count multi-byte UTF-8 sequences properly. Asian wide characters are counted; * as 2 characters.; * @param last_column_min_percent (0-100) The minimum percentage of @c width that should be available; * for the last column (which typically contains the textual explanation of an option).; * If less space is available, the last column will be printed on its own line, indented; * according to @c last_column_own_line_max_percent.; * @param last_column_own_line_max_percent (0-100) If the last column is printed on its own line due to; * less than @c last_column_min_percent of the width being available, then only; * @c last_column_own_line_max_percent of the extra line(s) will be used for the; * last column's text. This ensures an indentation. See example below.; *; * @code; * // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); * --3456789 1234567890; * 1234567890; *; * // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); * // last_column_own_line_max_percent=75; * --3456789; * 123456789012345; * 67890; *; * // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); * // last_column_own_line_max_percent=33 (i.e. max. 5); * --3456789; * 12345; * 67890; * 12345; * 67890; * @endcode; */",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:107,Integrability,wrap,wrapping,107,"/**; * @brief Outputs a nicely formatted usage string with support for multi-column formatting; * and line-wrapping.; *; * printUsage() takes the @c help texts of a Descriptor[] array and formats them into; * a usage message, wrapping lines to achieve the desired output width.; *; * <b>Table formatting:</b>; *; * Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables; * are used to align elements in the output.; *; * @code; * // Without a table. The explanatory texts are not aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; *; * // With table formatting. The explanatory texts are aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; * @endcode; *; * Table formatting removes the need to pad help texts manually with spaces to achieve; * alignment. To create a table, simply insert \\t (tab) characters to separate the cells; * within a row.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""-k, --kill \tDestroys something."" }, ...; * @endcode; *; * Note that you must include the minimum amount of space desired between cells yourself.; * Table formatting will insert further spaces as needed to achieve alignment.; *; * You can insert line breaks within cells by using \\v (vertical tab).; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c,\v--create \tCreates\vsomething."" },; * {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; *; * // results in; *; * -c, Creates; * --create something.; * -k, Destroys; * --kill something.; * @endcode; *; * You can mix lines that do not use \\t or \\v with those that do. The plain; * lines will not mess up the table layout. Alignment of the table columns will; * be maintained even across these interjections.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""----------------------------------"" },; * {..., ""-k, --kill ",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:217,Integrability,message,message,217,"/**; * @brief Outputs a nicely formatted usage string with support for multi-column formatting; * and line-wrapping.; *; * printUsage() takes the @c help texts of a Descriptor[] array and formats them into; * a usage message, wrapping lines to achieve the desired output width.; *; * <b>Table formatting:</b>; *; * Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables; * are used to align elements in the output.; *; * @code; * // Without a table. The explanatory texts are not aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; *; * // With table formatting. The explanatory texts are aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; * @endcode; *; * Table formatting removes the need to pad help texts manually with spaces to achieve; * alignment. To create a table, simply insert \\t (tab) characters to separate the cells; * within a row.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""-k, --kill \tDestroys something."" }, ...; * @endcode; *; * Note that you must include the minimum amount of space desired between cells yourself.; * Table formatting will insert further spaces as needed to achieve alignment.; *; * You can insert line breaks within cells by using \\v (vertical tab).; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c,\v--create \tCreates\vsomething."" },; * {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; *; * // results in; *; * -c, Creates; * --create something.; * -k, Destroys; * --kill something.; * @endcode; *; * You can mix lines that do not use \\t or \\v with those that do. The plain; * lines will not mess up the table layout. Alignment of the table columns will; * be maintained even across these interjections.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""----------------------------------"" },; * {..., ""-k, --kill ",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:226,Integrability,wrap,wrapping,226,"/**; * @brief Outputs a nicely formatted usage string with support for multi-column formatting; * and line-wrapping.; *; * printUsage() takes the @c help texts of a Descriptor[] array and formats them into; * a usage message, wrapping lines to achieve the desired output width.; *; * <b>Table formatting:</b>; *; * Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables; * are used to align elements in the output.; *; * @code; * // Without a table. The explanatory texts are not aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; *; * // With table formatting. The explanatory texts are aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; * @endcode; *; * Table formatting removes the need to pad help texts manually with spaces to achieve; * alignment. To create a table, simply insert \\t (tab) characters to separate the cells; * within a row.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""-k, --kill \tDestroys something."" }, ...; * @endcode; *; * Note that you must include the minimum amount of space desired between cells yourself.; * Table formatting will insert further spaces as needed to achieve alignment.; *; * You can insert line breaks within cells by using \\v (vertical tab).; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c,\v--create \tCreates\vsomething."" },; * {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; *; * // results in; *; * -c, Creates; * --create something.; * -k, Destroys; * --kill something.; * @endcode; *; * You can mix lines that do not use \\t or \\v with those that do. The plain; * lines will not mess up the table layout. Alignment of the table columns will; * be maintained even across these interjections.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""----------------------------------"" },; * {..., ""-k, --kill ",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:362,Integrability,wrap,wrapped,362,"/**; * @brief Outputs a nicely formatted usage string with support for multi-column formatting; * and line-wrapping.; *; * printUsage() takes the @c help texts of a Descriptor[] array and formats them into; * a usage message, wrapping lines to achieve the desired output width.; *; * <b>Table formatting:</b>; *; * Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables; * are used to align elements in the output.; *; * @code; * // Without a table. The explanatory texts are not aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; *; * // With table formatting. The explanatory texts are aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; * @endcode; *; * Table formatting removes the need to pad help texts manually with spaces to achieve; * alignment. To create a table, simply insert \\t (tab) characters to separate the cells; * within a row.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""-k, --kill \tDestroys something."" }, ...; * @endcode; *; * Note that you must include the minimum amount of space desired between cells yourself.; * Table formatting will insert further spaces as needed to achieve alignment.; *; * You can insert line breaks within cells by using \\v (vertical tab).; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c,\v--create \tCreates\vsomething."" },; * {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; *; * // results in; *; * -c, Creates; * --create something.; * -k, Destroys; * --kill something.; * @endcode; *; * You can mix lines that do not use \\t or \\v with those that do. The plain; * lines will not mess up the table layout. Alignment of the table columns will; * be maintained even across these interjections.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""----------------------------------"" },; * {..., ""-k, --kill ",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:5140,Integrability,wrap,wrappers,5140,"rintUsage(writer, usage); // custom class object; * MyWriteFunctor wfunctor;; * printUsage(&wfunctor, usage); // custom functor; * printUsage(write, 1, usage); // write() to file descriptor 1; * printUsage(cout, usage); // an ostream&; * printUsage(fwrite, stdout, usage); // fwrite() to stdout; * ostringstream sstr;; * printUsage(sstr, usage); // an ostringstream&; *; * @endcode; *; * @par Notes:; * @li the @c write() method of a class that is to be passed as a temporary; * as @c MyWriter() is in the example, must be a @c const method, because; * temporary objects are passed as const reference. This only applies to; * temporary objects that are created and destroyed in the same statement.; * If you create an object like @c writer in the example, this restriction; * does not apply.; * @li a functor like @c MyWriteFunctor in the example must be passed as a pointer.; * This differs from the way functors are passed to e.g. the STL algorithms.; * @li All printUsage() templates are tiny wrappers around a shared non-template implementation.; * So there's no penalty for using different versions in the same program.; * @li printUsage() always interprets Descriptor::help as UTF-8 and always produces UTF-8-encoded; * output. If your system uses a different charset, you must do your own conversion. You; * may also need to change the font of the console to see non-ASCII characters properly.; * This is particularly true for Windows.; * @li @b Security @b warning: Do not insert untrusted strings (such as user-supplied arguments); * into the usage. printUsage() has no protection against malicious UTF-8 sequences.; *; * @param prn The output method to use. See the examples above.; * @param usage the Descriptor[] array whose @c help texts will be formatted.; * @param width the maximum number of characters per output line. Note that this number is; * in actual characters, not bytes. printUsage() supports UTF-8 in @c help and will; * count multi-byte UTF-8 sequences properly. Asian wide",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:5597,Security,Secur,Security,5597,"n the example, must be a @c const method, because; * temporary objects are passed as const reference. This only applies to; * temporary objects that are created and destroyed in the same statement.; * If you create an object like @c writer in the example, this restriction; * does not apply.; * @li a functor like @c MyWriteFunctor in the example must be passed as a pointer.; * This differs from the way functors are passed to e.g. the STL algorithms.; * @li All printUsage() templates are tiny wrappers around a shared non-template implementation.; * So there's no penalty for using different versions in the same program.; * @li printUsage() always interprets Descriptor::help as UTF-8 and always produces UTF-8-encoded; * output. If your system uses a different charset, you must do your own conversion. You; * may also need to change the font of the console to see non-ASCII characters properly.; * This is particularly true for Windows.; * @li @b Security @b warning: Do not insert untrusted strings (such as user-supplied arguments); * into the usage. printUsage() has no protection against malicious UTF-8 sequences.; *; * @param prn The output method to use. See the examples above.; * @param usage the Descriptor[] array whose @c help texts will be formatted.; * @param width the maximum number of characters per output line. Note that this number is; * in actual characters, not bytes. printUsage() supports UTF-8 in @c help and will; * count multi-byte UTF-8 sequences properly. Asian wide characters are counted; * as 2 characters.; * @param last_column_min_percent (0-100) The minimum percentage of @c width that should be available; * for the last column (which typically contains the textual explanation of an option).; * If less space is available, the last column will be printed on its own line, indented; * according to @c last_column_own_line_max_percent.; * @param last_column_own_line_max_percent (0-100) If the last column is printed on its own line due to; * less than @c las",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:350,Usability,simpl,simply,350,"/**; * @brief Outputs a nicely formatted usage string with support for multi-column formatting; * and line-wrapping.; *; * printUsage() takes the @c help texts of a Descriptor[] array and formats them into; * a usage message, wrapping lines to achieve the desired output width.; *; * <b>Table formatting:</b>; *; * Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables; * are used to align elements in the output.; *; * @code; * // Without a table. The explanatory texts are not aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; *; * // With table formatting. The explanatory texts are aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; * @endcode; *; * Table formatting removes the need to pad help texts manually with spaces to achieve; * alignment. To create a table, simply insert \\t (tab) characters to separate the cells; * within a row.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""-k, --kill \tDestroys something."" }, ...; * @endcode; *; * Note that you must include the minimum amount of space desired between cells yourself.; * Table formatting will insert further spaces as needed to achieve alignment.; *; * You can insert line breaks within cells by using \\v (vertical tab).; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c,\v--create \tCreates\vsomething."" },; * {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; *; * // results in; *; * -c, Creates; * --create something.; * -k, Destroys; * --kill something.; * @endcode; *; * You can mix lines that do not use \\t or \\v with those that do. The plain; * lines will not mess up the table layout. Alignment of the table columns will; * be maintained even across these interjections.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""----------------------------------"" },; * {..., ""-k, --kill ",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:871,Usability,simpl,simply,871,"/**; * @brief Outputs a nicely formatted usage string with support for multi-column formatting; * and line-wrapping.; *; * printUsage() takes the @c help texts of a Descriptor[] array and formats them into; * a usage message, wrapping lines to achieve the desired output width.; *; * <b>Table formatting:</b>; *; * Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables; * are used to align elements in the output.; *; * @code; * // Without a table. The explanatory texts are not aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; *; * // With table formatting. The explanatory texts are aligned.; * -c, --create |Creates something.; * -k, --kill |Destroys something.; * @endcode; *; * Table formatting removes the need to pad help texts manually with spaces to achieve; * alignment. To create a table, simply insert \\t (tab) characters to separate the cells; * within a row.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""-k, --kill \tDestroys something."" }, ...; * @endcode; *; * Note that you must include the minimum amount of space desired between cells yourself.; * Table formatting will insert further spaces as needed to achieve alignment.; *; * You can insert line breaks within cells by using \\v (vertical tab).; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c,\v--create \tCreates\vsomething."" },; * {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; *; * // results in; *; * -c, Creates; * --create something.; * -k, Destroys; * --kill something.; * @endcode; *; * You can mix lines that do not use \\t or \\v with those that do. The plain; * lines will not mess up the table layout. Alignment of the table columns will; * be maintained even across these interjections.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""----------------------------------"" },; * {..., ""-k, --kill ",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:2274,Usability,Simpl,Simply,2274,"rt line breaks within cells by using \\v (vertical tab).; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c,\v--create \tCreates\vsomething."" },; * {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; *; * // results in; *; * -c, Creates; * --create something.; * -k, Destroys; * --kill something.; * @endcode; *; * You can mix lines that do not use \\t or \\v with those that do. The plain; * lines will not mess up the table layout. Alignment of the table columns will; * be maintained even across these interjections.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""----------------------------------"" },; * {..., ""-k, --kill \tDestroys something."" }, ...; *; * // results in; *; * -c, --create Creates something.; * ----------------------------------; * -k, --kill Destroys something.; * @endcode; *; * You can have multiple tables within the same usage whose columns are; * aligned independently. Simply insert a dummy Descriptor with @c help==0.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""Long options:"" },; * {..., ""--very-long-option \tDoes something long."" },; * {..., ""--ultra-super-mega-long-option \tTakes forever to complete."" },; * {..., 0 }, // ---------- table break -----------; * {..., ""Short options:"" },; * {..., ""-s \tShort."" },; * {..., ""-q \tQuick."" }, ...; *; * // results in; *; * Long options:; * --very-long-option Does something long.; * --ultra-super-mega-long-option Takes forever to complete.; * Short options:; * -s Short.; * -q Quick.; *; * // Without the table break it would be; *; * Long options:; * --very-long-option Does something long.; * --ultra-super-mega-long-option Takes forever to complete.; * Short options:; * -s Short.; * -q Quick.; * @endcode; *; * <b>Output methods:</b>; *; * Because TheLeanMeanC++Option parser is freestanding, you have to provide the means for; * output in the first argument(s) to printUsage(). Because printUsage() is implemented as; ",MatchSource.CODE_COMMENT,core/dictgen/res/OptionParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h:3,Modifiability,Config,Configure,3,"// Configure the vistitor to also visit template instantiation.",MatchSource.CODE_COMMENT,core/dictgen/res/Scanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h:33,Modifiability,variab,variable,33,"//Visitor for every VarDecl i.e. variable node in the AST",MatchSource.CODE_COMMENT,core/dictgen/res/Scanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h:8,Integrability,interface,interface,8,"// Main interface of this class.",MatchSource.CODE_COMMENT,core/dictgen/res/Scanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h:11,Integrability,rout,routines,11,"// Utility routines. Most belongs in TMetaUtils and should be shared with rootcling.cxx",MatchSource.CODE_COMMENT,core/dictgen/res/Scanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h:13,Testability,log,logN,13,"// Set for O(logN)",MatchSource.CODE_COMMENT,core/dictgen/res/Scanner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h:3,Usability,clear,clear,3,"// clear all selection rules",MatchSource.CODE_COMMENT,core/dictgen/res/SelectionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h:53,Modifiability,variab,variable,53,"// is the class selected; // is the global function, variable, enum selected - the behavior is different for linkdef.h and selection.xml - that's why; // we have two functions",MatchSource.CODE_COMMENT,core/dictgen/res/SelectionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h:44,Performance,perform,performed,44,"// gets the qualname of the decl, no checks performed",MatchSource.CODE_COMMENT,core/dictgen/res/SelectionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h:12,Performance,cache,cache,12,"// Fill the cache of all selection rules",MatchSource.CODE_COMMENT,core/dictgen/res/SelectionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h:24,Modifiability,variab,variables,24,"///< List of the global variables selection rules",MatchSource.CODE_COMMENT,core/dictgen/res/SelectionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/VariableSelectionRule.h:28,Modifiability,Variab,VariableSelectionRule,28,"// @(#)root/core/utils:$Id: VariableSelectionRule.h 28529 2009-05-11 16:43:35Z pcanal $; // Author: Velislava Spasova September 2010; /*************************************************************************; * Copyright (C) 1995-2011, Rene Brun, Fons Rademakers and al. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,core/dictgen/res/VariableSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/VariableSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/VariableSelectionRule.h:86,Modifiability,Variab,VariableSelectionRule,86,"//////////////////////////////////////////////////////////////////////////; // //; // VariableSelectionRule //; // //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/dictgen/res/VariableSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/VariableSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/VariableSelectionRule.h:44,Modifiability,Variab,Variable,44,"// Function selection rules are the same as Variable selection rules",MatchSource.CODE_COMMENT,core/dictgen/res/VariableSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/VariableSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/VariableSelectionRule.h:40,Modifiability,Variab,Variable,40,"// Enum selection rules are the same as Variable selection rules",MatchSource.CODE_COMMENT,core/dictgen/res/VariableSelectionRule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/VariableSelectionRule.h
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:76,Testability,test,test,76,"// Files on same inode (but this is not unique on AFS so we need the next 2 test",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:35,Performance,cache,cache,35,"//FIXME It would be much better to cache the rule stat result and compare to the clang::FileEntry",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:429,Performance,perform,performance,429,"// For ROOT-6704: use normalised name for matching if the class is in stl; // The reason for this check is that we have rules like std::map<*, int>; // We do not know how the internal representation of the innocuous ""map""; // is. We therefore have to act on a nicer name, obtained with TClassEdit; // The check ROOT::TMetaUtils::IsStdDropDefaultClass is there to call; // TClassEdit only when necessary as it can be expensive, a performance; // optimisation.",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:446,Security,Hash,Hash,446,"// do we have matching against the proto_name (or proto_pattern) attribute and if yes - select or veto; // The following selects functions on whether the requested prototype exactly matches the; // prototype issued by SelectionRules::GetFunctionPrototype which relies on; // ParmVarDecl::getType()->getAsString(); // to get the type names. Currently, this does not print the prototype in the usual; // human (written) forms. For example:; // For Hash have prototype: '(const class TString &)'; // For Hash have prototype: '(const class TString*)'; // For Hash have prototype: '(const char*)'; // In addition, the const can legally be in various place in the type name and thus; // a string based match will be hard to work out (it would need to normalize both; // the user input string and the clang provided string).; // Using lookup form cling would be probably be a better choice.",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:501,Security,Hash,Hash,501,"// do we have matching against the proto_name (or proto_pattern) attribute and if yes - select or veto; // The following selects functions on whether the requested prototype exactly matches the; // prototype issued by SelectionRules::GetFunctionPrototype which relies on; // ParmVarDecl::getType()->getAsString(); // to get the type names. Currently, this does not print the prototype in the usual; // human (written) forms. For example:; // For Hash have prototype: '(const class TString &)'; // For Hash have prototype: '(const class TString*)'; // For Hash have prototype: '(const char*)'; // In addition, the const can legally be in various place in the type name and thus; // a string based match will be hard to work out (it would need to normalize both; // the user input string and the clang provided string).; // Using lookup form cling would be probably be a better choice.",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:555,Security,Hash,Hash,555,"// do we have matching against the proto_name (or proto_pattern) attribute and if yes - select or veto; // The following selects functions on whether the requested prototype exactly matches the; // prototype issued by SelectionRules::GetFunctionPrototype which relies on; // ParmVarDecl::getType()->getAsString(); // to get the type names. Currently, this does not print the prototype in the usual; // human (written) forms. For example:; // For Hash have prototype: '(const class TString &)'; // For Hash have prototype: '(const class TString*)'; // For Hash have prototype: '(const char*)'; // In addition, the const can legally be in various place in the type name and thus; // a string based match will be hard to work out (it would need to normalize both; // the user input string and the clang provided string).; // Using lookup form cling would be probably be a better choice.",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:38,Testability,test,test,38,/*; * This method checks if the given test string is matched against the pattern; */,MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:15,Usability,simpl,simple,15,"// We have the simple pattern '*', it matches everything by definition!",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:62,Testability,test,test,62,"// we first check if the last sub-pattern is contained in the test string",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:48,Testability,test,test,48,"// the last sub-pattern isn't conatained in the test string",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:115,Testability,test,test,115,"// if the pattern doesn't end with '*', the match has to be complete; // i.e. if the last sub-pattern is ""sub"" the test string should end in ""sub"" (""1111sub"" is OK, ""1111sub1"" is not OK)",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:43,Testability,test,test,43,"// if the first sub-pattern isn't found in test or if it is found but the; // pattern doesn't start with '*' and the sub-pattern is not at the first position; //std::cout<<""\tNo match!""<<std::endl;",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:32,Testability,test,test,32,"// end is contained in begin -> test = ""A::B"" sub-patterns = ""A::"", ""::"" will return false",MatchSource.CODE_COMMENT,core/dictgen/src/BaseSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/ClassSelectionRule.cxx:18,Modifiability,Variab,VariableSelectionRule,18,"//const std::list<VariableSelectionRule>& ClassSelectionRule::GetFieldSelectionRules()",MatchSource.CODE_COMMENT,core/dictgen/src/ClassSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/ClassSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx:339,Performance,perform,performance,339,"////////////////////////////////////////////////////////////////////////////////; /// If it's not contained by 2 namespaces, drop it.; /**; * Check that the recordDecl is enclosed in the ROOT::Meta::Selection namespace,; * excluding the portion dedicated the definition of the syntax, which is part; * of ROOT, not of the user code.; * If performance is needed, an alternative approach to string comparisons; * could be adopted. One could use for example hashes of strings in first; * approximation.; **/",MatchSource.CODE_COMMENT,core/dictgen/src/DictSelectionReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx:455,Security,hash,hashes,455,"////////////////////////////////////////////////////////////////////////////////; /// If it's not contained by 2 namespaces, drop it.; /**; * Check that the recordDecl is enclosed in the ROOT::Meta::Selection namespace,; * excluding the portion dedicated the definition of the syntax, which is part; * of ROOT, not of the user code.; * If performance is needed, an alternative approach to string comparisons; * could be adopted. One could use for example hashes of strings in first; * approximation.; **/",MatchSource.CODE_COMMENT,core/dictgen/src/DictSelectionReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx:156,Availability,avail,available,156,////////////////////////////////////////////////////////////////////////////////; /**; * Get the pointer to the template arguments list. Return zero if not available.; **/,MatchSource.CODE_COMMENT,core/dictgen/src/DictSelectionReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx:820,Availability,down,down,820,"////////////////////////////////////////////////////////////////////////////////; /**; * Second pass through the AST. Two operations are performed:; * 1. Selection rules for classes to be autoselected are created. The; * algorithm works as follows: the members of the classes matching the name of; * the classes which contained autoselected members in the selection namespace; * are inspected. If a field with the same name of the one which was; * autoselected a selection rule based on its typename is built.; * 2. If a class is found which is a @c TemplateSpecialisationDecl its; * name is checked to match one of the patterns identified during the first; * pass. If a match is found, a property is added to the selection rule with; * the number of template arguments to keep in order to percolate this; * information down to the @c AnnotatedRecordDecl creation which happens in the; * @c RScanner .; **/",MatchSource.CODE_COMMENT,core/dictgen/src/DictSelectionReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx:137,Performance,perform,performed,137,"////////////////////////////////////////////////////////////////////////////////; /**; * Second pass through the AST. Two operations are performed:; * 1. Selection rules for classes to be autoselected are created. The; * algorithm works as follows: the members of the classes matching the name of; * the classes which contained autoselected members in the selection namespace; * are inspected. If a field with the same name of the one which was; * autoselected a selection rule based on its typename is built.; * 2. If a class is found which is a @c TemplateSpecialisationDecl its; * name is checked to match one of the patterns identified during the first; * pass. If a match is found, a property is added to the selection rule with; * the number of template arguments to keep in order to percolate this; * information down to the @c AnnotatedRecordDecl creation which happens in the; * @c RScanner .; **/",MatchSource.CODE_COMMENT,core/dictgen/src/DictSelectionReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:21,Availability,error,error,21,"//rootcint generates error here but I decided to implement that pattern",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:49,Safety,safe,safe,49,"// Types: We do not do IO of functions, so it is safe to; // put in some heuristics",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:22,Availability,error,error,22,"// rootcint generates error here, but I decided to implement it",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:22,Availability,error,error,22,"// rootcint generates error here, but I decided to implement it",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:256,Testability,stub,stub,256,"// Constructor parsing:; /* options=...; * possible options:; * nostreamer: set G__NOSTREAMER flag; * noinputoper: set G__NOINPUTOPERATOR flag; * evolution: set G__USEBYTECOUNT flag; * nomap: (ignored by roocling; prevents entry in ROOT's rootmap file); * stub: (ignored by rootcling was a directly for CINT code generation); * version(x): sets the version number of the class to x; * rntuple[un]split: enforce split/unsplit encoding in RNTuple; */; // We assume that the first toke in option or options; // assert( tok.getIdentifierInfo()->getName() != ""option"" or ""options"")",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:508,Testability,assert,assert,508,"// Constructor parsing:; /* options=...; * possible options:; * nostreamer: set G__NOSTREAMER flag; * noinputoper: set G__NOINPUTOPERATOR flag; * evolution: set G__USEBYTECOUNT flag; * nomap: (ignored by roocling; prevents entry in ROOT's rootmap file); * stub: (ignored by rootcling was a directly for CINT code generation); * version(x): sets the version number of the class to x; * rntuple[un]split: enforce split/unsplit encoding in RNTuple; */; // We assume that the first toke in option or options; // assert( tok.getIdentifierInfo()->getName() != ""option"" or ""options"")",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:168,Testability,assert,assert,168,"// Handle a #pragma found by the Preprocessor.; // check whether we care about the pragma - we are a named handler,; // thus this could actually be transformed into an assert:",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:168,Testability,assert,assert,168,"// Handle a #pragma found by the Preprocessor.; // check whether we care about the pragma - we are a named handler,; // thus this could actually be transformed into an assert:",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:98,Availability,Error,Error,98,"// Pragma read rule do not need to end in a semi colon; // if (tok.isNot(clang::tok::semi)) {; // Error(""Error: missing ; at end of rule"",tok, PP);; // return;; // }",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:105,Availability,Error,Error,105,"// Pragma read rule do not need to end in a semi colon; // if (tok.isNot(clang::tok::semi)) {; // Error(""Error: missing ; at end of rule"",tok, PP);; // return;; // }",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:130,Availability,Error,Error,130,"//std::cerr << ""Warning: #pragma read not yet handled: "" << include.str() << ""\n"";; // if (!fOwner.AddInclude(include)); // {; // Error("""",tok);; // }",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:168,Testability,assert,assert,168,"// Handle a #pragma found by the Preprocessor.; // check whether we care about the pragma - we are a named handler,; // thus this could actually be transformed into an assert:",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:168,Testability,assert,assert,168,"// Handle a #pragma found by the Preprocessor.; // check whether we care about the pragma - we are a named handler,; // thus this could actually be transformed into an assert:",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:10,Energy Efficiency,Reduce,Reduce,10,"// FIXME: Reduce the code duplication across these collector classes.",MatchSource.CODE_COMMENT,core/dictgen/src/LinkdefReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:1559,Modifiability,inherit,inheriting,1559,"e names. The (optional) file LinkDef.h looks like:. #ifdef __CLING__. #pragma link off all globals;; #pragma link off all classes;; #pragma link off all functions;. #pragma link C++ class TAxis;; #pragma link C++ class TAttAxis-;; #pragma link C++ class TArrayC-!;; #pragma link C++ class AliEvent+;. #pragma link C++ function StrDup;; #pragma link C++ function operator+(const TString&,const TString&);. #pragma link C++ global gROOT;; #pragma link C++ global gEnv;. #pragma link C++ enum EMessageTypes;. #endif. This file tells rootcling which classes will be persisted on disk and what; entities will trigger automatic load of the shared library which contains; it. A trailing - in the class name tells rootcling to not generate the; Streamer() method. This is necessary for those classes that need a; customized Streamer() method. A trailing ! in the class name tells rootcling; to not generate the operator>>(TBuffer &b, MyClass *&obj) function. This is; necessary to be able to write pointers to objects of classes not inheriting; from TObject. See for an example the source of the TArrayF class.; If the class contains a ClassDef macro, a trailing + in the class; name tells rootcling to generate an automatic Streamer(), i.e. a; streamer that let ROOT do automatic schema evolution. Otherwise, a; trailing + in the class name tells rootcling to generate a ShowMember; function and a Shadow Class. The + option is mutually exclusive with; the - option. For legacy reasons it is not yet the default.; When the linkdef file is not specified a default version exporting; the classes with the names equal to the include files minus the .h; is generated. The default constructor used by the ROOT I/O can be customized by; using the rootcling pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:1156,Performance,load,load,1156,"st argument on the rootcling command line.; 2) Note that the LinkDef file name must contain the string:; LinkDef.h, Linkdef.h or linkdef.h, i.e. NA49_LinkDef.h. Before specifying the first header file one can also add include; file directories to be searched and preprocessor defines, like:; -I$MYPROJECT/include -DDebug=1. NOTA BENE: the dictionaries that will be used within the same project must; have unique names. The (optional) file LinkDef.h looks like:. #ifdef __CLING__. #pragma link off all globals;; #pragma link off all classes;; #pragma link off all functions;. #pragma link C++ class TAxis;; #pragma link C++ class TAttAxis-;; #pragma link C++ class TArrayC-!;; #pragma link C++ class AliEvent+;. #pragma link C++ function StrDup;; #pragma link C++ function operator+(const TString&,const TString&);. #pragma link C++ global gROOT;; #pragma link C++ global gEnv;. #pragma link C++ enum EMessageTypes;. #endif. This file tells rootcling which classes will be persisted on disk and what; entities will trigger automatic load of the shared library which contains; it. A trailing - in the class name tells rootcling to not generate the; Streamer() method. This is necessary for those classes that need a; customized Streamer() method. A trailing ! in the class name tells rootcling; to not generate the operator>>(TBuffer &b, MyClass *&obj) function. This is; necessary to be able to write pointers to objects of classes not inheriting; from TObject. See for an example the source of the TArrayF class.; If the class contains a ClassDef macro, a trailing + in the class; name tells rootcling to generate an automatic Streamer(), i.e. a; streamer that let ROOT do automatic schema evolution. Otherwise, a; trailing + in the class name tells rootcling to generate a ShowMember; function and a Shadow Class. The + option is mutually exclusive with; the - option. For legacy reasons it is not yet the default.; When the linkdef file is not specified a default version exporting; the classes with",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:58,Performance,load,loaded,58,"""""""Specify absolute or relative path Clang pcm file to be loaded; The pcm file (module) produced by this invocation of rootcling; will not include any of the declarations already included in the; pcm files loaded via -m. There can be more than one -m; """"""",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:206,Performance,load,loaded,206,"""""""Specify absolute or relative path Clang pcm file to be loaded; The pcm file (module) produced by this invocation of rootcling; will not include any of the declarations already included in the; pcm files loaded via -m. There can be more than one -m; """"""",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:93,Modifiability,variab,variable,93,"""""""Do not store the headers' directories in the dictionary; Instead, rely on the environment variable $ROOT_INCLUDE_PATH at runtime; """"""",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py:321,Performance,load,load,321,"""""""Specify libraries needed by the header files parsed; This feature is used by ACliC (the automatic library generator).; Rootcling will read the content of xxx.in for a list of rootmap files (see; rlibmap). Rootcling will read these files and use them to deduce a list of; libraries that are needed to properly link and load this dictionary. This; list of libraries is saved in the first line of the file xxx.out; the; remaining lines contains the list of classes for which this run of; rootcling produced a dictionary; """"""",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:11,Availability,error,error,11,"// prevent error coming from clang/AST/Attrs.inc",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:36,Performance,perform,performs,36,"// Maybe too ugly? let's see how it performs.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:17,Modifiability,Variab,VariableSelectionRules,17,"// See if in the VariableSelectionRules there are attributes and names with; // which we can annotate.; // We may look for a smarter algorithm.; // Nothing to do then ...",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:8,Testability,test,test,8,"/* This test is here since in ROOT5, when using genreflex,; * for pods, iotype is ignored */",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:140,Performance,load,load,140,"// END ROOT PCMS; // The rest of the lines are not changed to leave in place the system which; // works with bulk header parsing on library load.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:39,Modifiability,inherit,inherit,39,"// CXXMethodDecl,FieldDecl and VarDecl inherit from NamedDecl; // See: http://clang.llvm.org/doxygen/classclang_1_1DeclaratorDecl.html",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:66,Modifiability,variab,variable,66,"// This check is here to avoid asserts in debug mode (LLVMDEV env variable set)",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:25,Safety,avoid,avoid,25,"// This check is here to avoid asserts in debug mode (LLVMDEV env variable set)",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:31,Testability,assert,asserts,31,"// This check is here to avoid asserts in debug mode (LLVMDEV env variable set)",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:102,Deployability,Update,Update,102,"// After the putenv below, gRootDir might point to the old ROOTSYS; // entry, i.e. to deleted memory. Update it.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:12,Performance,load,load,12,"// We never load namespaces on their own.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:118,Performance,load,loaded,118,"////////////////////////////////////////////////////////////////////////////////; /// Fill the map of libraries to be loaded in presence of a class; /// Transparently support the old and new rootmap file format",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:40,Availability,error,error,40,"// We don't want to generate duplicated error messages in several dictionaries (when generating temporaries)",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:46,Integrability,message,messages,46,"// We don't want to generate duplicated error messages in several dictionaries (when generating temporaries)",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:3,Safety,Detect,Detect,3,"// Detect if the class has a ClassDef",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:279,Availability,error,error,279,"////////////////////////////////////////////////////////////////////////////////; /// GrabIndex returns a static string (so use it or copy it immediately, do not; /// call GrabIndex twice in the same expression) containing the size of the; /// array data member.; /// In case of error, or if the size is not specified, GrabIndex returns 0.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:137,Availability,error,error,137,"// In case of VersionID<=0 write dummy streamer only calling; // its base class Streamer(s). If no base class(es) let Streamer; // print error message, i.e. this Streamer should never have been called.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:143,Integrability,message,message,143,"// In case of VersionID<=0 write dummy streamer only calling; // its base class Streamer(s). If no base class(es) let Streamer; // print error message, i.e. this Streamer should never have been called.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:14,Testability,test,test,14,"// No need to test for static, there are not in this list.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:186,Performance,Optimiz,Optimize,186,"// This is always good. However, in case of a pointer; // to an object that is guaranteed to be there and not; // being referenced by other objects we could use; // xx->Streamer(b);; // Optimize this with control statement in title.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:52,Availability,Error,Error,52,"//R__t.Streamer(R__b);\n"");; //VP if (i == 0); //VP Error(0, ""*** Datamember %s::%s: object has no Streamer() method (need manual intervention)\n"",; //VP fullname, field_iter->getName().str());; //VP fprintf(fp, "" //%s.Streamer(R__b);\n"", m.Name());",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:109,Integrability,inject,injected,109,"////////////////////////////////////////////////////////////////////////////////; /// Write the extra header injected into the module:; /// umbrella header if (umbrella) else content header.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:109,Security,inject,injected,109,"////////////////////////////////////////////////////////////////////////////////; /// Write the extra header injected into the module:; /// umbrella header if (umbrella) else content header.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:211,Availability,error,error,211,"////////////////////////////////////////////////////////////////////////////////; /// Includes all given headers in the interpreter. Returns true when we could; /// include the headers and otherwise false on an error when including.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:184,Deployability,update,updates,184,"////////////////////////////////////////////////////////////////////////////////; /// Extract the proper autoload key for nested classes; /// The routine does not erase the name, just updates it",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:146,Integrability,rout,routine,146,"////////////////////////////////////////////////////////////////////////////////; /// Extract the proper autoload key for nested classes; /// The routine does not erase the name, just updates it",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:33,Deployability,update,update,33,"// If the context is a class, we update the name",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:54,Safety,avoid,avoid,54,"// Keep track of the classes keys; // This is done to avoid duplications of keys with typedefs",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:7,Modifiability,variab,variables,7,"// And variables.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:86,Performance,Perform,Performance,86,"////////////////////////////////////////////////////////////////////////////////; /// Performance is not critical here.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:275,Safety,avoid,avoid,275,"// Loop on selected classes. If they don't have the attribute ""rootmap""; // set to ""false"", store them in the list of classes for the rootmap; // Returns 0 in case of success and 1 in case of issues.; // An unordered_set to keep track of the existing classes.; // We want to avoid duplicates there as they may hint to a serious corruption",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:253,Performance,perform,performed,253,"// The ""isGenreflex"" parameter allows the distinction between; // genreflex and rootcling only for the treatment of collections which; // are data members. To preserve the behaviour of the original; // genreflex and rootcling tools, if the selection is performed with; // genreflex, data members with collection type do not trigger the; // selection of the collection type",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:20,Deployability,update,update,20,"// This is to allow update of existing files",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:70,Security,access,accessing,70,"// Make sure the file is closed, mostly for Windows FS, also when; // accessing it from a Linux VM via a shared folder",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:70,Security,access,accessing,70,"// Make sure the file is closed, mostly for Windows FS, also when; // accessing it from a Linux VM via a shared folder",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:76,Deployability,release,released,76,"// Sometimes files cannot be renamed on Windows if they don't have; // been released by the system. So just copy them and try to delete; // the old one afterwards.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:3,Safety,Avoid,Avoid,3,"// Avoid infinite recursion",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:123,Safety,avoid,avoid,123,"// Propagate to the classes map only if this is not a template.; // The header is then used as autoload key and we want to avoid duplicates.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:20,Modifiability,variab,variables,20,"// The same for the variables:",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:222,Availability,Error,Error,222,"// Classes; /*; for (auto const & annRcd : scan.fSelectedClasses) {; const auto rcdDeclPtr = annRcd.GetRecordDecl();. int retCode = FwdDeclFromRcdDecl(*rcdDeclPtr, interp, buffer);; if (-1 == retCode) {; ROOT::TMetaUtils::Error(""GenerateFwdDeclString"",; ""Error generating fwd decl for class %s\n"",; annRcd.GetNormalizedName());; return emptyString;; }; if (retCode == 0 && fwdDecls.insert(buffer).second); fwdDeclString += ""\"""" + buffer + ""\""\n"";; }; */; // Build the input for a transaction containing all of the selected declarations; // Cling will produce the fwd declaration payload.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:255,Availability,Error,Error,255,"// Classes; /*; for (auto const & annRcd : scan.fSelectedClasses) {; const auto rcdDeclPtr = annRcd.GetRecordDecl();. int retCode = FwdDeclFromRcdDecl(*rcdDeclPtr, interp, buffer);; if (-1 == retCode) {; ROOT::TMetaUtils::Error(""GenerateFwdDeclString"",; ""Error generating fwd decl for class %s\n"",; annRcd.GetNormalizedName());; return emptyString;; }; if (retCode == 0 && fwdDecls.insert(buffer).second); fwdDeclString += ""\"""" + buffer + ""\""\n"";; }; */; // Build the input for a transaction containing all of the selected declarations; // Cling will produce the fwd declaration payload.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:244,Availability,Error,Error,244,"// Functions; // for (auto const& fcnDeclPtr : scan.fSelectedFunctions){; // int retCode = FwdDeclFromFcnDecl(*fcnDeclPtr, interp, buffer);; // newFwdDeclString += Decl2FwdDecl(*fcnDeclPtr,interp);; // if (-1 == retCode){; // ROOT::TMetaUtils::Error(""GenerateFwdDeclString"",; // ""Error generating fwd decl for function %s\n"",; // fcnDeclPtr->getNameAsString().c_str());; // return emptyString;; // }; // if (retCode == 0 && fwdDecls.insert(buffer).second); // fwdDeclString+=""\""""+buffer+""\""\n"";; // }",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:280,Availability,Error,Error,280,"// Functions; // for (auto const& fcnDeclPtr : scan.fSelectedFunctions){; // int retCode = FwdDeclFromFcnDecl(*fcnDeclPtr, interp, buffer);; // newFwdDeclString += Decl2FwdDecl(*fcnDeclPtr,interp);; // if (-1 == retCode){; // ROOT::TMetaUtils::Error(""GenerateFwdDeclString"",; // ""Error generating fwd decl for function %s\n"",; // fcnDeclPtr->getNameAsString().c_str());; // return emptyString;; // }; // if (retCode == 0 && fwdDecls.insert(buffer).second); // fwdDeclString+=""\""""+buffer+""\""\n"";; // }",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:134,Performance,Perform,Performing,134,"////////////////////////////////////////////////////////////////////////////////; /// Check if the argument is a sane cling argument. Performing the following checks:; /// 1) It does not start with ""--"" and is not the --param option.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:2,Security,Hash,HashLoc,2,/*HashLoc*/,MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:282,Availability,resilien,resilient,282,"// rootcling pre-includes things such as Rtypes.h. This means that ACLiC can; // call rootcling asking it to create a module for a file with no #includes; // but relying on things from Rtypes.h such as the ClassDef macro.; //; // When rootcling starts building a module, it becomes resilient to the; // outside environment and pre-included files have no effect. This hook; // informs rootcling when a new submodule is being built so that it can; // make Core.Rtypes.h visible.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:10,Energy Efficiency,Reduce,Reduce,10,"// FIXME: Reduce to Core.Rtypes.h.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:259,Availability,error,error,259,"////////////////////////////////////////////////////////////////////////////////; /// Custom diag client for clang that verifies that each implicitly build module; /// is a system module. If not, it will let the current rootcling invocation; /// fail with an error. All other diags beside module build remarks will be; /// forwarded to the passed child diag client.; ///; /// The reason why we need this is that if we built implicitly a C++ module; /// that belongs to a ROOT dictionary, then we will miss information generated; /// by rootcling in this file (e.g. the source code comments to annotation; /// attributes transformation will be missing in the module file).",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:335,Availability,error,error,335,"// A dictionary module could build implicitly a set of implicit modules.; // For example, the Core module builds libc.pcm and std.pcm implicitly.; // Those modules do not require I/O information and it is okay to build; // them as part of another module.; // However, we can build a module which requires I/O implictly which is; // an error because rootcling is not able to generate the corresponding; // dictionary.; // If we build a I/O requiring module implicitly we should display; // an error unless -mSystemByproducts or -mByproduct were specified.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:492,Availability,error,error,492,"// A dictionary module could build implicitly a set of implicit modules.; // For example, the Core module builds libc.pcm and std.pcm implicitly.; // Those modules do not require I/O information and it is okay to build; // them as part of another module.; // However, we can build a module which requires I/O implictly which is; // an error because rootcling is not able to generate the corresponding; // dictionary.; // If we build a I/O requiring module implicitly we should display; // an error unless -mSystemByproducts or -mByproduct were specified.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:12,Availability,error,error,12,"// Suppress error dialogs to avoid hangs on build nodes.; // One can use an environment variable (Cling_GuiOnAssert) to enable; // the error dialogs.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:135,Availability,error,error,135,"// Suppress error dialogs to avoid hangs on build nodes.; // One can use an environment variable (Cling_GuiOnAssert) to enable; // the error dialogs.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:88,Modifiability,variab,variable,88,"// Suppress error dialogs to avoid hangs on build nodes.; // One can use an environment variable (Cling_GuiOnAssert) to enable; // the error dialogs.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:29,Safety,avoid,avoid,29,"// Suppress error dialogs to avoid hangs on build nodes.; // One can use an environment variable (Cling_GuiOnAssert) to enable; // the error dialogs.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:69,Integrability,interface,interface,69,"// FIXME: This is totally the wrong concept. We should not expose an interface; // to be able to tell which component is in the pch and which needs extra; // scaffolding for interactive use. Moreover, some of the ROOT components are; // partially in the pch and this option makes it impossible to express that.; // We should be able to get the list of headers in the pch early and scan; // through them.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:59,Security,expose,expose,59,"// FIXME: This is totally the wrong concept. We should not expose an interface; // to be able to tell which component is in the pch and which needs extra; // scaffolding for interactive use. Moreover, some of the ROOT components are; // partially in the pch and this option makes it impossible to express that.; // We should be able to get the list of headers in the pch early and scan; // through them.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:353,Modifiability,variab,variable,353,"////////////////////////////////////////////////////////////////////////////////; /// Returns true iff a given module (and its submodules) contains all headers; /// needed by the given ModuleGenerator.; /// The names of all header files that are needed by the ModuleGenerator but are; /// not in the given module will be inserted into the MissingHeader variable.; /// Returns true iff the PCH was successfully generated.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:138,Performance,load,loaded,138,"// Go through the list of headers that are required by the ModuleGenerator; // and check for each header if it's in one of the modules we loaded.; // If not, make sure we fail at the end and mark the header as missing.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:2,Performance,Cache,CacheFail,2,/*CacheFail*/,MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:23,Safety,abort,abort,23,"// Inform the user and abort if we can't find a module with a given name.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:16,Performance,load,loaded,16,"// Check if the loaded module covers all headers that were specified; // by the user on the command line. This is an integrity check to; // ensure that our used module map is not containing extraneous headers.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:117,Security,integrity,integrity,117,"// Check if the loaded module covers all headers that were specified; // by the user on the command line. This is an integrity check to; // ensure that our used module map is not containing extraneous headers.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:29,Availability,error,error,29,"// FIXME: Upgrade this to an error once modules are stable.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:10,Deployability,Upgrade,Upgrade,10,"// FIXME: Upgrade this to an error once modules are stable.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:55,Availability,Down,Downgrade,55,"// We may have an umbrella and forgot to add the flag. Downgrade the; // warning into an information message.; // FIXME: We should open the umbrella, extract the set of header files; // and check if they exist in the modulemap.; // FIXME: We should also check if the header files are specified in the; // modulemap file as they appeared in the rootcling invocation, i.e.; // if we passed rootcling ... -I/some/path somedir/some/header, the; // modulemap should contain module M { header ""somedir/some/header"" }; // This way we will make sure the module is properly activated.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:101,Integrability,message,message,101,"// We may have an umbrella and forgot to add the flag. Downgrade the; // warning into an information message.; // FIXME: We should open the umbrella, extract the set of header files; // and check if they exist in the modulemap.; // FIXME: We should also check if the header files are specified in the; // modulemap file as they appeared in the rootcling invocation, i.e.; // if we passed rootcling ... -I/some/path somedir/some/header, the; // modulemap should contain module M { header ""somedir/some/header"" }; // This way we will make sure the module is properly activated.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:128,Availability,failure,failure,128,"// If warnings are disabled with the current verbosity settings, lower; // it so that the user sees the warning that caused the failure.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:26,Availability,error,error,26,"// Prevent the following #error: The C++ Standard Library forbids macroizing keywords.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:129,Modifiability,variab,variable,129,"// Adding -fmodules to the args will break lexing with __CINT__ defined,; // and we actually do lex with __CINT__ and reuse this variable later,; // we have to copy it now.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:62,Modifiability,config,configure,62,"// We just pass -fmodules, the CIFactory will do the rest and configure; // clang correctly once it sees this flag.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:241,Integrability,depend,dependencies,241,"// FIXME: This is a horrible workaround to fix the incremental builds.; // The enumerated modules are built by clang impicitly based on #include of; // a header which is contained within that module. The build system has; // no way to track dependencies on them and trigger a rebuild.; // A possible solution can be to disable completely the implicit build of; // modules and each module to be built by rootcling. We need to teach; // rootcling how to build modules with no IO support.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:16,Availability,error,error,16,"// There was an error.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:31,Performance,load,loaded,31,"// We are now ready (enough is loaded) to init the list of opaque typedefs.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:41,Availability,error,error,41,"// if the linkdef was not last, issue an error.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:83,Safety,safe,safe,83,"// coverity[tainted_data] The OS should already limit the argument size, so we are safe here",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:167,Availability,down,down,167,"// In order to not have to add the equivalent to -I${PWD} to the; // command line, include the complete file name, even if it is a; // full pathname, when we write it down in the dictionary.; // Note: have -I${PWD} means in that (at least in the case of; // ACLiC) we inadvertently pick local file that have the same; // name as system header (e.g. new or list) and -iquote has not; // equivalent on some platforms.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:32,Availability,failure,failure,32,"// Return here to propagate the failure up to the build system",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:17,Security,validat,validate,17,"// If we want to validate the selection only, we just quit.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:32,Availability,error,error,32,"// SELECTION LOOP; // Check for error in the class layout before doing anything else.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:74,Availability,error,error,74,"// Be a little bit makefile friendly and remove the dictionary in case of error.; // We could add an option -k to keep the file even in case of error.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:144,Availability,error,error,144,"// Be a little bit makefile friendly and remove the dictionary in case of error.; // We could add an option -k to keep the file even in case of error.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:24,Integrability,depend,depending,24,"// Write the module/PCH depending on what mode we are on",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:13,Availability,error,errors,13,"// Check for errors in module generation",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:44,Availability,error,errors,44,"// Before returning, rename the files if no errors occurred; // otherwise clean them to avoid remnants (see ROOT-10015)",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:88,Safety,avoid,avoid,88,"// Before returning, rename the files if no errors occurred; // otherwise clean them to avoid remnants (see ROOT-10015)",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:8,Testability,test,test,8,"// Just test the syntax of the selection file",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:721,Integrability,Wrap,Wrap,721,"////////////////////////////////////////////////////////////////////////////////; /// Translate the arguments of genreflex into rootcling ones and forward them; /// to the RootCling function.; /// These are two typical genreflex and rootcling commandlines; /// 1) genreflex header1.h [header2.h ...] [options] [preprocessor options]; /// 2) rootcling [-v] [-v0-4] [-f] [out.cxx] [-s sharedlib.so] [-m pcmfilename]; /// header1.h[{+,-}][!] ..headerN.h[{+,-}][!] [{LinkDef.h,selectionRules.xml}]; /// The rules with which the arguments are translated are (1st column genreflex):; /// --debug -v4; /// --quiet -v0; /// -o ofile positional arg after -f; /// -s selection file Last argument of the call; /// --fail_on_warning Wrap ROOT::TMetaUtils::Warning and throw if selected; ///; /// New arguments:; /// -l --library targetLib name (new) -s targetLib name; /// -m pcmname (can be many -m) (new) -m pcmname (can be many -m); /// --rootmap -rmf (new); /// --rootmap-lib -rml (new); ///; /// genreflex options which rise warnings (feedback is desirable); /// --no_membertypedefs (it should be irrelevant); /// --no_templatetypedefs (it should be irrelevant); ///; /// genreflex options which are ignored (know for sure they are not needed); /// --pool, --dataonly; /// --interpreteronly; /// --gccxml{path,opt,post}; ///; ///; /// Exceptions; /// The --deep option of genreflex is passed as function parameter to rootcling; /// since it's not needed at the moment there.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:1028,Usability,feedback,feedback,1028,"////////////////////////////////////////////////////////////////////////////////; /// Translate the arguments of genreflex into rootcling ones and forward them; /// to the RootCling function.; /// These are two typical genreflex and rootcling commandlines; /// 1) genreflex header1.h [header2.h ...] [options] [preprocessor options]; /// 2) rootcling [-v] [-v0-4] [-f] [out.cxx] [-s sharedlib.so] [-m pcmfilename]; /// header1.h[{+,-}][!] ..headerN.h[{+,-}][!] [{LinkDef.h,selectionRules.xml}]; /// The rules with which the arguments are translated are (1st column genreflex):; /// --debug -v4; /// --quiet -v0; /// -o ofile positional arg after -f; /// -s selection file Last argument of the call; /// --fail_on_warning Wrap ROOT::TMetaUtils::Warning and throw if selected; ///; /// New arguments:; /// -l --library targetLib name (new) -s targetLib name; /// -m pcmname (can be many -m) (new) -m pcmname (can be many -m); /// --rootmap -rmf (new); /// --rootmap-lib -rml (new); ///; /// genreflex options which rise warnings (feedback is desirable); /// --no_membertypedefs (it should be irrelevant); /// --no_templatetypedefs (it should be irrelevant); ///; /// genreflex options which are ignored (know for sure they are not needed); /// --pool, --dataonly; /// --interpreteronly; /// --gccxml{path,opt,post}; ///; ///; /// Exceptions; /// The --deep option of genreflex is passed as function parameter to rootcling; /// since it's not needed at the moment there.",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:108,Testability,test,testing,108,"// The verbosity: debug wins over quiet; //std::string verbosityOption(""-v4""); // To be uncommented for the testing phase. It should be -v",MatchSource.CODE_COMMENT,core/dictgen/src/rootcling_impl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx:13,Performance,cache,cache,13,"// Build the cache for all selection rules",MatchSource.CODE_COMMENT,core/dictgen/src/Scanner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx:113,Testability,test,test,113,"// in case it is implicit we don't create a builder; // [Note: Can N be nullptr?, is so 'ShouldVisitDecl' should test or we should test sooner]",MatchSource.CODE_COMMENT,core/dictgen/src/Scanner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx:131,Testability,test,test,131,"// in case it is implicit we don't create a builder; // [Note: Can N be nullptr?, is so 'ShouldVisitDecl' should test or we should test sooner]",MatchSource.CODE_COMMENT,core/dictgen/src/Scanner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx:17,Integrability,depend,dependent,17,"// Do not select dependent types.",MatchSource.CODE_COMMENT,core/dictgen/src/Scanner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx:59,Integrability,depend,dependency,59,"// Pass on any declaration. This is usually used to record dependency.; // Since rootcint see C++ compliant header files, we can assume that; // if a forward declaration or declaration has been inserted, the; // classes for which we are creating a dictionary will be using; // them either directly or indirectly. Any false positive can be; // resolved by removing the spurrious dependency in the (user) header; // files.",MatchSource.CODE_COMMENT,core/dictgen/src/Scanner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx:378,Integrability,depend,dependency,378,"// Pass on any declaration. This is usually used to record dependency.; // Since rootcint see C++ compliant header files, we can assume that; // if a forward declaration or declaration has been inserted, the; // classes for which we are creating a dictionary will be using; // them either directly or indirectly. Any false positive can be; // resolved by removing the spurrious dependency in the (user) header; // files.",MatchSource.CODE_COMMENT,core/dictgen/src/Scanner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx:58,Security,access,access,58,"// Before adding the decl to the selected ones, check its access.; // We do not yet support I/O of private or protected classes.; // See ROOT-7450.; // Additionally, private declarations lead to uncompilable code, so just ignore (ROOT-9112).",MatchSource.CODE_COMMENT,core/dictgen/src/Scanner.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:199,Availability,avail,available,199,"// Currently rootcling does not need any information on enums, except; // for the PCM / proto classes that register them to build TEnums without; // parsing. This can be removed once (real) PCMs are available.; // Note that the code below was *not* properly matching the case; // typedef enum { ... } abc;; // as the typedef is stored as an anonymous EnumDecl in clang.; // It is likely that using a direct lookup on the name would; // return the appropriate typedef (and then we would need to; // select 'both' the typedef and the anonymous enums.",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:15,Usability,simpl,simple,15,"// Implement a simple matching for functions",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:147,Availability,Error,Error,147,"// std::string proto;; // if (GetFunctionPrototype(D,proto)); // std::cout<<""\n\tFunction prototype: ""<<str_name + proto;; // else; // std::cout<<""Error in prototype formation"";",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:75,Modifiability,variab,variables,75,"// iterate through all the rules; // we call this method only for genrefex variables, functions and enums - it is simpler than the class case:; // if we have No - it is veto even if we have explicit yes as well",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:114,Usability,simpl,simpler,114,"// iterate through all the rules; // we call this method only for genrefex variables, functions and enums - it is simpler than the class case:; // if we have No - it is veto even if we have explicit yes as well",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:75,Modifiability,variab,variables,75,"// iterate through all the rules; // we call this method only for genrefex variables, functions and enums - it is simpler than the class case:; // if we have No - it is veto even if we have explicit yes as well",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:114,Usability,simpl,simpler,114,"// iterate through all the rules; // we call this method only for genrefex variables, functions and enums - it is simpler than the class case:; // if we have No - it is veto even if we have explicit yes as well",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:75,Modifiability,variab,variables,75,"// iterate through all the rules; // we call this method only for genrefex variables, functions and enums - it is simpler than the class case:; // if we have No - it is veto even if we have explicit yes as well",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:114,Usability,simpl,simpler,114,"// iterate through all the rules; // we call this method only for genrefex variables, functions and enums - it is simpler than the class case:; // if we have No - it is veto even if we have explicit yes as well",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:544,Availability,error,error,544,"// for(const auto& selRule: fFunctionSelectionRules) {; // if (!selRule.GetMatchFound() && !GetHasFileNameRule()) {; // // Here the slow methods can be used; // std::string name;; // if (selRule.GetAttributeValue(""proto_pattern"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""proto_name"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""pattern"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""name"", name)) {; // // keept it; // } else {; // name.clear();; // }; // // Make it soft, no error - just warnings; // std::cout<<""Warning - unused function rule: ""<<name<<std::endl;; // // if (IsSelectionXMLFile()){; // // std::cout<<""Warning - unused function rule: ""<<name<<std::endl;; // // }; // // else {; // // std::cout<<""Error - unused function rule: ""<<name<<std::endl;; // // }; // if (name.length() == 0) {; // selRule.PrintAttributes(std::cout,3);; // }; // }; //; // }",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:781,Availability,Error,Error,781,"// for(const auto& selRule: fFunctionSelectionRules) {; // if (!selRule.GetMatchFound() && !GetHasFileNameRule()) {; // // Here the slow methods can be used; // std::string name;; // if (selRule.GetAttributeValue(""proto_pattern"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""proto_name"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""pattern"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""name"", name)) {; // // keept it; // } else {; // name.clear();; // }; // // Make it soft, no error - just warnings; // std::cout<<""Warning - unused function rule: ""<<name<<std::endl;; // // if (IsSelectionXMLFile()){; // // std::cout<<""Warning - unused function rule: ""<<name<<std::endl;; // // }; // // else {; // // std::cout<<""Error - unused function rule: ""<<name<<std::endl;; // // }; // if (name.length() == 0) {; // selRule.PrintAttributes(std::cout,3);; // }; // }; //; // }",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:505,Usability,clear,clear,505,"// for(const auto& selRule: fFunctionSelectionRules) {; // if (!selRule.GetMatchFound() && !GetHasFileNameRule()) {; // // Here the slow methods can be used; // std::string name;; // if (selRule.GetAttributeValue(""proto_pattern"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""proto_name"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""pattern"", name)) {; // // keep it; // } else if (selRule.GetAttributeValue(""name"", name)) {; // // keept it; // } else {; // name.clear();; // }; // // Make it soft, no error - just warnings; // std::cout<<""Warning - unused function rule: ""<<name<<std::endl;; // // if (IsSelectionXMLFile()){; // // std::cout<<""Warning - unused function rule: ""<<name<<std::endl;; // // }; // // else {; // // std::cout<<""Error - unused function rule: ""<<name<<std::endl;; // // }; // if (name.length() == 0) {; // selRule.PrintAttributes(std::cout,3);; // }; // }; //; // }",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:12,Performance,cache,cache,12,"// Fill the cache of every selection rule",MatchSource.CODE_COMMENT,core/dictgen/src/SelectionRules.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx:42,Safety,avoid,avoid,42,"// Add a random string to the filename to avoid races.",MatchSource.CODE_COMMENT,core/dictgen/src/TModuleGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx:38,Performance,load,loading,38,"// Dictionary initialization code for loading the module",MatchSource.CODE_COMMENT,core/dictgen/src/TModuleGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx:115,Availability,error,errors,115,"// Increase the value of the diagnostics pointing out from which; // dictionary this payload comes from in case of errors",MatchSource.CODE_COMMENT,core/dictgen/src/TModuleGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx:490,Security,hash,hash,490,"// Anticipate the undefines.; // Suppose to have a namespace called ""declarations"" used in R5 for template; // instantiations in the header given to genreflex.; // Now, in this namespace, objects with some names, typically dummy, will be; // present.; // If you give such headers to cling to parse, problems will occour, as the; // names appear multiple times. One possible solution is to get out of this; // with preprocessor defines given to genreflex, redefining ""declarations""; // to a hash or <project>_<package> via the build system.",MatchSource.CODE_COMMENT,core/dictgen/src/TModuleGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx:3,Availability,Recover,Recover,3,"// Recover old genreflex behaviour, i.e. do not print warnings due to glitches; // in the headers at runtime. This is not synonym of ignoring warnings as they; // will be printed at dictionary generation time.; // In order to do this we leverage the diagnostic pragmas and, since there is no; // way to express as a pragma the option ""-Wno-deprecated"" the; // _BACKWARD_BACKWARD_WARNING_H macro, used to avoid to go through; // backward/backward_warning.h.",MatchSource.CODE_COMMENT,core/dictgen/src/TModuleGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx:3,Safety,Recover,Recover,3,"// Recover old genreflex behaviour, i.e. do not print warnings due to glitches; // in the headers at runtime. This is not synonym of ignoring warnings as they; // will be printed at dictionary generation time.; // In order to do this we leverage the diagnostic pragmas and, since there is no; // way to express as a pragma the option ""-Wno-deprecated"" the; // _BACKWARD_BACKWARD_WARNING_H macro, used to avoid to go through; // backward/backward_warning.h.",MatchSource.CODE_COMMENT,core/dictgen/src/TModuleGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx:404,Safety,avoid,avoid,404,"// Recover old genreflex behaviour, i.e. do not print warnings due to glitches; // in the headers at runtime. This is not synonym of ignoring warnings as they; // will be printed at dictionary generation time.; // In order to do this we leverage the diagnostic pragmas and, since there is no; // way to express as a pragma the option ""-Wno-deprecated"" the; // _BACKWARD_BACKWARD_WARNING_H macro, used to avoid to go through; // backward/backward_warning.h.",MatchSource.CODE_COMMENT,core/dictgen/src/TModuleGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx:169,Modifiability,variab,variables,169,"////////////////////////////////////////////////////////////////////////////////; /// Write a header file describing the content of this module; /// through a series of variables inside the namespace; /// ROOT::Dict::[DictionaryName]. Each variable is an array of string; /// literals, with a const char* of 0 being the last element, e.g.; /// ROOT::Dict::_DictName::arrIncludes[] = { ""A.h"", ""B.h"", 0 };",MatchSource.CODE_COMMENT,core/dictgen/src/TModuleGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx:240,Modifiability,variab,variable,240,"////////////////////////////////////////////////////////////////////////////////; /// Write a header file describing the content of this module; /// through a series of variables inside the namespace; /// ROOT::Dict::[DictionaryName]. Each variable is an array of string; /// literals, with a const char* of 0 being the last element, e.g.; /// ROOT::Dict::_DictName::arrIncludes[] = { ""A.h"", ""B.h"", 0 };",MatchSource.CODE_COMMENT,core/dictgen/src/TModuleGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx:184,Modifiability,variab,variable,184,"////////////////////////////////////////////////////////////////////////////////; /// Return true if the header is found in the include paths; /// in this case also fill the full path variable with the full path.",MatchSource.CODE_COMMENT,core/dictgen/src/TModuleGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/VariableSelectionRule.cxx:28,Modifiability,Variab,VariableSelectionRule,28,"// @(#)root/core/utils:$Id: VariableSelectionRule.cxx 41697 2011-11-01 21:03:41Z pcanal $; // Author: Velislava Spasova September 2010; /*************************************************************************; * Copyright (C) 1995-2011, Rene Brun, Fons Rademakers and al. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // VariableSelectionRule //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/dictgen/src/VariableSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/VariableSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/VariableSelectionRule.cxx:584,Modifiability,Variab,VariableSelectionRule,584,"// @(#)root/core/utils:$Id: VariableSelectionRule.cxx 41697 2011-11-01 21:03:41Z pcanal $; // Author: Velislava Spasova September 2010; /*************************************************************************; * Copyright (C) 1995-2011, Rene Brun, Fons Rademakers and al. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // VariableSelectionRule //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/dictgen/src/VariableSelectionRule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/VariableSelectionRule.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:210,Availability,error,error,210,/*; This function Gets the next tag from teh input file stream; file - the open input stream; out - we return the tag through that parameter; lineCount - we are counting the line numbers here in order to print error messages in case of an error; */,MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:239,Availability,error,error,239,/*; This function Gets the next tag from teh input file stream; file - the open input stream; out - we return the tag through that parameter; lineCount - we are counting the line numbers here in order to print error messages in case of an error; */,MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:216,Integrability,message,messages,216,/*; This function Gets the next tag from teh input file stream; file - the open input stream; out - we return the tag through that parameter; lineCount - we are counting the line numbers here in order to print error messages in case of an error; */,MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:65,Availability,error,error,65,"// if angleBraceLevel = true, we have < outside quotes - this is error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:308,Availability,error,error,308,"/////////////////////////////////////////////////////////////////////////////////////////; /*; We Get the attributes (if any) of the tag as {attribute_name, attribute_value} couples; If there are no attributes, I don't fill the out vector and after that in the Parse(); method check if out is empty. All the error handling conserning attributes is done here; and this is the reason why the logic is somtimes a bit obscure.; */",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:390,Testability,log,logic,390,"/////////////////////////////////////////////////////////////////////////////////////////; /*; We Get the attributes (if any) of the tag as {attribute_name, attribute_value} couples; If there are no attributes, I don't fill the out vector and after that in the Parse(); method check if out is empty. All the error handling conserning attributes is done here; and this is the reason why the logic is somtimes a bit obscure.; */",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:7,Availability,ERROR,ERROR,7,"//ELSE ERROR HANDLING; - no need for it - I check in Parse(); //cut off any last spaces, tabs or end of lines",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:343,Safety,detect,detect,343,"/*; The logic here is the following - we have bool name - it shows if we have read (or are reading) an attribute name; bool equalfound - shows if we have found the = symbol after the name; bool value - shows if we have found or are reading the attribute value; bool newattr - do we have other attributes to read; char lastsymbol - I use it to detect a situation like name = xx""value""; */",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:8,Testability,log,logic,8,"/*; The logic here is the following - we have bool name - it shows if we have read (or are reading) an attribute name; bool equalfound - shows if we have found the = symbol after the name; bool value - shows if we have found or are reading the attribute value; bool newattr - do we have other attributes to read; char lastsymbol - I use it to detect a situation like name = xx""value""; */",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:31,Availability,error,error,31,"// if no name was read, report error (i.e. <class =""x"">)",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:151,Availability,Error,Error,151,"// Lift this: one may had an empty attribute value; // if (attr_value.length() == 0) { // checks if the attribute value is empty; // ROOT::TMetaUtils::Error(0,""Attribute - missing attibute value!\n"");; // return false;; // }; // creates new Attributes object and pushes it back in the vector; // then Sets the variables in the initial state - if there are other attributes to be read; // For the moment the proto pattern is not implemented. The current ROOT6 architecture; // relies on ABI compatibility for calling functions, no stub functions are present.; // The concept of selecting/excluding functions is not defined.; // if (attr_name == ""proto_pattern"") {; // printf(""XMLReader::GetAttributes(): proto_pattern selection not implemented yet!\n"");; // }",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:310,Modifiability,variab,variables,310,"// Lift this: one may had an empty attribute value; // if (attr_value.length() == 0) { // checks if the attribute value is empty; // ROOT::TMetaUtils::Error(0,""Attribute - missing attibute value!\n"");; // return false;; // }; // creates new Attributes object and pushes it back in the vector; // then Sets the variables in the initial state - if there are other attributes to be read; // For the moment the proto pattern is not implemented. The current ROOT6 architecture; // relies on ABI compatibility for calling functions, no stub functions are present.; // The concept of selecting/excluding functions is not defined.; // if (attr_name == ""proto_pattern"") {; // printf(""XMLReader::GetAttributes(): proto_pattern selection not implemented yet!\n"");; // }",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:530,Testability,stub,stub,530,"// Lift this: one may had an empty attribute value; // if (attr_value.length() == 0) { // checks if the attribute value is empty; // ROOT::TMetaUtils::Error(0,""Attribute - missing attibute value!\n"");; // return false;; // }; // creates new Attributes object and pushes it back in the vector; // then Sets the variables in the initial state - if there are other attributes to be read; // For the moment the proto pattern is not implemented. The current ROOT6 architecture; // relies on ABI compatibility for calling functions, no stub functions are present.; // The concept of selecting/excluding functions is not defined.; // if (attr_name == ""proto_pattern"") {; // printf(""XMLReader::GetAttributes(): proto_pattern selection not implemented yet!\n"");; // }",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:213,Availability,error,error,213,"// this is the case in which the symbol is not "", space or = and the last symbol read; // (diferent than space) is =. This is a situation which is represented by for example <class name = x""value"">; // this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:70,Modifiability,variab,variable,70,"// else - if name or newattr is Set, we should write in the attr_name variable",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:45,Modifiability,variab,variable,45,"// if not, we should write in the attr_value variable",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:241,Availability,error,error,241,"//////////////////////////////////////////////////////////////////////////////////////////; /*; This is where the actual work is done - this method parses the XML file tag by tag; and for every tag extracts the atrributes. Here is done some error checking as well -; mostly conserning missing or excessive closing tags, nesting problems, etc.; */",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:2,Usability,Clear,Clear,2,"//Clear the selection rules up to now",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:13,Availability,error,error,13,"//this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:12,Security,access,access,12,"// we could access it through the base class pointer",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:46,Usability,clear,clear,46,"// if this is closing a parent class element, clear the parent information",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:13,Availability,error,error,13,"//this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:13,Availability,error,error,13,"//this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:13,Availability,error,error,13,"//this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:13,Availability,error,error,13,"//this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:98,Availability,error,error,98,"// if we have a <field>, <method> or <properties> tag outside a parent <clas>s tag,; //this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:16,Modifiability,variab,variable,16,"// the field is variable selection rule object",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:98,Availability,error,error,98,"// if we have a <field>, <method> or <properties> tag outside a parent <clas>s tag,; //this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:98,Availability,error,error,98,"// if we have a <field>, <method> or <properties> tag outside a parent <clas>s tag,; //this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:13,Availability,error,error,13,"//this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:13,Availability,error,error,13,"//this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:13,Availability,error,error,13,"//this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:13,Availability,error,error,13,"//this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:13,Availability,error,error,13,"//this is an error",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:11,Safety,sanity check,sanity check,11,"// A first sanity check",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:76,Performance,Cache,Cache,76,"// Loop over the attrs to get the info to build the linkdef-like string; // Cache the name and the value",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:350,Integrability,rout,routine,350,"// save attributes in a map to then format the new line which is of the form; // #pragma read sourceClass=""class1"" targetClass=""class2"" version=""[1-]"" source="""" target=""transient_"" code=""{ newObj->initializeTransientss(); }"";; // where ""#pragma read"" should not appear; // The check for the sanity of the pragma is delegated to the ProcessReadPragma routine",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:623,Availability,Error,Error,623,"// // DEBUG std::cout<<""Is child: "";; // if (inClass){; // if (((tagKind == kClass)) || tagKind == kEndClass) // if this is the same tag as the parent; // // or it is a closing tag, the tag is not a child; // ;// DEBUG std::cout<<""No""<<std::endl;; // // else if tagKind is one of the following, it means that we have a missing </class> tag; // // because these tag kinds cannot be children for a parent <class> tag; // else if (tagKind == kClass || tagKind == kEnum || tagKind == kVariable || tagKind == kFunction ||; // tagKind == kEndSelection || tagKind == kExclusion || tagKind == kEndExclusion){; // ROOT::TMetaUtils::Error(0,""XML at line %s. Missing </class> tag\n"",lineNumCharp);; // out.ClearSelectionRules();; // return false;; // }; // // DEBUG else std::cout<<""Yes""<<std::endl;; // }; // // DEBUG else std::cout<<""No""<<std::endl;",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:695,Usability,Clear,ClearSelectionRules,695,"// // DEBUG std::cout<<""Is child: "";; // if (inClass){; // if (((tagKind == kClass)) || tagKind == kEndClass) // if this is the same tag as the parent; // // or it is a closing tag, the tag is not a child; // ;// DEBUG std::cout<<""No""<<std::endl;; // // else if tagKind is one of the following, it means that we have a missing </class> tag; // // because these tag kinds cannot be children for a parent <class> tag; // else if (tagKind == kClass || tagKind == kEnum || tagKind == kVariable || tagKind == kFunction ||; // tagKind == kEndSelection || tagKind == kExclusion || tagKind == kEndExclusion){; // ROOT::TMetaUtils::Error(0,""XML at line %s. Missing </class> tag\n"",lineNumCharp);; // out.ClearSelectionRules();; // return false;; // }; // // DEBUG else std::cout<<""Yes""<<std::endl;; // }; // // DEBUG else std::cout<<""No""<<std::endl;",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:3,Performance,Cache,Cache,3,"// Cache the name and the value",MatchSource.CODE_COMMENT,core/dictgen/src/XMLReader.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/test/dictgen_base.cxx:11,Performance,perform,perform,11,"// Here we perform these steps:; // Compile macro which has a linkdef section with extra includes; // The extra includes get parsed. They contain a function, f; // The value returned by f is checked to be correct ",MatchSource.CODE_COMMENT,core/dictgen/test/dictgen_base.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/test/dictgen_base.cxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ESTLType.h:32,Integrability,interface,interface,32,/* ROOT type with STL container interface */,MatchSource.CODE_COMMENT,core/foundation/inc/ESTLType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ESTLType.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/RtypesCore.h:46,Modifiability,portab,portable,46,"// Note: Long_t and ULong_t are currently not portable types",MatchSource.CODE_COMMENT,core/foundation/inc/RtypesCore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/RtypesCore.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/RtypesCore.h:2,Modifiability,Portab,Portable,2,"//Portable signed long integer 8 bytes",MatchSource.CODE_COMMENT,core/foundation/inc/RtypesCore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/RtypesCore.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/RtypesCore.h:2,Modifiability,Portab,Portable,2,"//Portable unsigned long integer 8 bytes",MatchSource.CODE_COMMENT,core/foundation/inc/RtypesCore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/RtypesCore.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/RVersion.h:7,Deployability,update,updated,7,/* not updated anymore */,MatchSource.CODE_COMMENT,core/foundation/inc/RVersion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/RVersion.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TClassEdit.h:86,Integrability,depend,dependent,86,"// TClassEdit is used to manipulate class and type names.; //; // This class does not dependent on any other ROOT facility; // so that it can be used by rootcint.",MatchSource.CODE_COMMENT,core/foundation/inc/TClassEdit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TClassEdit.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TClassEdit.h:12,Security,hash,hash,12,/* Drop the hash if applies to the collection */,MatchSource.CODE_COMMENT,core/foundation/inc/TClassEdit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TClassEdit.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TClassEdit.h:17,Modifiability,portab,portable,17,"// Demangle in a portable way the name.; // IMPORTANT: The caller is responsible for freeing the returned const char*",MatchSource.CODE_COMMENT,core/foundation/inc/TClassEdit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TClassEdit.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:86,Availability,Error,Error,86,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:162,Availability,error,error,162,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:205,Availability,Error,Error,205,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:288,Availability,error,error,288,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:401,Availability,error,errorhanlder,401,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:655,Availability,error,error,655,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:480,Deployability,install,installed,480,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:593,Deployability,install,installed,593,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:101,Integrability,rout,routines,101,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:177,Integrability,rout,routines,177,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:457,Safety,safe,safe,457,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:18,Availability,error,error,18,"// TROOT sets the error ignore level handler, the system error message handler, and the error abort handler on; // construction such that the ""Root.ErrorIgnoreLevel"" environment variable is used for the ignore level; // and gSystem is used to generate a stack trace on abort.",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:57,Availability,error,error,57,"// TROOT sets the error ignore level handler, the system error message handler, and the error abort handler on; // construction such that the ""Root.ErrorIgnoreLevel"" environment variable is used for the ignore level; // and gSystem is used to generate a stack trace on abort.",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:88,Availability,error,error,88,"// TROOT sets the error ignore level handler, the system error message handler, and the error abort handler on; // construction such that the ""Root.ErrorIgnoreLevel"" environment variable is used for the ignore level; // and gSystem is used to generate a stack trace on abort.",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:148,Availability,Error,ErrorIgnoreLevel,148,"// TROOT sets the error ignore level handler, the system error message handler, and the error abort handler on; // construction such that the ""Root.ErrorIgnoreLevel"" environment variable is used for the ignore level; // and gSystem is used to generate a stack trace on abort.",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:63,Integrability,message,message,63,"// TROOT sets the error ignore level handler, the system error message handler, and the error abort handler on; // construction such that the ""Root.ErrorIgnoreLevel"" environment variable is used for the ignore level; // and gSystem is used to generate a stack trace on abort.",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:178,Modifiability,variab,variable,178,"// TROOT sets the error ignore level handler, the system error message handler, and the error abort handler on; // construction such that the ""Root.ErrorIgnoreLevel"" environment variable is used for the ignore level; // and gSystem is used to generate a stack trace on abort.",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:94,Safety,abort,abort,94,"// TROOT sets the error ignore level handler, the system error message handler, and the error abort handler on; // construction such that the ""Root.ErrorIgnoreLevel"" environment variable is used for the ignore level; // and gSystem is used to generate a stack trace on abort.",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:269,Safety,abort,abort,269,"// TROOT sets the error ignore level handler, the system error message handler, and the error abort handler on; // construction such that the ""Root.ErrorIgnoreLevel"" environment variable is used for the ignore level; // and gSystem is used to generate a stack trace on abort.",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:18,Availability,error,error,18,"/// Retrieves the error string associated with the last system error.",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:63,Availability,error,error,63,"/// Retrieves the error string associated with the last system error.",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:32,Availability,error,error,32,"/// Returns the previous system error message handler",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:38,Integrability,message,message,38,"/// Returns the previous system error message handler",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:45,Availability,error,error,45,"/*! Checks condition `e` and reports a fatal error if it's false.; * \warning; * - this check is NOT stripped in release mode, so it should not be used for hot paths.; * For those cases, prefer a regular `assert()`;; * - depending on `gErrorIgnoreLevel`, this might not terminate the program, \see ::Fatal.; */",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:113,Deployability,release,release,113,"/*! Checks condition `e` and reports a fatal error if it's false.; * \warning; * - this check is NOT stripped in release mode, so it should not be used for hot paths.; * For those cases, prefer a regular `assert()`;; * - depending on `gErrorIgnoreLevel`, this might not terminate the program, \see ::Fatal.; */",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:221,Integrability,depend,depending,221,"/*! Checks condition `e` and reports a fatal error if it's false.; * \warning; * - this check is NOT stripped in release mode, so it should not be used for hot paths.; * For those cases, prefer a regular `assert()`;; * - depending on `gErrorIgnoreLevel`, this might not terminate the program, \see ::Fatal.; */",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:205,Testability,assert,assert,205,"/*! Checks condition `e` and reports a fatal error if it's false.; * \warning; * - this check is NOT stripped in release mode, so it should not be used for hot paths.; * For those cases, prefer a regular `assert()`;; * - depending on `gErrorIgnoreLevel`, this might not terminate the program, \see ::Fatal.; */",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:112,Deployability,release,release,112,"/*! Checks condition `e` and reports a warning message if it's false.; * \warning this check is NOT stripped in release mode, so it should not be used for hot paths.; */",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:47,Integrability,message,message,47,"/*! Checks condition `e` and reports a warning message if it's false.; * \warning this check is NOT stripped in release mode, so it should not be used for hot paths.; */",MatchSource.CODE_COMMENT,core/foundation/inc/TError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:472,Integrability,depend,depending,472,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:1004,Integrability,depend,depend,1004,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:490,Modifiability,config,configure-set,490,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:509,Modifiability,variab,variables,509,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:735,Modifiability,variab,variables,735,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:870,Modifiability,variab,variables,870,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:60,Performance,Perform,Performance,60,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:856,Security,access,access,856,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:344,Testability,test,test-program,344,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:1553,Usability,simpl,simple,1553,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:1618,Usability,simpl,simple,1618,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:128,Availability,avail,available,128,"// Note that the order is relevant, more than one of the flag might be; // on at the same time and we want to use 'best' option available.",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:3,Availability,Avail,Available,3,"// Available on all platforms; // Neither TTHREAD_TLS_DECL_IMPL and TTHREAD_TLS_INIT; // do not delete the object at the end of the process.",MatchSource.CODE_COMMENT,core/foundation/inc/ThreadLocalStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx:33,Safety,avoid,avoid,33,/* Mechanisms to advise users to avoid legacy functions and classes that will not be removed */,MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RConfig.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx:453,Availability,error,error,453,"/*---- unlikely / likely expressions -----------------------------------------*/; // These are meant to use in cases like:; // if (R__unlikely(expression)) { ... }; // in performance-critical sections. R__unlikely / R__likely provide hints to; // the compiler code generation to heavily optimize one side of a conditional,; // causing the other branch to have a heavy performance cost.; //; // It is best to use this for conditionals that test for rare error cases or; // backward compatibility code.",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RConfig.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx:171,Performance,perform,performance-critical,171,"/*---- unlikely / likely expressions -----------------------------------------*/; // These are meant to use in cases like:; // if (R__unlikely(expression)) { ... }; // in performance-critical sections. R__unlikely / R__likely provide hints to; // the compiler code generation to heavily optimize one side of a conditional,; // causing the other branch to have a heavy performance cost.; //; // It is best to use this for conditionals that test for rare error cases or; // backward compatibility code.",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RConfig.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx:287,Performance,optimiz,optimize,287,"/*---- unlikely / likely expressions -----------------------------------------*/; // These are meant to use in cases like:; // if (R__unlikely(expression)) { ... }; // in performance-critical sections. R__unlikely / R__likely provide hints to; // the compiler code generation to heavily optimize one side of a conditional,; // causing the other branch to have a heavy performance cost.; //; // It is best to use this for conditionals that test for rare error cases or; // backward compatibility code.",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RConfig.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx:368,Performance,perform,performance,368,"/*---- unlikely / likely expressions -----------------------------------------*/; // These are meant to use in cases like:; // if (R__unlikely(expression)) { ... }; // in performance-critical sections. R__unlikely / R__likely provide hints to; // the compiler code generation to heavily optimize one side of a conditional,; // causing the other branch to have a heavy performance cost.; //; // It is best to use this for conditionals that test for rare error cases or; // backward compatibility code.",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RConfig.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx:439,Testability,test,test,439,"/*---- unlikely / likely expressions -----------------------------------------*/; // These are meant to use in cases like:; // if (R__unlikely(expression)) { ... }; // in performance-critical sections. R__unlikely / R__likely provide hints to; // the compiler code generation to heavily optimize one side of a conditional,; // causing the other branch to have a heavy performance cost.; //; // It is best to use this for conditionals that test for rare error cases or; // backward compatibility code.",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RConfig.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:228,Usability,Feedback,Feedback,228,"/// \file ROOT/RLogger.hxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-03-29; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:8,Availability,error,error,8,"///< An error which causes further processing to be unreliable",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:8,Availability,error,error,8,"///< An error",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:19,Integrability,message,messages,19,"///< Informational messages; used for instance for tracing",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:27,Availability,error,errors,27,/**; Keep track of emitted errors and warnings.; */,MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:14,Availability,error,errors,14,"/// Number of errors.",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:20,Availability,error,errors,20,"/// Number of fatal errors.",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:34,Availability,error,errors,34,"/// Returns the current number of errors.",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:40,Availability,error,errors,40,"/// Returns the current number of fatal errors.",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:24,Availability,error,error,24,"/// Increase warning or error count.",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:72,Availability,error,error,72,/**; Abstract RLogHandler base class. ROOT logs everything from info to error; to entities of this class.; */,MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:43,Testability,log,logs,43,/**; Abstract RLogHandler base class. ROOT logs everything from info to error; to entities of this class.; */,MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:185,Performance,concurren,concurrently,185,"/// Emit a log entry.; /// \param entry - the RLogEntry to be emitted.; /// \returns false if further emission of this Log should be suppressed.; ///; /// \note This function is called concurrently; log emission must be locked; /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.)",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:11,Testability,log,log,11,"/// Emit a log entry.; /// \param entry - the RLogEntry to be emitted.; /// \returns false if further emission of this Log should be suppressed.; ///; /// \note This function is called concurrently; log emission must be locked; /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.)",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:119,Testability,Log,Log,119,"/// Emit a log entry.; /// \param entry - the RLogEntry to be emitted.; /// \returns false if further emission of this Log should be suppressed.; ///; /// \note This function is called concurrently; log emission must be locked; /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.)",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:199,Testability,log,log,199,"/// Emit a log entry.; /// \param entry - the RLogEntry to be emitted.; /// \returns false if further emission of this Log should be suppressed.; ///; /// \note This function is called concurrently; log emission must be locked; /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.)",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:256,Testability,log,log,256,"/// Emit a log entry.; /// \param entry - the RLogEntry to be emitted.; /// \returns false if further emission of this Log should be suppressed.; ///; /// \note This function is called concurrently; log emission must be locked; /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.)",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:11,Deployability,configurat,configuration,11,"/**; A log configuration for a channel, e.g. ""RHist"".; Each ROOT module has its own log, with potentially distinct verbosity.; */",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:11,Modifiability,config,configuration,11,"/**; A log configuration for a channel, e.g. ""RHist"".; Each ROOT module has its own log, with potentially distinct verbosity.; */",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:7,Testability,log,log,7,"/**; A log configuration for a channel, e.g. ""RHist"".; Each ROOT module has its own log, with potentially distinct verbosity.; */",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:84,Testability,log,log,84,"/**; A log configuration for a channel, e.g. ""RHist"".; Each ROOT module has its own log, with potentially distinct verbosity.; */",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:16,Testability,log,log,16,"/// Construct a log channel given its name, which is part of the diagnostics.",MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:201,Testability,log,log,201,/**; A RLogHandler that multiplexes diagnostics to different client `RLogHandler`s; and keeps track of the sum of `RLogDiagCount`s for all channels. `RLogHandler::Get()` returns the process's (static) log manager.; */,MatchSource.CODE_COMMENT,core/foundation/inc/ROOT/RLogger.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx
