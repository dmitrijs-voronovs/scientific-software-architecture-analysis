id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/issues/1496#issuecomment-465437366:24,Deployability,install,installer,24,"* when publishing a new installer page, move the ""latest"" alias https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md to the new page so that ""Downloads"" on the naviagtion bar points there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-465437366
https://github.com/psi4/psi4/issues/1496#issuecomment-465437366:129,Deployability,install,installs,129,"* when publishing a new installer page, move the ""latest"" alias https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md to the new page so that ""Downloads"" on the naviagtion bar points there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-465437366
https://github.com/psi4/psi4/issues/1496#issuecomment-468092980:85,Deployability,update,updated,85,"* in final pass before tag, check that `external/` repos and commits match have been updated from conda recipes sources. also check versions with conda_build_config.yaml; * check introduction.rst for any compiler and python min requirements to edit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468092980
https://github.com/psi4/psi4/issues/1496#issuecomment-468415517:10,Deployability,release,release,10,"For final release:. ### Repo/GH state. * follow tagging procedure; * before reengaing the ""include admin"" button, push a branch at the tag commit (not the records commit). ```; >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x; ```. * set up new branch as protected branch. ### conda stage. * edit and switch to specific `git_tag` instead of `master` for psi4-multiout (L&M) and psi4-docs (L); * in `ltrtver` in `conda_build_config.yaml`, make a new non-dev line (probably a ditto)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468415517
https://github.com/psi4/psi4/issues/1496#issuecomment-468415517:185,Testability,log,log,185,"For final release:. ### Repo/GH state. * follow tagging procedure; * before reengaing the ""include admin"" button, push a branch at the tag commit (not the records commit). ```; >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x; ```. * set up new branch as protected branch. ### conda stage. * edit and switch to specific `git_tag` instead of `master` for psi4-multiout (L&M) and psi4-docs (L); * in `ltrtver` in `conda_build_config.yaml`, make a new non-dev line (probably a ditto)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468415517
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:1243,Availability,down,downloaded,1243,"nel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * worth downloading at least one L and M and installing it and r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:2198,Availability,down,downloading,2198,". may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * worth downloading at least one L and M and installing it and running tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:62,Deployability,configurat,configuration,62,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:525,Deployability,install,install,525,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:596,Deployability,install,install,596,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:936,Deployability,release,release,936,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:2235,Deployability,install,installing,2235,". may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * worth downloading at least one L and M and installing it and running tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:62,Modifiability,config,configuration,62,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:944,Security,hash,hash,944,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:2143,Testability,log,log,2143,". may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * worth downloading at least one L and M and installing it and running tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:2261,Testability,test,tests,2261,". may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * worth downloading at least one L and M and installing it and running tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:280,Usability,clear,clear,280,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:1202,Usability,clear,clear,1202," Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:1395,Usability,clear,clear,1395,". may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * worth downloading at least one L and M and installing it and running tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372
https://github.com/psi4/psi4/issues/1496#issuecomment-468650036:13,Availability,down,download,13,"* generating download site directions above; * shift alias to new installs/content file; * NYI commit new files, PR, and upload site. * On GH site ""Draft a New Release"". * grab the 1.3 manual by `cp -pR master 1.3` on godaddy; * NYI adjust the front-matter tags. ## reset; * NYI new ltrt line; * NYI psi4-multi and psi4-docs back to master; * NYI turn off anom and go back to norm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468650036
https://github.com/psi4/psi4/issues/1496#issuecomment-468650036:66,Deployability,install,installs,66,"* generating download site directions above; * shift alias to new installs/content file; * NYI commit new files, PR, and upload site. * On GH site ""Draft a New Release"". * grab the 1.3 manual by `cp -pR master 1.3` on godaddy; * NYI adjust the front-matter tags. ## reset; * NYI new ltrt line; * NYI psi4-multi and psi4-docs back to master; * NYI turn off anom and go back to norm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468650036
https://github.com/psi4/psi4/issues/1496#issuecomment-468650036:160,Deployability,Release,Release,160,"* generating download site directions above; * shift alias to new installs/content file; * NYI commit new files, PR, and upload site. * On GH site ""Draft a New Release"". * grab the 1.3 manual by `cp -pR master 1.3` on godaddy; * NYI adjust the front-matter tags. ## reset; * NYI new ltrt line; * NYI psi4-multi and psi4-docs back to master; * NYI turn off anom and go back to norm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468650036
https://github.com/psi4/psi4/issues/1496#issuecomment-468798867:24,Deployability,release,release,24,"* edit RN and ""publish"" release. this establishes release data for GH api; * close off RN issue; * before stack build, consider max pinnings on deps, particularly any fast-moving deps (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; * check in all release, constructor recipe changes on L/M. synchronize both to psi4meta; * reset for normal operation; * new ltrtver with new release.dev label; * names back to master for psi4-multiout, psi4-docs; * build string back to 0 if psi4-multiout needed multiple passes; * poodle back to `***` stack; * crontab back to 2am ""norm"". comment out ""anom"". * new PR with edits to main README badges, py, etc; * tweet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468798867
https://github.com/psi4/psi4/issues/1496#issuecomment-468798867:50,Deployability,release,release,50,"* edit RN and ""publish"" release. this establishes release data for GH api; * close off RN issue; * before stack build, consider max pinnings on deps, particularly any fast-moving deps (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; * check in all release, constructor recipe changes on L/M. synchronize both to psi4meta; * reset for normal operation; * new ltrtver with new release.dev label; * names back to master for psi4-multiout, psi4-docs; * build string back to 0 if psi4-multiout needed multiple passes; * poodle back to `***` stack; * crontab back to 2am ""norm"". comment out ""anom"". * new PR with edits to main README badges, py, etc; * tweet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468798867
https://github.com/psi4/psi4/issues/1496#issuecomment-468798867:291,Deployability,release,release,291,"* edit RN and ""publish"" release. this establishes release data for GH api; * close off RN issue; * before stack build, consider max pinnings on deps, particularly any fast-moving deps (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; * check in all release, constructor recipe changes on L/M. synchronize both to psi4meta; * reset for normal operation; * new ltrtver with new release.dev label; * names back to master for psi4-multiout, psi4-docs; * build string back to 0 if psi4-multiout needed multiple passes; * poodle back to `***` stack; * crontab back to 2am ""norm"". comment out ""anom"". * new PR with edits to main README badges, py, etc; * tweet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468798867
https://github.com/psi4/psi4/issues/1496#issuecomment-468798867:418,Deployability,release,release,418,"* edit RN and ""publish"" release. this establishes release data for GH api; * close off RN issue; * before stack build, consider max pinnings on deps, particularly any fast-moving deps (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; * check in all release, constructor recipe changes on L/M. synchronize both to psi4meta; * reset for normal operation; * new ltrtver with new release.dev label; * names back to master for psi4-multiout, psi4-docs; * build string back to 0 if psi4-multiout needed multiple passes; * poodle back to `***` stack; * crontab back to 2am ""norm"". comment out ""anom"". * new PR with edits to main README badges, py, etc; * tweet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468798867
https://github.com/psi4/psi4/issues/1496#issuecomment-468798867:335,Integrability,synchroniz,synchronize,335,"* edit RN and ""publish"" release. this establishes release data for GH api; * close off RN issue; * before stack build, consider max pinnings on deps, particularly any fast-moving deps (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; * check in all release, constructor recipe changes on L/M. synchronize both to psi4meta; * reset for normal operation; * new ltrtver with new release.dev label; * names back to master for psi4-multiout, psi4-docs; * build string back to 0 if psi4-multiout needed multiple passes; * poodle back to `***` stack; * crontab back to 2am ""norm"". comment out ""anom"". * new PR with edits to main README badges, py, etc; * tweet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468798867
https://github.com/psi4/psi4/issues/1497#issuecomment-869221610:331,Usability,clear,clear,331,"> The situation is even worse now: atomic SAD doesn't converge for the last system. :(. but libecpint is still not used. Also, the SAD code isn't really tailored for ECPs... I'm hoping to come up with a Python library for e.g. forming SAD guesses with proper symmetry (which is missing in Psi4), but this is on hold since it's not clear whether the MolSSI's funding will be renewed..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1497#issuecomment-869221610
https://github.com/psi4/psi4/issues/1497#issuecomment-869222419:15,Deployability,update,update,15,"Thanks for the update. Since this isn't a bug with ECPs so much as _the code not expecting ECPs at all, and we need to decide whether to adopt a Python library for this_, re-tagged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1497#issuecomment-869222419
https://github.com/psi4/psi4/pull/1498#issuecomment-461731043:31,Testability,test,testing,31,"branch could use a rebase, but testing looks sound -- full ctest and pytest clean.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1498#issuecomment-461731043
https://github.com/psi4/psi4/pull/1498#issuecomment-461740679:33,Testability,test,testing,33,"> branch could use a rebase, but testing looks sound -- full ctest and pytest clean. Rebased as requested",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1498#issuecomment-461740679
https://github.com/psi4/psi4/pull/1499#issuecomment-457966230:289,Usability,simpl,simpler,289,"The timings were with the direct algorithm, although it looks like this will speed up PK too. Unfortunately CSAM only works for 4-index integrals; there's much less literature on screening with density fitting. On the bright side, CSAM outperforms QQR according to the paper (and is a lot simpler to implement), so that code might not need to be fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-457966230
https://github.com/psi4/psi4/pull/1499#issuecomment-457966565:156,Integrability,contract,contractions,156,"Density fitting can ""look"" like a 4-index integral as `(0p|qr)` which is how we compute them. CASM-style screening is unlikely to be able to be used in the contractions as it would make the GEMM's sparse rather than dense; however, the construction of the integrals can take some time and can benefit from this screening. The impact may be less, but still a useful thing to do!. Note: I am not proposing that you do this, just something to keep in mind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-457966565
https://github.com/psi4/psi4/pull/1499#issuecomment-458518083:180,Energy Efficiency,efficient,efficient,180,"Also, Psi4 is probably not going to get much help from the additional screening, since IIRC range-separated functionals aren't evaluated using the short-range kernel that leads to efficient screening, but the long-range kernels that **don't** become sparse even the exchange is very short-range. :disappointed:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-458518083
https://github.com/psi4/psi4/pull/1499#issuecomment-497102724:122,Security,access,accessing,122,"> LGTM, awesome python side testing!; > ; > Do we have a plan to add this keyword to globals so that Psi4 users can start accessing this screening?. Would adding a global, user-specified boolean (something like `CSAM_SCREENING`, default false) be the best way to do this? It could be accessed by the JK object, much like `INTS_TOLERANCE` already is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497102724
https://github.com/psi4/psi4/pull/1499#issuecomment-497102724:284,Security,access,accessed,284,"> LGTM, awesome python side testing!; > ; > Do we have a plan to add this keyword to globals so that Psi4 users can start accessing this screening?. Would adding a global, user-specified boolean (something like `CSAM_SCREENING`, default false) be the best way to do this? It could be accessed by the JK object, much like `INTS_TOLERANCE` already is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497102724
https://github.com/psi4/psi4/pull/1499#issuecomment-497102724:28,Testability,test,testing,28,"> LGTM, awesome python side testing!; > ; > Do we have a plan to add this keyword to globals so that Psi4 users can start accessing this screening?. Would adding a global, user-specified boolean (something like `CSAM_SCREENING`, default false) be the best way to do this? It could be accessed by the JK object, much like `INTS_TOLERANCE` already is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497102724
https://github.com/psi4/psi4/pull/1499#issuecomment-497372547:127,Testability,test,test,127,I added a global `SCREENING` that can either be `SCHWARZ` or `CSAM` and is recognized by the JK objects. There's also an extra test to compare scf energies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497372547
https://github.com/psi4/psi4/pull/1499#issuecomment-497374062:194,Testability,test,test,194,Thanks much. I think it should be `INTS_SCREENING` but no use running CI again for that minor change. I'm trying to collect opinions on when should be turned on but RTG imo. Have you run a full test suite with `SCREENING=CSAM`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497374062
https://github.com/psi4/psi4/pull/1499#issuecomment-497381460:128,Energy Efficiency,efficient,efficiently,128,How much work would be involved in switching from use of long-range exchange to short-range exchange which can be screened more efficiently?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497381460
https://github.com/psi4/psi4/pull/1499#issuecomment-497468619:495,Energy Efficiency,efficient,efficient,495,"@zachglick this is just about how you calculate a range-separated functional. The point is that when you have a functional that has A% exact exchange at the short-range and B% exact exchange in the long-range, you can evaluate it either as B% full Hartree-Fock exchange and (A-B)% short-range exchange, or as A% full Hartree-Fock exchange and (B-A)% long-range exchange. Psi4 is currently doing it the latter way. My intuition is that the former way of using short-range integrals would be more efficient for screening, since fewer terms can contribute at the short range and the more numerous long-range terms are killed by the range separation, but it might also be that since exchange integrals die off more rapidly in the long range than Coulomb integrals, the evaluating the long-range part is faster than the short-range part. Of course, if you have both long- and short-range exchange, then you anyway have to evaluate the full exact exchange and the speedup isn't going to be mind-blowing. But, some functionals like HSE are short-range-only, and there it might make a difference if you don't have to evaluate the long-range part at all. I guess the optimal implementation would include both and pick on a case by case basis: e.g. if you only have short-range exchange, then just do the short-range part and skip the full exact exchange.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497468619
https://github.com/psi4/psi4/pull/1499#issuecomment-497468619:417,Usability,intuit,intuition,417,"@zachglick this is just about how you calculate a range-separated functional. The point is that when you have a functional that has A% exact exchange at the short-range and B% exact exchange in the long-range, you can evaluate it either as B% full Hartree-Fock exchange and (A-B)% short-range exchange, or as A% full Hartree-Fock exchange and (B-A)% long-range exchange. Psi4 is currently doing it the latter way. My intuition is that the former way of using short-range integrals would be more efficient for screening, since fewer terms can contribute at the short range and the more numerous long-range terms are killed by the range separation, but it might also be that since exchange integrals die off more rapidly in the long range than Coulomb integrals, the evaluating the long-range part is faster than the short-range part. Of course, if you have both long- and short-range exchange, then you anyway have to evaluate the full exact exchange and the speedup isn't going to be mind-blowing. But, some functionals like HSE are short-range-only, and there it might make a difference if you don't have to evaluate the long-range part at all. I guess the optimal implementation would include both and pick on a case by case basis: e.g. if you only have short-range exchange, then just do the short-range part and skip the full exact exchange.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497468619
https://github.com/psi4/psi4/issues/1501#issuecomment-458640727:675,Energy Efficiency,energy,energy,675,"Some more information:; As I said above, for H2O the orbital energies and coeffcients are printed out in the FCHK file, but the field headers are not standard. They are:. - orbital energies ; - MO coefficients. This is not the case for Psi4 1.1 where these headers are; - Alpha Orbital Energies; - Alpha MO coefficients. Why was this change made? . Input file below:. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule H2O_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 0.0 0.0 0.1246319249; > H1 -1.4536519623 0.0 -0.9970553993; > H2 1.4536519623 0.0 -0.9970553993; > }; > set {; > s_tolerance 1.0E-08; > ints_tolerance 1.0E-10; > }; > ; > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('H2O_minimal.fchk')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1501#issuecomment-458640727
https://github.com/psi4/psi4/issues/1501#issuecomment-458640727:689,Energy Efficiency,energy,energy,689,"Some more information:; As I said above, for H2O the orbital energies and coeffcients are printed out in the FCHK file, but the field headers are not standard. They are:. - orbital energies ; - MO coefficients. This is not the case for Psi4 1.1 where these headers are; - Alpha Orbital Energies; - Alpha MO coefficients. Why was this change made? . Input file below:. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule H2O_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 0.0 0.0 0.1246319249; > H1 -1.4536519623 0.0 -0.9970553993; > H2 1.4536519623 0.0 -0.9970553993; > }; > set {; > s_tolerance 1.0E-08; > ints_tolerance 1.0E-10; > }; > ; > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('H2O_minimal.fchk')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1501#issuecomment-458640727
https://github.com/psi4/psi4/issues/1501#issuecomment-458647273:24,Availability,down,download,24,"Well, an easy way is to download the patch; https://github.com/psi4/psi4/pull/1475.patch; and apply it on top of master. The alternative would be to git pull from my branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1501#issuecomment-458647273
https://github.com/psi4/psi4/issues/1501#issuecomment-458647273:37,Deployability,patch,patch,37,"Well, an easy way is to download the patch; https://github.com/psi4/psi4/pull/1475.patch; and apply it on top of master. The alternative would be to git pull from my branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1501#issuecomment-458647273
https://github.com/psi4/psi4/issues/1501#issuecomment-458647273:83,Deployability,patch,patch,83,"Well, an easy way is to download the patch; https://github.com/psi4/psi4/pull/1475.patch; and apply it on top of master. The alternative would be to git pull from my branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1501#issuecomment-458647273
https://github.com/psi4/psi4/issues/1501#issuecomment-459017163:24,Testability,test,tested,24,Thanks a lot. I've just tested your version on both TNB and H2O and both work. I hope you will commit it to the master. ; All the best.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1501#issuecomment-459017163
https://github.com/psi4/psi4/issues/1503#issuecomment-461156624:218,Modifiability,variab,variable,218,"After some discussion with Lori and Zach as well as digging through the code and running tests, we saw that psi4 is running PK as asked. The issue of printing . ```; @DF-ROHF; ```. Is a result of psi4 getting a global variable for the printout whereas the user has chosen the PK option through a local variable. I am told by Lori that Psi4 is moving away from local options, but that a number of users wish to keep the ability to ""hack the SCF by setting local variables."" We could change the code by getting a local variable to print, but that would run against recent design changes. . To get the correct output, it's recommended that the options be set as . ```; set {; scf_type PK; other_key other_option; }; ```. Instead of. ```; set scf {; scf_type PK; other_key other_option; }; ```. I hope that helps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1503#issuecomment-461156624
https://github.com/psi4/psi4/issues/1503#issuecomment-461156624:302,Modifiability,variab,variable,302,"After some discussion with Lori and Zach as well as digging through the code and running tests, we saw that psi4 is running PK as asked. The issue of printing . ```; @DF-ROHF; ```. Is a result of psi4 getting a global variable for the printout whereas the user has chosen the PK option through a local variable. I am told by Lori that Psi4 is moving away from local options, but that a number of users wish to keep the ability to ""hack the SCF by setting local variables."" We could change the code by getting a local variable to print, but that would run against recent design changes. . To get the correct output, it's recommended that the options be set as . ```; set {; scf_type PK; other_key other_option; }; ```. Instead of. ```; set scf {; scf_type PK; other_key other_option; }; ```. I hope that helps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1503#issuecomment-461156624
https://github.com/psi4/psi4/issues/1503#issuecomment-461156624:461,Modifiability,variab,variables,461,"After some discussion with Lori and Zach as well as digging through the code and running tests, we saw that psi4 is running PK as asked. The issue of printing . ```; @DF-ROHF; ```. Is a result of psi4 getting a global variable for the printout whereas the user has chosen the PK option through a local variable. I am told by Lori that Psi4 is moving away from local options, but that a number of users wish to keep the ability to ""hack the SCF by setting local variables."" We could change the code by getting a local variable to print, but that would run against recent design changes. . To get the correct output, it's recommended that the options be set as . ```; set {; scf_type PK; other_key other_option; }; ```. Instead of. ```; set scf {; scf_type PK; other_key other_option; }; ```. I hope that helps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1503#issuecomment-461156624
https://github.com/psi4/psi4/issues/1503#issuecomment-461156624:517,Modifiability,variab,variable,517,"After some discussion with Lori and Zach as well as digging through the code and running tests, we saw that psi4 is running PK as asked. The issue of printing . ```; @DF-ROHF; ```. Is a result of psi4 getting a global variable for the printout whereas the user has chosen the PK option through a local variable. I am told by Lori that Psi4 is moving away from local options, but that a number of users wish to keep the ability to ""hack the SCF by setting local variables."" We could change the code by getting a local variable to print, but that would run against recent design changes. . To get the correct output, it's recommended that the options be set as . ```; set {; scf_type PK; other_key other_option; }; ```. Instead of. ```; set scf {; scf_type PK; other_key other_option; }; ```. I hope that helps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1503#issuecomment-461156624
https://github.com/psi4/psi4/issues/1503#issuecomment-461156624:89,Testability,test,tests,89,"After some discussion with Lori and Zach as well as digging through the code and running tests, we saw that psi4 is running PK as asked. The issue of printing . ```; @DF-ROHF; ```. Is a result of psi4 getting a global variable for the printout whereas the user has chosen the PK option through a local variable. I am told by Lori that Psi4 is moving away from local options, but that a number of users wish to keep the ability to ""hack the SCF by setting local variables."" We could change the code by getting a local variable to print, but that would run against recent design changes. . To get the correct output, it's recommended that the options be set as . ```; set {; scf_type PK; other_key other_option; }; ```. Instead of. ```; set scf {; scf_type PK; other_key other_option; }; ```. I hope that helps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1503#issuecomment-461156624
https://github.com/psi4/psi4/issues/1504#issuecomment-458993782:1034,Availability,error,errors,1034,"time that there seems to be some little; symmetry-breaking noise in nearly all Psi4 gradients, and I have not taken; the time to follow up on it. It puzzles me, because we never saw stuff; like this in Psi3... those gradients were already symmetric and did not; need a ""symmetrize"" function to be called.... The only part of Psi that; I've checked that seems immune to this problem is Daniel Crawford's CC; gradients, which are perfectly symmetric. On Wed, Jan 30, 2019 at 10:40 AM Jonathon Misiewicz <; notifications@github.com> wrote:. > Discovered while remedying test cases where reference numbers needed to be; > changed due to my upcoming #1143; > <https://github.com/psi4/psi4/issues/1143> fix. DFOCC gradients are not; > symmetrized. If you'd like an example, just look in the reference output; > files; > <https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604>!; > Symmetry of the overlap gradient is broken in the seventh decimal place.; > The other terms have some errors, but much smaller. That the overlap; > gradient is most afflicted is unsurprising, since the overlap integrals are; > contracted against one of the many ""generalized Fock matrices"". This one; > depends on the 1RDM and 2RDM, which are not currently symmetrized.; >; > I'm hoping to include this in 1.3 with the #1143; > <https://github.com/psi4/psi4/issues/1143> fix, since this bug could lead; > to optimizations failing, as we saw with DFMP2 two weeks ago (#1483; > <https://github.com/psi4/psi4/pull/1483>). Because individual terms are; > printed, the individual terms need to be symmetrized, and it may take me; > some time to find where the symmetrize calls need to be placed. If it; > takes too long, I'm fine with delaying to 1.4.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1504>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782
https://github.com/psi4/psi4/issues/1504#issuecomment-458993782:1159,Integrability,contract,contracted,1159,"g noise in nearly all Psi4 gradients, and I have not taken; the time to follow up on it. It puzzles me, because we never saw stuff; like this in Psi3... those gradients were already symmetric and did not; need a ""symmetrize"" function to be called.... The only part of Psi that; I've checked that seems immune to this problem is Daniel Crawford's CC; gradients, which are perfectly symmetric. On Wed, Jan 30, 2019 at 10:40 AM Jonathon Misiewicz <; notifications@github.com> wrote:. > Discovered while remedying test cases where reference numbers needed to be; > changed due to my upcoming #1143; > <https://github.com/psi4/psi4/issues/1143> fix. DFOCC gradients are not; > symmetrized. If you'd like an example, just look in the reference output; > files; > <https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604>!; > Symmetry of the overlap gradient is broken in the seventh decimal place.; > The other terms have some errors, but much smaller. That the overlap; > gradient is most afflicted is unsurprising, since the overlap integrals are; > contracted against one of the many ""generalized Fock matrices"". This one; > depends on the 1RDM and 2RDM, which are not currently symmetrized.; >; > I'm hoping to include this in 1.3 with the #1143; > <https://github.com/psi4/psi4/issues/1143> fix, since this bug could lead; > to optimizations failing, as we saw with DFMP2 two weeks ago (#1483; > <https://github.com/psi4/psi4/pull/1483>). Because individual terms are; > printed, the individual terms need to be symmetrized, and it may take me; > some time to find where the symmetrize calls need to be placed. If it; > takes too long, I'm fine with delaying to 1.4.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1504>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdjLHuk3Pa0yVJNLncI2ChdXedn-Rks5vIbzcgaJpZM4aad4X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782
https://github.com/psi4/psi4/issues/1504#issuecomment-458993782:1235,Integrability,depend,depends,1235,"g noise in nearly all Psi4 gradients, and I have not taken; the time to follow up on it. It puzzles me, because we never saw stuff; like this in Psi3... those gradients were already symmetric and did not; need a ""symmetrize"" function to be called.... The only part of Psi that; I've checked that seems immune to this problem is Daniel Crawford's CC; gradients, which are perfectly symmetric. On Wed, Jan 30, 2019 at 10:40 AM Jonathon Misiewicz <; notifications@github.com> wrote:. > Discovered while remedying test cases where reference numbers needed to be; > changed due to my upcoming #1143; > <https://github.com/psi4/psi4/issues/1143> fix. DFOCC gradients are not; > symmetrized. If you'd like an example, just look in the reference output; > files; > <https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604>!; > Symmetry of the overlap gradient is broken in the seventh decimal place.; > The other terms have some errors, but much smaller. That the overlap; > gradient is most afflicted is unsurprising, since the overlap integrals are; > contracted against one of the many ""generalized Fock matrices"". This one; > depends on the 1RDM and 2RDM, which are not currently symmetrized.; >; > I'm hoping to include this in 1.3 with the #1143; > <https://github.com/psi4/psi4/issues/1143> fix, since this bug could lead; > to optimizations failing, as we saw with DFMP2 two weeks ago (#1483; > <https://github.com/psi4/psi4/pull/1483>). Because individual terms are; > printed, the individual terms need to be symmetrized, and it may take me; > some time to find where the symmetrize calls need to be placed. If it; > takes too long, I'm fine with delaying to 1.4.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1504>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdjLHuk3Pa0yVJNLncI2ChdXedn-Rks5vIbzcgaJpZM4aad4X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782
https://github.com/psi4/psi4/issues/1504#issuecomment-458993782:1440,Performance,optimiz,optimizations,1440,"g noise in nearly all Psi4 gradients, and I have not taken; the time to follow up on it. It puzzles me, because we never saw stuff; like this in Psi3... those gradients were already symmetric and did not; need a ""symmetrize"" function to be called.... The only part of Psi that; I've checked that seems immune to this problem is Daniel Crawford's CC; gradients, which are perfectly symmetric. On Wed, Jan 30, 2019 at 10:40 AM Jonathon Misiewicz <; notifications@github.com> wrote:. > Discovered while remedying test cases where reference numbers needed to be; > changed due to my upcoming #1143; > <https://github.com/psi4/psi4/issues/1143> fix. DFOCC gradients are not; > symmetrized. If you'd like an example, just look in the reference output; > files; > <https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604>!; > Symmetry of the overlap gradient is broken in the seventh decimal place.; > The other terms have some errors, but much smaller. That the overlap; > gradient is most afflicted is unsurprising, since the overlap integrals are; > contracted against one of the many ""generalized Fock matrices"". This one; > depends on the 1RDM and 2RDM, which are not currently symmetrized.; >; > I'm hoping to include this in 1.3 with the #1143; > <https://github.com/psi4/psi4/issues/1143> fix, since this bug could lead; > to optimizations failing, as we saw with DFMP2 two weeks ago (#1483; > <https://github.com/psi4/psi4/pull/1483>). Because individual terms are; > printed, the individual terms need to be symmetrized, and it may take me; > some time to find where the symmetrize calls need to be placed. If it; > takes too long, I'm fine with delaying to 1.4.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1504>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdjLHuk3Pa0yVJNLncI2ChdXedn-Rks5vIbzcgaJpZM4aad4X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782
https://github.com/psi4/psi4/issues/1504#issuecomment-458993782:598,Testability,test,test,598,"I have been concerned for some time that there seems to be some little; symmetry-breaking noise in nearly all Psi4 gradients, and I have not taken; the time to follow up on it. It puzzles me, because we never saw stuff; like this in Psi3... those gradients were already symmetric and did not; need a ""symmetrize"" function to be called.... The only part of Psi that; I've checked that seems immune to this problem is Daniel Crawford's CC; gradients, which are perfectly symmetric. On Wed, Jan 30, 2019 at 10:40 AM Jonathon Misiewicz <; notifications@github.com> wrote:. > Discovered while remedying test cases where reference numbers needed to be; > changed due to my upcoming #1143; > <https://github.com/psi4/psi4/issues/1143> fix. DFOCC gradients are not; > symmetrized. If you'd like an example, just look in the reference output; > files; > <https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604>!; > Symmetry of the overlap gradient is broken in the seventh decimal place.; > The other terms have some errors, but much smaller. That the overlap; > gradient is most afflicted is unsurprising, since the overlap integrals are; > contracted against one of the many ""generalized Fock matrices"". This one; > depends on the 1RDM and 2RDM, which are not currently symmetrized.; >; > I'm hoping to include this in 1.3 with the #1143; > <https://github.com/psi4/psi4/issues/1143> fix, since this bug could lead; > to optimizations failing, as we saw with DFMP2 two weeks ago (#1483; > <https://github.com/psi4/psi4/pull/1483>). Because individual terms are; > printed, the individual terms need to be symmetrized, and it may take me; > some time to find where the symmetrize calls need to be placed. If it; > takes too long, I'm fine with delaying to 1.4.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1504>, or mute the thread; > <https://github.com/notif",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782
https://github.com/psi4/psi4/issues/1504#issuecomment-458993782:887,Testability,test,tests,887,"I have been concerned for some time that there seems to be some little; symmetry-breaking noise in nearly all Psi4 gradients, and I have not taken; the time to follow up on it. It puzzles me, because we never saw stuff; like this in Psi3... those gradients were already symmetric and did not; need a ""symmetrize"" function to be called.... The only part of Psi that; I've checked that seems immune to this problem is Daniel Crawford's CC; gradients, which are perfectly symmetric. On Wed, Jan 30, 2019 at 10:40 AM Jonathon Misiewicz <; notifications@github.com> wrote:. > Discovered while remedying test cases where reference numbers needed to be; > changed due to my upcoming #1143; > <https://github.com/psi4/psi4/issues/1143> fix. DFOCC gradients are not; > symmetrized. If you'd like an example, just look in the reference output; > files; > <https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604>!; > Symmetry of the overlap gradient is broken in the seventh decimal place.; > The other terms have some errors, but much smaller. That the overlap; > gradient is most afflicted is unsurprising, since the overlap integrals are; > contracted against one of the many ""generalized Fock matrices"". This one; > depends on the 1RDM and 2RDM, which are not currently symmetrized.; >; > I'm hoping to include this in 1.3 with the #1143; > <https://github.com/psi4/psi4/issues/1143> fix, since this bug could lead; > to optimizations failing, as we saw with DFMP2 two weeks ago (#1483; > <https://github.com/psi4/psi4/pull/1483>). Because individual terms are; > printed, the individual terms need to be symmetrized, and it may take me; > some time to find where the symmetrize calls need to be placed. If it; > takes too long, I'm fine with delaying to 1.4.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1504>, or mute the thread; > <https://github.com/notif",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782
https://github.com/psi4/psi4/issues/1504#issuecomment-459002869:605,Energy Efficiency,power,power,605,"@CDSherrill - I don't think the noise in the gradients is a problem. Psi3 routed all gradient computations through `cints`, which symmetrizes everything automagically in `src/bin/cints/Default_Deriv1/symmetrize_deriv1.cc`, which is called from `src/bin/cints/Default_Deriv1/deriv1.cc` . @JonathonMisiewicz - the fix that I put in for DF-MP2 doesn't symmetrize the individual components of the gradient. Only the total. I didn't bother with the components just because they're only really for debugging and aren't printed by default. I guess they probably should be symmetrized if they're printed out by a power user though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459002869
https://github.com/psi4/psi4/issues/1504#issuecomment-459002869:74,Integrability,rout,routed,74,"@CDSherrill - I don't think the noise in the gradients is a problem. Psi3 routed all gradient computations through `cints`, which symmetrizes everything automagically in `src/bin/cints/Default_Deriv1/symmetrize_deriv1.cc`, which is called from `src/bin/cints/Default_Deriv1/deriv1.cc` . @JonathonMisiewicz - the fix that I put in for DF-MP2 doesn't symmetrize the individual components of the gradient. Only the total. I didn't bother with the components just because they're only really for debugging and aren't printed by default. I guess they probably should be symmetrized if they're printed out by a power user though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459002869
https://github.com/psi4/psi4/issues/1504#issuecomment-459012061:140,Energy Efficiency,adapt,adapted,140,"I forgot a rather important detail - when DFOCC says it is running all further computations in C1 symmetry, it does not just mean that spin-adapted orbitals won't be used. It even creates a C1 clone of the molecule. The `symmetrize_gradient` call symmetrizes to the C1 symmetry of the clone, not the symmetry of the molecule that went into the `gradient` call. As long as that symmetry-less molecule clone is used internally, I don't see how a fix for the issue would be possible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459012061
https://github.com/psi4/psi4/issues/1504#issuecomment-459012061:140,Modifiability,adapt,adapted,140,"I forgot a rather important detail - when DFOCC says it is running all further computations in C1 symmetry, it does not just mean that spin-adapted orbitals won't be used. It even creates a C1 clone of the molecule. The `symmetrize_gradient` call symmetrizes to the C1 symmetry of the clone, not the symmetry of the molecule that went into the `gradient` call. As long as that symmetry-less molecule clone is used internally, I don't see how a fix for the issue would be possible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459012061
https://github.com/psi4/psi4/issues/1504#issuecomment-459074235:306,Security,access,access,306,"Correct, I need to symmetrize individual intermediates in the gradient expression that get printed. Now that you mention it, I think moving more of the driver portion of DFOCC Py-side is the way to go. All I'd need to move is `dfgrad.cc` into `proc.py:run_dfocc_gradient`. `proc.py:run_dfocc_gradient` has access to the input molecule, so it can `symmetrize_gradient` correctly. Does this sound good? It may need to be its own PR, separate from the 1143 fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459074235
https://github.com/psi4/psi4/issues/1509#issuecomment-459946532:368,Deployability,update,update,368,"Dear Jonathon,. The idea is that ones orbitals are optimized there is no need to rotate MOs further. Hence, just semi-canolicalize MOs and compute energies. However, after original implementation there has been lot of revisions in convergence criteria. I think during these modifications the equality of Lagrangian and usual energy is somewhat slightly broken. I will update DFOCC module in this week and push it to Lori's repo. During this update I will fix this issue. @JonathonMisiewicz . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532
https://github.com/psi4/psi4/issues/1509#issuecomment-459946532:441,Deployability,update,update,441,"Dear Jonathon,. The idea is that ones orbitals are optimized there is no need to rotate MOs further. Hence, just semi-canolicalize MOs and compute energies. However, after original implementation there has been lot of revisions in convergence criteria. I think during these modifications the equality of Lagrangian and usual energy is somewhat slightly broken. I will update DFOCC module in this week and push it to Lori's repo. During this update I will fix this issue. @JonathonMisiewicz . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532
https://github.com/psi4/psi4/issues/1509#issuecomment-459946532:325,Energy Efficiency,energy,energy,325,"Dear Jonathon,. The idea is that ones orbitals are optimized there is no need to rotate MOs further. Hence, just semi-canolicalize MOs and compute energies. However, after original implementation there has been lot of revisions in convergence criteria. I think during these modifications the equality of Lagrangian and usual energy is somewhat slightly broken. I will update DFOCC module in this week and push it to Lori's repo. During this update I will fix this issue. @JonathonMisiewicz . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532
https://github.com/psi4/psi4/issues/1509#issuecomment-459946532:51,Performance,optimiz,optimized,51,"Dear Jonathon,. The idea is that ones orbitals are optimized there is no need to rotate MOs further. Hence, just semi-canolicalize MOs and compute energies. However, after original implementation there has been lot of revisions in convergence criteria. I think during these modifications the equality of Lagrangian and usual energy is somewhat slightly broken. I will update DFOCC module in this week and push it to Lori's repo. During this update I will fix this issue. @JonathonMisiewicz . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532
https://github.com/psi4/psi4/issues/1509#issuecomment-571322592:115,Energy Efficiency,energy,energy,115,"In case anybody needs to refer back to this: the cause of the bug was that in one of the two ways of computing the energy, the SCF energy was added rather than the reference energy. These are different things in orbital optimized methods and afflicted all OMP2.5 and OMP3 computations. It was fixed by [this commit](https://github.com/psi4/psi4/pull/1772/commits/118f1967d348ec58265b6d3bb12b935730b5b8a6).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592
https://github.com/psi4/psi4/issues/1509#issuecomment-571322592:131,Energy Efficiency,energy,energy,131,"In case anybody needs to refer back to this: the cause of the bug was that in one of the two ways of computing the energy, the SCF energy was added rather than the reference energy. These are different things in orbital optimized methods and afflicted all OMP2.5 and OMP3 computations. It was fixed by [this commit](https://github.com/psi4/psi4/pull/1772/commits/118f1967d348ec58265b6d3bb12b935730b5b8a6).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592
https://github.com/psi4/psi4/issues/1509#issuecomment-571322592:174,Energy Efficiency,energy,energy,174,"In case anybody needs to refer back to this: the cause of the bug was that in one of the two ways of computing the energy, the SCF energy was added rather than the reference energy. These are different things in orbital optimized methods and afflicted all OMP2.5 and OMP3 computations. It was fixed by [this commit](https://github.com/psi4/psi4/pull/1772/commits/118f1967d348ec58265b6d3bb12b935730b5b8a6).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592
https://github.com/psi4/psi4/issues/1509#issuecomment-571322592:220,Performance,optimiz,optimized,220,"In case anybody needs to refer back to this: the cause of the bug was that in one of the two ways of computing the energy, the SCF energy was added rather than the reference energy. These are different things in orbital optimized methods and afflicted all OMP2.5 and OMP3 computations. It was fixed by [this commit](https://github.com/psi4/psi4/pull/1772/commits/118f1967d348ec58265b6d3bb12b935730b5b8a6).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592
https://github.com/psi4/psi4/issues/1514#issuecomment-459550513:99,Modifiability,variab,variable,99,Extra items in the NumPy can be done by either adding unused fields or putting the the `array` or `variable` attributes on the Wavefunction.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459550513
https://github.com/psi4/psi4/issues/1514#issuecomment-459591071:99,Deployability,patch,patch-up,99,"Thanks for subscribing me to the thread -- I would have missed it otherwise. > I suggest a minimal patch-up rather than thorough update. Is your sense that this is something we could fix on the sns-mp2 side with a minimal patch up? Perhaps by adding the fields we need to `arrays()` or something? I confess that I haven't been following psi4 development closely enough recently to have much of a context here about what the relevant psi4 API changes are or what the simplest way forward is. Is there a ticket you can direct me towards describing the change in the API related to the npz format for file 180?. > In the meantime, snsmp2 is getting dropped from psi4-rt. Is this the plan only if we don't fix the incompatibility in the sns-plugin, or are you planning to drop snsmp2 from psi4-rt regardless of whether or not this gets fixed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071
https://github.com/psi4/psi4/issues/1514#issuecomment-459591071:129,Deployability,update,update,129,"Thanks for subscribing me to the thread -- I would have missed it otherwise. > I suggest a minimal patch-up rather than thorough update. Is your sense that this is something we could fix on the sns-mp2 side with a minimal patch up? Perhaps by adding the fields we need to `arrays()` or something? I confess that I haven't been following psi4 development closely enough recently to have much of a context here about what the relevant psi4 API changes are or what the simplest way forward is. Is there a ticket you can direct me towards describing the change in the API related to the npz format for file 180?. > In the meantime, snsmp2 is getting dropped from psi4-rt. Is this the plan only if we don't fix the incompatibility in the sns-plugin, or are you planning to drop snsmp2 from psi4-rt regardless of whether or not this gets fixed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071
https://github.com/psi4/psi4/issues/1514#issuecomment-459591071:222,Deployability,patch,patch,222,"Thanks for subscribing me to the thread -- I would have missed it otherwise. > I suggest a minimal patch-up rather than thorough update. Is your sense that this is something we could fix on the sns-mp2 side with a minimal patch up? Perhaps by adding the fields we need to `arrays()` or something? I confess that I haven't been following psi4 development closely enough recently to have much of a context here about what the relevant psi4 API changes are or what the simplest way forward is. Is there a ticket you can direct me towards describing the change in the API related to the npz format for file 180?. > In the meantime, snsmp2 is getting dropped from psi4-rt. Is this the plan only if we don't fix the incompatibility in the sns-plugin, or are you planning to drop snsmp2 from psi4-rt regardless of whether or not this gets fixed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071
https://github.com/psi4/psi4/issues/1514#issuecomment-459591071:737,Modifiability,plugin,plugin,737,"Thanks for subscribing me to the thread -- I would have missed it otherwise. > I suggest a minimal patch-up rather than thorough update. Is your sense that this is something we could fix on the sns-mp2 side with a minimal patch up? Perhaps by adding the fields we need to `arrays()` or something? I confess that I haven't been following psi4 development closely enough recently to have much of a context here about what the relevant psi4 API changes are or what the simplest way forward is. Is there a ticket you can direct me towards describing the change in the API related to the npz format for file 180?. > In the meantime, snsmp2 is getting dropped from psi4-rt. Is this the plan only if we don't fix the incompatibility in the sns-plugin, or are you planning to drop snsmp2 from psi4-rt regardless of whether or not this gets fixed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071
https://github.com/psi4/psi4/issues/1514#issuecomment-459591071:466,Usability,simpl,simplest,466,"Thanks for subscribing me to the thread -- I would have missed it otherwise. > I suggest a minimal patch-up rather than thorough update. Is your sense that this is something we could fix on the sns-mp2 side with a minimal patch up? Perhaps by adding the fields we need to `arrays()` or something? I confess that I haven't been following psi4 development closely enough recently to have much of a context here about what the relevant psi4 API changes are or what the simplest way forward is. Is there a ticket you can direct me towards describing the change in the API related to the npz format for file 180?. > In the meantime, snsmp2 is getting dropped from psi4-rt. Is this the plan only if we don't fix the incompatibility in the sns-plugin, or are you planning to drop snsmp2 from psi4-rt regardless of whether or not this gets fixed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071
https://github.com/psi4/psi4/issues/1514#issuecomment-459735161:713,Availability,fault,fault,713,"Thanks for joining in, @rmcgibbo and @tallakahath. The breaking API change is that we can now properly serialize and reconstitute wavefunction objects. What gets stored and an example [here](https://github.com/psi4/psi4/pull/1304/files). So after that, the `180.npz` storage structure doesn't have to be [written out explicitly](https://github.com/psi4/psi4/commit/e5b12a40c8c2d65a5e59f758df871407afdc544c#diff-dbf22cd80d16f6d8ef8250145a6d91bfR1410) and uses of the `180` file [can be much simpler](https://github.com/psi4/psi4/pull/1495/files#diff-ce55390d6b954c38f0c1fe9df10e0eceL87). The file also now has extension `180.npy`. This is a definite improvement psi-side, but the break to snsmp2 is definitely our fault, so we're willing to fix it. We'd probably do the minimal disruption that gets the code running again. I think that means switching to reading npy from npz, and dealing with Ca_occ by either pulling it from a reconstitued wfn, `Ca_occ = scf_wfn.Ca_subset(""SO"", ""OCC"")` or saving it in the array psivar slot `scf_wfn.set_array(""CA_OCC"", Ca_occ)`. If you'd like to try doing the fix yourselves, or do greater renovations after some of the bug workarounds or progress in psi, we'd be glad of it. I'm trying to get a psi4 v1.3rc1 out, which means conda pkg `psi4` (psi4 itself and optional compiled-in addons) and `psi4-rt` (optional run-time addons) need to be in working order. That's pretty much the case except for snsmp2 (I didn't realize the trouble was more than a `npz` --> `npy` switch until yesterday.) So I was going to drop snsmp2 from `psi4-rt` for the v1.3rc1 and expect to get it back by v1.3.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459735161
https://github.com/psi4/psi4/issues/1514#issuecomment-459735161:490,Usability,simpl,simpler,490,"Thanks for joining in, @rmcgibbo and @tallakahath. The breaking API change is that we can now properly serialize and reconstitute wavefunction objects. What gets stored and an example [here](https://github.com/psi4/psi4/pull/1304/files). So after that, the `180.npz` storage structure doesn't have to be [written out explicitly](https://github.com/psi4/psi4/commit/e5b12a40c8c2d65a5e59f758df871407afdc544c#diff-dbf22cd80d16f6d8ef8250145a6d91bfR1410) and uses of the `180` file [can be much simpler](https://github.com/psi4/psi4/pull/1495/files#diff-ce55390d6b954c38f0c1fe9df10e0eceL87). The file also now has extension `180.npy`. This is a definite improvement psi-side, but the break to snsmp2 is definitely our fault, so we're willing to fix it. We'd probably do the minimal disruption that gets the code running again. I think that means switching to reading npy from npz, and dealing with Ca_occ by either pulling it from a reconstitued wfn, `Ca_occ = scf_wfn.Ca_subset(""SO"", ""OCC"")` or saving it in the array psivar slot `scf_wfn.set_array(""CA_OCC"", Ca_occ)`. If you'd like to try doing the fix yourselves, or do greater renovations after some of the bug workarounds or progress in psi, we'd be glad of it. I'm trying to get a psi4 v1.3rc1 out, which means conda pkg `psi4` (psi4 itself and optional compiled-in addons) and `psi4-rt` (optional run-time addons) need to be in working order. That's pretty much the case except for snsmp2 (I didn't realize the trouble was more than a `npz` --> `npy` switch until yesterday.) So I was going to drop snsmp2 from `psi4-rt` for the v1.3rc1 and expect to get it back by v1.3.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459735161
https://github.com/psi4/psi4/issues/1514#issuecomment-465349722:250,Availability,avail,available,250,"fix for this has commenced at https://github.com/obrien951/sns-mp2/tree/serial_wfn . it doesn't strictly involve psi4 changes, so it's possible we may mint v1.3 and then produce a new `psi4-rt` conda metapackage with snsmp2 restored after the fix is available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-465349722
https://github.com/psi4/psi4/pull/1520#issuecomment-460657048:159,Availability,error,errors,159,"@raimis, I'm sorry I had to switch back some of your changes in #1348. This current PR looks to work for me. For Windows, I don't see any OpenMP configuration errors or notice OMP compiling problems in Azure. If Azure's working, are there additional things to check to make sure I didn't in turn break something you need?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048
https://github.com/psi4/psi4/pull/1520#issuecomment-460657048:145,Deployability,configurat,configuration,145,"@raimis, I'm sorry I had to switch back some of your changes in #1348. This current PR looks to work for me. For Windows, I don't see any OpenMP configuration errors or notice OMP compiling problems in Azure. If Azure's working, are there additional things to check to make sure I didn't in turn break something you need?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048
https://github.com/psi4/psi4/pull/1520#issuecomment-460657048:145,Modifiability,config,configuration,145,"@raimis, I'm sorry I had to switch back some of your changes in #1348. This current PR looks to work for me. For Windows, I don't see any OpenMP configuration errors or notice OMP compiling problems in Azure. If Azure's working, are there additional things to check to make sure I didn't in turn break something you need?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048
https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:110,Availability,ERROR,ERROR,110,"The problem in more details:; ```; =================================================================; ==1078==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000823db8 at pc 0x7f7011cc8d52 bp 0x7ffcb2c573d0 sp 0x7ffcb2c56b88; READ of size 16 at 0x602000823db8 thread T0; #0 0x7f7011cc8d51 in __interceptor_memmove /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:720; #1 0x7f7003a3bf86 in int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_algobase.h:368; #2 0x7f700394d0ed in int* std::__copy_move_a<false, int const*, int*>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_algobase.h:386; #3 0x7f7004dea9e7 in int* std::__copy_move_a2<false, int const*, int*>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_algobase.h:424; #4 0x7f7004de92bf in int* std::copy<int const*, int*>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_algobase.h:456; #5 0x7f7004de75fd in int* std::__uninitialized_copy<true>::__uninit_copy<int const*, int*>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_uninitialized.h:101; #6 0x7f7004de6659 in int* std::uninitialized_copy<int const*, int*>(int const*, int const*, int*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_uninitialized.h:134; #7 0x7f7004de56f0 in int* std::__uninitialized_copy_a<int const*, int*, int>(int const*, int const*, int*, std::allocator<int>&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gn",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418
https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:11274,Energy Efficiency,allocate,allocated,11274,"val.c:4187; #64 0x557a416e201b in PyEval_EvalCode /tmp/build/80754af9/python_1546130271559/work/Python/ceval.c:731; #65 0x557a417643c3 in run_mod /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:1025; #66 0x557a417647c0 in PyRun_FileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:978; #67 0x557a417649c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #68 0x557a417684b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #69 0x557a417684b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #70 0x557a4163102d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #71 0x7f70116d2444 in __libc_start_main (/lib64/libc.so.6+0x22444); #72 0x557a41711e0d (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c3e0d). 0x602000823db8 is located 0 bytes to the right of 8-byte region [0x602000823db0,0x602000823db8); allocated by thread T0 here:; #0 0x7f7011d4b94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7f7003a3bf34 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7f700394d042 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7f70037a8b69 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7f70037031ef in int* std::vector<int, std::allocator<int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(unsig",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418
https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:11548,Energy Efficiency,allocate,allocate,11548,"_1546130271559/work/Python/pythonrun.c:978; #67 0x557a417649c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #68 0x557a417684b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #69 0x557a417684b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #70 0x557a4163102d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #71 0x7f70116d2444 in __libc_start_main (/lib64/libc.so.6+0x22444); #72 0x557a41711e0d (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c3e0d). 0x602000823db8 is located 0 bytes to the right of 8-byte region [0x602000823db0,0x602000823db8); allocated by thread T0 here:; #0 0x7f7011d4b94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7f7003a3bf34 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7f700394d042 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7f70037a8b69 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7f70037031ef in int* std::vector<int, std::allocator<int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(unsigned long, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:1260",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418
https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:11761,Energy Efficiency,allocate,allocate,11761,"python_1546130271559/work/Modules/main.c:340; #69 0x557a417684b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #70 0x557a4163102d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #71 0x7f70116d2444 in __libc_start_main (/lib64/libc.so.6+0x22444); #72 0x557a41711e0d (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c3e0d). 0x602000823db8 is located 0 bytes to the right of 8-byte region [0x602000823db0,0x602000823db8); allocated by thread T0 here:; #0 0x7f7011d4b94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7f7003a3bf34 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7f700394d042 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7f70037a8b69 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7f70037031ef in int* std::vector<int, std::allocator<int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(unsigned long, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:1260; #5 0x7f70036313d9 in std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418
https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:21378,Safety,ABORT,ABORTING,21378,"t (&) [65])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #24 0x7f70032fcbc5 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #25 0x557a4165f743 in _PyCFunction_FastCallDict /tmp/build/80754af9/python_1546130271559/work/Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:720 in __interceptor_memmove; Shadow bytes around the buggy address:; 0x0c04800fc760: fa fa fa fa fa fa fd fa fa fa fd fa fa fa fa fa; 0x0c04800fc770: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fd fa; 0x0c04800fc780: fa fa fd fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c04800fc790: fa fa fa fa fa fa fd fa fa fa fd fa fa fa fa fa; 0x0c04800fc7a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fd fa; =>0x0c04800fc7b0: fa fa fd fa fa fa 00[fa]fa fa fd fa fa fa fa fa; 0x0c04800fc7c0: fa fa fa fa fa fa fd fa fa fa fd fa fa fa fa fa; 0x0c04800fc7d0: fa fa fa fa fa fa fa fa fa fa 00 fa fa fa fd fa; 0x0c04800fc7e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c04800fc7f0: fa fa 00 fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c04800fc800: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==1078==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418
https://github.com/psi4/psi4/pull/1521#issuecomment-460654747:5,Availability,error,error,5,This error may be of concern to @fevangelista.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460654747
https://github.com/psi4/psi4/pull/1521#issuecomment-462363479:665,Performance,Perform,Performing,665,"I cannot reproduce this one. I pulled your branch and rebased it to master (which has not introduced any changes to the moinfo code) and it ran cleanly with address and memory sanitizers on my mac. I modified your changes to read:; ```c++; if (ref_wfn.frzcpi().n() != nirreps_ref) exit(42);; std::cout << ""DIMENSIONS "" << ref_wfn.frzcpi().n() << "" "" << nirreps_ref << std::endl;; ```; and it gave the following output:; ```; (base) QuickSilver:~/programming/psi4/obj_asserts (fix_nirreps) > DYLD_INSERT_LIBRARIES=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib psi4; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; ```; I tried the psimrcc-fd-freq1 test also and it runs just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479
https://github.com/psi4/psi4/pull/1521#issuecomment-462363479:176,Security,sanitiz,sanitizers,176,"I cannot reproduce this one. I pulled your branch and rebased it to master (which has not introduced any changes to the moinfo code) and it ran cleanly with address and memory sanitizers on my mac. I modified your changes to read:; ```c++; if (ref_wfn.frzcpi().n() != nirreps_ref) exit(42);; std::cout << ""DIMENSIONS "" << ref_wfn.frzcpi().n() << "" "" << nirreps_ref << std::endl;; ```; and it gave the following output:; ```; (base) QuickSilver:~/programming/psi4/obj_asserts (fix_nirreps) > DYLD_INSERT_LIBRARIES=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib psi4; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; ```; I tried the psimrcc-fd-freq1 test also and it runs just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479
https://github.com/psi4/psi4/pull/1521#issuecomment-462363479:927,Testability,test,test,927,"I cannot reproduce this one. I pulled your branch and rebased it to master (which has not introduced any changes to the moinfo code) and it ran cleanly with address and memory sanitizers on my mac. I modified your changes to read:; ```c++; if (ref_wfn.frzcpi().n() != nirreps_ref) exit(42);; std::cout << ""DIMENSIONS "" << ref_wfn.frzcpi().n() << "" "" << nirreps_ref << std::endl;; ```; and it gave the following output:; ```; (base) QuickSilver:~/programming/psi4/obj_asserts (fix_nirreps) > DYLD_INSERT_LIBRARIES=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib psi4; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; ```; I tried the psimrcc-fd-freq1 test also and it runs just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479
https://github.com/psi4/psi4/pull/1521#issuecomment-462394184:74,Testability,test,test,74,"@andysim Thanks for looking, but the problem is with psimrcc-fd-freq**2** test (not psimrcc-fd-freq**1**). After rebasing, the problem persists for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462394184
https://github.com/psi4/psi4/pull/1521#issuecomment-462437495:88,Security,sanitiz,sanitizers,88,"I tried both `freq1` and `freq2` tests, but could not find any problems with GCC8 (with sanitizers) on my Mac. My linux machines have a kernel that [doesn't allow the use of sanitizers](https://github.com/google/sanitizers/issues/856) so I can't test those. However, if I put the same print statement into an Intel linux build, I see the exact same output that I posted above - *i.e.* that both dimensions are the same. It appears that the mismatch in dimensions is only happening on windows, which is very strange. Can anybody else confirm the behavior on Linux and/or Mac?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462437495
https://github.com/psi4/psi4/pull/1521#issuecomment-462437495:174,Security,sanitiz,sanitizers,174,"I tried both `freq1` and `freq2` tests, but could not find any problems with GCC8 (with sanitizers) on my Mac. My linux machines have a kernel that [doesn't allow the use of sanitizers](https://github.com/google/sanitizers/issues/856) so I can't test those. However, if I put the same print statement into an Intel linux build, I see the exact same output that I posted above - *i.e.* that both dimensions are the same. It appears that the mismatch in dimensions is only happening on windows, which is very strange. Can anybody else confirm the behavior on Linux and/or Mac?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462437495
https://github.com/psi4/psi4/pull/1521#issuecomment-462437495:212,Security,sanitiz,sanitizers,212,"I tried both `freq1` and `freq2` tests, but could not find any problems with GCC8 (with sanitizers) on my Mac. My linux machines have a kernel that [doesn't allow the use of sanitizers](https://github.com/google/sanitizers/issues/856) so I can't test those. However, if I put the same print statement into an Intel linux build, I see the exact same output that I posted above - *i.e.* that both dimensions are the same. It appears that the mismatch in dimensions is only happening on windows, which is very strange. Can anybody else confirm the behavior on Linux and/or Mac?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462437495
https://github.com/psi4/psi4/pull/1521#issuecomment-462437495:33,Testability,test,tests,33,"I tried both `freq1` and `freq2` tests, but could not find any problems with GCC8 (with sanitizers) on my Mac. My linux machines have a kernel that [doesn't allow the use of sanitizers](https://github.com/google/sanitizers/issues/856) so I can't test those. However, if I put the same print statement into an Intel linux build, I see the exact same output that I posted above - *i.e.* that both dimensions are the same. It appears that the mismatch in dimensions is only happening on windows, which is very strange. Can anybody else confirm the behavior on Linux and/or Mac?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462437495
https://github.com/psi4/psi4/pull/1521#issuecomment-462437495:246,Testability,test,test,246,"I tried both `freq1` and `freq2` tests, but could not find any problems with GCC8 (with sanitizers) on my Mac. My linux machines have a kernel that [doesn't allow the use of sanitizers](https://github.com/google/sanitizers/issues/856) so I can't test those. However, if I put the same print statement into an Intel linux build, I see the exact same output that I posted above - *i.e.* that both dimensions are the same. It appears that the mismatch in dimensions is only happening on windows, which is very strange. Can anybody else confirm the behavior on Linux and/or Mac?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462437495
https://github.com/psi4/psi4/pull/1521#issuecomment-462752310:115,Performance,Perform,Performing,115,"@andysim I have add the print statement and made *Azure* to run the test. It produces, the following output:; ```; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; DIMENSIONS 2 4; ```. The same output I get on *Linux* with GCC 7.3.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462752310
https://github.com/psi4/psi4/pull/1521#issuecomment-462752310:68,Testability,test,test,68,"@andysim I have add the print statement and made *Azure* to run the test. It produces, the following output:; ```; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; DIMENSIONS 2 4; ```. The same output I get on *Linux* with GCC 7.3.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462752310
https://github.com/psi4/psi4/pull/1521#issuecomment-462803965:578,Energy Efficiency,reduce,reduced,578,"Ok, I have a PR to this branch that fixes it. Here's some information for those reviewing. The code that's causing the issue is the stuff that handles symmetry-dependent input arrays, such as DOCC, SOCC, making sure that they are mapped correctly if the molecule is displaced to a lower symmetry point group. The dimension `nirreps` is the current (displaced) symmetry and may be lower than the parent symmetry `nirreps_ref`. The problem came from re-use of the arrays that handle docc and frozen orbitals. In the first step they are read from wfn (which relays the info in the reduced symmetry so no mapping is needed). Then, after accumulating the info from wfn, the same arrays are used to query the input file, which has the full dimensions so the arrays should be resized. @raimis correctly identified the mismatch in the dimensioning and his idea of increasing the dimensions to `nirreps_ref` is correct; the conversion routine just doesn't do this correctly without reading past the end of the wfn's reduced dimension arrays. This fix just handles the wfn quantities first, then resizes for the mrcc parsing step. There are a few comments in there to help clarify what's happening. I think this section just failed to keep up with the many changes to how wfn handles things over the last decade. Thanks very much for your help, @raimis .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965
https://github.com/psi4/psi4/pull/1521#issuecomment-462803965:1007,Energy Efficiency,reduce,reduced,1007,"Ok, I have a PR to this branch that fixes it. Here's some information for those reviewing. The code that's causing the issue is the stuff that handles symmetry-dependent input arrays, such as DOCC, SOCC, making sure that they are mapped correctly if the molecule is displaced to a lower symmetry point group. The dimension `nirreps` is the current (displaced) symmetry and may be lower than the parent symmetry `nirreps_ref`. The problem came from re-use of the arrays that handle docc and frozen orbitals. In the first step they are read from wfn (which relays the info in the reduced symmetry so no mapping is needed). Then, after accumulating the info from wfn, the same arrays are used to query the input file, which has the full dimensions so the arrays should be resized. @raimis correctly identified the mismatch in the dimensioning and his idea of increasing the dimensions to `nirreps_ref` is correct; the conversion routine just doesn't do this correctly without reading past the end of the wfn's reduced dimension arrays. This fix just handles the wfn quantities first, then resizes for the mrcc parsing step. There are a few comments in there to help clarify what's happening. I think this section just failed to keep up with the many changes to how wfn handles things over the last decade. Thanks very much for your help, @raimis .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965
https://github.com/psi4/psi4/pull/1521#issuecomment-462803965:160,Integrability,depend,dependent,160,"Ok, I have a PR to this branch that fixes it. Here's some information for those reviewing. The code that's causing the issue is the stuff that handles symmetry-dependent input arrays, such as DOCC, SOCC, making sure that they are mapped correctly if the molecule is displaced to a lower symmetry point group. The dimension `nirreps` is the current (displaced) symmetry and may be lower than the parent symmetry `nirreps_ref`. The problem came from re-use of the arrays that handle docc and frozen orbitals. In the first step they are read from wfn (which relays the info in the reduced symmetry so no mapping is needed). Then, after accumulating the info from wfn, the same arrays are used to query the input file, which has the full dimensions so the arrays should be resized. @raimis correctly identified the mismatch in the dimensioning and his idea of increasing the dimensions to `nirreps_ref` is correct; the conversion routine just doesn't do this correctly without reading past the end of the wfn's reduced dimension arrays. This fix just handles the wfn quantities first, then resizes for the mrcc parsing step. There are a few comments in there to help clarify what's happening. I think this section just failed to keep up with the many changes to how wfn handles things over the last decade. Thanks very much for your help, @raimis .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965
https://github.com/psi4/psi4/pull/1521#issuecomment-462803965:926,Integrability,rout,routine,926,"Ok, I have a PR to this branch that fixes it. Here's some information for those reviewing. The code that's causing the issue is the stuff that handles symmetry-dependent input arrays, such as DOCC, SOCC, making sure that they are mapped correctly if the molecule is displaced to a lower symmetry point group. The dimension `nirreps` is the current (displaced) symmetry and may be lower than the parent symmetry `nirreps_ref`. The problem came from re-use of the arrays that handle docc and frozen orbitals. In the first step they are read from wfn (which relays the info in the reduced symmetry so no mapping is needed). Then, after accumulating the info from wfn, the same arrays are used to query the input file, which has the full dimensions so the arrays should be resized. @raimis correctly identified the mismatch in the dimensioning and his idea of increasing the dimensions to `nirreps_ref` is correct; the conversion routine just doesn't do this correctly without reading past the end of the wfn's reduced dimension arrays. This fix just handles the wfn quantities first, then resizes for the mrcc parsing step. There are a few comments in there to help clarify what's happening. I think this section just failed to keep up with the many changes to how wfn handles things over the last decade. Thanks very much for your help, @raimis .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965
https://github.com/psi4/psi4/pull/1522#issuecomment-460737948:41,Availability,error,error,41,Is `psimrcc-fd-freq2` failing due to the error reported in #1521?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1522#issuecomment-460737948
https://github.com/psi4/psi4/pull/1524#issuecomment-460845537:228,Deployability,patch,patch,228,"I second that. The original FCHK writer was specifically for GDMA, and I reverse engineered it from an example that I found in the GDMA repo. It's great that people who actually know what FCHK should look like have been able to patch it up, and it seems like it was only a very minor fix to our GDMA wrapper to get back up and running. Maybe we're close to converging on a proper FCHK!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1524#issuecomment-460845537
https://github.com/psi4/psi4/pull/1524#issuecomment-460845537:300,Integrability,wrap,wrapper,300,"I second that. The original FCHK writer was specifically for GDMA, and I reverse engineered it from an example that I found in the GDMA repo. It's great that people who actually know what FCHK should look like have been able to patch it up, and it seems like it was only a very minor fix to our GDMA wrapper to get back up and running. Maybe we're close to converging on a proper FCHK!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1524#issuecomment-460845537
https://github.com/psi4/psi4/pull/1525#issuecomment-461081632:8,Testability,test,tests,8,All the tests still pass when the index is still offset. Looking at the code it seems logical to continue offsetting the index as that is what is used when creating the next block of points.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1525#issuecomment-461081632
https://github.com/psi4/psi4/pull/1525#issuecomment-461081632:86,Testability,log,logical,86,All the tests still pass when the index is still offset. Looking at the code it seems logical to continue offsetting the index as that is what is used when creating the next block of points.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1525#issuecomment-461081632
https://github.com/psi4/psi4/pull/1527#issuecomment-462760398:46,Deployability,pipeline,pipeline,46,"@loriab could you define the variables in the pipeline settings, so the PR can pass. A demonstration on my *Azure* account:; - By default (`ctest.type=quick` and `pytest.type=quick`), the automatic and manual builds behave the same: https://dev.azure.com/raimisg/psi4/_build/results?buildId=478 Time ~1 h; - Setting `ctest.type=full` and manually triggering a build, it does all the ctests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=479 Time ~4 h; - Setting `pytest.type=full` and manually triggering a build, it does all the pytests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=480 Time ~3 h; - `ctest.type=full` and `pytest.type=full` runs out of time. Max time is 6 h.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-462760398
https://github.com/psi4/psi4/pull/1527#issuecomment-462760398:29,Modifiability,variab,variables,29,"@loriab could you define the variables in the pipeline settings, so the PR can pass. A demonstration on my *Azure* account:; - By default (`ctest.type=quick` and `pytest.type=quick`), the automatic and manual builds behave the same: https://dev.azure.com/raimisg/psi4/_build/results?buildId=478 Time ~1 h; - Setting `ctest.type=full` and manually triggering a build, it does all the ctests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=479 Time ~4 h; - Setting `pytest.type=full` and manually triggering a build, it does all the pytests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=480 Time ~3 h; - `ctest.type=full` and `pytest.type=full` runs out of time. Max time is 6 h.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-462760398
https://github.com/psi4/psi4/pull/1527#issuecomment-463035957:152,Integrability,interface,interface,152,"@raimis, thanks! I've been wishing for a cloud option to run a full test suite. In Azure, I've added the variables below. I'm not too familiar with the interface, so let me know if I adjusted the wrong thing. <img width=""779"" alt=""screen shot 2019-02-12 at 9 51 03 pm"" src=""https://user-images.githubusercontent.com/2314730/52683303-6612c880-2f10-11e9-9dbb-c5862970cc88.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957
https://github.com/psi4/psi4/pull/1527#issuecomment-463035957:105,Modifiability,variab,variables,105,"@raimis, thanks! I've been wishing for a cloud option to run a full test suite. In Azure, I've added the variables below. I'm not too familiar with the interface, so let me know if I adjusted the wrong thing. <img width=""779"" alt=""screen shot 2019-02-12 at 9 51 03 pm"" src=""https://user-images.githubusercontent.com/2314730/52683303-6612c880-2f10-11e9-9dbb-c5862970cc88.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957
https://github.com/psi4/psi4/pull/1527#issuecomment-463035957:68,Testability,test,test,68,"@raimis, thanks! I've been wishing for a cloud option to run a full test suite. In Azure, I've added the variables below. I'm not too familiar with the interface, so let me know if I adjusted the wrong thing. <img width=""779"" alt=""screen shot 2019-02-12 at 9 51 03 pm"" src=""https://user-images.githubusercontent.com/2314730/52683303-6612c880-2f10-11e9-9dbb-c5862970cc88.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957
https://github.com/psi4/psi4/pull/1527#issuecomment-464104214:60,Deployability,pipeline,pipeline,60,"@loriab . Sorry for slow response. Yes, the settings of the pipeline variables are well hidden... :D. 1. Go to the *Psi4* pipeline page and click ""Edit"" (top right); ![screenshot from 2019-02-15 16-45-48](https://user-images.githubusercontent.com/2469715/52868257-15cf7c80-3143-11e9-86b9-b9e8237a51f3.png); 2. Click ""..."" (top right) and click ""Pipeline settings""; ![screenshot from 2019-02-15 16-45-57](https://user-images.githubusercontent.com/2469715/52868262-1831d680-3143-11e9-8b9b-3df7d6045b69.png); 3. Click ""Variables"" tab (top left); ![screenshot from 2019-02-15 16-46-09](https://user-images.githubusercontent.com/2469715/52868269-19fb9a00-3143-11e9-9113-93a3b56a0562.png); 4. For the moment just add `ctest.type` and `pytest.type` with `quick` defaults and ""Settable at queue time"" on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214
https://github.com/psi4/psi4/pull/1527#issuecomment-464104214:122,Deployability,pipeline,pipeline,122,"@loriab . Sorry for slow response. Yes, the settings of the pipeline variables are well hidden... :D. 1. Go to the *Psi4* pipeline page and click ""Edit"" (top right); ![screenshot from 2019-02-15 16-45-48](https://user-images.githubusercontent.com/2469715/52868257-15cf7c80-3143-11e9-86b9-b9e8237a51f3.png); 2. Click ""..."" (top right) and click ""Pipeline settings""; ![screenshot from 2019-02-15 16-45-57](https://user-images.githubusercontent.com/2469715/52868262-1831d680-3143-11e9-8b9b-3df7d6045b69.png); 3. Click ""Variables"" tab (top left); ![screenshot from 2019-02-15 16-46-09](https://user-images.githubusercontent.com/2469715/52868269-19fb9a00-3143-11e9-9113-93a3b56a0562.png); 4. For the moment just add `ctest.type` and `pytest.type` with `quick` defaults and ""Settable at queue time"" on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214
https://github.com/psi4/psi4/pull/1527#issuecomment-464104214:345,Deployability,Pipeline,Pipeline,345,"@loriab . Sorry for slow response. Yes, the settings of the pipeline variables are well hidden... :D. 1. Go to the *Psi4* pipeline page and click ""Edit"" (top right); ![screenshot from 2019-02-15 16-45-48](https://user-images.githubusercontent.com/2469715/52868257-15cf7c80-3143-11e9-86b9-b9e8237a51f3.png); 2. Click ""..."" (top right) and click ""Pipeline settings""; ![screenshot from 2019-02-15 16-45-57](https://user-images.githubusercontent.com/2469715/52868262-1831d680-3143-11e9-8b9b-3df7d6045b69.png); 3. Click ""Variables"" tab (top left); ![screenshot from 2019-02-15 16-46-09](https://user-images.githubusercontent.com/2469715/52868269-19fb9a00-3143-11e9-9113-93a3b56a0562.png); 4. For the moment just add `ctest.type` and `pytest.type` with `quick` defaults and ""Settable at queue time"" on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214
https://github.com/psi4/psi4/pull/1527#issuecomment-464104214:69,Modifiability,variab,variables,69,"@loriab . Sorry for slow response. Yes, the settings of the pipeline variables are well hidden... :D. 1. Go to the *Psi4* pipeline page and click ""Edit"" (top right); ![screenshot from 2019-02-15 16-45-48](https://user-images.githubusercontent.com/2469715/52868257-15cf7c80-3143-11e9-86b9-b9e8237a51f3.png); 2. Click ""..."" (top right) and click ""Pipeline settings""; ![screenshot from 2019-02-15 16-45-57](https://user-images.githubusercontent.com/2469715/52868262-1831d680-3143-11e9-8b9b-3df7d6045b69.png); 3. Click ""Variables"" tab (top left); ![screenshot from 2019-02-15 16-46-09](https://user-images.githubusercontent.com/2469715/52868269-19fb9a00-3143-11e9-9113-93a3b56a0562.png); 4. For the moment just add `ctest.type` and `pytest.type` with `quick` defaults and ""Settable at queue time"" on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214
https://github.com/psi4/psi4/pull/1527#issuecomment-464104214:516,Modifiability,Variab,Variables,516,"@loriab . Sorry for slow response. Yes, the settings of the pipeline variables are well hidden... :D. 1. Go to the *Psi4* pipeline page and click ""Edit"" (top right); ![screenshot from 2019-02-15 16-45-48](https://user-images.githubusercontent.com/2469715/52868257-15cf7c80-3143-11e9-86b9-b9e8237a51f3.png); 2. Click ""..."" (top right) and click ""Pipeline settings""; ![screenshot from 2019-02-15 16-45-57](https://user-images.githubusercontent.com/2469715/52868262-1831d680-3143-11e9-8b9b-3df7d6045b69.png); 3. Click ""Variables"" tab (top left); ![screenshot from 2019-02-15 16-46-09](https://user-images.githubusercontent.com/2469715/52868269-19fb9a00-3143-11e9-9113-93a3b56a0562.png); 4. For the moment just add `ctest.type` and `pytest.type` with `quick` defaults and ""Settable at queue time"" on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214
https://github.com/psi4/psi4/pull/1527#issuecomment-464104214:781,Performance,queue,queue,781,"@loriab . Sorry for slow response. Yes, the settings of the pipeline variables are well hidden... :D. 1. Go to the *Psi4* pipeline page and click ""Edit"" (top right); ![screenshot from 2019-02-15 16-45-48](https://user-images.githubusercontent.com/2469715/52868257-15cf7c80-3143-11e9-86b9-b9e8237a51f3.png); 2. Click ""..."" (top right) and click ""Pipeline settings""; ![screenshot from 2019-02-15 16-45-57](https://user-images.githubusercontent.com/2469715/52868262-1831d680-3143-11e9-8b9b-3df7d6045b69.png); 3. Click ""Variables"" tab (top left); ![screenshot from 2019-02-15 16-46-09](https://user-images.githubusercontent.com/2469715/52868269-19fb9a00-3143-11e9-9113-93a3b56a0562.png); 4. For the moment just add `ctest.type` and `pytest.type` with `quick` defaults and ""Settable at queue time"" on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214
https://github.com/psi4/psi4/pull/1527#issuecomment-464151463:67,Modifiability,variab,variables,67,"Thanks very much -- I wouldn't have found that soon. I believe the variables are set up now. Rebuilding still not happy.; <img width=""1408"" alt=""screen shot 2019-02-15 at 1 23 41 pm"" src=""https://user-images.githubusercontent.com/2314730/52876417-2a9d1780-3125-11e9-84e7-71d1c651459f.png"">; <img width=""1134"" alt=""screen shot 2019-02-15 at 1 24 39 pm"" src=""https://user-images.githubusercontent.com/2314730/52876429-3092f880-3125-11e9-8a05-6a6aff25ab6d.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464151463
https://github.com/psi4/psi4/pull/1527#issuecomment-464954810:23,Modifiability,variab,variable,23,"Now I have removed the variable set from Library. Unfortunately, didn't help. When I remove the catch-unconfigured checks (https://github.com/psi4/psi4/pull/1543/commits/f00ca3d63871c22411989a744ffbfbd33664eed7), it looks like the vars are defined and running in [this azure log](https://dev.azure.com/psi4/psi4/_build/results?buildId=554), so maybe there's just syntax trouble there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464954810
https://github.com/psi4/psi4/pull/1527#issuecomment-464954810:275,Testability,log,log,275,"Now I have removed the variable set from Library. Unfortunately, didn't help. When I remove the catch-unconfigured checks (https://github.com/psi4/psi4/pull/1543/commits/f00ca3d63871c22411989a744ffbfbd33664eed7), it looks like the vars are defined and running in [this azure log](https://dev.azure.com/psi4/psi4/_build/results?buildId=554), so maybe there's just syntax trouble there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464954810
https://github.com/psi4/psi4/pull/1527#issuecomment-466063499:36,Testability,test,tests,36,"Would you rebase to get the shorter tests in, please?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-466063499
https://github.com/psi4/psi4/pull/1529#issuecomment-462488862:229,Usability,clear,clearer,229,"> “Total number of huckel orbitals” block is no net change, right?. That is correct; this is probably where the bug originated since I copy-pasted everything to the other blocks too. Just reorganized it the same way so that it's clearer what is happening.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1529#issuecomment-462488862
https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:388,Availability,error,error,388,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339
https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:197,Energy Efficiency,energy,energy,197,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339
https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:394,Integrability,message,message,394,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339
https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:210,Performance,perform,performed,210,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339
https://github.com/psi4/psi4/issues/1530#issuecomment-462818976:142,Integrability,message,message,142,"Your read of the paper sounds right to me. I think a better fix would be to temporarily unset `freeze_core` if it's been set, print a warning message, carry through with the computation, and then set it back. I'll wait to hear back from the author of the Psi implementation before making any changes, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462818976
https://github.com/psi4/psi4/issues/1530#issuecomment-462905555:59,Availability,error,error,59,"I'd also vote for catching and aborting with a descriptive error, as opposed to temporarily unsetting and carrying on. If the method is part-FC part-all electron, then FC shouldn't be touched in the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462905555
https://github.com/psi4/psi4/issues/1530#issuecomment-462905555:31,Safety,abort,aborting,31,"I'd also vote for catching and aborting with a descriptive error, as opposed to temporarily unsetting and carrying on. If the method is part-FC part-all electron, then FC shouldn't be touched in the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462905555
https://github.com/psi4/psi4/issues/1530#issuecomment-462918918:34,Availability,error,error,34,"The reason I stumbled across this error is because I included in the same input file as some computations with other, less totalitarian methods. This particular method doesn't even allow the user to change the basis set, so by this logic, it should crash whenever the user specifies a basis set, too. My experience still has me in favor of run the computation but warn the user.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462918918
https://github.com/psi4/psi4/issues/1530#issuecomment-462918918:232,Testability,log,logic,232,"The reason I stumbled across this error is because I included in the same input file as some computations with other, less totalitarian methods. This particular method doesn't even allow the user to change the basis set, so by this logic, it should crash whenever the user specifies a basis set, too. My experience still has me in favor of run the computation but warn the user.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462918918
https://github.com/psi4/psi4/issues/1530#issuecomment-482926747:89,Testability,log,logic,89,"> This particular method doesn't even allow the user to change the basis set, so by this logic, it should crash whenever the user specifies a basis set, too. This would be, to me, the expected behaviour, and should be applied consistently for all ""composite"" methods - including `pbeh-3c`, `hf-3c`. Because if you specify a basis different than def2-msvp for `pbeh-3c`, it's no longer `pbeh-3c`!. I'm happy to tackle this one once we agree what to do here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-482926747
https://github.com/psi4/psi4/issues/1530#issuecomment-483017069:268,Energy Efficiency,energy,energy,268,"Let's start with the basics: Should it be possible to let a user do an SCF computation and then a G2 computation? I would think yes, but I can't see how that would be possible with your proposal. The obvious input is. ```; molecule {; h; h 1 1.0; }. set basis sto-3g; energy('scf'); energy('gaussian-2'); ```. If you don't set basis, SCF crashed. If you do, then under your proposal, the gaussian-2 would.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-483017069
https://github.com/psi4/psi4/issues/1530#issuecomment-483017069:283,Energy Efficiency,energy,energy,283,"Let's start with the basics: Should it be possible to let a user do an SCF computation and then a G2 computation? I would think yes, but I can't see how that would be possible with your proposal. The obvious input is. ```; molecule {; h; h 1 1.0; }. set basis sto-3g; energy('scf'); energy('gaussian-2'); ```. If you don't set basis, SCF crashed. If you do, then under your proposal, the gaussian-2 would.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-483017069
https://github.com/psi4/psi4/issues/1530#issuecomment-483020233:278,Energy Efficiency,energy,energy,278,"It might not be in the code this way, but to me, the keyword `set basis something` sets a global-like value: everything that follows is expected to be calculated using that basis set. Both you and I know, that it is possible to change the code to allow:; ```; set basis sto-3g; energy('gaussian-2'); ```; to finish, and currently it even calculates a proper G2 energy. However, for example:; ```; set basis sto-3g; energy('pbeh-3c'); ```; doesn't - it will use `sto-3g` and it'll pretend it's doing `pbeh-3c`. If I pretend I'm someone who's never used Psi4 before, this is confusing. I believe we should change it, one way or another, but be consistent for composite methods. To answer your question, i'd suggest:; ```; molecule {; ...; }. energy('scf/sto-3g'); energy('gaussian-2'); ```; as a neat, unambiguous alternative.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-483020233
https://github.com/psi4/psi4/issues/1530#issuecomment-483020233:361,Energy Efficiency,energy,energy,361,"It might not be in the code this way, but to me, the keyword `set basis something` sets a global-like value: everything that follows is expected to be calculated using that basis set. Both you and I know, that it is possible to change the code to allow:; ```; set basis sto-3g; energy('gaussian-2'); ```; to finish, and currently it even calculates a proper G2 energy. However, for example:; ```; set basis sto-3g; energy('pbeh-3c'); ```; doesn't - it will use `sto-3g` and it'll pretend it's doing `pbeh-3c`. If I pretend I'm someone who's never used Psi4 before, this is confusing. I believe we should change it, one way or another, but be consistent for composite methods. To answer your question, i'd suggest:; ```; molecule {; ...; }. energy('scf/sto-3g'); energy('gaussian-2'); ```; as a neat, unambiguous alternative.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-483020233
https://github.com/psi4/psi4/issues/1530#issuecomment-483020233:415,Energy Efficiency,energy,energy,415,"It might not be in the code this way, but to me, the keyword `set basis something` sets a global-like value: everything that follows is expected to be calculated using that basis set. Both you and I know, that it is possible to change the code to allow:; ```; set basis sto-3g; energy('gaussian-2'); ```; to finish, and currently it even calculates a proper G2 energy. However, for example:; ```; set basis sto-3g; energy('pbeh-3c'); ```; doesn't - it will use `sto-3g` and it'll pretend it's doing `pbeh-3c`. If I pretend I'm someone who's never used Psi4 before, this is confusing. I believe we should change it, one way or another, but be consistent for composite methods. To answer your question, i'd suggest:; ```; molecule {; ...; }. energy('scf/sto-3g'); energy('gaussian-2'); ```; as a neat, unambiguous alternative.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-483020233
https://github.com/psi4/psi4/issues/1530#issuecomment-483020233:740,Energy Efficiency,energy,energy,740,"It might not be in the code this way, but to me, the keyword `set basis something` sets a global-like value: everything that follows is expected to be calculated using that basis set. Both you and I know, that it is possible to change the code to allow:; ```; set basis sto-3g; energy('gaussian-2'); ```; to finish, and currently it even calculates a proper G2 energy. However, for example:; ```; set basis sto-3g; energy('pbeh-3c'); ```; doesn't - it will use `sto-3g` and it'll pretend it's doing `pbeh-3c`. If I pretend I'm someone who's never used Psi4 before, this is confusing. I believe we should change it, one way or another, but be consistent for composite methods. To answer your question, i'd suggest:; ```; molecule {; ...; }. energy('scf/sto-3g'); energy('gaussian-2'); ```; as a neat, unambiguous alternative.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-483020233
https://github.com/psi4/psi4/issues/1530#issuecomment-483020233:762,Energy Efficiency,energy,energy,762,"It might not be in the code this way, but to me, the keyword `set basis something` sets a global-like value: everything that follows is expected to be calculated using that basis set. Both you and I know, that it is possible to change the code to allow:; ```; set basis sto-3g; energy('gaussian-2'); ```; to finish, and currently it even calculates a proper G2 energy. However, for example:; ```; set basis sto-3g; energy('pbeh-3c'); ```; doesn't - it will use `sto-3g` and it'll pretend it's doing `pbeh-3c`. If I pretend I'm someone who's never used Psi4 before, this is confusing. I believe we should change it, one way or another, but be consistent for composite methods. To answer your question, i'd suggest:; ```; molecule {; ...; }. energy('scf/sto-3g'); energy('gaussian-2'); ```; as a neat, unambiguous alternative.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-483020233
https://github.com/psi4/psi4/issues/1530#issuecomment-486231622:437,Availability,down,down,437,"General philosophy has been that something in the energy/grad/etc call can silently trump an option ( otherwise reference rhf + energy b3lyp wouldn’t work). I think that holds for method, basis, fc, etc for g2. The hf3c isn’t so clear cut imo b/c the basis set is constant, so easy to switch out. Though as peter points out, it’s no longer hf3c then and shouldn’t get the “hf3c total energy “ set, only perhaps “scf total energy”. Comes down to does a method suggest or require certain options. . At one point, fc in this g2 sequence were behaving very strangely for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622
https://github.com/psi4/psi4/issues/1530#issuecomment-486231622:50,Energy Efficiency,energy,energy,50,"General philosophy has been that something in the energy/grad/etc call can silently trump an option ( otherwise reference rhf + energy b3lyp wouldn’t work). I think that holds for method, basis, fc, etc for g2. The hf3c isn’t so clear cut imo b/c the basis set is constant, so easy to switch out. Though as peter points out, it’s no longer hf3c then and shouldn’t get the “hf3c total energy “ set, only perhaps “scf total energy”. Comes down to does a method suggest or require certain options. . At one point, fc in this g2 sequence were behaving very strangely for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622
https://github.com/psi4/psi4/issues/1530#issuecomment-486231622:128,Energy Efficiency,energy,energy,128,"General philosophy has been that something in the energy/grad/etc call can silently trump an option ( otherwise reference rhf + energy b3lyp wouldn’t work). I think that holds for method, basis, fc, etc for g2. The hf3c isn’t so clear cut imo b/c the basis set is constant, so easy to switch out. Though as peter points out, it’s no longer hf3c then and shouldn’t get the “hf3c total energy “ set, only perhaps “scf total energy”. Comes down to does a method suggest or require certain options. . At one point, fc in this g2 sequence were behaving very strangely for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622
https://github.com/psi4/psi4/issues/1530#issuecomment-486231622:384,Energy Efficiency,energy,energy,384,"General philosophy has been that something in the energy/grad/etc call can silently trump an option ( otherwise reference rhf + energy b3lyp wouldn’t work). I think that holds for method, basis, fc, etc for g2. The hf3c isn’t so clear cut imo b/c the basis set is constant, so easy to switch out. Though as peter points out, it’s no longer hf3c then and shouldn’t get the “hf3c total energy “ set, only perhaps “scf total energy”. Comes down to does a method suggest or require certain options. . At one point, fc in this g2 sequence were behaving very strangely for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622
https://github.com/psi4/psi4/issues/1530#issuecomment-486231622:422,Energy Efficiency,energy,energy,422,"General philosophy has been that something in the energy/grad/etc call can silently trump an option ( otherwise reference rhf + energy b3lyp wouldn’t work). I think that holds for method, basis, fc, etc for g2. The hf3c isn’t so clear cut imo b/c the basis set is constant, so easy to switch out. Though as peter points out, it’s no longer hf3c then and shouldn’t get the “hf3c total energy “ set, only perhaps “scf total energy”. Comes down to does a method suggest or require certain options. . At one point, fc in this g2 sequence were behaving very strangely for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622
https://github.com/psi4/psi4/issues/1530#issuecomment-486231622:229,Usability,clear,clear,229,"General philosophy has been that something in the energy/grad/etc call can silently trump an option ( otherwise reference rhf + energy b3lyp wouldn’t work). I think that holds for method, basis, fc, etc for g2. The hf3c isn’t so clear cut imo b/c the basis set is constant, so easy to switch out. Though as peter points out, it’s no longer hf3c then and shouldn’t get the “hf3c total energy “ set, only perhaps “scf total energy”. Comes down to does a method suggest or require certain options. . At one point, fc in this g2 sequence were behaving very strangely for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-486231622
https://github.com/psi4/psi4/pull/1531#issuecomment-476308128:9,Testability,test,tests,9,"Assuming tests pass (which they should), ready for merge!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1531#issuecomment-476308128
https://github.com/psi4/psi4/issues/1532#issuecomment-463195111:204,Availability,down,down,204,"I bet this is an issue with mismatched `new`/`malloc` and `free`/`delete` in the legacy parts of the code. The newer code uses smart pointers to avoid this. The mismatched free and deletes can be tracked down using valgrind, which will also help to identify where the largest leaks are. Anybody who tackles this should consider replacing the various explicit allocations with smart pointers to avoid this mess. I'll take a pass through when I get chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-463195111
https://github.com/psi4/psi4/issues/1532#issuecomment-463195111:145,Safety,avoid,avoid,145,"I bet this is an issue with mismatched `new`/`malloc` and `free`/`delete` in the legacy parts of the code. The newer code uses smart pointers to avoid this. The mismatched free and deletes can be tracked down using valgrind, which will also help to identify where the largest leaks are. Anybody who tackles this should consider replacing the various explicit allocations with smart pointers to avoid this mess. I'll take a pass through when I get chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-463195111
https://github.com/psi4/psi4/issues/1532#issuecomment-463195111:394,Safety,avoid,avoid,394,"I bet this is an issue with mismatched `new`/`malloc` and `free`/`delete` in the legacy parts of the code. The newer code uses smart pointers to avoid this. The mismatched free and deletes can be tracked down using valgrind, which will also help to identify where the largest leaks are. Anybody who tackles this should consider replacing the various explicit allocations with smart pointers to avoid this mess. I'll take a pass through when I get chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-463195111
https://github.com/psi4/psi4/issues/1532#issuecomment-463724464:454,Availability,toler,tolerance,454,"Not surprising that DETCI leaks as it was created before the days of RAII and the DETCI module was expected to be run as a system process so all small leaks were non-issues then. I moved some of it to RAII, but there is a lot there and it is unlikely it will have a complete overhaul in the near future. I remember this was an issue before and we cleaned at least the most egregious leaks we can likely continue cleaning up leaks to meet an ""acceptable"" tolerance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-463724464
https://github.com/psi4/psi4/issues/1532#issuecomment-467980525:842,Availability,down,down,842,"While trying to optimize the geometry for conformers of the ligand in the 2vx0 pdb structure I am also running into memory issues. Our cluster is running with cgroups and I ask for 10GB, but tell psi4 to use only 8gb. In that case most of the calculations fail >374 out of 500 conformers. To make it work I have to ask for 20GB and use only 4GB in psi4. The strange thing is these 500 runs have the same number of atoms and the same basis set, just different atomic positions. But some fail during the first SCF, some complete a few optimization cycles and a few complete. I have seen this behavior with the wB97x and the B3LYP functionals.; I have seen this with the conda installed 1.3rc2 and with a hand compiled version of 1.3rc2.; I have attached my input file and one of the smallest failed output files. I hope this helps pinning this down.; Thanks for working on Psi4, I love it!. [singlePsi4_rec290_pid12029.log](https://github.com/psi4/psi4/files/2911797/singlePsi4_rec290_pid12029.log); [singlePsi4_rec290_pid12029.txt](https://github.com/psi4/psi4/files/2911798/singlePsi4_rec290_pid12029.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525
https://github.com/psi4/psi4/issues/1532#issuecomment-467980525:674,Deployability,install,installed,674,"While trying to optimize the geometry for conformers of the ligand in the 2vx0 pdb structure I am also running into memory issues. Our cluster is running with cgroups and I ask for 10GB, but tell psi4 to use only 8gb. In that case most of the calculations fail >374 out of 500 conformers. To make it work I have to ask for 20GB and use only 4GB in psi4. The strange thing is these 500 runs have the same number of atoms and the same basis set, just different atomic positions. But some fail during the first SCF, some complete a few optimization cycles and a few complete. I have seen this behavior with the wB97x and the B3LYP functionals.; I have seen this with the conda installed 1.3rc2 and with a hand compiled version of 1.3rc2.; I have attached my input file and one of the smallest failed output files. I hope this helps pinning this down.; Thanks for working on Psi4, I love it!. [singlePsi4_rec290_pid12029.log](https://github.com/psi4/psi4/files/2911797/singlePsi4_rec290_pid12029.log); [singlePsi4_rec290_pid12029.txt](https://github.com/psi4/psi4/files/2911798/singlePsi4_rec290_pid12029.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525
https://github.com/psi4/psi4/issues/1532#issuecomment-467980525:16,Performance,optimiz,optimize,16,"While trying to optimize the geometry for conformers of the ligand in the 2vx0 pdb structure I am also running into memory issues. Our cluster is running with cgroups and I ask for 10GB, but tell psi4 to use only 8gb. In that case most of the calculations fail >374 out of 500 conformers. To make it work I have to ask for 20GB and use only 4GB in psi4. The strange thing is these 500 runs have the same number of atoms and the same basis set, just different atomic positions. But some fail during the first SCF, some complete a few optimization cycles and a few complete. I have seen this behavior with the wB97x and the B3LYP functionals.; I have seen this with the conda installed 1.3rc2 and with a hand compiled version of 1.3rc2.; I have attached my input file and one of the smallest failed output files. I hope this helps pinning this down.; Thanks for working on Psi4, I love it!. [singlePsi4_rec290_pid12029.log](https://github.com/psi4/psi4/files/2911797/singlePsi4_rec290_pid12029.log); [singlePsi4_rec290_pid12029.txt](https://github.com/psi4/psi4/files/2911798/singlePsi4_rec290_pid12029.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525
https://github.com/psi4/psi4/issues/1532#issuecomment-467980525:533,Performance,optimiz,optimization,533,"While trying to optimize the geometry for conformers of the ligand in the 2vx0 pdb structure I am also running into memory issues. Our cluster is running with cgroups and I ask for 10GB, but tell psi4 to use only 8gb. In that case most of the calculations fail >374 out of 500 conformers. To make it work I have to ask for 20GB and use only 4GB in psi4. The strange thing is these 500 runs have the same number of atoms and the same basis set, just different atomic positions. But some fail during the first SCF, some complete a few optimization cycles and a few complete. I have seen this behavior with the wB97x and the B3LYP functionals.; I have seen this with the conda installed 1.3rc2 and with a hand compiled version of 1.3rc2.; I have attached my input file and one of the smallest failed output files. I hope this helps pinning this down.; Thanks for working on Psi4, I love it!. [singlePsi4_rec290_pid12029.log](https://github.com/psi4/psi4/files/2911797/singlePsi4_rec290_pid12029.log); [singlePsi4_rec290_pid12029.txt](https://github.com/psi4/psi4/files/2911798/singlePsi4_rec290_pid12029.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525
https://github.com/psi4/psi4/issues/1532#issuecomment-467980525:917,Testability,log,log,917,"While trying to optimize the geometry for conformers of the ligand in the 2vx0 pdb structure I am also running into memory issues. Our cluster is running with cgroups and I ask for 10GB, but tell psi4 to use only 8gb. In that case most of the calculations fail >374 out of 500 conformers. To make it work I have to ask for 20GB and use only 4GB in psi4. The strange thing is these 500 runs have the same number of atoms and the same basis set, just different atomic positions. But some fail during the first SCF, some complete a few optimization cycles and a few complete. I have seen this behavior with the wB97x and the B3LYP functionals.; I have seen this with the conda installed 1.3rc2 and with a hand compiled version of 1.3rc2.; I have attached my input file and one of the smallest failed output files. I hope this helps pinning this down.; Thanks for working on Psi4, I love it!. [singlePsi4_rec290_pid12029.log](https://github.com/psi4/psi4/files/2911797/singlePsi4_rec290_pid12029.log); [singlePsi4_rec290_pid12029.txt](https://github.com/psi4/psi4/files/2911798/singlePsi4_rec290_pid12029.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525
https://github.com/psi4/psi4/issues/1532#issuecomment-467980525:992,Testability,log,log,992,"While trying to optimize the geometry for conformers of the ligand in the 2vx0 pdb structure I am also running into memory issues. Our cluster is running with cgroups and I ask for 10GB, but tell psi4 to use only 8gb. In that case most of the calculations fail >374 out of 500 conformers. To make it work I have to ask for 20GB and use only 4GB in psi4. The strange thing is these 500 runs have the same number of atoms and the same basis set, just different atomic positions. But some fail during the first SCF, some complete a few optimization cycles and a few complete. I have seen this behavior with the wB97x and the B3LYP functionals.; I have seen this with the conda installed 1.3rc2 and with a hand compiled version of 1.3rc2.; I have attached my input file and one of the smallest failed output files. I hope this helps pinning this down.; Thanks for working on Psi4, I love it!. [singlePsi4_rec290_pid12029.log](https://github.com/psi4/psi4/files/2911797/singlePsi4_rec290_pid12029.log); [singlePsi4_rec290_pid12029.txt](https://github.com/psi4/psi4/files/2911798/singlePsi4_rec290_pid12029.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:956,Availability,error,error,956,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2277,Availability,down,downgrade,2277,"th a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:3265,Availability,error,error,3265,"si4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in -c psi4/label/dev for now, not -c psi4. —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1533>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AArOJyuo4E3GnVs6-g7y6p4rUmgxalOsks5vNL55gaJpZM4a6ozS>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:3561,Availability,down,downstream,3561,"si4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in -c psi4/label/dev for now, not -c psi4. —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1533>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AArOJyuo4E3GnVs6-g7y6p4rUmgxalOsks5vNL55gaJpZM4a6ozS>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:64,Deployability,install,install,64,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:288,Deployability,update,update,288,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:314,Deployability,update,update,314,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:1734,Deployability,install,install,1734,"hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:1748,Deployability,update,update,1748,"hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:1851,Deployability,update,update,1851,"int.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/too",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2005,Deployability,update,update,2005,"ional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2116,Deployability,update,update,2116,"ld constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2178,Deployability,Update,Update,2178,"hird of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's pos",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2254,Deployability,upgrade,upgrade,2254,"th a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2305,Deployability,install,install,2305,"th a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2464,Integrability,depend,dependency,2464,"b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:662,Modifiability,extend,extended,662,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:3384,Performance,optimiz,optimizing,3384,"si4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in -c psi4/label/dev for now, not -c psi4. —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1533>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AArOJyuo4E3GnVs6-g7y6p4rUmgxalOsks5vNL55gaJpZM4a6ozS>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:751,Safety,detect,detectable,751,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2443,Safety,detect,detectable,2443,"b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2661,Safety,detect,detect,2661,"st libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2929,Safety,avoid,avoid,2929,"ng libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in -c psi4/label/dev for now, not -c psi4. —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:3609,Testability,test,test,3609,"si4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in -c psi4/label/dev for now, not -c psi4. —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1533>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AArOJyuo4E3GnVs6-g7y6p4rUmgxalOsks5vNL55gaJpZM4a6ozS>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773
https://github.com/psi4/psi4/issues/1533#issuecomment-463848418:66,Deployability,install,install,66,"> I think for a locally compiled psi4 you also have to remove the install dir, if one exists. You're right in general that cmake can find deps in the psi4 installation, which may be unexpected behavior. And it never hurts to remove the install dir. But in this case, should be safe b/c switching out the libint will be in the conda env, so the `libintConfig.cmake` will be there, too. The troublesome scenario I can think of is you have a conda env with libint and libxc, where you're only using the latter in the psi4 build. your libint is a local or cmake compile at am6. then you upgrade the pkgs in the conda env. if, in either the objdir or the install the rpath on the `core.so` isn't set so that the local is before the conda env, then even though cmake got it right, the runtime psi4 will get it wrong. of course, my imagination isn't strong enough to guess _all_ the ways this could go wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418
https://github.com/psi4/psi4/issues/1533#issuecomment-463848418:155,Deployability,install,installation,155,"> I think for a locally compiled psi4 you also have to remove the install dir, if one exists. You're right in general that cmake can find deps in the psi4 installation, which may be unexpected behavior. And it never hurts to remove the install dir. But in this case, should be safe b/c switching out the libint will be in the conda env, so the `libintConfig.cmake` will be there, too. The troublesome scenario I can think of is you have a conda env with libint and libxc, where you're only using the latter in the psi4 build. your libint is a local or cmake compile at am6. then you upgrade the pkgs in the conda env. if, in either the objdir or the install the rpath on the `core.so` isn't set so that the local is before the conda env, then even though cmake got it right, the runtime psi4 will get it wrong. of course, my imagination isn't strong enough to guess _all_ the ways this could go wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418
https://github.com/psi4/psi4/issues/1533#issuecomment-463848418:236,Deployability,install,install,236,"> I think for a locally compiled psi4 you also have to remove the install dir, if one exists. You're right in general that cmake can find deps in the psi4 installation, which may be unexpected behavior. And it never hurts to remove the install dir. But in this case, should be safe b/c switching out the libint will be in the conda env, so the `libintConfig.cmake` will be there, too. The troublesome scenario I can think of is you have a conda env with libint and libxc, where you're only using the latter in the psi4 build. your libint is a local or cmake compile at am6. then you upgrade the pkgs in the conda env. if, in either the objdir or the install the rpath on the `core.so` isn't set so that the local is before the conda env, then even though cmake got it right, the runtime psi4 will get it wrong. of course, my imagination isn't strong enough to guess _all_ the ways this could go wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418
https://github.com/psi4/psi4/issues/1533#issuecomment-463848418:583,Deployability,upgrade,upgrade,583,"> I think for a locally compiled psi4 you also have to remove the install dir, if one exists. You're right in general that cmake can find deps in the psi4 installation, which may be unexpected behavior. And it never hurts to remove the install dir. But in this case, should be safe b/c switching out the libint will be in the conda env, so the `libintConfig.cmake` will be there, too. The troublesome scenario I can think of is you have a conda env with libint and libxc, where you're only using the latter in the psi4 build. your libint is a local or cmake compile at am6. then you upgrade the pkgs in the conda env. if, in either the objdir or the install the rpath on the `core.so` isn't set so that the local is before the conda env, then even though cmake got it right, the runtime psi4 will get it wrong. of course, my imagination isn't strong enough to guess _all_ the ways this could go wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418
https://github.com/psi4/psi4/issues/1533#issuecomment-463848418:650,Deployability,install,install,650,"> I think for a locally compiled psi4 you also have to remove the install dir, if one exists. You're right in general that cmake can find deps in the psi4 installation, which may be unexpected behavior. And it never hurts to remove the install dir. But in this case, should be safe b/c switching out the libint will be in the conda env, so the `libintConfig.cmake` will be there, too. The troublesome scenario I can think of is you have a conda env with libint and libxc, where you're only using the latter in the psi4 build. your libint is a local or cmake compile at am6. then you upgrade the pkgs in the conda env. if, in either the objdir or the install the rpath on the `core.so` isn't set so that the local is before the conda env, then even though cmake got it right, the runtime psi4 will get it wrong. of course, my imagination isn't strong enough to guess _all_ the ways this could go wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418
https://github.com/psi4/psi4/issues/1533#issuecomment-463848418:277,Safety,safe,safe,277,"> I think for a locally compiled psi4 you also have to remove the install dir, if one exists. You're right in general that cmake can find deps in the psi4 installation, which may be unexpected behavior. And it never hurts to remove the install dir. But in this case, should be safe b/c switching out the libint will be in the conda env, so the `libintConfig.cmake` will be there, too. The troublesome scenario I can think of is you have a conda env with libint and libxc, where you're only using the latter in the psi4 build. your libint is a local or cmake compile at am6. then you upgrade the pkgs in the conda env. if, in either the objdir or the install the rpath on the `core.so` isn't set so that the local is before the conda env, then even though cmake got it right, the runtime psi4 will get it wrong. of course, my imagination isn't strong enough to guess _all_ the ways this could go wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418
https://github.com/psi4/psi4/pull/1534#issuecomment-489705203:150,Testability,test,tests,150,"Ok, so I've addressed everything that cppcheck found. There are a number of false positives in that list, but I still fixed them regardless. The full tests pass for me (except `nbody-convergence`, which needs a higher angmom build and `dcft8`, which segfaults). Is anybody else seeing issues with `dcft8`? I'm using the 2019 Intel compilers, so it's possible that there's an issue in my toolchain. If others are seeing no problems in `dcft8` I'll try to debug it later today. Unfortunately, cppcheck isn't too helpful with regards to the memory leaks that this PR was originally intended to address. After it's pulled in I'll try and find some other valgrind-like tools to address those issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1534#issuecomment-489705203
https://github.com/psi4/psi4/pull/1534#issuecomment-489755356:135,Testability,test,tests,135,"Thanks, @JonathonMisiewicz . I fixed the bug and it appears to be a genuine problem - could you review my last commit please? The DCFT tests all pass with it, so I assume it's fine. Strangely enough, cppcheck didn't pick up on this one and we appear to have been getting lucky with our usual compilers accidentally zeroing out the memory. All, this one's ready for review and merge. I'm sure there's some overlap with the many LGTM commits, so I strongly suggest that this goes in after those PRs are all merged: that way I can take care of handling any merge conflicts as penance for my tardiness in finishing this cppcheck pass. Also, I deliberately pushed each commit separately here in case we need to roll back any individual changes, so maybe squashing isn't the best way to go here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1534#issuecomment-489755356
https://github.com/psi4/psi4/pull/1534#issuecomment-489816250:379,Modifiability,inherit,inherited,379,"Ah, got it. I don't have a good reference unfortunately, but a good rule of thumb is to assume that C++ is not initializing memory for you. Assigning to an entire array can be quite expensive, so it's left to the programmer. Moreover, you may be assigning values to it later, which would render any compiler-assigned initial value moot. The old `init_int_array` and friends were inherited from Psi3: they take care of allocating *and* zeroing the memory for you (using `malloc` and then `memset`) so they made things a little more convenient for the programmer. The modern C++ equivalent is to use `std::vector<int> myVec(nElements);` That simply makes a vector of length `nElements`, which can be passed to any function expecting an `int *` by passing `myVec.data()` or `&myVec[0]`. Note that even this way of constructing a vector doesn't initialize the data at all: to do that you need to either `std::fill(myVec.begin(), myVec.end(), 0);` or, better still, tell the compiler which value to use to construct the vector with `std::vector<int> myVec(nElements, 0);` . You can see in my commit that I only zeroed the first (index 0) element. The reason for that is because the loop over irreps starts from 1 in that code, so indices 1+ are correctly assigned. Index 0 was not being touched, so it retained whatever value resulted from the call to `new` that created the array. I hope this helps - please let me know if there's anything I can clarify at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1534#issuecomment-489816250
https://github.com/psi4/psi4/pull/1534#issuecomment-489816250:640,Usability,simpl,simply,640,"Ah, got it. I don't have a good reference unfortunately, but a good rule of thumb is to assume that C++ is not initializing memory for you. Assigning to an entire array can be quite expensive, so it's left to the programmer. Moreover, you may be assigning values to it later, which would render any compiler-assigned initial value moot. The old `init_int_array` and friends were inherited from Psi3: they take care of allocating *and* zeroing the memory for you (using `malloc` and then `memset`) so they made things a little more convenient for the programmer. The modern C++ equivalent is to use `std::vector<int> myVec(nElements);` That simply makes a vector of length `nElements`, which can be passed to any function expecting an `int *` by passing `myVec.data()` or `&myVec[0]`. Note that even this way of constructing a vector doesn't initialize the data at all: to do that you need to either `std::fill(myVec.begin(), myVec.end(), 0);` or, better still, tell the compiler which value to use to construct the vector with `std::vector<int> myVec(nElements, 0);` . You can see in my commit that I only zeroed the first (index 0) element. The reason for that is because the loop over irreps starts from 1 in that code, so indices 1+ are correctly assigned. Index 0 was not being touched, so it retained whatever value resulted from the call to `new` that created the array. I hope this helps - please let me know if there's anything I can clarify at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1534#issuecomment-489816250
https://github.com/psi4/psi4/pull/1536#issuecomment-464392694:28,Performance,Cache,Cache,28,"Yes, I think this is sound. Cache the miniconda, cache the packages, don't cache the environment or the environment solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1536#issuecomment-464392694
https://github.com/psi4/psi4/pull/1536#issuecomment-464392694:49,Performance,cache,cache,49,"Yes, I think this is sound. Cache the miniconda, cache the packages, don't cache the environment or the environment solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1536#issuecomment-464392694
https://github.com/psi4/psi4/pull/1536#issuecomment-464392694:75,Performance,cache,cache,75,"Yes, I think this is sound. Cache the miniconda, cache the packages, don't cache the environment or the environment solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1536#issuecomment-464392694
https://github.com/psi4/psi4/pull/1537#issuecomment-465489348:79,Testability,test,tests,79,I'm confused: `samples/scf-guess` appears to contain the same calculations and tests as `tests/scf-guess`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1537#issuecomment-465489348
https://github.com/psi4/psi4/pull/1537#issuecomment-465489348:89,Testability,test,tests,89,I'm confused: `samples/scf-guess` appears to contain the same calculations and tests as `tests/scf-guess`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1537#issuecomment-465489348
https://github.com/psi4/psi4/pull/1537#issuecomment-465580642:19,Testability,TEST,TEST,19,In samples one has TEST lines filtered away and test has lines remaining.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1537#issuecomment-465580642
https://github.com/psi4/psi4/pull/1537#issuecomment-465580642:48,Testability,test,test,48,In samples one has TEST lines filtered away and test has lines remaining.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1537#issuecomment-465580642
https://github.com/psi4/psi4/pull/1539#issuecomment-467004339:32,Deployability,pipeline,pipeline,32,"@loriab could you configure the pipeline variables, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467004339
https://github.com/psi4/psi4/pull/1539#issuecomment-467004339:18,Modifiability,config,configure,18,"@loriab could you configure the pipeline variables, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467004339
https://github.com/psi4/psi4/pull/1539#issuecomment-467004339:41,Modifiability,variab,variables,41,"@loriab could you configure the pipeline variables, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467004339
https://github.com/psi4/psi4/pull/1539#issuecomment-467076328:0,Deployability,Pipeline,Pipeline,0,"Pipeline variables now configured. With respect to your other questions, yes, max_am_eri=8 will be plenty high enough. That matches what we distribute for linux now (Mac is 6). And don't worry about py3.5 -- there were enough oddities that we dropped it, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467076328
https://github.com/psi4/psi4/pull/1539#issuecomment-467076328:9,Modifiability,variab,variables,9,"Pipeline variables now configured. With respect to your other questions, yes, max_am_eri=8 will be plenty high enough. That matches what we distribute for linux now (Mac is 6). And don't worry about py3.5 -- there were enough oddities that we dropped it, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467076328
https://github.com/psi4/psi4/pull/1539#issuecomment-467076328:23,Modifiability,config,configured,23,"Pipeline variables now configured. With respect to your other questions, yes, max_am_eri=8 will be plenty high enough. That matches what we distribute for linux now (Mac is 6). And don't worry about py3.5 -- there were enough oddities that we dropped it, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467076328
https://github.com/psi4/psi4/pull/1539#issuecomment-467403433:196,Deployability,Release,Release,196,All the build type and Python version combinations works:; - `cmake.build_type=Debug` and ` python.version=3.6`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=515; - `cmake.build_type=Release` and ` python.version=3.6`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=517; - `cmake.build_type=Debug` and ` python.version=3.7`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=518; - `cmake.build_type=Release` and ` python.version=3.7`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=519,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467403433
https://github.com/psi4/psi4/pull/1539#issuecomment-467403433:432,Deployability,Release,Release,432,All the build type and Python version combinations works:; - `cmake.build_type=Debug` and ` python.version=3.6`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=515; - `cmake.build_type=Release` and ` python.version=3.6`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=517; - `cmake.build_type=Debug` and ` python.version=3.7`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=518; - `cmake.build_type=Release` and ` python.version=3.7`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=519,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467403433
https://github.com/psi4/psi4/issues/1540#issuecomment-464864482:65,Energy Efficiency,energy,energy,65,"It looks like the default screening thresholds are different for energy and gradient calculations:. https://github.com/psi4/psi4/blob/3057799cde5524432ed3978416748386e437f1fb/psi4/src/psi4/libfock/jk.cc#L199. https://github.com/psi4/psi4/blob/3057799cde5524432ed3978416748386e437f1fb/psi4/src/psi4/scfgrad/jk_grad.cc#L118. I don't know if this is intentional, but it seems reasonable since a small integral doesn't guarantee a small gradient. Either way, these defaults are overridden when `ints_tolerance` is explicitly set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1540#issuecomment-464864482
https://github.com/psi4/psi4/issues/1540#issuecomment-464870518:246,Availability,toler,tolerance,246,"But yeah thanks @zachglick for pointing out the root cause. Indeed, if you specify `ints_tolerance` by hand, it works as it should. Having the default gradient threshold be 0 is just confusing, since it gets changed when you manually specify the tolerance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1540#issuecomment-464870518
https://github.com/psi4/psi4/issues/1545#issuecomment-465248469:55,Integrability,depend,dependencies,55,"As commented in the forum, if the problem is df linear dependencies, then setting e.g. `df_fitting_condition 1e-7` should fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465248469
https://github.com/psi4/psi4/issues/1545#issuecomment-465267190:52,Availability,down,down,52,"I suspect the fitting condition does not get passed down. ```; void DFTensor::build_metric() {; auto met = std::make_shared<FittingMetric>(auxiliary_, true);; met->form_eig_inverse(); ; metric_ = met->get_metric();. ```; without argument `form_eig_inverse()` does 1e-10. There are multiple occasions in psi4 where this is the case (sapt,DiskJK). I guess it was never meant to be changed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465267190
https://github.com/psi4/psi4/issues/1545#issuecomment-465300606:111,Energy Efficiency,Energy,Energy,111,"With the fixes and default cutoff, I get; ```; Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 1512230731449.1877441406 1512230731449.1877441406 140929.0768005789 125; ```; which is not surprising. Setting `df_fitting_condition 1e-7` I get; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -196270759150.0319519043 -196270759150.0319519043 89246.9451637544 129; ```; which is clearly different :laughing:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465300606
https://github.com/psi4/psi4/issues/1545#issuecomment-465300606:120,Energy Efficiency,Energy,Energy,120,"With the fixes and default cutoff, I get; ```; Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 1512230731449.1877441406 1512230731449.1877441406 140929.0768005789 125; ```; which is not surprising. Setting `df_fitting_condition 1e-7` I get; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -196270759150.0319519043 -196270759150.0319519043 89246.9451637544 129; ```; which is clearly different :laughing:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465300606
https://github.com/psi4/psi4/issues/1545#issuecomment-465300606:308,Energy Efficiency,Energy,Energy,308,"With the fixes and default cutoff, I get; ```; Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 1512230731449.1877441406 1512230731449.1877441406 140929.0768005789 125; ```; which is not surprising. Setting `df_fitting_condition 1e-7` I get; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -196270759150.0319519043 -196270759150.0319519043 89246.9451637544 129; ```; which is clearly different :laughing:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465300606
https://github.com/psi4/psi4/issues/1545#issuecomment-465300606:317,Energy Efficiency,Energy,Energy,317,"With the fixes and default cutoff, I get; ```; Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 1512230731449.1877441406 1512230731449.1877441406 140929.0768005789 125; ```; which is not surprising. Setting `df_fitting_condition 1e-7` I get; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -196270759150.0319519043 -196270759150.0319519043 89246.9451637544 129; ```; which is clearly different :laughing:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465300606
https://github.com/psi4/psi4/issues/1545#issuecomment-465300606:430,Usability,clear,clearly,430,"With the fixes and default cutoff, I get; ```; Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 1512230731449.1877441406 1512230731449.1877441406 140929.0768005789 125; ```; which is not surprising. Setting `df_fitting_condition 1e-7` I get; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -196270759150.0319519043 -196270759150.0319519043 89246.9451637544 129; ```; which is clearly different :laughing:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465300606
https://github.com/psi4/psi4/issues/1545#issuecomment-465304144:51,Energy Efficiency,Energy,Energy,51,`df_fitting_condition 1e-5` yields; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -236767940236.2724609375 -236767940236.2724609375 64635.6718298420 130; ```. so something is still awry.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465304144
https://github.com/psi4/psi4/issues/1545#issuecomment-465304144:60,Energy Efficiency,Energy,Energy,60,`df_fitting_condition 1e-5` yields; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -236767940236.2724609375 -236767940236.2724609375 64635.6718298420 130; ```. so something is still awry.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465304144
https://github.com/psi4/psi4/issues/1545#issuecomment-465315538:91,Testability,test,test,91,The problem has to do with symmetry. Running the SCF in C1 gives normal values.; A cheaper test is `DF-MP2/jun-cc-pVDZ` using `qc_module occ`. With `fnocc` mp2 values look fine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465315538
https://github.com/psi4/psi4/issues/1547#issuecomment-465428116:32,Testability,Test,Test,32,Here's the input file:. ```; #! Test. memory 120 GB. molecule {; C -0.3648219 -0.2558995 0.0923050; C -0.8237370 -0.4341058 1.4009892; C 0.0631893 -0.4945023 2.4676115; C 1.4325282 -0.3891253 2.2383352; C 1.9137275 -0.2544564 0.9427619; C 1.0188673 -0.2008603 -0.1248541; S 1.6337601 -0.0364981 -1.7761054; C 0.4221959 -1.0586124 -2.5697098; C 0.8238102 -1.8523826 -3.6439926; C -0.0849812 -2.6907175 -4.2763478; C -1.3956898 -2.7594648 -3.8167039; C -1.7946816 -1.9614268 -2.7530877; C -0.9127618 -1.0695029 -2.1338664; C -1.3561501 -0.1563074 -1.0295856; C -1.9665877 1.0501577 -1.2219860; C -3.4084245 1.3237948 -1.5387008; C -4.1778103 0.9153814 -2.6656460; C -3.6040754 0.3592572 -3.8324065; C -4.3883329 -0.0114701 -4.8966852; C -5.7880208 0.1587824 -4.8485691; C -6.3715656 0.7419527 -3.7516437; C -5.5875462 1.1595529 -2.6489158; C -6.1606962 1.8632603 -1.5594824; C -5.3698613 2.3529990 -0.5506849; C -3.9860050 2.0985433 -0.5554402; C -2.9661061 2.5564496 0.4375737; C -1.6390824 2.2179359 -0.2602651; C -1.1154328 3.3910761 -1.1017198; H -0.3127358 -0.6228208 3.4762500; H -1.8927706 -0.5052113 1.5726366; H 1.8586583 -1.8262256 -3.9659948; H 0.2398716 -3.3060821 -5.1077784; H -2.1089392 -3.4246186 -4.2897038; H -2.8205109 -1.9987160 -2.4069456; H -3.0590481 1.9923608 1.3740789; H -3.0646319 3.6174136 0.6841579; H -0.8780603 1.9494578 0.4669513; H -1.8608701 3.7224689 -1.8292206; H -0.8671432 4.2380262 -0.4563872; H -0.2145328 3.1009119 -1.6469308; H 2.1299487 -0.4343560 3.0671308; H -2.5302569 0.2498912 -3.8883093; H -5.8058019 2.9352268 0.2545431; H -3.9272763 -0.4346889 -5.7821545; H -7.4432146 0.9114819 -3.7244639; H -7.2306828 2.0442982 -1.5581508; H -6.3974861 -0.1494268 -5.6908797; H 2.9804384 -0.2081479 0.7541413; }. set {; basis dzvp; scf_type df; reference uks; }. set_num_threads(4). gradient('b3lyp-D3BJ'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1547#issuecomment-465428116
https://github.com/psi4/psi4/issues/1548#issuecomment-465575204:75,Deployability,install,installs,75,"This sounds very strange. When an internal build of a dep is triggered, it installs into a dirtree in objdir/stage/ . I know this is working in general because libxc and qcelemental have build internally for me lately. Admittedly I don’t think I’ve done an internal pb11 build since a couple minor versions ago, so maybe something has changed for them (header only libs are great for consumers but a pain to get serving correctly for all the software arrangements). I’ll look into that. In the meantime you can install pb11 via “conda install pybind11 -c psi4” (or -c conda-forge). If unaware, can also get all does from conda. See tweet for link and select “source” (sorry, we’re migrating websites at present).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-465575204
https://github.com/psi4/psi4/issues/1548#issuecomment-465575204:511,Deployability,install,install,511,"This sounds very strange. When an internal build of a dep is triggered, it installs into a dirtree in objdir/stage/ . I know this is working in general because libxc and qcelemental have build internally for me lately. Admittedly I don’t think I’ve done an internal pb11 build since a couple minor versions ago, so maybe something has changed for them (header only libs are great for consumers but a pain to get serving correctly for all the software arrangements). I’ll look into that. In the meantime you can install pb11 via “conda install pybind11 -c psi4” (or -c conda-forge). If unaware, can also get all does from conda. See tweet for link and select “source” (sorry, we’re migrating websites at present).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-465575204
https://github.com/psi4/psi4/issues/1548#issuecomment-465575204:535,Deployability,install,install,535,"This sounds very strange. When an internal build of a dep is triggered, it installs into a dirtree in objdir/stage/ . I know this is working in general because libxc and qcelemental have build internally for me lately. Admittedly I don’t think I’ve done an internal pb11 build since a couple minor versions ago, so maybe something has changed for them (header only libs are great for consumers but a pain to get serving correctly for all the software arrangements). I’ll look into that. In the meantime you can install pb11 via “conda install pybind11 -c psi4” (or -c conda-forge). If unaware, can also get all does from conda. See tweet for link and select “source” (sorry, we’re migrating websites at present).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-465575204
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:93,Deployability,install,installs,93,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:445,Deployability,patch,patch,445,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:491,Deployability,update,update,491,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1539,Deployability,install,install,1539,"d.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1577,Deployability,Install,Install,1577,"d.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1604,Deployability,Install,Install,1604,"v37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1612,Deployability,configurat,configuration,1612,"v37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1628,Deployability,Release,Release,1628,"v37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1641,Deployability,Install,Installing,1641,"v37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1730,Deployability,Install,Installing,1730,"v37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1833,Deployability,Install,Installing,1833,"orks; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocal",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1931,Deployability,Install,Installing,1931,"CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2029,Deployability,Install,Installing,2029,"found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/includ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2125,Deployability,Install,Installing,2125,"found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/includ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2230,Deployability,Install,Installing,2230,"e; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2334,Deployability,Install,Installing,2334,"r-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2439,Deployability,Install,Installing,2439,"build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2543,Deployability,Install,Installing,2543," project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2646,Deployability,Install,Installing,2646,jdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2754,Deployability,Install,Installing,2754,e/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2850,Deployability,Install,Installing,2850,/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2951,Deployability,Install,Installing,2951,tage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3050,Deployability,Install,Installing,3050,ge/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3150,Deployability,Install,Installing,3150,/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3246,Deployability,Install,Installing,3246,gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3342,Deployability,Install,Installing,3342,objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quat,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3441,Deployability,Install,Installing,3441,ernary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3538,Deployability,Install,Installing,3538,rw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- I,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3635,Deployability,Install,Installing,3635,s/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Too,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3737,Deployability,Install,Installing,3737,ser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3837,Deployability,Install,Installing,3837,r/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3934,Deployability,Install,Installing,3934,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:4034,Deployability,Install,Installing,4034,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:4133,Deployability,Install,Installing,4133,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:4228,Deployability,Install,Installing,4228,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:4342,Deployability,Install,Installing,4342,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:4463,Deployability,Install,Installing,4463,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:4580,Deployability,Install,Installing,4580,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:4693,Deployability,Install,Installing,4693,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:4891,Integrability,depend,dependencies,4891,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:546,Modifiability,config,configure,546,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1261,Modifiability,Config,Configuring,1261,"d.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1612,Modifiability,config,configuration,1612,"v37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:535,Performance,Perform,Performing,535,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1474,Performance,Perform,Performing,1474,"d.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1528,Performance,Perform,Performing,1528,"d.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:885,Safety,Detect,Detecting,885,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:921,Safety,Detect,Detecting,921,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:964,Safety,Detect,Detecting,964,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:999,Safety,Detect,Detecting,999,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966
https://github.com/psi4/psi4/pull/1550#issuecomment-466442856:62,Performance,perform,performance,62,"It shouldn't: the JK object and HF object should have similar performance. I haven't benchmarked at all, but this is needed for DFT hessians",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1550#issuecomment-466442856
https://github.com/psi4/psi4/pull/1550#issuecomment-466442856:85,Testability,benchmark,benchmarked,85,"It shouldn't: the JK object and HF object should have similar performance. I haven't benchmarked at all, but this is needed for DFT hessians",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1550#issuecomment-466442856
https://github.com/psi4/psi4/pull/1551#issuecomment-466447944:96,Performance,optimiz,optimizations,96,"This also needs to be marked ""bug fix"". Without this PR, `full_hess_every` is broken for fc-MP2 optimizations because `dertype` isn't propagating correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1551#issuecomment-466447944
https://github.com/psi4/psi4/pull/1553#issuecomment-466789467:58,Availability,down,down,58,"Very likely yes for the ""qcschema_input"" by standardizing down to the old string. The ""qcschema_molecule"" will be extra qcel code, though. I'll make the qcel changes and then revisit pinning strategy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1553#issuecomment-466789467
https://github.com/psi4/psi4/pull/1555#issuecomment-573839025:35,Testability,test,test,35,"(1) we've moved to azure. (2) full test suite is greater breaking concern, so I'll add a single long lane to azure for full tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1555#issuecomment-573839025
https://github.com/psi4/psi4/pull/1555#issuecomment-573839025:124,Testability,test,tests,124,"(1) we've moved to azure. (2) full test suite is greater breaking concern, so I'll add a single long lane to azure for full tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1555#issuecomment-573839025
https://github.com/psi4/psi4/issues/1557#issuecomment-467160257:292,Testability,test,tests,292,"It looks like the [cc-pV5Z](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/cc-pv5z.gbs#L92-L167) basis exists for Li, but the [aug-cc-pV5Z](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/aug-cc-pv5z.gbs) files doesn't contain an entry for that atom. Were your tests with CC calculations on a molecule that does not contain Li?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467160257
https://github.com/psi4/psi4/issues/1557#issuecomment-467161493:155,Energy Efficiency,energy,energy,155,"No, the same compound:. ```; molecule LiF {; 0 1; Li; F 1 1.5; }. set {; basis cc-pv5z; df_scf_guess false; freeze_core false; }; set_memory(32000000000). energy('ccsd(t)'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467161493
https://github.com/psi4/psi4/issues/1557#issuecomment-467161900:62,Testability,test,test,62,"I see this was without augmented keyword, with that added the test above crashes as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467161900
https://github.com/psi4/psi4/issues/1557#issuecomment-467166457:98,Deployability,update,update,98,"Thanks for tip hokru, added the basis from ccrepo and now it is running. ; Are there any plans to update or should I just drop in a pull request?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467166457
https://github.com/psi4/psi4/issues/1557#issuecomment-467169919:191,Availability,avail,available,191,"I am glad you were able to get it running: I failed in my attempt. I added the orbital basis sets from Grant Hill's site to your input, but there do not appear to be any auxiliary basis sets available for the density fitting procedure that's used in the SCF and, I believe, the SAPT parts. Please check your output to make sure that a reasonable auxiliary basis set is being used for the density fitting calculations: the aux basis should normally be about a factor of 3 larger than the orbital basis, but it's possible that a slightly smaller one will suffice for something as large as aug-cc-pV5Z. There is an [effort underway](https://github.com/MolSSI-BSE/basis_set_exchange) at MolSSI to curate basis sets in a more organized way and we will almost certainly be using that to update the library when it is ready to go, so I don't think a PR is needed at this time, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467169919
https://github.com/psi4/psi4/issues/1557#issuecomment-467169919:781,Deployability,update,update,781,"I am glad you were able to get it running: I failed in my attempt. I added the orbital basis sets from Grant Hill's site to your input, but there do not appear to be any auxiliary basis sets available for the density fitting procedure that's used in the SCF and, I believe, the SAPT parts. Please check your output to make sure that a reasonable auxiliary basis set is being used for the density fitting calculations: the aux basis should normally be about a factor of 3 larger than the orbital basis, but it's possible that a slightly smaller one will suffice for something as large as aug-cc-pV5Z. There is an [effort underway](https://github.com/MolSSI-BSE/basis_set_exchange) at MolSSI to curate basis sets in a more organized way and we will almost certainly be using that to update the library when it is ready to go, so I don't think a PR is needed at this time, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467169919
https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:801,Availability,Error,Error,801,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255
https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:813,Availability,Error,Error,813,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255
https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:820,Availability,Error,Error,820,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255
https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:925,Availability,error,error,925,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255
https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:1421,Availability,error,error,1421,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255
https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:392,Energy Efficiency,energy,energy,392,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255
https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:418,Energy Efficiency,energy,energy,418,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255
https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:42,Integrability,message,message,42,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255
https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:16,Testability,test,test,16,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255
https://github.com/psi4/psi4/issues/1557#issuecomment-467228938:47,Availability,avail,available,47,"> do not appear to be any auxiliary basis sets available for the density fitting procedure that's used in the SCF and, I believe, the SAPT parts. If I'm following this correctly, you are talking about RI fitting for Li? It looks like the EMSL BSE was missing that, but I've taken the values from turbomole for the new BSE. (The developers of that fitting basis were turbomole developers)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467228938
https://github.com/psi4/psi4/issues/1557#issuecomment-481268731:458,Security,access,accessible,458,"If my statement https://github.com/psi4/psi4/issues/1557#issuecomment-467273962 ""and fitting"" had been correct, then yes, it should have worked. But looking again, http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html is focused on orbital, and old EMSL for Dunning alkali has no fitting for _diffuse_ RI or for any JK. So #1559 wouldn't have fixed the original issue. But Ben extracted fitting sets from Turbomole, so at least aug-cc-pV5Z-RI for Li is accessible with the [new EMSL](https://www.basissetexchange.org/) and from Grant Hill's site (thanks, @hokru). No JK in sight. Basis sets have too many dimensions ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-481268731
https://github.com/psi4/psi4/pull/1559#issuecomment-469008343:31,Deployability,patch,patch,31,"If I read this correctly, this patch does not specify the auxiliary jkfit and ri basis sets for SAPT calculations for aug-cc-pV5Z or cc-pV5Z, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1559#issuecomment-469008343
https://github.com/psi4/psi4/pull/1560#issuecomment-467843249:24,Deployability,pipeline,pipeline,24,"@loriab could you add a pipeline variable, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-467843249
https://github.com/psi4/psi4/pull/1560#issuecomment-467843249:33,Modifiability,variab,variable,33,"@loriab could you add a pipeline variable, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-467843249
https://github.com/psi4/psi4/pull/1560#issuecomment-468075957:87,Security,access,access,87,"I've added the var on Azure (several hours ago now, sorry). Also sent invite for write access to psi4meta. There's no PRs there -- just free pushing to master. I'm expecting the `diff`s btwn Win and Linux/Mac recipes to be significant, so feel free to make a separate win conda dir or win recipe dirs, if you like. Or, if it's more convenient with Azure to keep the recipes w/i the p4 repo, the `conda/` dir is fine. I'm the only one who looks in there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468075957
https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:197,Deployability,Release,Release,197,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000
https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:368,Deployability,install,install,368,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000
https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:397,Deployability,install,install,397,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000
https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:162,Modifiability,variab,variables,162,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000
https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:25,Performance,optimiz,optimized,25,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000
https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:151,Performance,Queue,Queue,151,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000
https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:55,Testability,test,tests,55,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000
https://github.com/psi4/psi4/pull/1560#issuecomment-468755492:209,Deployability,integrat,integrates,209,"> OK! So this PR goes to `master`. After it is merged, I will cherry pick and make a PR to `1.3.x`. Sounds good. Slight complication is that when I wrote the versioner.py script that computes our version (and integrates w/cmake), I had the misguided notion that all commits on a release branch were version increments (that is, your PR would turn into v1.3.1 or .2), so I'll have to unwind that scheme before any proper tag of a v1.3.1 w/your PR. Just FYI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468755492
https://github.com/psi4/psi4/pull/1560#issuecomment-468755492:279,Deployability,release,release,279,"> OK! So this PR goes to `master`. After it is merged, I will cherry pick and make a PR to `1.3.x`. Sounds good. Slight complication is that when I wrote the versioner.py script that computes our version (and integrates w/cmake), I had the misguided notion that all commits on a release branch were version increments (that is, your PR would turn into v1.3.1 or .2), so I'll have to unwind that scheme before any proper tag of a v1.3.1 w/your PR. Just FYI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468755492
https://github.com/psi4/psi4/pull/1560#issuecomment-468755492:209,Integrability,integrat,integrates,209,"> OK! So this PR goes to `master`. After it is merged, I will cherry pick and make a PR to `1.3.x`. Sounds good. Slight complication is that when I wrote the versioner.py script that computes our version (and integrates w/cmake), I had the misguided notion that all commits on a release branch were version increments (that is, your PR would turn into v1.3.1 or .2), so I'll have to unwind that scheme before any proper tag of a v1.3.1 w/your PR. Just FYI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468755492
https://github.com/psi4/psi4/issues/1562#issuecomment-480821372:31,Modifiability,enhance,enhancement,31,#1585 is also half-bugfix half-enhancement; but I understand if you'd rather not pull it in due to incoming DDD in the near future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-480821372
https://github.com/psi4/psi4/issues/1562#issuecomment-481804831:149,Deployability,release,releases,149,"1.3.1 on 1.3.x branch is assembled [compare](https://github.com/psi4/psi4/compare/v1.3...1.3.x) and its draft RN [here](https://github.com/psi4/psi4/releases/tag/untagged-d9164f626682f599d037). It fully passes CI locally. I'll spin up the c-b stack for testing, but windows for adding stuff is pretty much today, Wednesday.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-481804831
https://github.com/psi4/psi4/issues/1562#issuecomment-481804831:253,Testability,test,testing,253,"1.3.1 on 1.3.x branch is assembled [compare](https://github.com/psi4/psi4/compare/v1.3...1.3.x) and its draft RN [here](https://github.com/psi4/psi4/releases/tag/untagged-d9164f626682f599d037). It fully passes CI locally. I'll spin up the c-b stack for testing, but windows for adding stuff is pretty much today, Wednesday.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-481804831
https://github.com/psi4/psi4/issues/1562#issuecomment-482088062:316,Deployability,release,release,316,"If it isn't too late - we've already had one [report](http://forum.psicode.org/t/trouble-with-optimize-function-cbs-extrapolation-and-cfour/1336/3) on the forums about the CFOUR interface bugs fixed in 1577. Can we get those in here as well? It doesn't look like they're in from the compare, and I can't access your release notes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062
https://github.com/psi4/psi4/issues/1562#issuecomment-482088062:178,Integrability,interface,interface,178,"If it isn't too late - we've already had one [report](http://forum.psicode.org/t/trouble-with-optimize-function-cbs-extrapolation-and-cfour/1336/3) on the forums about the CFOUR interface bugs fixed in 1577. Can we get those in here as well? It doesn't look like they're in from the compare, and I can't access your release notes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062
https://github.com/psi4/psi4/issues/1562#issuecomment-482088062:94,Performance,optimiz,optimize-function-cbs-extrapolation-and-cfour,94,"If it isn't too late - we've already had one [report](http://forum.psicode.org/t/trouble-with-optimize-function-cbs-extrapolation-and-cfour/1336/3) on the forums about the CFOUR interface bugs fixed in 1577. Can we get those in here as well? It doesn't look like they're in from the compare, and I can't access your release notes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062
https://github.com/psi4/psi4/issues/1562#issuecomment-482088062:304,Security,access,access,304,"If it isn't too late - we've already had one [report](http://forum.psicode.org/t/trouble-with-optimize-function-cbs-extrapolation-and-cfour/1336/3) on the forums about the CFOUR interface bugs fixed in 1577. Can we get those in here as well? It doesn't look like they're in from the compare, and I can't access your release notes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062
https://github.com/psi4/psi4/issues/1562#issuecomment-683409888:108,Deployability,release,release,108,"Wondering what's the status of 1.4 - AFAIK there was a paper out describing it, yet the latest (only) alpha release is over a year old. Do you have timeframe for 1.4? For Debian, I think I would need to package a couple more new dependencies which takes a while, so if it won't ship in 2020 anyway, it might not need to be rushed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-683409888
https://github.com/psi4/psi4/issues/1562#issuecomment-683409888:229,Integrability,depend,dependencies,229,"Wondering what's the status of 1.4 - AFAIK there was a paper out describing it, yet the latest (only) alpha release is over a year old. Do you have timeframe for 1.4? For Debian, I think I would need to package a couple more new dependencies which takes a while, so if it won't ship in 2020 anyway, it might not need to be rushed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-683409888
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2029,Availability,avail,available,2029,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2169,Availability,error,error,2169,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2340,Availability,toler,tolerances,2340,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3432,Availability,error,error,3432,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3865,Availability,down,downstream,3865,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5066,Availability,error,error,5066,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5376,Availability,fault,fault,5376,"67, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5387,Availability,error,error,5387,"#2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5529,Availability,fault,fault,5529,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5833,Availability,alive,alive,5833,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6889,Availability,error,error,6889,"; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (2245)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6947,Availability,error,error,6947,"; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (2245)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:7393,Availability,error,error,7393,"; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (2245)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:9,Deployability,release,release,9,"Here are release notes for PRs 1765-2246 (I have all of this in a .md file, if it would be easier to just send that file along instead):. New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1109,Deployability,Upgrade,Upgrade,1109," New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1140,Deployability,Update,Update,1140,"ethods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#18",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2333,Deployability,Update,Update,2333,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3808,Deployability,Update,Update,3808,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:4142,Deployability,Update,Update,4142,"3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#18",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:4655,Deployability,Update,Update,4655,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6392,Deployability,Patch,Patches,6392,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:416,Energy Efficiency,charge,charge,416," New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1457,Energy Efficiency,charge,charge,1457,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6282,Energy Efficiency,charge,charges,6282,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:7217,Energy Efficiency,energy,energy,7217,"; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (2245)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:7904,Energy Efficiency,energy,energy,7904,"; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (2245)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:616,Integrability,rout,routines,616," New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:635,Integrability,interface,interface,635," New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:947,Integrability,Interoperab,Interoperability,947," New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1048,Integrability,Interface,Interface,1048," New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2657,Integrability,interface,interface,2657,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3821,Integrability,interface,interface,3821,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:4046,Integrability,rout,routines,4046,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:4550,Integrability,interface,interface,4550,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5072,Integrability,message,message,5072,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5209,Integrability,depend,dependencies,5209,"OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater rad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6072,Integrability,interface,interface,6072,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6444,Integrability,interface,interface,6444,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:7847,Integrability,depend,dependency,7847,"; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (2245)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2740,Modifiability,variab,variables,2740,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3347,Modifiability,variab,variables,3347,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:4033,Modifiability,Refactor,Refactor,4033,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6497,Modifiability,Plugin,Plugins,6497,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:918,Performance,optimiz,optimizer,918," New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1223,Performance,Perform,Performace,1223,"0, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT mod",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1234,Performance,Optimiz,Optimizations,1234,"24 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1285,Performance,perform,performance,1285,"1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1404,Performance,Optimiz,Optimize,1404,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1595,Safety,safe,safe,1595,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3855,Safety,detect,detection,3855,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2593,Security,Expose,Expose,2593,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2410,Testability,test,test,2410,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2483,Testability,test,test,2483,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2887,Testability,Test,Test,2887,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2918,Testability,test,tests,2918,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3472,Testability,test,testing,3472,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3771,Testability,test,tests,3771,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:4308,Testability,test,tests,4308,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:7513,Testability,test,test,7513,"; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (2245)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683
https://github.com/psi4/psi4/issues/1562#issuecomment-892111323:127,Availability,error,error,127,"Bug; * Fix bug whereby MP2 cube files through OCC segfaulted (#2249); * Increase likelihood a misformatted basis set file will error instead of passing silently (#2254); * Fix normalization issue in Molden files (#2229); * Fix longstanding limitation where `phi_ao` function only returned correctly for Cartesian basis sets (#2210, #2262). Feature; * Add O24 database (#2252, #2154); * Move Molden writer to Python (#2229); * Make restarting SCF and saving orbitals easier (#2190)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-892111323
https://github.com/psi4/psi4/issues/1564#issuecomment-468953723:789,Energy Efficiency,energy,energy,789,"FYI, surround terminal output with triple backticks, ` ``` ` to get easy-to-read formatting. Trouble arises through the way you're specifying fitting basis sets. You don't usually don't need to be explicit, as they'll default sensibly via [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html). But because you're setting _orbital_ basis sets into _fitting_ roles, the code runs out of basis functions. Your input runs fine as-is if change Li+ to Li–. But what you really want is for proper JKFIT and RIFIT bases to be used, so the below runs fine as cation. ```; molecule HeLi {; 0 1; He 0.000000000 0.000000000 0.000000000; --; 1 1; Li 3.300000000 0.000000000 0.000000000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVDZ; }. set_memory(32000000000); energy('sapt2+3(ccd)dmp2'); ```; ```. Total HF -0.48110602 [mEh] -0.30189858 [kcal/mol] -1.26314367 [kJ/mol]; Total SAPT0 -0.48230804 [mEh] -0.30265287 [kcal/mol] -1.26629959 [kJ/mol]; Total SAPT2 -0.49001572 [mEh] -0.30748951 [kcal/mol] -1.28653610 [kJ/mol]; Total SAPT2+ -0.49022506 [mEh] -0.30762087 [kcal/mol] -1.28708572 [kJ/mol]; Total SAPT2+(3) -0.49058180 [mEh] -0.30784473 [kcal/mol] -1.28802234 [kJ/mol]; Total SAPT2+3 -0.49061857 [mEh] -0.30786780 [kcal/mol] -1.28811889 [kJ/mol]; Total SAPT2+dMP2 -0.49489433 [mEh] -0.31055088 [kcal/mol] -1.29934488 [kJ/mol]; Total SAPT2+(3)dMP2 -0.49525107 [mEh] -0.31077474 [kcal/mol] -1.30028149 [kJ/mol]; Total SAPT2+3dMP2 -0.49524933 [mEh] -0.31077365 [kcal/mol] -1.30027694 [kJ/mol]; Total SAPT2+(CCD) -0.49023349 [mEh] -0.30762616 [kcal/mol] -1.28710786 [kJ/mol]; Total SAPT2+(3)(CCD) -0.49059023 [mEh] -0.30785002 [kcal/mol] -1.28804448 [kJ/mol]; Total SAPT2+3(CCD) -0.49062701 [mEh] -0.30787309 [kcal/mol] -1.28814102 [kJ/mol]; Total SAPT2+(CCD)dMP2 -0.49490276 [mEh] -0.31055617 [kcal/mol] -1.29936701 [kJ/mol]; Total SAPT2+(3)(CCD)dMP2 -0.49525950 [mEh] -0.31078003 [kcal/mol] -1.30030363 [kJ/mol]; Total SAPT2+3(CCD)dMP2 -0.49525776 [mEh] -0.31077894 [kc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1564#issuecomment-468953723
https://github.com/psi4/psi4/issues/1564#issuecomment-468963818:98,Testability,test,tests,98,"Ah, right. Perfectly fine to set explicitly [like here]( https://github.com/psi4/psi4/blob/master/tests/sapt8/input.dat#L26-L27), just make sure they're `-jkfit` or `-ri` as needed. In fact, I really wouldn't trust any results generated with orbital == df_basis_scf == df_basis_ri == df_basis_sapt. I'll see about getting #1559 merged, so it's less of a chore for lithium. Going to close this. Please reopen if this particular trouble continues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1564#issuecomment-468963818
https://github.com/psi4/psi4/issues/1565#issuecomment-469254424:22,Availability,error,errors,22,"Hm, I don't get these errors when building in a proper buildroot with only Python 3 installed...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1565#issuecomment-469254424
https://github.com/psi4/psi4/issues/1565#issuecomment-469254424:84,Deployability,install,installed,84,"Hm, I don't get these errors when building in a proper buildroot with only Python 3 installed...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1565#issuecomment-469254424
https://github.com/psi4/psi4/issues/1565#issuecomment-469312912:89,Testability,test,testing,89,"yes, py3.6+. At the moment, it's probably still buildable with py35, but there were some testing instabilities, so we dropped it for packaging. Dropped py27 after v1.2. [This line](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L167) was supposed to be catching such things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1565#issuecomment-469312912
https://github.com/psi4/psi4/pull/1571#issuecomment-470471568:9,Testability,test,tests,9,The full tests have passed:; - https://dev.azure.com/raimisg/psi4/_build/results?buildId=588; - https://dev.azure.com/raimisg/psi4/_build/results?buildId=589,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1571#issuecomment-470471568
https://github.com/psi4/psi4/issues/1574#issuecomment-471974294:95,Availability,error,error,95,I don't see a limitation for spherical functions? Only for cartesian where psi4 would throw an error.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-471974294
https://github.com/psi4/psi4/issues/1574#issuecomment-472035927:64,Integrability,message,message,64,"I will need a little bit of time to properly parse the original message, but I suspect I know the source of the discrepancy. I am guilty of writing the original FCHK implementation; I wrote it as a simple interface to the GDMA code. I don't have access to any versions of Gaussian, so I used a combination of the example FCHK files that ship with GDMA, and the GDMA source, to reverse-engineer something resembling an FCHK file (that decision has backfired in recent weeks as people use the FCHK files we produce for other interfaces and find that it's incomplete: we've been working through those bug reports steadily). Where things get tricky is that Psi4 (and its progenitor) uses the [CCA integral](https://github.com/psi4/psi4/files/2957296/CCA.pdf) ""natural"" norm convention, unlike that other code (detailed on the last page of that attachment). Therefore, there's a factor of ; ![image](https://user-images.githubusercontent.com/201881/54209345-029a9d00-44b4-11e9-85b3-0789d498cc93.png); present in our basis function norms that some other codes lack. The presence of the overlap metric in the SCF equations means that the alternative basis function normalization manifests itself in different MO coefficients, but both conventions yield equivalent wavefunctions and properties. It's these corrections that are being applied in the snippet of code that @susilehtola referenced above. I surmise that these are not being applied consistently somewhere in the translation between Psi4 and GDMA.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927
https://github.com/psi4/psi4/issues/1574#issuecomment-472035927:205,Integrability,interface,interface,205,"I will need a little bit of time to properly parse the original message, but I suspect I know the source of the discrepancy. I am guilty of writing the original FCHK implementation; I wrote it as a simple interface to the GDMA code. I don't have access to any versions of Gaussian, so I used a combination of the example FCHK files that ship with GDMA, and the GDMA source, to reverse-engineer something resembling an FCHK file (that decision has backfired in recent weeks as people use the FCHK files we produce for other interfaces and find that it's incomplete: we've been working through those bug reports steadily). Where things get tricky is that Psi4 (and its progenitor) uses the [CCA integral](https://github.com/psi4/psi4/files/2957296/CCA.pdf) ""natural"" norm convention, unlike that other code (detailed on the last page of that attachment). Therefore, there's a factor of ; ![image](https://user-images.githubusercontent.com/201881/54209345-029a9d00-44b4-11e9-85b3-0789d498cc93.png); present in our basis function norms that some other codes lack. The presence of the overlap metric in the SCF equations means that the alternative basis function normalization manifests itself in different MO coefficients, but both conventions yield equivalent wavefunctions and properties. It's these corrections that are being applied in the snippet of code that @susilehtola referenced above. I surmise that these are not being applied consistently somewhere in the translation between Psi4 and GDMA.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927
https://github.com/psi4/psi4/issues/1574#issuecomment-472035927:523,Integrability,interface,interfaces,523,"I will need a little bit of time to properly parse the original message, but I suspect I know the source of the discrepancy. I am guilty of writing the original FCHK implementation; I wrote it as a simple interface to the GDMA code. I don't have access to any versions of Gaussian, so I used a combination of the example FCHK files that ship with GDMA, and the GDMA source, to reverse-engineer something resembling an FCHK file (that decision has backfired in recent weeks as people use the FCHK files we produce for other interfaces and find that it's incomplete: we've been working through those bug reports steadily). Where things get tricky is that Psi4 (and its progenitor) uses the [CCA integral](https://github.com/psi4/psi4/files/2957296/CCA.pdf) ""natural"" norm convention, unlike that other code (detailed on the last page of that attachment). Therefore, there's a factor of ; ![image](https://user-images.githubusercontent.com/201881/54209345-029a9d00-44b4-11e9-85b3-0789d498cc93.png); present in our basis function norms that some other codes lack. The presence of the overlap metric in the SCF equations means that the alternative basis function normalization manifests itself in different MO coefficients, but both conventions yield equivalent wavefunctions and properties. It's these corrections that are being applied in the snippet of code that @susilehtola referenced above. I surmise that these are not being applied consistently somewhere in the translation between Psi4 and GDMA.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927
https://github.com/psi4/psi4/issues/1574#issuecomment-472035927:246,Security,access,access,246,"I will need a little bit of time to properly parse the original message, but I suspect I know the source of the discrepancy. I am guilty of writing the original FCHK implementation; I wrote it as a simple interface to the GDMA code. I don't have access to any versions of Gaussian, so I used a combination of the example FCHK files that ship with GDMA, and the GDMA source, to reverse-engineer something resembling an FCHK file (that decision has backfired in recent weeks as people use the FCHK files we produce for other interfaces and find that it's incomplete: we've been working through those bug reports steadily). Where things get tricky is that Psi4 (and its progenitor) uses the [CCA integral](https://github.com/psi4/psi4/files/2957296/CCA.pdf) ""natural"" norm convention, unlike that other code (detailed on the last page of that attachment). Therefore, there's a factor of ; ![image](https://user-images.githubusercontent.com/201881/54209345-029a9d00-44b4-11e9-85b3-0789d498cc93.png); present in our basis function norms that some other codes lack. The presence of the overlap metric in the SCF equations means that the alternative basis function normalization manifests itself in different MO coefficients, but both conventions yield equivalent wavefunctions and properties. It's these corrections that are being applied in the snippet of code that @susilehtola referenced above. I surmise that these are not being applied consistently somewhere in the translation between Psi4 and GDMA.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927
https://github.com/psi4/psi4/issues/1574#issuecomment-472035927:198,Usability,simpl,simple,198,"I will need a little bit of time to properly parse the original message, but I suspect I know the source of the discrepancy. I am guilty of writing the original FCHK implementation; I wrote it as a simple interface to the GDMA code. I don't have access to any versions of Gaussian, so I used a combination of the example FCHK files that ship with GDMA, and the GDMA source, to reverse-engineer something resembling an FCHK file (that decision has backfired in recent weeks as people use the FCHK files we produce for other interfaces and find that it's incomplete: we've been working through those bug reports steadily). Where things get tricky is that Psi4 (and its progenitor) uses the [CCA integral](https://github.com/psi4/psi4/files/2957296/CCA.pdf) ""natural"" norm convention, unlike that other code (detailed on the last page of that attachment). Therefore, there's a factor of ; ![image](https://user-images.githubusercontent.com/201881/54209345-029a9d00-44b4-11e9-85b3-0789d498cc93.png); present in our basis function norms that some other codes lack. The presence of the overlap metric in the SCF equations means that the alternative basis function normalization manifests itself in different MO coefficients, but both conventions yield equivalent wavefunctions and properties. It's these corrections that are being applied in the snippet of code that @susilehtola referenced above. I surmise that these are not being applied consistently somewhere in the translation between Psi4 and GDMA.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927
https://github.com/psi4/psi4/issues/1574#issuecomment-472053550:71,Integrability,message,message,71,"@susilehtola: that's correct. I wrote my reply before I saw the second message from @AJStone, so I had assumed the basis itself is Cartesian. As long as the extra factors that I mentioned are folded into the backtransformation it *should* be fine. I'll keep digging around and let you know if I find anything. The spherical code should work for any angular momentum; it's only the Cartesians where there are subtleties to handle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472053550
https://github.com/psi4/psi4/issues/1574#issuecomment-472175255:314,Integrability,contract,contraction,314,"Dear Andy,. The treatment of the spherical harmonic functions in gdma is a bit odd; (it was originally based on Cadpac code). The spherical harmonics are; the R_lm (no sqrt(2l+1/4pi) factor) so the coefficient of the z^n term; in R_n0 is always 1. The normalizing factor for z^n exp[-zeta r^2] is; attached to the contraction coefficents so one doesn't need to worry; about it any more. I got the coefficients for the R_lm using; Mathematica, so they should be alright, but I admit that I haven't; checked them for orthogonality. The ratio of the normalising factors for; x^ly^mz^n and z^(l+m+n) is applied to the density matrix in lines 1810; onwards of dma.f90, so the normalization is done there and it's only; necessary to accumulate the integrals over the products of x^ly^mz^n terms. But this means that the spherical harmonics as they appear in the; spherical-cartesian transformation in gdma.f90 are not actually; orthonormal as they stand. This is easier to handle than it might sound. As far as the fchk file is; concerned, it is only necessary to provide orbitals described in terms; of orthonormal spherical harmonics, and the corresponding density matrix. I hope this clarifies things. I may well have made some mistakes in; implementing it for the h functions, but I have checked it carefully; several times. What puzzles me is how the normalising coefficients for; the cartesian terms get into the fchk description in terms of spherical; harmonics. Best wishes,; Anthony. On 12/03/2019 18:36, Andy Simmonett wrote:; > I could well be misreading the code here, but I think there's a problem; > in the H function transformation. If I look at the transformation; > coefficients; > <https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git/blob/HEAD:/src/gdma.f90#l275>; > and compare them to Table 1 of this paper; > <http://onlinelibrary.wiley.com/doi/10.1002/qua.560540202/full>, there; > appears to be many discrepancies. The G functions that I looked at seem; > to match up perfectly, acco",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472175255
https://github.com/psi4/psi4/issues/1574#issuecomment-472388875:73,Availability,reliab,reliable,73,"Correction (I have a very bad cold at the moment so my mind is even less reliable than usual):; The spherical harmonics expressed in terms of cartesians in the th transformation matrix in gdma.f90 are not normalized to unity but they should be orthogonal with respect to integration over a sphere. Note that the x^i y^j z^k are not the normalized v(i,j,k) of Schlegel and Frisch but literal products of powers of x, y and z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875
https://github.com/psi4/psi4/issues/1574#issuecomment-472388875:271,Deployability,integrat,integration,271,"Correction (I have a very bad cold at the moment so my mind is even less reliable than usual):; The spherical harmonics expressed in terms of cartesians in the th transformation matrix in gdma.f90 are not normalized to unity but they should be orthogonal with respect to integration over a sphere. Note that the x^i y^j z^k are not the normalized v(i,j,k) of Schlegel and Frisch but literal products of powers of x, y and z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875
https://github.com/psi4/psi4/issues/1574#issuecomment-472388875:403,Energy Efficiency,power,powers,403,"Correction (I have a very bad cold at the moment so my mind is even less reliable than usual):; The spherical harmonics expressed in terms of cartesians in the th transformation matrix in gdma.f90 are not normalized to unity but they should be orthogonal with respect to integration over a sphere. Note that the x^i y^j z^k are not the normalized v(i,j,k) of Schlegel and Frisch but literal products of powers of x, y and z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875
https://github.com/psi4/psi4/issues/1574#issuecomment-472388875:271,Integrability,integrat,integration,271,"Correction (I have a very bad cold at the moment so my mind is even less reliable than usual):; The spherical harmonics expressed in terms of cartesians in the th transformation matrix in gdma.f90 are not normalized to unity but they should be orthogonal with respect to integration over a sphere. Note that the x^i y^j z^k are not the normalized v(i,j,k) of Schlegel and Frisch but literal products of powers of x, y and z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875
https://github.com/psi4/psi4/issues/1574#issuecomment-472403253:481,Availability,error,error,481,"Dear Anthony,. Thank you for the detailed explanation. In terms of spherical harmonics in Psi4, there are no hard coded terms anywhere as far as I can remember: all integrals are transformed on the fly, using a general regular solid harmonic generating routine. Therefore, G and H functions are both handled by the same arbitrary-order transformation code. Your illness-addled brain is still more powerful than mine, so apologies if I'm wrong here, but I think I have confirmed my error diagnosis from last night. I found my old Mathematica code for generating (real) regular solid harmonics and can exactly match the [L=5 transformation coefficients](https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git/blob/HEAD:/src/gdma.f90#l275), as well as the the coefficients listed in Table 1 of the GDMA manual. However, for the L<5 coefficients in gdma.f90 my RSH generating code does not match. I can get exact agreement for these lower angular momentum terms by adding a factor of; ![image](https://user-images.githubusercontent.com/201881/54278407-a47bc180-4568-11e9-8875-e9ea637c3c1b.png); to the generating code. Therefore it appears that there is an inconsistency in the Cartesian normalization convention between the {s,p,d,f,g} and the {h} functions in gdma.f90. I hope this helps,. Best regards,. Andy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253
https://github.com/psi4/psi4/issues/1574#issuecomment-472403253:397,Energy Efficiency,power,powerful,397,"Dear Anthony,. Thank you for the detailed explanation. In terms of spherical harmonics in Psi4, there are no hard coded terms anywhere as far as I can remember: all integrals are transformed on the fly, using a general regular solid harmonic generating routine. Therefore, G and H functions are both handled by the same arbitrary-order transformation code. Your illness-addled brain is still more powerful than mine, so apologies if I'm wrong here, but I think I have confirmed my error diagnosis from last night. I found my old Mathematica code for generating (real) regular solid harmonics and can exactly match the [L=5 transformation coefficients](https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git/blob/HEAD:/src/gdma.f90#l275), as well as the the coefficients listed in Table 1 of the GDMA manual. However, for the L<5 coefficients in gdma.f90 my RSH generating code does not match. I can get exact agreement for these lower angular momentum terms by adding a factor of; ![image](https://user-images.githubusercontent.com/201881/54278407-a47bc180-4568-11e9-8875-e9ea637c3c1b.png); to the generating code. Therefore it appears that there is an inconsistency in the Cartesian normalization convention between the {s,p,d,f,g} and the {h} functions in gdma.f90. I hope this helps,. Best regards,. Andy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253
https://github.com/psi4/psi4/issues/1574#issuecomment-472403253:253,Integrability,rout,routine,253,"Dear Anthony,. Thank you for the detailed explanation. In terms of spherical harmonics in Psi4, there are no hard coded terms anywhere as far as I can remember: all integrals are transformed on the fly, using a general regular solid harmonic generating routine. Therefore, G and H functions are both handled by the same arbitrary-order transformation code. Your illness-addled brain is still more powerful than mine, so apologies if I'm wrong here, but I think I have confirmed my error diagnosis from last night. I found my old Mathematica code for generating (real) regular solid harmonics and can exactly match the [L=5 transformation coefficients](https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git/blob/HEAD:/src/gdma.f90#l275), as well as the the coefficients listed in Table 1 of the GDMA manual. However, for the L<5 coefficients in gdma.f90 my RSH generating code does not match. I can get exact agreement for these lower angular momentum terms by adding a factor of; ![image](https://user-images.githubusercontent.com/201881/54278407-a47bc180-4568-11e9-8875-e9ea637c3c1b.png); to the generating code. Therefore it appears that there is an inconsistency in the Cartesian normalization convention between the {s,p,d,f,g} and the {h} functions in gdma.f90. I hope this helps,. Best regards,. Andy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253
https://github.com/psi4/psi4/issues/1574#issuecomment-472547946:125,Availability,error,error,125,"Yes, you're right, Andy, there is an inconsistency. I believe that gdma is actually correct as it now stands, and there's no error in Psi4, but I need to remove the inconsistency.; It is a such a help to have someone else look at the code and see what I hadn't seen myself. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472547946
https://github.com/psi4/psi4/issues/1574#issuecomment-869220808:25,Availability,error,error,25,It looks like there's no error in Psi here. Happy to reopen if I'm mistaken.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-869220808
https://github.com/psi4/psi4/pull/1575#issuecomment-472564147:68,Energy Efficiency,ENERGY,ENERGY,68,"Note that I just tacked on `Wfn.energy_` / `Wfn.variables_[""CURRENT ENERGY""]` syncing as discussed. https://github.com/psi4/psi4/pull/1575/commits/89f6490ef54e419fb181ee19af361550591f1ad4 if you want to re-evaluate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1575#issuecomment-472564147
https://github.com/psi4/psi4/pull/1576#issuecomment-473369615:500,Availability,Error,Error,500,"Ugg, Windows isn't even finding it to open, much less open-so-can't-close. ```; Start 419: json-schema-1-gradient; 141/142 Test #419: json-schema-1-gradient ...........***Failed 1.97 sec; Traceback (most recent call last):; File ""D:/a/1/s/tests/json/schema-1-gradient/input.py"", line 62, in <module>; json_ret = psi4.json_wrapper.run_json(json_data); File ""D:\a\1\b\build\stage\lib\psi4\driver\json_wrapper.py"", line 191, in run_json; core.set_output_file(outfile.name, False); RuntimeError: ; Fatal Error: PsiOutStream: Failed to open file.; Error occurred in file: D:\a\1\s\psi4\src\psi4\libpsi4util\PsiOutStream.cc on line: 46; ```; maybe it should be `core.set_output_file(outfile)` or `core.set_output_file(outfile.file)`. also what do you think of putting the whole 190--215 in a `with tempfile.NamedTemporaryFile as handle:` to try to clean up closing issues?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1576#issuecomment-473369615
https://github.com/psi4/psi4/pull/1576#issuecomment-473369615:543,Availability,Error,Error,543,"Ugg, Windows isn't even finding it to open, much less open-so-can't-close. ```; Start 419: json-schema-1-gradient; 141/142 Test #419: json-schema-1-gradient ...........***Failed 1.97 sec; Traceback (most recent call last):; File ""D:/a/1/s/tests/json/schema-1-gradient/input.py"", line 62, in <module>; json_ret = psi4.json_wrapper.run_json(json_data); File ""D:\a\1\b\build\stage\lib\psi4\driver\json_wrapper.py"", line 191, in run_json; core.set_output_file(outfile.name, False); RuntimeError: ; Fatal Error: PsiOutStream: Failed to open file.; Error occurred in file: D:\a\1\s\psi4\src\psi4\libpsi4util\PsiOutStream.cc on line: 46; ```; maybe it should be `core.set_output_file(outfile)` or `core.set_output_file(outfile.file)`. also what do you think of putting the whole 190--215 in a `with tempfile.NamedTemporaryFile as handle:` to try to clean up closing issues?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1576#issuecomment-473369615
https://github.com/psi4/psi4/pull/1576#issuecomment-473369615:123,Testability,Test,Test,123,"Ugg, Windows isn't even finding it to open, much less open-so-can't-close. ```; Start 419: json-schema-1-gradient; 141/142 Test #419: json-schema-1-gradient ...........***Failed 1.97 sec; Traceback (most recent call last):; File ""D:/a/1/s/tests/json/schema-1-gradient/input.py"", line 62, in <module>; json_ret = psi4.json_wrapper.run_json(json_data); File ""D:\a\1\b\build\stage\lib\psi4\driver\json_wrapper.py"", line 191, in run_json; core.set_output_file(outfile.name, False); RuntimeError: ; Fatal Error: PsiOutStream: Failed to open file.; Error occurred in file: D:\a\1\s\psi4\src\psi4\libpsi4util\PsiOutStream.cc on line: 46; ```; maybe it should be `core.set_output_file(outfile)` or `core.set_output_file(outfile.file)`. also what do you think of putting the whole 190--215 in a `with tempfile.NamedTemporaryFile as handle:` to try to clean up closing issues?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1576#issuecomment-473369615
https://github.com/psi4/psi4/pull/1576#issuecomment-473369615:239,Testability,test,tests,239,"Ugg, Windows isn't even finding it to open, much less open-so-can't-close. ```; Start 419: json-schema-1-gradient; 141/142 Test #419: json-schema-1-gradient ...........***Failed 1.97 sec; Traceback (most recent call last):; File ""D:/a/1/s/tests/json/schema-1-gradient/input.py"", line 62, in <module>; json_ret = psi4.json_wrapper.run_json(json_data); File ""D:\a\1\b\build\stage\lib\psi4\driver\json_wrapper.py"", line 191, in run_json; core.set_output_file(outfile.name, False); RuntimeError: ; Fatal Error: PsiOutStream: Failed to open file.; Error occurred in file: D:\a\1\s\psi4\src\psi4\libpsi4util\PsiOutStream.cc on line: 46; ```; maybe it should be `core.set_output_file(outfile)` or `core.set_output_file(outfile.file)`. also what do you think of putting the whole 190--215 in a `with tempfile.NamedTemporaryFile as handle:` to try to clean up closing issues?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1576#issuecomment-473369615
https://github.com/psi4/psi4/issues/1579#issuecomment-474901373:234,Availability,recover,recover,234,"I agree that option B is the best. The effect of the fix will be very minor. This can be easily tested by comparing to DCT code with conventional integrals (and we have done this in the past). Also, current version of the code should recover the exact DCT energy and gradient when using a very large auxiliary basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373
https://github.com/psi4/psi4/issues/1579#issuecomment-474901373:256,Energy Efficiency,energy,energy,256,"I agree that option B is the best. The effect of the fix will be very minor. This can be easily tested by comparing to DCT code with conventional integrals (and we have done this in the past). Also, current version of the code should recover the exact DCT energy and gradient when using a very large auxiliary basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373
https://github.com/psi4/psi4/issues/1579#issuecomment-474901373:234,Safety,recover,recover,234,"I agree that option B is the best. The effect of the fix will be very minor. This can be easily tested by comparing to DCT code with conventional integrals (and we have done this in the past). Also, current version of the code should recover the exact DCT energy and gradient when using a very large auxiliary basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373
https://github.com/psi4/psi4/issues/1579#issuecomment-474901373:96,Testability,test,tested,96,"I agree that option B is the best. The effect of the fix will be very minor. This can be easily tested by comparing to DCT code with conventional integrals (and we have done this in the past). Also, current version of the code should recover the exact DCT energy and gradient when using a very large auxiliary basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373
https://github.com/psi4/psi4/issues/1579#issuecomment-478019331:7,Deployability,update,update,7,"Status update on this, including developments from half an hour ago. Numerical tests indicate the difference in reaction energies between the current DF scheme and the new one are negligible. The Excel file is attached if anybody wants to look over the numbers themselves. @ssh2 and I are agreed that between that and some additional theoretical points, we'll just switch the density fitting scheme to fix Point 2. In the new scheme, the cumulant gets contracted against RIFIT integrals as before, and the _entire_ rest of the 2RDM gets contracted against JKFIT integrals. [df_dcft_comparison.xlsx](https://github.com/psi4/psi4/files/3023032/df_dcft_comparison.xlsx). Point 1 is trickier. I've spoken with @jturney about DF gradients in Psi. Although `deriv.cc` does a check to see if the wavefunction is density fitted in the gradient code, it isn't for density fitted gradients but to check whether necessary tensors exist on disk or as member variables. As far as I know, every DF gradient in Psi runs through its own module. DF-MP2 gradients have `dfmp2`, DF-SCF has `scfgrad`, and Bozkaya has `dfocc`. This will require some attention, but likely won't get it until after ACS Orlando.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331
https://github.com/psi4/psi4/issues/1579#issuecomment-478019331:452,Integrability,contract,contracted,452,"Status update on this, including developments from half an hour ago. Numerical tests indicate the difference in reaction energies between the current DF scheme and the new one are negligible. The Excel file is attached if anybody wants to look over the numbers themselves. @ssh2 and I are agreed that between that and some additional theoretical points, we'll just switch the density fitting scheme to fix Point 2. In the new scheme, the cumulant gets contracted against RIFIT integrals as before, and the _entire_ rest of the 2RDM gets contracted against JKFIT integrals. [df_dcft_comparison.xlsx](https://github.com/psi4/psi4/files/3023032/df_dcft_comparison.xlsx). Point 1 is trickier. I've spoken with @jturney about DF gradients in Psi. Although `deriv.cc` does a check to see if the wavefunction is density fitted in the gradient code, it isn't for density fitted gradients but to check whether necessary tensors exist on disk or as member variables. As far as I know, every DF gradient in Psi runs through its own module. DF-MP2 gradients have `dfmp2`, DF-SCF has `scfgrad`, and Bozkaya has `dfocc`. This will require some attention, but likely won't get it until after ACS Orlando.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331
https://github.com/psi4/psi4/issues/1579#issuecomment-478019331:537,Integrability,contract,contracted,537,"Status update on this, including developments from half an hour ago. Numerical tests indicate the difference in reaction energies between the current DF scheme and the new one are negligible. The Excel file is attached if anybody wants to look over the numbers themselves. @ssh2 and I are agreed that between that and some additional theoretical points, we'll just switch the density fitting scheme to fix Point 2. In the new scheme, the cumulant gets contracted against RIFIT integrals as before, and the _entire_ rest of the 2RDM gets contracted against JKFIT integrals. [df_dcft_comparison.xlsx](https://github.com/psi4/psi4/files/3023032/df_dcft_comparison.xlsx). Point 1 is trickier. I've spoken with @jturney about DF gradients in Psi. Although `deriv.cc` does a check to see if the wavefunction is density fitted in the gradient code, it isn't for density fitted gradients but to check whether necessary tensors exist on disk or as member variables. As far as I know, every DF gradient in Psi runs through its own module. DF-MP2 gradients have `dfmp2`, DF-SCF has `scfgrad`, and Bozkaya has `dfocc`. This will require some attention, but likely won't get it until after ACS Orlando.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331
https://github.com/psi4/psi4/issues/1579#issuecomment-478019331:946,Modifiability,variab,variables,946,"Status update on this, including developments from half an hour ago. Numerical tests indicate the difference in reaction energies between the current DF scheme and the new one are negligible. The Excel file is attached if anybody wants to look over the numbers themselves. @ssh2 and I are agreed that between that and some additional theoretical points, we'll just switch the density fitting scheme to fix Point 2. In the new scheme, the cumulant gets contracted against RIFIT integrals as before, and the _entire_ rest of the 2RDM gets contracted against JKFIT integrals. [df_dcft_comparison.xlsx](https://github.com/psi4/psi4/files/3023032/df_dcft_comparison.xlsx). Point 1 is trickier. I've spoken with @jturney about DF gradients in Psi. Although `deriv.cc` does a check to see if the wavefunction is density fitted in the gradient code, it isn't for density fitted gradients but to check whether necessary tensors exist on disk or as member variables. As far as I know, every DF gradient in Psi runs through its own module. DF-MP2 gradients have `dfmp2`, DF-SCF has `scfgrad`, and Bozkaya has `dfocc`. This will require some attention, but likely won't get it until after ACS Orlando.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331
https://github.com/psi4/psi4/issues/1579#issuecomment-478019331:79,Testability,test,tests,79,"Status update on this, including developments from half an hour ago. Numerical tests indicate the difference in reaction energies between the current DF scheme and the new one are negligible. The Excel file is attached if anybody wants to look over the numbers themselves. @ssh2 and I are agreed that between that and some additional theoretical points, we'll just switch the density fitting scheme to fix Point 2. In the new scheme, the cumulant gets contracted against RIFIT integrals as before, and the _entire_ rest of the 2RDM gets contracted against JKFIT integrals. [df_dcft_comparison.xlsx](https://github.com/psi4/psi4/files/3023032/df_dcft_comparison.xlsx). Point 1 is trickier. I've spoken with @jturney about DF gradients in Psi. Although `deriv.cc` does a check to see if the wavefunction is density fitted in the gradient code, it isn't for density fitted gradients but to check whether necessary tensors exist on disk or as member variables. As far as I know, every DF gradient in Psi runs through its own module. DF-MP2 gradients have `dfmp2`, DF-SCF has `scfgrad`, and Bozkaya has `dfocc`. This will require some attention, but likely won't get it until after ACS Orlando.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331
https://github.com/psi4/psi4/pull/1581#issuecomment-475173509:146,Testability,test,test,146,I didn't factor in that the weights can be negative. Somehow I thought they must be positive.; There are many 'big' negative weights in the smoke test. IMO it should remain an expert option and somewhat hidden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-475173509
https://github.com/psi4/psi4/pull/1581#issuecomment-475229104:25,Availability,error,error,25,short study of the total error in the absolute energies for two cases added.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-475229104
https://github.com/psi4/psi4/pull/1581#issuecomment-497955232:18,Deployability,patch,patch,18,Can we rebase and patch up this PR now that #1591 is in as well. Be good to look at migrating this change in as well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-497955232
https://github.com/psi4/psi4/pull/1581#issuecomment-498260516:12,Testability,test,test,12,rebased and test added.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-498260516
https://github.com/psi4/psi4/pull/1581#issuecomment-498769923:332,Availability,error,error,332,"> tol=14 or 15, everyone?. I have the impression PSI4 always leans on the conservative side of thresholds, instead of tuning things for speed. Also, perhaps for floppy frequencies or similarly sensitive calculations one wants to be as safe as possible. Then tol=15 might be the safe choice. But..on the other hand it is DFT and the error from the quadrature itself is larger except for impractically large grids, I suppose. The often tight gradients and frequencies tests of psi4 pass with the current tolerance of 14. A dynamic adjustment of the threshold could be envisioned, but I think that would be overkill.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923
https://github.com/psi4/psi4/pull/1581#issuecomment-498769923:502,Availability,toler,tolerance,502,"> tol=14 or 15, everyone?. I have the impression PSI4 always leans on the conservative side of thresholds, instead of tuning things for speed. Also, perhaps for floppy frequencies or similarly sensitive calculations one wants to be as safe as possible. Then tol=15 might be the safe choice. But..on the other hand it is DFT and the error from the quadrature itself is larger except for impractically large grids, I suppose. The often tight gradients and frequencies tests of psi4 pass with the current tolerance of 14. A dynamic adjustment of the threshold could be envisioned, but I think that would be overkill.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923
https://github.com/psi4/psi4/pull/1581#issuecomment-498769923:235,Safety,safe,safe,235,"> tol=14 or 15, everyone?. I have the impression PSI4 always leans on the conservative side of thresholds, instead of tuning things for speed. Also, perhaps for floppy frequencies or similarly sensitive calculations one wants to be as safe as possible. Then tol=15 might be the safe choice. But..on the other hand it is DFT and the error from the quadrature itself is larger except for impractically large grids, I suppose. The often tight gradients and frequencies tests of psi4 pass with the current tolerance of 14. A dynamic adjustment of the threshold could be envisioned, but I think that would be overkill.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923
https://github.com/psi4/psi4/pull/1581#issuecomment-498769923:278,Safety,safe,safe,278,"> tol=14 or 15, everyone?. I have the impression PSI4 always leans on the conservative side of thresholds, instead of tuning things for speed. Also, perhaps for floppy frequencies or similarly sensitive calculations one wants to be as safe as possible. Then tol=15 might be the safe choice. But..on the other hand it is DFT and the error from the quadrature itself is larger except for impractically large grids, I suppose. The often tight gradients and frequencies tests of psi4 pass with the current tolerance of 14. A dynamic adjustment of the threshold could be envisioned, but I think that would be overkill.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923
https://github.com/psi4/psi4/pull/1581#issuecomment-498769923:466,Testability,test,tests,466,"> tol=14 or 15, everyone?. I have the impression PSI4 always leans on the conservative side of thresholds, instead of tuning things for speed. Also, perhaps for floppy frequencies or similarly sensitive calculations one wants to be as safe as possible. Then tol=15 might be the safe choice. But..on the other hand it is DFT and the error from the quadrature itself is larger except for impractically large grids, I suppose. The often tight gradients and frequencies tests of psi4 pass with the current tolerance of 14. A dynamic adjustment of the threshold could be envisioned, but I think that would be overkill.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923
https://github.com/psi4/psi4/pull/1581#issuecomment-499173418:101,Testability,benchmark,benchmark,101,"I increased the default threshold to 1e-15 as this seems slightly favoured. (not re-doing the timing benchmark, should be very similar)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-499173418
https://github.com/psi4/psi4/issues/1582#issuecomment-475242008:52,Availability,down,down,52,"Hmm, sounds like #1548, which I wasn't able to hunt down. Really should be installing to `<objdir>/stage/lib/${PYMOD_INSTALL_LIB}/`. Are you setting `CMAKE_INSTALL_PATH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1582#issuecomment-475242008
https://github.com/psi4/psi4/issues/1582#issuecomment-475242008:75,Deployability,install,installing,75,"Hmm, sounds like #1548, which I wasn't able to hunt down. Really should be installing to `<objdir>/stage/lib/${PYMOD_INSTALL_LIB}/`. Are you setting `CMAKE_INSTALL_PATH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1582#issuecomment-475242008
https://github.com/psi4/psi4/issues/1582#issuecomment-495759920:73,Availability,ping,ping,73,"I'm closing this in favor of #1548. If anyone sees this, please stop and ping me to discuss your build environment, as I can't figure out how it's coming about.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1582#issuecomment-495759920
https://github.com/psi4/psi4/issues/1584#issuecomment-475855410:61,Deployability,install,installs,61,Get 1.3 from here: https://admiring-tesla-08529a.netlify.com/installs/v13/. I have no fort.56 files with it,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855410
https://github.com/psi4/psi4/issues/1584#issuecomment-475855900:86,Availability,down,download,86,Yes psicode.org is outdated and will be replaced soon. Maybe @loriab could update the download link until then. The latest releases are also linked on the github release page: https://github.com/psi4/psi4/releases,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855900
https://github.com/psi4/psi4/issues/1584#issuecomment-475855900:75,Deployability,update,update,75,Yes psicode.org is outdated and will be replaced soon. Maybe @loriab could update the download link until then. The latest releases are also linked on the github release page: https://github.com/psi4/psi4/releases,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855900
https://github.com/psi4/psi4/issues/1584#issuecomment-475855900:123,Deployability,release,releases,123,Yes psicode.org is outdated and will be replaced soon. Maybe @loriab could update the download link until then. The latest releases are also linked on the github release page: https://github.com/psi4/psi4/releases,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855900
https://github.com/psi4/psi4/issues/1584#issuecomment-475855900:162,Deployability,release,release,162,Yes psicode.org is outdated and will be replaced soon. Maybe @loriab could update the download link until then. The latest releases are also linked on the github release page: https://github.com/psi4/psi4/releases,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855900
https://github.com/psi4/psi4/issues/1584#issuecomment-475855900:205,Deployability,release,releases,205,Yes psicode.org is outdated and will be replaced soon. Maybe @loriab could update the download link until then. The latest releases are also linked on the github release page: https://github.com/psi4/psi4/releases,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855900
https://github.com/psi4/psi4/issues/1584#issuecomment-475855914:280,Availability,down,downloads,280,"Sure thing, the link on this page [http://www.psicode.org/psi4manual/master/conda.html](url) points to 1.2, and the link here [http://www.psicode.org/psi4manual/master/build_obtaining.html#binary-installer](url) is also pointed at 1.2. (via a redirect from http://www.psicode.org/downloads.html)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855914
https://github.com/psi4/psi4/issues/1584#issuecomment-475855914:196,Deployability,install,installer,196,"Sure thing, the link on this page [http://www.psicode.org/psi4manual/master/conda.html](url) points to 1.2, and the link here [http://www.psicode.org/psi4manual/master/build_obtaining.html#binary-installer](url) is also pointed at 1.2. (via a redirect from http://www.psicode.org/downloads.html)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855914
https://github.com/psi4/psi4/issues/1584#issuecomment-475856396:81,Deployability,install,install-a-,81,"Ouch, the ""latest"" in http://www.psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line suggests the python-3.5 version, which is `psi4-1.1rc1+6db9b1f-py35_0`. The latest folder really is not latest at all ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475856396
https://github.com/psi4/psi4/issues/1584#issuecomment-475856396:122,Deployability,install,installer-command-line,122,"Ouch, the ""latest"" in http://www.psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line suggests the python-3.5 version, which is `psi4-1.1rc1+6db9b1f-py35_0`. The latest folder really is not latest at all ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475856396
https://github.com/psi4/psi4/issues/1584#issuecomment-475862946:4,Deployability,install,installed,4,"OK, installed 1.3 and the littering is gone, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475862946
https://github.com/psi4/psi4/issues/1584#issuecomment-475874507:165,Performance,load,loadtime,165,"thanks. I've redirected the link from current psicode.org. Didn't realize we weren't going to get the domain transferred for a while. And Radovan Bast has sent me a loadtime analysis of the new site, so I should be able to speed that up dramatically.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475874507
https://github.com/psi4/psi4/issues/1586#issuecomment-478010534:192,Availability,Down,Downloads,192,"That's because there's no longer a py35 among the ""latest"" release. I'm retiring those docs. Please follow the commands at https://admiring-tesla-08529a.netlify.com/installs/v13/ (linked off ""Downloads"" from psicode.org). You'll want to select Linux/Installer/""Stable Release"". Thanks for pointing out ways we're leading people astray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478010534
https://github.com/psi4/psi4/issues/1586#issuecomment-478010534:59,Deployability,release,release,59,"That's because there's no longer a py35 among the ""latest"" release. I'm retiring those docs. Please follow the commands at https://admiring-tesla-08529a.netlify.com/installs/v13/ (linked off ""Downloads"" from psicode.org). You'll want to select Linux/Installer/""Stable Release"". Thanks for pointing out ways we're leading people astray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478010534
https://github.com/psi4/psi4/issues/1586#issuecomment-478010534:165,Deployability,install,installs,165,"That's because there's no longer a py35 among the ""latest"" release. I'm retiring those docs. Please follow the commands at https://admiring-tesla-08529a.netlify.com/installs/v13/ (linked off ""Downloads"" from psicode.org). You'll want to select Linux/Installer/""Stable Release"". Thanks for pointing out ways we're leading people astray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478010534
https://github.com/psi4/psi4/issues/1586#issuecomment-478010534:250,Deployability,Install,Installer,250,"That's because there's no longer a py35 among the ""latest"" release. I'm retiring those docs. Please follow the commands at https://admiring-tesla-08529a.netlify.com/installs/v13/ (linked off ""Downloads"" from psicode.org). You'll want to select Linux/Installer/""Stable Release"". Thanks for pointing out ways we're leading people astray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478010534
https://github.com/psi4/psi4/issues/1586#issuecomment-478010534:268,Deployability,Release,Release,268,"That's because there's no longer a py35 among the ""latest"" release. I'm retiring those docs. Please follow the commands at https://admiring-tesla-08529a.netlify.com/installs/v13/ (linked off ""Downloads"" from psicode.org). You'll want to select Linux/Installer/""Stable Release"". Thanks for pointing out ways we're leading people astray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478010534
https://github.com/psi4/psi4/issues/1586#issuecomment-478012648:10,Availability,down,download,10,I want to download windows WSL,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478012648
https://github.com/psi4/psi4/issues/1586#issuecomment-478015030:92,Availability,down,download,92,"dabu@RES-SHANTIPA:/mnt/c/Windows/System32$ curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.3-py36-WindowsWSL-x86_64.sh"" -o Psi4conda-1.3-py36-WindowsWSL-x86_64.sh --keepalive-time 2; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0Warning: Failed to create the file Psi4conda-1.3-py36-WindowsWSL-x86_64.sh:; Warning: Permission denied; 0 515M 0 3759 0 0 6382 0 23:31:28 --:--:-- 23:31:28 6371; curl: (23) Failed writing body (0 != 3759)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478015030
https://github.com/psi4/psi4/issues/1586#issuecomment-478018358:99,Availability,down,download,99,"dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects$ curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.3-py36-Linux-x86_64.sh"" -o Psi4conda-1.3-py36-Linux-x86_64.sh --keepalive-time 2; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 100 515M 100 515M 0 0 4751k 0 0:01:51 0:01:51 --:--:-- 4323k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478018358
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:2620,Availability,FAILURE,FAILURES,2620,"c SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:3445,Availability,error,error,3445,"/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:4331,Availability,error,error,4331,"on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:4394,Availability,avail,available,4394," for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5642,Availability,error,error,5642,"-> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5705,Availability,avail,available,5705,"------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash']; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:7834,Availability,avail,available,7834,"try:; dftd3rec['stdout']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(dftd3rec.keys()))) from err. # amalgamate output; text = dftd3rec['stdout']; text += '\n <<< DFTD3 Results >>>\n'. for fl in ['dftd3_gradient']:; field = 'output_' + fl.lower(); if field in dftd3rec:; text += '\n DFTD3 scratch file {} has been read.\n'.format(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; def test_dftd3():; """"""dftd3/energy""""""; #! Exercises the various DFT-D corrections, both through python directly and through c++. ref_d2 = [-0.00390110, -0.00165271, -0.00058118]; ref_d3zero = [-0.00285088, -0.00084340, -0.00031923]; ref_d3bj = [-0.00784595, -0.00394347, -0.00226683]. ref_pbe_d2 = [-0.00278650, -0.00118051, -0.00041513]; ref_pbe_d3zero = [-0.00175474, -0.00045421, -0.00016839]; ref_pbe_d3bj = [-0.00475937, -0.00235265, -0.00131239]. eneyne = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.1261",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:7949,Availability,avail,available,7949,"r(err), list(dftd3rec.keys()))) from err. # amalgamate output; text = dftd3rec['stdout']; text += '\n <<< DFTD3 Results >>>\n'. for fl in ['dftd3_gradient']:; field = 'output_' + fl.lower(); if field in dftd3rec:; text += '\n DFTD3 scratch file {} has been read.\n'.format(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; def test_dftd3():; """"""dftd3/energy""""""; #! Exercises the various DFT-D corrections, both through python directly and through c++. ref_d2 = [-0.00390110, -0.00165271, -0.00058118]; ref_d3zero = [-0.00285088, -0.00084340, -0.00031923]; ref_d3bj = [-0.00784595, -0.00394347, -0.00226683]. ref_pbe_d2 = [-0.00278650, -0.00118051, -0.00041513]; ref_pbe_d3zero = [-0.00175474, -0.00045421, -0.00016839]; ref_pbe_d3bj = [-0.00475937, -0.00235265, -0.00131239]. eneyne = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.0000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:10115,Availability,error,error,10115,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/qcdb/molecule.py:1298: in run_dftd3; verbose=verbose); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:10831,Availability,error,error,10831,"=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------; -D correction from Py-side. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ____________________________________________________ test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Ke",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:10947,Availability,avail,available,10947,"angling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------; -D correction from Py-side. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ____________________________________________________ test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:11267,Availability,avail,available,11267,"'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------; -D correction from Py-side. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ____________________________________________________ test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:12280,Availability,error,error,12280," test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H']",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:13164,Availability,error,error,13164," on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:13227,Availability,avail,available,13227,"y` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:14475,Availability,error,error,14475," -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:14538,Availability,avail,available,14538,"; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:16671,Availability,avail,available,16671,"try:; dftd3rec['stdout']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(dftd3rec.keys()))) from err. # amalgamate output; text = dftd3rec['stdout']; text += '\n <<< DFTD3 Results >>>\n'. for fl in ['dftd3_gradient']:; field = 'output_' + fl.lower(); if field in dftd3rec:; text += '\n DFTD3 scratch file {} has been read.\n'.format(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/dri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:16786,Availability,avail,available,16786,"r(err), list(dftd3rec.keys()))) from err. # amalgamate output; text = dftd3rec['stdout']; text += '\n <<< DFTD3 Results >>>\n'. for fl in ['dftd3_gradient']:; field = 'output_' + fl.lower(); if field in dftd3rec:; text += '\n DFTD3 scratch file {} has been read.\n'.format(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:19659,Availability,error,error,19659," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:20375,Availability,error,error,20375,"=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:20491,Availability,avail,available,20491,"angling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:20783,Availability,avail,available,20783," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5226,Deployability,update,updates,5226,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; --------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5397,Deployability,update,updates,5397,"ant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:14061,Deployability,update,updates,14061,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:14232,Deployability,update,updates,14232,"t not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and outp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:3196,Energy Efficiency,energy,energy,3196,"te-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:7261,Energy Efficiency,energy,energy,7261,"neric; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(jobrec.keys()))) from err. try:; dftd3rec['stdout']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(dftd3rec.keys()))) from err. # amalgamate output; text = dftd3rec['stdout']; text += '\n <<< DFTD3 Results >>>\n'. for fl in ['dftd3_gradient']:; field = 'output_' + fl.lower(); if field in dftd3rec:; text += '\n DFTD3 scratch file {} has been read.\n'.format(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; def test_dftd3():; """"""dftd3/energy""""""; #! Exercises the various DFT-D corrections, both through python directly and through c++. ref",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:8195,Energy Efficiency,energy,energy,8195,"at(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; def test_dftd3():; """"""dftd3/energy""""""; #! Exercises the various DFT-D corrections, both through python directly and through c++. ref_d2 = [-0.00390110, -0.00165271, -0.00058118]; ref_d3zero = [-0.00285088, -0.00084340, -0.00031923]; ref_d3bj = [-0.00784595, -0.00394347, -0.00226683]. ref_pbe_d2 = [-0.00278650, -0.00118051, -0.00041513]; ref_pbe_d3zero = [-0.00175474, -0.00045421, -0.00016839]; ref_pbe_d3bj = [-0.00475937, -0.00235265, -0.00131239]. eneyne = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; """"""). print(' -D correction from Py-side'); eneyne.update_geometry(); > E, G = eneyne.run_dftd3('b3lyp', 'd2'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:202:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:9866,Energy Efficiency,energy,energy,9866," H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; """"""). print(' -D correction from Py-side'); eneyne.update_geometry(); > E, G = eneyne.run_dftd3('b3lyp', 'd2'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:202:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/qcdb/molecule.py:1298: in run_dftd3; verbose=verbose); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:11650,Energy Efficiency,energy,energy,11650,"opy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------; -D correction from Py-side. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ____________________________________________________ test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:12031,Energy Efficiency,energy,energy,12031,"--------------------------------------------- Captured stdout call -------------------------------------------------; -D correction from Py-side. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ____________________________________________________ test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:13154,Energy Efficiency,energy,energy,13154," on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:14465,Energy Efficiency,energy,energy,14465," -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:16098,Energy Efficiency,energy,energy,16098,"neric; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(jobrec.keys()))) from err. try:; dftd3rec['stdout']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(dftd3rec.keys()))) from err. # amalgamate output; text = dftd3rec['stdout']; text += '\n <<< DFTD3 Results >>>\n'. for fl in ['dftd3_gradient']:; field = 'output_' + fl.lower(); if field in dftd3rec:; text += '\n DFTD3 scratch file {} has been read.\n'.format(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:17413,Energy Efficiency,energy,energy,17413,"p /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:17694,Energy Efficiency,energy,energy,17694,"E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:17735,Energy Efficiency,energy,energy,17735,"cessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:17756,Energy Efficiency,energy,energy,17756,"cessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:18182,Energy Efficiency,energy,energy,18182,"6185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:18208,Energy Efficiency,energy,energy,18208,"6185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:19029,Energy Efficiency,energy,energy,19029,"n_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:19410,Energy Efficiency,energy,energy,19410,"/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:3591,Integrability,rout,routine,3591,"/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:10261,Integrability,rout,routine,10261,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/qcdb/molecule.py:1298: in run_dftd3; verbose=verbose); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:12426,Integrability,rout,routine,12426," test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H']",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:19805,Integrability,rout,routine,19805," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21420,Modifiability,plugin,plugin,21420," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21443,Modifiability,plugin,plugin,21443," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21583,Modifiability,plugin,plugin,21583," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21604,Modifiability,plugin,plugin,21604," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:482,Performance,cache,cachedir,482,"Please look at the test result now:. (base) dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1077,Performance,load,loaded,1077,"NTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5064,Performance,load,loads,5064,"try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:13899,Performance,load,loads,13899,"try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21012,Safety,detect,detecting,21012," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21273,Safety,detect,detecting,21273," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21410,Safety,detect,detecting,21410," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21573,Safety,detect,detecting,21573," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:19,Testability,test,test,19,"Please look at the test result now:. (base) dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:115,Testability,test,test,115,"Please look at the test result now:. (base) dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:285,Testability,test,test,285,"Please look at the test result now:. (base) dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:658,Testability,test,tests,658,"Please look at the test result now:. (base) dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:740,Testability,test,tests,740,"Please look at the test result now:. (base) dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:823,Testability,test,tests,823,"Please look at the test result now:. (base) dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:909,Testability,test,tests,909,"Please look at the test result now:. (base) dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:993,Testability,test,tests,993,"Please look at the test result now:. (base) dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1136,Testability,test,tests,1136,"ize changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1224,Testability,test,tests,1224,"om PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1307,Testability,test,tests,1307,"==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1392,Testability,test,tests,1392,"ytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1475,Testability,test,tests,1475,"/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1560,Testability,test,tests,1560,"inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [10",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1651,Testability,test,tests,1651,"ges/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =====================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1739,Testability,test,tests,1739,"i4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ____________________________________________________",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1827,Testability,test,tests,1827,"sts/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1909,Testability,test,tests,1909,"4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1995,Testability,test,tests,1995,"tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:2078,Testability,test,tests,2078,"y loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplemen",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:2165,Testability,test,tests,2165,"_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:2249,Testability,test,tests,2249,"test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:2334,Testability,test,tests,2334,"st_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:2421,Testability,test,tests,2421,"_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:2507,Testability,test,tests,2507,"our SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_outpu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:4993,Testability,test,test,4993,"ptions'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:9111,Testability,test,tests,9111,"e following exception:. @pytest.mark.smoke; @using_dftd3; def test_dftd3():; """"""dftd3/energy""""""; #! Exercises the various DFT-D corrections, both through python directly and through c++. ref_d2 = [-0.00390110, -0.00165271, -0.00058118]; ref_d3zero = [-0.00285088, -0.00084340, -0.00031923]; ref_d3bj = [-0.00784595, -0.00394347, -0.00226683]. ref_pbe_d2 = [-0.00278650, -0.00118051, -0.00041513]; ref_pbe_d3zero = [-0.00175474, -0.00045421, -0.00016839]; ref_pbe_d3bj = [-0.00475937, -0.00235265, -0.00131239]. eneyne = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; """"""). print(' -D correction from Py-side'); eneyne.update_geometry(); > E, G = eneyne.run_dftd3('b3lyp', 'd2'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:202:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/qcdb/molecule.py:1298: in run_dftd3; verbose=verbose); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; job",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:13828,Testability,test,test,13828,"ptions'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:17485,Testability,test,tests,17485," re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_help",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:20865,Testability,test,test,20865," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:20978,Testability,test,tests,20978," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21112,Testability,test,tests,21112," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21238,Testability,test,tests,21238," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21375,Testability,test,tests,21375," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21538,Testability,test,tests,21538," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846
https://github.com/psi4/psi4/issues/1586#issuecomment-478034387:108,Availability,error,error,108,"The warning is fine -- http://forum.psicode.org/t/numpy-ufunc-size-change-warning/1305?u=loriab . The dftd3 error is curious. May be related to https://github.com/MolSSI/QCEngine/issues/45 . Can probe later (most everyone Psi4 is away at a conference next week). Unless DFT-D3 was your target, you're installed, passing, and ready to run.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478034387
https://github.com/psi4/psi4/issues/1586#issuecomment-478034387:301,Deployability,install,installed,301,"The warning is fine -- http://forum.psicode.org/t/numpy-ufunc-size-change-warning/1305?u=loriab . The dftd3 error is curious. May be related to https://github.com/MolSSI/QCEngine/issues/45 . Can probe later (most everyone Psi4 is away at a conference next week). Unless DFT-D3 was your target, you're installed, passing, and ready to run.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478034387
https://github.com/psi4/psi4/issues/1587#issuecomment-478302836:151,Availability,down,downloading,151,"> Then I rebuild dftd3 under WSL. You mean you go to https://github.com/loriab/dftd3, clone and compile and it works? (`make` or `cmake`?) Or you mean downloading the 3.2.0 tarball from Grimme and `make`ing it works?. In either case, thanks for the investigation. I must have done something in the conda package that disagrees with WSL. Will fix by v1.3.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1587#issuecomment-478302836
https://github.com/psi4/psi4/issues/1587#issuecomment-481897683:207,Deployability,update,update,207,"@chrinide, @patrashantigopal, @sjayellis, I've built a new dftd3 that fixed segfaults on a Linux system (whereas many linux systems were fine with the existing `3.2.1_<stuff>_0` dftd3 pkg). Would you `conda update dftd3 -c psi4/label/dev` to get the new executable (it'll be a `_0` to `_1`) update, try it, and report back success or still failing, please?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1587#issuecomment-481897683
https://github.com/psi4/psi4/issues/1587#issuecomment-481897683:291,Deployability,update,update,291,"@chrinide, @patrashantigopal, @sjayellis, I've built a new dftd3 that fixed segfaults on a Linux system (whereas many linux systems were fine with the existing `3.2.1_<stuff>_0` dftd3 pkg). Would you `conda update dftd3 -c psi4/label/dev` to get the new executable (it'll be a `_0` to `_1`) update, try it, and report back success or still failing, please?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1587#issuecomment-481897683
https://github.com/psi4/psi4/issues/1587#issuecomment-482156616:21,Testability,test,testing,21,"Thanks very much for testing! The difference is that _0 was built as a static executable, whereas _1 links to some system libraries dynamically. I may publish a _2 that just adjusts the conda deps. Please report back if it ever breaks again. I'll rebuild `gcp`, too, since it possibly has the same trouble (though both dftd3 and gcp have been static binaries for years on conda).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1587#issuecomment-482156616
https://github.com/psi4/psi4/issues/1587#issuecomment-482311425:19,Deployability,update,update,19,Thank you for your update.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1587#issuecomment-482311425
https://github.com/psi4/psi4/issues/1587#issuecomment-482565020:36,Testability,test,tests,36,../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1587#issuecomment-482565020
https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:97,Availability,error,error,97,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785
https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:317,Availability,down,downstream,317,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785
https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:404,Availability,error,error,404,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785
https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:498,Availability,down,downstream,498,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785
https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:147,Deployability,install,installation,147,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785
https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:263,Deployability,install,installs,263,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785
https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:738,Deployability,install,installs,738,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785
https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:103,Integrability,message,message,103,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785
https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:356,Modifiability,CONFIG,CONFIG,356,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785
https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:371,Safety,detect,detecting,371,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785
https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:518,Usability,guid,guide,518,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785
https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:403,Availability,down,downstream,403,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202
https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:33,Deployability,update,updates,33,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202
https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:548,Deployability,patch,patch,548,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202
https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:656,Deployability,patch,patch,656,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202
https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:714,Integrability,depend,dependencies,714,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202
https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:146,Safety,detect,detect,146,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202
https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:242,Safety,detect,detect,242,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202
https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:384,Safety,detect,detectable,384,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202
https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:532,Safety,detect,detect,532,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202
https://github.com/psi4/psi4/issues/1589#issuecomment-495759282:77,Availability,down,downstream,77,I agree that a CMake Libint1 build failed to be least common denominator for downstream on two fronts: (1) no `.pc` files and (2) no `libr12` library. I've fixed the first one Libint-side. Second I don't particularly have time for and can't do anyways until someone volunteers to test the resulting `libr12`. The one-line patch on the packager side to use the libtool build with Psi4 is above. Closing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282
https://github.com/psi4/psi4/issues/1589#issuecomment-495759282:322,Deployability,patch,patch,322,I agree that a CMake Libint1 build failed to be least common denominator for downstream on two fronts: (1) no `.pc` files and (2) no `libr12` library. I've fixed the first one Libint-side. Second I don't particularly have time for and can't do anyways until someone volunteers to test the resulting `libr12`. The one-line patch on the packager side to use the libtool build with Psi4 is above. Closing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282
https://github.com/psi4/psi4/issues/1589#issuecomment-495759282:280,Testability,test,test,280,I agree that a CMake Libint1 build failed to be least common denominator for downstream on two fronts: (1) no `.pc` files and (2) no `libr12` library. I've fixed the first one Libint-side. Second I don't particularly have time for and can't do anyways until someone volunteers to test the resulting `libr12`. The one-line patch on the packager side to use the libtool build with Psi4 is above. Closing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282
https://github.com/psi4/psi4/issues/1590#issuecomment-479987948:61,Availability,failure,failures,61,I just tried 1.3 ```(Rev {HEAD} 20e5c7e)``` and get the same failures.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-479987948
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:151,Availability,error,error,151,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:230,Availability,error,error,230,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:405,Availability,error,error,405,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:453,Availability,Error,Error,453,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:465,Availability,Error,Error,465,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:1615,Availability,failure,failures,1615,"3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it failed in the grad computation of the second geometry optimization cycle with a ""Bus error"" after/during ```==> DFJKGrad: Density-Fitted SCF Gradients <==```. Thanks for looking into this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:2084,Availability,error,error,2084,"3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it failed in the grad computation of the second geometry optimization cycle with a ""Bus error"" after/during ```==> DFJKGrad: Density-Fitted SCF Gradients <==```. Thanks for looking into this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:157,Integrability,message,messages,157,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:1747,Performance,optimiz,optimization,1747,"3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it failed in the grad computation of the second geometry optimization cycle with a ""Bus error"" after/during ```==> DFJKGrad: Density-Fitted SCF Gradients <==```. Thanks for looking into this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:1959,Performance,optimiz,optimization,1959,"3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it failed in the grad computation of the second geometry optimization cycle with a ""Bus error"" after/during ```==> DFJKGrad: Density-Fitted SCF Gradients <==```. Thanks for looking into this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:2053,Performance,optimiz,optimization,2053,"3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it failed in the grad computation of the second geometry optimization cycle with a ""Bus error"" after/during ```==> DFJKGrad: Density-Fitted SCF Gradients <==```. Thanks for looking into this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:237,Safety,Detect,Detected,237,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677
https://github.com/psi4/psi4/issues/1590#issuecomment-481493169:444,Modifiability,extend,extend,444,"Ran these under memory/cpu profilers (4 cores) and found the following:. B3LYP with MemJK (8.3 GB max, 3 SCF iterations):; ![b3lyp_memjk](https://user-images.githubusercontent.com/1769841/55844039-7d81c280-5b09-11e9-8fd5-c2dc04d71d23.png). wB97X with MemJK (7.1 GB max, 1 SCF iteration):; ![wb97x_diskjk](https://user-images.githubusercontent.com/1769841/55844045-82467680-5b09-11e9-9e20-78204926df8e.png). I could not run these for their full extend on my laptop, but overall it looks like they are staying relatively in-bounds. I can fix the 4% overages on the B3LYP run, I see where that occurs now. A thought is that they slowly leak over time, can you check which optimization iteration these are failing on?. I sadly do not have any local hardware I can run things on these days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481493169
https://github.com/psi4/psi4/issues/1590#issuecomment-481493169:669,Performance,optimiz,optimization,669,"Ran these under memory/cpu profilers (4 cores) and found the following:. B3LYP with MemJK (8.3 GB max, 3 SCF iterations):; ![b3lyp_memjk](https://user-images.githubusercontent.com/1769841/55844039-7d81c280-5b09-11e9-8fd5-c2dc04d71d23.png). wB97X with MemJK (7.1 GB max, 1 SCF iteration):; ![wb97x_diskjk](https://user-images.githubusercontent.com/1769841/55844045-82467680-5b09-11e9-9e20-78204926df8e.png). I could not run these for their full extend on my laptop, but overall it looks like they are staying relatively in-bounds. I can fix the 4% overages on the B3LYP run, I see where that occurs now. A thought is that they slowly leak over time, can you check which optimization iteration these are failing on?. I sadly do not have any local hardware I can run things on these days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481493169
https://github.com/psi4/psi4/issues/1590#issuecomment-481747147:75,Deployability,install,install,75,"Using `psrecord` with `psrecord ${PID} --interval 1 --plot plot1.png`. Can install via pip. There are better ones out there, but that one is simple. It might be good to use the `--log` feature as well so we can see some actual numbers as those charts are getting a bit jumbled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481747147
https://github.com/psi4/psi4/issues/1590#issuecomment-481747147:180,Testability,log,log,180,"Using `psrecord` with `psrecord ${PID} --interval 1 --plot plot1.png`. Can install via pip. There are better ones out there, but that one is simple. It might be good to use the `--log` feature as well so we can see some actual numbers as those charts are getting a bit jumbled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481747147
https://github.com/psi4/psi4/issues/1590#issuecomment-481747147:141,Usability,simpl,simple,141,"Using `psrecord` with `psrecord ${PID} --interval 1 --plot plot1.png`. Can install via pip. There are better ones out there, but that one is simple. It might be good to use the `--log` feature as well so we can see some actual numbers as those charts are getting a bit jumbled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481747147
https://github.com/psi4/psi4/issues/1590#issuecomment-481894673:74,Availability,error,error,74,It is running on my system as I write this. One thing to note is that the error can occur very early on on our system. With a fairly high variability. So I do not think it is memory creeping up. It looks more like a memory allocation amount that is overwritten by a wrong pointer operation or something like that.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481894673
https://github.com/psi4/psi4/issues/1590#issuecomment-481894673:138,Modifiability,variab,variability,138,It is running on my system as I write this. One thing to note is that the error can occur very early on on our system. With a fairly high variability. So I do not think it is memory creeping up. It looks more like a memory allocation amount that is overwritten by a wrong pointer operation or something like that.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481894673
https://github.com/psi4/psi4/issues/1590#issuecomment-481899244:36,Testability,log,log,36,Here is the output from psrecord (--log mem.log):; Everything was fine during the SCF in this case but it started picking up memory pretty quickly after starting with the gradient until it was killed when reaching 10GB. I also attached the input and output files. [mem.log](https://github.com/psi4/psi4/files/3066180/mem.log); [out.txt](https://github.com/psi4/psi4/files/3066184/out.txt); [in.txt](https://github.com/psi4/psi4/files/3066185/in.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481899244
https://github.com/psi4/psi4/issues/1590#issuecomment-481899244:44,Testability,log,log,44,Here is the output from psrecord (--log mem.log):; Everything was fine during the SCF in this case but it started picking up memory pretty quickly after starting with the gradient until it was killed when reaching 10GB. I also attached the input and output files. [mem.log](https://github.com/psi4/psi4/files/3066180/mem.log); [out.txt](https://github.com/psi4/psi4/files/3066184/out.txt); [in.txt](https://github.com/psi4/psi4/files/3066185/in.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481899244
https://github.com/psi4/psi4/issues/1590#issuecomment-481899244:269,Testability,log,log,269,Here is the output from psrecord (--log mem.log):; Everything was fine during the SCF in this case but it started picking up memory pretty quickly after starting with the gradient until it was killed when reaching 10GB. I also attached the input and output files. [mem.log](https://github.com/psi4/psi4/files/3066180/mem.log); [out.txt](https://github.com/psi4/psi4/files/3066184/out.txt); [in.txt](https://github.com/psi4/psi4/files/3066185/in.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481899244
https://github.com/psi4/psi4/issues/1590#issuecomment-481899244:321,Testability,log,log,321,Here is the output from psrecord (--log mem.log):; Everything was fine during the SCF in this case but it started picking up memory pretty quickly after starting with the gradient until it was killed when reaching 10GB. I also attached the input and output files. [mem.log](https://github.com/psi4/psi4/files/3066180/mem.log); [out.txt](https://github.com/psi4/psi4/files/3066184/out.txt); [in.txt](https://github.com/psi4/psi4/files/3066185/in.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481899244
https://github.com/psi4/psi4/issues/1590#issuecomment-482109929:165,Availability,down,down,165,I will run this a few times on my system to see if I can reproduce. The sporadic nature and the fact that happens at many different points could take a bit to track down.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482109929
https://github.com/psi4/psi4/issues/1590#issuecomment-482626995:63,Performance,optimiz,optimization,63,Here's single-thread wB97X run with chrinide's input after two optimization cycles (it's still going). Max real 11 gb and virtual 12.4 gb. [bgobbi_wB97x_n1.log](https://github.com/psi4/psi4/files/3074059/bgobbi_wB97x_n1.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482626995
https://github.com/psi4/psi4/issues/1590#issuecomment-482626995:156,Testability,log,log,156,Here's single-thread wB97X run with chrinide's input after two optimization cycles (it's still going). Max real 11 gb and virtual 12.4 gb. [bgobbi_wB97x_n1.log](https://github.com/psi4/psi4/files/3074059/bgobbi_wB97x_n1.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482626995
https://github.com/psi4/psi4/issues/1590#issuecomment-482626995:220,Testability,log,log,220,Here's single-thread wB97X run with chrinide's input after two optimization cycles (it's still going). Max real 11 gb and virtual 12.4 gb. [bgobbi_wB97x_n1.log](https://github.com/psi4/psi4/files/3074059/bgobbi_wB97x_n1.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482626995
https://github.com/psi4/psi4/issues/1590#issuecomment-482748016:331,Energy Efficiency,Energy,Energy,331,"_still going_. @psi-rking, here's an example where dynamic level 2 might have kicked in a bit early?. ```; base) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-quaternary/objdir37: (1.3.x) grep '~' bgobbi_wb97x.out ; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1771.54871790 -1.77e+03 8.23e-03 1.77e-03 o 2.50e-01 2.94e-02 o ~; 2 -1771.54896434 -2.46e-04 4.20e-03 7.85e-04 o 3.99e-02 7.34e-03 o ~; 3 -1771.54708256 1.88e-03 1.22e-02 2.75e-03 o 3.09e-02 7.32e-03 o ~; 4 -1771.54962420 -2.54e-03 1.84e-03 4.35e-04 o 5.76e-02 7.34e-03 o ~; 5 -1771.54991808 -2.94e-04 6.10e-04 1.42e-04 o 4.66e-02 7.34e-03 o ~; 6 -1771.54999493 -7.68e-05 5.40e-04 1.21e-04 o 1.40e-02 1.83e-03 o ~; 7 -1771.55001819 -2.33e-05 4.51e-04 8.25e-05 o 1.89e-02 1.84e-03 o ~; 8 -1771.55002275 -4.56e-06 3.95e-04 7.58e-05 o 4.60e-03 4.59e-04 o ~; 9 -1771.55002699 -4.24e-06 3.75e-04 4.74e-05 o 4.74e-03 4.59e-04 o ~; 10 -1771.55002919 -2.20e-06 3.62e-04 3.71e-05 o 1.53e-02 1.38e-03 o ~; 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; 	Raising dynamic level to 2. ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482748016
https://github.com/psi4/psi4/issues/1590#issuecomment-482748016:1845,Energy Efficiency,Energy,Energy,1845, 1.84e-03 4.35e-04 o 5.76e-02 7.34e-03 o ~; 5 -1771.54991808 -2.94e-04 6.10e-04 1.42e-04 o 4.66e-02 7.34e-03 o ~; 6 -1771.54999493 -7.68e-05 5.40e-04 1.21e-04 o 1.40e-02 1.83e-03 o ~; 7 -1771.55001819 -2.33e-05 4.51e-04 8.25e-05 o 1.89e-02 1.84e-03 o ~; 8 -1771.55002275 -4.56e-06 3.95e-04 7.58e-05 o 4.60e-03 4.59e-04 o ~; 9 -1771.55002699 -4.24e-06 3.75e-04 4.74e-05 o 4.74e-03 4.59e-04 o ~; 10 -1771.55002919 -2.20e-06 3.62e-04 3.71e-05 o 1.53e-02 1.38e-03 o ~; 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; 	Raising dynamic level to 2. ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1771.55003766 -1.77e+03 4.10e-04 6.83e-05 o 1.12e-01 1.18e-02 o ~; 2 -1771.55004087 -3.21e-06 4.24e-04 6.61e-05 o 1.14e-01 1.18e-02 o ~; 3 -1771.55000286 3.80e-05 5.17e-04 1.06e-04 o 1.07e-01 1.18e-02 o ~; 4 -1771.54998378 1.91e-05 8.31e-04 1.67e-04 o 9.19e-02 1.18e-02 o ~; 	Raising dynamic level to 3. ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; -----------------------------------------------------------------------------------------,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482748016
https://github.com/psi4/psi4/issues/1590#issuecomment-482748016:2574,Energy Efficiency,Energy,Energy,2574,.42e-04 o 4.66e-02 7.34e-03 o ~; 6 -1771.54999493 -7.68e-05 5.40e-04 1.21e-04 o 1.40e-02 1.83e-03 o ~; 7 -1771.55001819 -2.33e-05 4.51e-04 8.25e-05 o 1.89e-02 1.84e-03 o ~; 8 -1771.55002275 -4.56e-06 3.95e-04 7.58e-05 o 4.60e-03 4.59e-04 o ~; 9 -1771.55002699 -4.24e-06 3.75e-04 4.74e-05 o 4.74e-03 4.59e-04 o ~; 10 -1771.55002919 -2.20e-06 3.62e-04 3.71e-05 o 1.53e-02 1.38e-03 o ~; 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; 	Raising dynamic level to 2. ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1771.55003766 -1.77e+03 4.10e-04 6.83e-05 o 1.12e-01 1.18e-02 o ~; 2 -1771.55004087 -3.21e-06 4.24e-04 6.61e-05 o 1.14e-01 1.18e-02 o ~; 3 -1771.55000286 3.80e-05 5.17e-04 1.06e-04 o 1.07e-01 1.18e-02 o ~; 4 -1771.54998378 1.91e-05 8.31e-04 1.67e-04 o 9.19e-02 1.18e-02 o ~; 	Raising dynamic level to 3. ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1771.54998378 -1.77e+03 4.62e-04 8.08e-05 o 2.48e-02 4.77e-03 o ~; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482748016
https://github.com/psi4/psi4/issues/1590#issuecomment-482755167:537,Energy Efficiency,Energy,Energy,537,"Depends on how impatient the user is :) Actually, very nice, example.; Thanks!. On Fri, Apr 12, 2019 at 6:02 PM Lori A. Burns <notifications@github.com>; wrote:. > *still going*; >; > @psi-rking <https://github.com/psi-rking>, here's an example where; > dynamic level 2 might have kicked in a bit early?; >; > base) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-quaternary/objdir37: (1.3.x) grep '~' bgobbi_wb97x.out; > --------------------------------------------------------------------------------------------- ~; > Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > --------------------------------------------------------------------------------------------- ~; > Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; > --------------------------------------------------------------------------------------------- ~; > 1 -1771.54871790 -1.77e+03 8.23e-03 1.77e-03 o 2.50e-01 2.94e-02 o ~; > 2 -1771.54896434 -2.46e-04 4.20e-03 7.85e-04 o 3.99e-02 7.34e-03 o ~; > 3 -1771.54708256 1.88e-03 1.22e-02 2.75e-03 o 3.09e-02 7.32e-03 o ~; > 4 -1771.54962420 -2.54e-03 1.84e-03 4.35e-04 o 5.76e-02 7.34e-03 o ~; > 5 -1771.54991808 -2.94e-04 6.10e-04 1.42e-04 o 4.66e-02 7.34e-03 o ~; > 6 -1771.54999493 -7.68e-05 5.40e-04 1.21e-04 o 1.40e-02 1.83e-03 o ~; > 7 -1771.55001819 -2.33e-05 4.51e-04 8.25e-05 o 1.89e-02 1.84e-03 o ~; > 8 -1771.55002275 -4.56e-06 3.95e-04 7.58e-05 o 4.60e-03 4.59e-04 o ~; > 9 -1771.55002699 -4.24e-06 3.75e-04 4.74e-05 o 4.74e-03 4.59e-04 o ~; > 10 -1771.55002919 -2.20e-06 3.62e-04 3.71e-05 o 1.53e-02 1.38e-03 o ~; > 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; > 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; > 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; > 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; > 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; > 	Raising dynamic level to 2. ~; > ------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482755167
https://github.com/psi4/psi4/issues/1590#issuecomment-482755167:2093,Energy Efficiency,Energy,Energy,2093,2 7.34e-03 o ~; > 5 -1771.54991808 -2.94e-04 6.10e-04 1.42e-04 o 4.66e-02 7.34e-03 o ~; > 6 -1771.54999493 -7.68e-05 5.40e-04 1.21e-04 o 1.40e-02 1.83e-03 o ~; > 7 -1771.55001819 -2.33e-05 4.51e-04 8.25e-05 o 1.89e-02 1.84e-03 o ~; > 8 -1771.55002275 -4.56e-06 3.95e-04 7.58e-05 o 4.60e-03 4.59e-04 o ~; > 9 -1771.55002699 -4.24e-06 3.75e-04 4.74e-05 o 4.74e-03 4.59e-04 o ~; > 10 -1771.55002919 -2.20e-06 3.62e-04 3.71e-05 o 1.53e-02 1.38e-03 o ~; > 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; > 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; > 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; > 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; > 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; > 	Raising dynamic level to 2. ~; > --------------------------------------------------------------------------------------------- ~; > Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > --------------------------------------------------------------------------------------------- ~; > Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; > --------------------------------------------------------------------------------------------- ~; > 1 -1771.55003766 -1.77e+03 4.10e-04 6.83e-05 o 1.12e-01 1.18e-02 o ~; > 2 -1771.55004087 -3.21e-06 4.24e-04 6.61e-05 o 1.14e-01 1.18e-02 o ~; > 3 -1771.55000286 3.80e-05 5.17e-04 1.06e-04 o 1.07e-01 1.18e-02 o ~; > 4 -1771.54998378 1.91e-05 8.31e-04 1.67e-04 o 9.19e-02 1.18e-02 o ~; > 	Raising dynamic level to 3. ~; > --------------------------------------------------------------------------------------------- ~; > Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > --------------------------------------------------------------------------------------------- ~; > Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; > ---------------------------------------------------------------,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482755167
https://github.com/psi4/psi4/issues/1590#issuecomment-482755167:2842,Energy Efficiency,Energy,Energy,2842," 1.53e-02 1.38e-03 o ~; > 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; > 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; > 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; > 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; > 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; > 	Raising dynamic level to 2. ~; > --------------------------------------------------------------------------------------------- ~; > Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > --------------------------------------------------------------------------------------------- ~; > Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; > --------------------------------------------------------------------------------------------- ~; > 1 -1771.55003766 -1.77e+03 4.10e-04 6.83e-05 o 1.12e-01 1.18e-02 o ~; > 2 -1771.55004087 -3.21e-06 4.24e-04 6.61e-05 o 1.14e-01 1.18e-02 o ~; > 3 -1771.55000286 3.80e-05 5.17e-04 1.06e-04 o 1.07e-01 1.18e-02 o ~; > 4 -1771.54998378 1.91e-05 8.31e-04 1.67e-04 o 9.19e-02 1.18e-02 o ~; > 	Raising dynamic level to 3. ~; > --------------------------------------------------------------------------------------------- ~; > Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > --------------------------------------------------------------------------------------------- ~; > Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; > --------------------------------------------------------------------------------------------- ~; > 1 -1771.54998378 -1.77e+03 4.62e-04 8.08e-05 o 2.48e-02 4.77e-03 o ~; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1590#issuecomment-482748016>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTEdoeLZvGdjUJOTGrGckwcj3U_gmks5vgRB-gaJpZM4cbdQV>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482755167
https://github.com/psi4/psi4/issues/1590#issuecomment-482755167:0,Integrability,Depend,Depends,0,"Depends on how impatient the user is :) Actually, very nice, example.; Thanks!. On Fri, Apr 12, 2019 at 6:02 PM Lori A. Burns <notifications@github.com>; wrote:. > *still going*; >; > @psi-rking <https://github.com/psi-rking>, here's an example where; > dynamic level 2 might have kicked in a bit early?; >; > base) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-quaternary/objdir37: (1.3.x) grep '~' bgobbi_wb97x.out; > --------------------------------------------------------------------------------------------- ~; > Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > --------------------------------------------------------------------------------------------- ~; > Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; > --------------------------------------------------------------------------------------------- ~; > 1 -1771.54871790 -1.77e+03 8.23e-03 1.77e-03 o 2.50e-01 2.94e-02 o ~; > 2 -1771.54896434 -2.46e-04 4.20e-03 7.85e-04 o 3.99e-02 7.34e-03 o ~; > 3 -1771.54708256 1.88e-03 1.22e-02 2.75e-03 o 3.09e-02 7.32e-03 o ~; > 4 -1771.54962420 -2.54e-03 1.84e-03 4.35e-04 o 5.76e-02 7.34e-03 o ~; > 5 -1771.54991808 -2.94e-04 6.10e-04 1.42e-04 o 4.66e-02 7.34e-03 o ~; > 6 -1771.54999493 -7.68e-05 5.40e-04 1.21e-04 o 1.40e-02 1.83e-03 o ~; > 7 -1771.55001819 -2.33e-05 4.51e-04 8.25e-05 o 1.89e-02 1.84e-03 o ~; > 8 -1771.55002275 -4.56e-06 3.95e-04 7.58e-05 o 4.60e-03 4.59e-04 o ~; > 9 -1771.55002699 -4.24e-06 3.75e-04 4.74e-05 o 4.74e-03 4.59e-04 o ~; > 10 -1771.55002919 -2.20e-06 3.62e-04 3.71e-05 o 1.53e-02 1.38e-03 o ~; > 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; > 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; > 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; > 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; > 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; > 	Raising dynamic level to 2. ~; > ------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482755167
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1260,Availability,robust,robust,1260,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1296,Availability,ROBUST,ROBUST,1296,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1582,Availability,error,error,1582,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2652,Availability,Error,Error,2652,"; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-2> (5); > - *M* tests/dft-b3lyp/input.dat; > <https://github.com/psi4/psi4/pull/1591/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1591.patch; > - https://github.com/psi4/psi4/pull/1591.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1591>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvDQ8k3q9iMmt3WyUH9_hci95FKbks5vdu4LgaJpZM4ceQFR>; > .;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:372,Deployability,integrat,integration,372,"Holger, very glad you are taking this on!. On Fri, Apr 5, 2019, 2:32 AM Holger Kruse <notifications@github.com> wrote:. > Description; >; > This *work-in-progress* PR implements standard grid pruning techniques,; > where one assumes that the electron density is largely isotropic close to; > the atomic centre and thus coarse grids are sufficient. Typically the; > atomic integration sphere is divided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:656,Deployability,integrat,integration,656,"Holger, very glad you are taking this on!. On Fri, Apr 5, 2019, 2:32 AM Holger Kruse <notifications@github.com> wrote:. > Description; >; > This *work-in-progress* PR implements standard grid pruning techniques,; > where one assumes that the electron density is largely isotropic close to; > the atomic centre and thus coarse grids are sufficient. Typically the; > atomic integration sphere is divided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:769,Deployability,update,updated,769,"Holger, very glad you are taking this on!. On Fri, Apr 5, 2019, 2:32 AM Holger Kruse <notifications@github.com> wrote:. > Description; >; > This *work-in-progress* PR implements standard grid pruning techniques,; > where one assumes that the electron density is largely isotropic close to; > the atomic centre and thus coarse grids are sufficient. Typically the; > atomic integration sphere is divided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1058,Deployability,update,updated,1058,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1416,Deployability,integrat,integration,1416,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:3325,Deployability,Patch,Patch,3325," - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-2> (5); > - *M* tests/dft-b3lyp/input.dat; > <https://github.com/psi4/psi4/pull/1591/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1591.patch; > - https://github.com/psi4/psi4/pull/1591.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1591>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvDQ8k3q9iMmt3WyUH9_hci95FKbks5vdu4LgaJpZM4ceQFR>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:3385,Deployability,patch,patch,3385," - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-2> (5); > - *M* tests/dft-b3lyp/input.dat; > <https://github.com/psi4/psi4/pull/1591/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1591.patch; > - https://github.com/psi4/psi4/pull/1591.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1591>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvDQ8k3q9iMmt3WyUH9_hci95FKbks5vdu4LgaJpZM4ceQFR>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:372,Integrability,integrat,integration,372,"Holger, very glad you are taking this on!. On Fri, Apr 5, 2019, 2:32 AM Holger Kruse <notifications@github.com> wrote:. > Description; >; > This *work-in-progress* PR implements standard grid pruning techniques,; > where one assumes that the electron density is largely isotropic close to; > the atomic centre and thus coarse grids are sufficient. Typically the; > atomic integration sphere is divided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:656,Integrability,integrat,integration,656,"Holger, very glad you are taking this on!. On Fri, Apr 5, 2019, 2:32 AM Holger Kruse <notifications@github.com> wrote:. > Description; >; > This *work-in-progress* PR implements standard grid pruning techniques,; > where one assumes that the electron density is largely isotropic close to; > the atomic centre and thus coarse grids are sufficient. Typically the; > atomic integration sphere is divided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1416,Integrability,integrat,integration,1416,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1079,Modifiability,extend,extended,1079,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2043,Security,access,access,2043,"tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:939,Testability,test,tests,939,"Holger, very glad you are taking this on!. On Fri, Apr 5, 2019, 2:32 AM Holger Kruse <notifications@github.com> wrote:. > Description; >; > This *work-in-progress* PR implements standard grid pruning techniques,; > where one assumes that the electron density is largely isotropic close to; > the atomic centre and thus coarse grids are sufficient. Typically the; > atomic integration sphere is divided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1570,Testability,test,testing,1570,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1782,Testability,test,tests,1782," BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2236,Testability,Test,Tests,2236,"; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2286,Testability,test,tests,2286,"; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2380,Testability,test,tests,2380," possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-2> (5); > - *M* tests/dft-b3lyp/input.dat; > <https://github.com/psi4/psi4/pull/1591/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1591.patch; > - https://github.com/psi4/psi4/pull/1591.diff; >; > —; > You are rec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2674,Testability,test,testing,2674,"; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-2> (5); > - *M* tests/dft-b3lyp/input.dat; > <https://github.com/psi4/psi4/pull/1591/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1591.patch; > - https://github.com/psi4/psi4/pull/1591.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1591>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvDQ8k3q9iMmt3WyUH9_hci95FKbks5vdu4LgaJpZM4ceQFR>; > .;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2687,Testability,test,testing,2687,"; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-2> (5); > - *M* tests/dft-b3lyp/input.dat; > <https://github.com/psi4/psi4/pull/1591/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1591.patch; > - https://github.com/psi4/psi4/pull/1591.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1591>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvDQ8k3q9iMmt3WyUH9_hci95FKbks5vdu4LgaJpZM4ceQFR>; > .;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:3232,Testability,test,tests,3232," - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-2> (5); > - *M* tests/dft-b3lyp/input.dat; > <https://github.com/psi4/psi4/pull/1591/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1591.patch; > - https://github.com/psi4/psi4/pull/1591.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1591>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvDQ8k3q9iMmt3WyUH9_hci95FKbks5vdu4LgaJpZM4ceQFR>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1716,Usability,guid,guidance,1716,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922
https://github.com/psi4/psi4/pull/1591#issuecomment-481629474:47,Energy Efficiency,energy,energy,47,added plot for Argon dimer showing oscillating energy (following the Ochsenfeld paper),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-481629474
https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:180,Availability,Down,Down,180,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739
https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:16,Deployability,update,update,16,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739
https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:129,Energy Efficiency,reduce,reduce,129,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739
https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:39,Testability,test,test,39,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739
https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:72,Testability,test,tested,72,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739
https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:292,Testability,test,test,292,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739
https://github.com/psi4/psi4/pull/1591#issuecomment-494026644:50,Deployability,update,updated,50,"I think (B) with a comment in the tests about why updated. We want to keep checking to the same precision, but like physconst updates, the ref value has changed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494026644
https://github.com/psi4/psi4/pull/1591#issuecomment-494026644:126,Deployability,update,updates,126,"I think (B) with a comment in the tests about why updated. We want to keep checking to the same precision, but like physconst updates, the ref value has changed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494026644
https://github.com/psi4/psi4/pull/1591#issuecomment-494026644:34,Testability,test,tests,34,"I think (B) with a comment in the tests about why updated. We want to keep checking to the same precision, but like physconst updates, the ref value has changed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494026644
https://github.com/psi4/psi4/pull/1591#issuecomment-494030116:87,Deployability,update,update,87,"(B) seconded. All of the tests are total energies / gradients, so I think it's fine to update the reference values, as long as the shifts aren't huge. . Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494030116
https://github.com/psi4/psi4/pull/1591#issuecomment-494030116:25,Testability,test,tests,25,"(B) seconded. All of the tests are total energies / gradients, so I think it's fine to update the reference values, as long as the shifts aren't huge. . Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494030116
https://github.com/psi4/psi4/pull/1591#issuecomment-494030116:241,Testability,test,tests,241,"(B) seconded. All of the tests are total energies / gradients, so I think it's fine to update the reference values, as long as the shifts aren't huge. . Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494030116
https://github.com/psi4/psi4/pull/1591#issuecomment-494039569:90,Testability,test,tests,90,"> Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?. It, and the others like it, tests absolute energies instead of relative ones.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494039569
https://github.com/psi4/psi4/pull/1591#issuecomment-494039569:172,Testability,test,tests,172,"> Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?. It, and the others like it, tests absolute energies instead of relative ones.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494039569
https://github.com/psi4/psi4/pull/1591#issuecomment-494047737:92,Testability,test,tests,92,"> > Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?; > ; > It, and the others like it, tests absolute energies instead of relative ones. True. Could be moved to `pytests` though, so that the testing of DFT functionals is done in one place, with the exception of smoke tests... Edit: not in this PR, just as a future plan.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494047737
https://github.com/psi4/psi4/pull/1591#issuecomment-494047737:180,Testability,test,tests,180,"> > Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?; > ; > It, and the others like it, tests absolute energies instead of relative ones. True. Could be moved to `pytests` though, so that the testing of DFT functionals is done in one place, with the exception of smoke tests... Edit: not in this PR, just as a future plan.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494047737
https://github.com/psi4/psi4/pull/1591#issuecomment-494047737:284,Testability,test,testing,284,"> > Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?; > ; > It, and the others like it, tests absolute energies instead of relative ones. True. Could be moved to `pytests` though, so that the testing of DFT functionals is done in one place, with the exception of smoke tests... Edit: not in this PR, just as a future plan.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494047737
https://github.com/psi4/psi4/pull/1591#issuecomment-494047737:361,Testability,test,tests,361,"> > Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?; > ; > It, and the others like it, tests absolute energies instead of relative ones. True. Could be moved to `pytests` though, so that the testing of DFT functionals is done in one place, with the exception of smoke tests... Edit: not in this PR, just as a future plan.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494047737
https://github.com/psi4/psi4/pull/1591#issuecomment-494066017:24,Testability,test,tests,24,"Agree with not dropping tests (esp. when have other programs' numbers) but fine to rearrange them, especially when `pytest.mark.parametrize` could make them more readable. I expect the `dft-*-custom`s could be consolidated. But, yes, beyond scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494066017
https://github.com/psi4/psi4/pull/1591#issuecomment-494350678:196,Availability,ROBUST,ROBUST,196,"Proposal for keyword reorganization, replacing `DFT_PRUNING_SCHEME` like so:. ```; DFT_PRUNING_SCHEME = 'FUNCTION' 'REGION'; DFT_PRUNING_FUNCTION = 'FLAT' 'P-SLATER' '...' ; DFT_PRUNING_REGION = 'ROBUST' 'TREUTLER'; ```. Maybe current `DFT_PRUNING_SCHEME` could handle both sub-options somehow? but I don't see an easy way to do it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494350678
https://github.com/psi4/psi4/pull/1591#issuecomment-494392367:346,Availability,ping,ping,346,"I am not aware of an area that we have made branching options like this before. @loriab may have a location. Barring any prior art I think the current layout makes plenty of sense. Apologies for being MIA a bit on this PR. I am **very** happy that someone is looking into the grid files! All of the changes look good at cursory glance. Please do ping me if something specific comes up, I think these kinds of changes are very important to the future of the DFT code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494392367
https://github.com/psi4/psi4/pull/1591#issuecomment-494450392:218,Availability,ROBUST,ROBUST,218,"Apologies if I didn't trace the logic thoroughly and correctly. But doesn't one always do region _or_ function (or flat)? From the user's perspective, could one then do. ```; /*- Select approach for pruning. Options ``ROBUST`` and ``TREUTLER`` prune based on regions (proximity to nucleus) while ... !expert -*/; options.add_str(""DFT_PRUNING_TYPE"", ""ROBUST"", ""FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER ROBUST TREUTLER"");; ```. I think the most related option was https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L177 where it could have been two options but we rolled into one for the user.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494450392
https://github.com/psi4/psi4/pull/1591#issuecomment-494450392:350,Availability,ROBUST,ROBUST,350,"Apologies if I didn't trace the logic thoroughly and correctly. But doesn't one always do region _or_ function (or flat)? From the user's perspective, could one then do. ```; /*- Select approach for pruning. Options ``ROBUST`` and ``TREUTLER`` prune based on regions (proximity to nucleus) while ... !expert -*/; options.add_str(""DFT_PRUNING_TYPE"", ""ROBUST"", ""FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER ROBUST TREUTLER"");; ```. I think the most related option was https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L177 where it could have been two options but we rolled into one for the user.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494450392
https://github.com/psi4/psi4/pull/1591#issuecomment-494450392:429,Availability,ROBUST,ROBUST,429,"Apologies if I didn't trace the logic thoroughly and correctly. But doesn't one always do region _or_ function (or flat)? From the user's perspective, could one then do. ```; /*- Select approach for pruning. Options ``ROBUST`` and ``TREUTLER`` prune based on regions (proximity to nucleus) while ... !expert -*/; options.add_str(""DFT_PRUNING_TYPE"", ""ROBUST"", ""FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER ROBUST TREUTLER"");; ```. I think the most related option was https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L177 where it could have been two options but we rolled into one for the user.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494450392
https://github.com/psi4/psi4/pull/1591#issuecomment-494450392:32,Testability,log,logic,32,"Apologies if I didn't trace the logic thoroughly and correctly. But doesn't one always do region _or_ function (or flat)? From the user's perspective, could one then do. ```; /*- Select approach for pruning. Options ``ROBUST`` and ``TREUTLER`` prune based on regions (proximity to nucleus) while ... !expert -*/; options.add_str(""DFT_PRUNING_TYPE"", ""ROBUST"", ""FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER ROBUST TREUTLER"");; ```. I think the most related option was https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L177 where it could have been two options but we rolled into one for the user.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494450392
https://github.com/psi4/psi4/pull/1591#issuecomment-494711450:84,Testability,test,test,84,"Changed it back to a single ``DFT_PRUNING_SCHEME`` option and added a basic pruning test.; The new ``DFT_NUCLEAR_SCHEME=SBECKE`` has no test, but the nuclear and radial building schemes have no tests in general...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494711450
https://github.com/psi4/psi4/pull/1591#issuecomment-494711450:136,Testability,test,test,136,"Changed it back to a single ``DFT_PRUNING_SCHEME`` option and added a basic pruning test.; The new ``DFT_NUCLEAR_SCHEME=SBECKE`` has no test, but the nuclear and radial building schemes have no tests in general...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494711450
https://github.com/psi4/psi4/pull/1591#issuecomment-494711450:194,Testability,test,tests,194,"Changed it back to a single ``DFT_PRUNING_SCHEME`` option and added a basic pruning test.; The new ``DFT_NUCLEAR_SCHEME=SBECKE`` has no test, but the nuclear and radial building schemes have no tests in general...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494711450
https://github.com/psi4/psi4/pull/1591#issuecomment-494774576:192,Availability,avail,available,192,*Question*: Do we want to be able to switch between old and new BS radii (as expert option)?. Personally I think I would leave them commented out in the code and not make a user-facing switch available.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494774576
https://github.com/psi4/psi4/pull/1591#issuecomment-494793194:188,Deployability,release,release,188,"I think that should be sufficient, the differences are nominal enough. On this note can you quantify the energy differences (both absolute and relative) so that we can mention this in the release notes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494793194
https://github.com/psi4/psi4/pull/1591#issuecomment-494793194:105,Energy Efficiency,energy,energy,105,"I think that should be sufficient, the differences are nominal enough. On this note can you quantify the energy differences (both absolute and relative) so that we can mention this in the release notes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494793194
https://github.com/psi4/psi4/pull/1591#issuecomment-495132122:16,Availability,error,error,16,I added various error statistics over the S22 benchmark set.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495132122
https://github.com/psi4/psi4/pull/1591#issuecomment-495132122:46,Testability,benchmark,benchmark,46,I added various error statistics over the S22 benchmark set.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495132122
https://github.com/psi4/psi4/pull/1591#issuecomment-495351118:119,Availability,ROBUST,ROBUST,119,"I will add some timings and check the gradient soon(TM).; The various dft gradient tests do generally _not_ pass with `ROBUST` pruning. Didn't check errors, but those tests are often very tight. Finally, pruning _on_ by default (`ROBUST` scheme)?? I'd argue that is what users expect since most (all?) big QM programs do this. Possibly wants more thorough testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118
https://github.com/psi4/psi4/pull/1591#issuecomment-495351118:149,Availability,error,errors,149,"I will add some timings and check the gradient soon(TM).; The various dft gradient tests do generally _not_ pass with `ROBUST` pruning. Didn't check errors, but those tests are often very tight. Finally, pruning _on_ by default (`ROBUST` scheme)?? I'd argue that is what users expect since most (all?) big QM programs do this. Possibly wants more thorough testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118
https://github.com/psi4/psi4/pull/1591#issuecomment-495351118:230,Availability,ROBUST,ROBUST,230,"I will add some timings and check the gradient soon(TM).; The various dft gradient tests do generally _not_ pass with `ROBUST` pruning. Didn't check errors, but those tests are often very tight. Finally, pruning _on_ by default (`ROBUST` scheme)?? I'd argue that is what users expect since most (all?) big QM programs do this. Possibly wants more thorough testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118
https://github.com/psi4/psi4/pull/1591#issuecomment-495351118:83,Testability,test,tests,83,"I will add some timings and check the gradient soon(TM).; The various dft gradient tests do generally _not_ pass with `ROBUST` pruning. Didn't check errors, but those tests are often very tight. Finally, pruning _on_ by default (`ROBUST` scheme)?? I'd argue that is what users expect since most (all?) big QM programs do this. Possibly wants more thorough testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118
https://github.com/psi4/psi4/pull/1591#issuecomment-495351118:167,Testability,test,tests,167,"I will add some timings and check the gradient soon(TM).; The various dft gradient tests do generally _not_ pass with `ROBUST` pruning. Didn't check errors, but those tests are often very tight. Finally, pruning _on_ by default (`ROBUST` scheme)?? I'd argue that is what users expect since most (all?) big QM programs do this. Possibly wants more thorough testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118
https://github.com/psi4/psi4/pull/1591#issuecomment-495351118:356,Testability,test,testing,356,"I will add some timings and check the gradient soon(TM).; The various dft gradient tests do generally _not_ pass with `ROBUST` pruning. Didn't check errors, but those tests are often very tight. Finally, pruning _on_ by default (`ROBUST` scheme)?? I'd argue that is what users expect since most (all?) big QM programs do this. Possibly wants more thorough testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118
https://github.com/psi4/psi4/pull/1591#issuecomment-495416288:14,Availability,ROBUST,ROBUST,14,"I agree that `ROBUST` should be the default. We might want to leave the default to no pruning and then make an issue reviewing the timings, accuracy, and change log notes before switching the default over. Whenever we change the results the DFT code obtains even if minor I do get a little nervous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495416288
https://github.com/psi4/psi4/pull/1591#issuecomment-495416288:161,Testability,log,log,161,"I agree that `ROBUST` should be the default. We might want to leave the default to no pruning and then make an issue reviewing the timings, accuracy, and change log notes before switching the default over. Whenever we change the results the DFT code obtains even if minor I do get a little nervous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495416288
https://github.com/psi4/psi4/pull/1591#issuecomment-495584058:34,Availability,error,error,34,added some timings and a gradient error to the post.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495584058
https://github.com/psi4/psi4/pull/1597#issuecomment-482030604:15,Integrability,interface,interface,15,The functional interface should be modified in such a way that Psi4 pulls the info about the functionals (i.e. the citations) from libxc; there's little sense in duplicating this information.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1597#issuecomment-482030604
https://github.com/psi4/psi4/pull/1597#issuecomment-482108276:62,Usability,simpl,simply,62,This is already the case in `libxc_functionals.py`. This list simply needs an expansion I believe.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1597#issuecomment-482108276
https://github.com/psi4/psi4/pull/1599#issuecomment-482414859:1723,Energy Efficiency,energy,energy,1723,"tegrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OO|VV) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OV|OO) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OV|VV) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Ground State <==; -> MP2 energy = -2.73300898049903; [Squared-norm of MP1 wavefunction = 1.9482925]; PR-MP2 energy = -2.67454645912216; [Squared-norm of PR-MP1 wavefunction = 1.9035300]. ==> CIS/ADC(1) Level <==. 1 A state: 0.0517508 (a.u.), 1.4082107 (eV); ---------------------------------------------; 48 0 0.9604025397; 48 2 0.1503577396; 48 4 0.1179983520; 41 0 0.1104431860; 39 0 0.0512708739. 2 A state: 0.1139962 (a.u.), 3.1019955 (eV); ---------------------------------------------; 47 0 0.9322885266; 45 0 0.2322877190; 47 4 0.1095223496; 47 2 0.1012025144; 43 2 0.0790815566. ==> ADC(2) Computation <==. -> 1 A state : 0.0000632 (a.u.), 0.0017207 (eV); Non-iterative: -0.0001946 (a.u.), -0.0052954 (eV); Occ Vir Coefficient; ---------------------------------------------; 48 0 -0.9643264198; 48 4 -0.1622220253; 48 2 -0.1163186773; 46 0 -0.0845761860; 41 0 -0.0678547535. Converged in 7 iteration.; Squared norm of the S component: 0.9427657; The S vector is rotated up to 0.549 (deg.). -> 2 A state : 0.0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482414859
https://github.com/psi4/psi4/pull/1599#issuecomment-482414859:1806,Energy Efficiency,energy,energy,1806,"-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OO|VV) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OV|OO) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OV|VV) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Ground State <==; -> MP2 energy = -2.73300898049903; [Squared-norm of MP1 wavefunction = 1.9482925]; PR-MP2 energy = -2.67454645912216; [Squared-norm of PR-MP1 wavefunction = 1.9035300]. ==> CIS/ADC(1) Level <==. 1 A state: 0.0517508 (a.u.), 1.4082107 (eV); ---------------------------------------------; 48 0 0.9604025397; 48 2 0.1503577396; 48 4 0.1179983520; 41 0 0.1104431860; 39 0 0.0512708739. 2 A state: 0.1139962 (a.u.), 3.1019955 (eV); ---------------------------------------------; 47 0 0.9322885266; 45 0 0.2322877190; 47 4 0.1095223496; 47 2 0.1012025144; 43 2 0.0790815566. ==> ADC(2) Computation <==. -> 1 A state : 0.0000632 (a.u.), 0.0017207 (eV); Non-iterative: -0.0001946 (a.u.), -0.0052954 (eV); Occ Vir Coefficient; ---------------------------------------------; 48 0 -0.9643264198; 48 4 -0.1622220253; 48 2 -0.1163186773; 46 0 -0.0845761860; 41 0 -0.0678547535. Converged in 7 iteration.; Squared norm of the S component: 0.9427657; The S vector is rotated up to 0.549 (deg.). -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.0454606 (a.u.), 1.2370470 (eV); Occ Vir Co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482414859
https://github.com/psi4/psi4/pull/1599#issuecomment-482414859:3052,Energy Efficiency,energy,energy,3052,"ction = 1.9482925]; PR-MP2 energy = -2.67454645912216; [Squared-norm of PR-MP1 wavefunction = 1.9035300]. ==> CIS/ADC(1) Level <==. 1 A state: 0.0517508 (a.u.), 1.4082107 (eV); ---------------------------------------------; 48 0 0.9604025397; 48 2 0.1503577396; 48 4 0.1179983520; 41 0 0.1104431860; 39 0 0.0512708739. 2 A state: 0.1139962 (a.u.), 3.1019955 (eV); ---------------------------------------------; 47 0 0.9322885266; 45 0 0.2322877190; 47 4 0.1095223496; 47 2 0.1012025144; 43 2 0.0790815566. ==> ADC(2) Computation <==. -> 1 A state : 0.0000632 (a.u.), 0.0017207 (eV); Non-iterative: -0.0001946 (a.u.), -0.0052954 (eV); Occ Vir Coefficient; ---------------------------------------------; 48 0 -0.9643264198; 48 4 -0.1622220253; 48 2 -0.1163186773; 46 0 -0.0845761860; 41 0 -0.0678547535. Converged in 7 iteration.; Squared norm of the S component: 0.9427657; The S vector is rotated up to 0.549 (deg.). -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.0454606 (a.u.), 1.2370470 (eV); Occ Vir Coefficient; ---------------------------------------------. Converged in 2 iteration.; Squared norm of the S component: 1.0000000; The S vector is rotated up to 90.000 (deg.); #WARNING: Strongly rotated from the CIS state!. -> Corresponding GS total energy (a.u.) = -909.00717671283519. Module time:; user time = 13203.86 seconds = 220.06 minutes; system time = 4785.08 seconds = 79.75 minutes; total time = 17996 seconds = 299.93 minutes; Total time:; user time = 13569.80 seconds = 226.16 minutes; system time = 5014.77 seconds = 83.58 minutes; total time = 18567 seconds = 309.45 minutes. ∩==; (: 3)))== kskkskkskksk BOOOoooooOOOON!; ∪==. Psi4 stopped on: Thursday, 11 April 2019 04:20PM; Psi4 wall time for execution: 5:09:26.20. *** Psi4 exiting successfully. Buy a developer a beer!; ```. The calculation ran, but there is a warning. Does anybody have any good ideas for checking this? I'm sure other codes can compute ADC, but it's not something I've played with before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482414859
https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:546,Energy Efficiency,Energy,Energy,546,"I couldn't reproduce the results using the def2-SVP basis, so I ran the same computation as in #1596 but with the 6-31G basis (all other parameters being the same). I attach Q-Chem output file.; [BODIPY.txt](https://github.com/psi4/psi4/files/3073222/BODIPY.txt). Here's the summary of ADC(2) results from Q-Chem (can't quite figure out how to format this on GitHub):; --------------------------------------------------------------------------------; HF Summary ; --------------------------------------------------------------------------------; Energy: -906.6356657873 a.u.; Dip. moment [a.u.]: [ 3.494726, -0.033111, -1.462926]; Total dipole [Debye]: 9.629954; <r^2> [a.u.]: [2923.854114, 1346.264718, 630.542572]; Total <r^2> [a.u.]: 4900.661404; --------------------------------------------------------------------------------. --------------------------------------------------------------------------------; MP(2) Summary ; --------------------------------------------------------------------------------; Energy contribution: -1.8309391560 a.u.; Total energy: -908.4666049433 a.u.; Dip. moment [a.u.]: [ 3.265989, -0.052169, -1.229851]; Total dipole [Debye]: 8.871367; <r^2> [a.u.]: [2923.192179, 1346.473546, 629.676198]; Total <r^2> [a.u.]: 4899.341924; --------------------------------------------------------------------------------; Starting Davidson ... ; --------------------------------------------------------------------------------; It NVec Conv Avg. Norm Max. Norm Conv. states Remark; --------------------------------------------------------------------------------; 2 0 3.605e-01 5.138e-01 0.1878 n n Guess.; 1 4 0 1.105e-01 1.726e-01 0.0174 n n ; 2 6 0 3.198e-02 5.191e-02 0.0066 n n ; 3 8 0 1.563e-02 2.479e-02 0.0049 n n ; 4 10 0 9.895e-03 1.453e-02 0.0045 n n ; 5 12 0 6.530e-03 1.034e-02 0.0043 n n ; 6 14 0 5.263e-03 8.300e-03 0.0043 n n ; 7 16 0 5.542e-03 1.031e-02 0.0042 n n ; 8 18 0 3.255e-02 6.506e-02 0.0042 n n ; 9 20 0 1.320e-02 2.638e-02 0.0042 n n ; 10 4 0 9.744e-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190
https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:1012,Energy Efficiency,Energy,Energy,1012,"I couldn't reproduce the results using the def2-SVP basis, so I ran the same computation as in #1596 but with the 6-31G basis (all other parameters being the same). I attach Q-Chem output file.; [BODIPY.txt](https://github.com/psi4/psi4/files/3073222/BODIPY.txt). Here's the summary of ADC(2) results from Q-Chem (can't quite figure out how to format this on GitHub):; --------------------------------------------------------------------------------; HF Summary ; --------------------------------------------------------------------------------; Energy: -906.6356657873 a.u.; Dip. moment [a.u.]: [ 3.494726, -0.033111, -1.462926]; Total dipole [Debye]: 9.629954; <r^2> [a.u.]: [2923.854114, 1346.264718, 630.542572]; Total <r^2> [a.u.]: 4900.661404; --------------------------------------------------------------------------------. --------------------------------------------------------------------------------; MP(2) Summary ; --------------------------------------------------------------------------------; Energy contribution: -1.8309391560 a.u.; Total energy: -908.4666049433 a.u.; Dip. moment [a.u.]: [ 3.265989, -0.052169, -1.229851]; Total dipole [Debye]: 8.871367; <r^2> [a.u.]: [2923.192179, 1346.473546, 629.676198]; Total <r^2> [a.u.]: 4899.341924; --------------------------------------------------------------------------------; Starting Davidson ... ; --------------------------------------------------------------------------------; It NVec Conv Avg. Norm Max. Norm Conv. states Remark; --------------------------------------------------------------------------------; 2 0 3.605e-01 5.138e-01 0.1878 n n Guess.; 1 4 0 1.105e-01 1.726e-01 0.0174 n n ; 2 6 0 3.198e-02 5.191e-02 0.0066 n n ; 3 8 0 1.563e-02 2.479e-02 0.0049 n n ; 4 10 0 9.895e-03 1.453e-02 0.0045 n n ; 5 12 0 6.530e-03 1.034e-02 0.0043 n n ; 6 14 0 5.263e-03 8.300e-03 0.0043 n n ; 7 16 0 5.542e-03 1.031e-02 0.0042 n n ; 8 18 0 3.255e-02 6.506e-02 0.0042 n n ; 9 20 0 1.320e-02 2.638e-02 0.0042 n n ; 10 4 0 9.744e-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190
https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:1059,Energy Efficiency,energy,energy,1059," I ran the same computation as in #1596 but with the 6-31G basis (all other parameters being the same). I attach Q-Chem output file.; [BODIPY.txt](https://github.com/psi4/psi4/files/3073222/BODIPY.txt). Here's the summary of ADC(2) results from Q-Chem (can't quite figure out how to format this on GitHub):; --------------------------------------------------------------------------------; HF Summary ; --------------------------------------------------------------------------------; Energy: -906.6356657873 a.u.; Dip. moment [a.u.]: [ 3.494726, -0.033111, -1.462926]; Total dipole [Debye]: 9.629954; <r^2> [a.u.]: [2923.854114, 1346.264718, 630.542572]; Total <r^2> [a.u.]: 4900.661404; --------------------------------------------------------------------------------. --------------------------------------------------------------------------------; MP(2) Summary ; --------------------------------------------------------------------------------; Energy contribution: -1.8309391560 a.u.; Total energy: -908.4666049433 a.u.; Dip. moment [a.u.]: [ 3.265989, -0.052169, -1.229851]; Total dipole [Debye]: 8.871367; <r^2> [a.u.]: [2923.192179, 1346.473546, 629.676198]; Total <r^2> [a.u.]: 4899.341924; --------------------------------------------------------------------------------; Starting Davidson ... ; --------------------------------------------------------------------------------; It NVec Conv Avg. Norm Max. Norm Conv. states Remark; --------------------------------------------------------------------------------; 2 0 3.605e-01 5.138e-01 0.1878 n n Guess.; 1 4 0 1.105e-01 1.726e-01 0.0174 n n ; 2 6 0 3.198e-02 5.191e-02 0.0066 n n ; 3 8 0 1.563e-02 2.479e-02 0.0049 n n ; 4 10 0 9.895e-03 1.453e-02 0.0045 n n ; 5 12 0 6.530e-03 1.034e-02 0.0043 n n ; 6 14 0 5.263e-03 8.300e-03 0.0043 n n ; 7 16 0 5.542e-03 1.031e-02 0.0042 n n ; 8 18 0 3.255e-02 6.506e-02 0.0042 n n ; 9 20 0 1.320e-02 2.638e-02 0.0042 n n ; 10 4 0 9.744e-03 1.948e-02 0.0042 n n Subspace collapsed.; 11 6 0 4.088e-03",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190
https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:3679,Energy Efficiency,energy,energy,3679,"; 24 14 1 4.026e-05 8.053e-05 0.0042 y n ; 25 16 1 2.143e-05 4.286e-05 0.0042 y n ; 26 18 1 1.583e-05 3.165e-05 0.0042 y n ; 27 20 1 1.594e-05 3.188e-05 0.0042 y n ; 28 4 1 1.087e-05 2.174e-05 0.0042 y n Subspace collapsed.; 29 6 1 1.321e-05 2.642e-05 0.0042 y n ; 30 8 1 1.632e-05 3.264e-05 0.0042 y n ; 31 10 1 1.548e-05 3.097e-05 0.0042 y n ; 32 12 1 1.273e-05 2.545e-05 0.0042 y n ; 33 14 1 8.743e-06 1.749e-05 0.0042 y n ; 34 16 1 6.470e-06 1.294e-05 0.0042 y n ; 35 18 1 4.029e-06 8.058e-06 0.0042 y n ; 36 20 1 3.371e-06 6.743e-06 0.0042 y n ; 37 4 1 2.548e-06 5.096e-06 0.0042 y n Subspace collapsed.; 38 6 1 3.507e-06 7.014e-06 0.0042 y n ; 39 8 1 2.837e-06 5.674e-06 0.0042 y n ; 40 9 1 2.146e-06 4.292e-06 0.0042 y n ; 41 10 1 1.649e-06 3.299e-06 0.0042 y n ; 42 11 1 1.116e-06 2.232e-06 0.0042 y n ; 43 12 1 7.351e-07 1.470e-06 0.0042 y n ; 44 13 2 4.965e-07 9.931e-07 0.0042 y y Converged.; --------------------------------------------------------------------------------; Davidson Summary: ; ------------------------------------------------------------; State 0: excitation energy = 0.0042 a.u. (converged); State 1: excitation energy = 0.0607 a.u. (converged); ------------------------------------------------------------. --------------------------------------------------------------------------------; Excited State Summary; --------------------------------------------------------------------------------; --------------------------------------------------------------------------------. Excited state 1 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 2 (1) A R^2 = 4.36142e-13. Total energy: -908.4624177856 a.u.; Excitation energy: 0.113938 eV. Osc. strength: 0.006302; Trans. dip. moment [a.u.]: [ 0.022562, -1.502315, -0.006471]; <i|r^2|0> [a.u.]: [ 0.119363, -0.062262, 0.001507]. V1^2 = 0.8818, V2^2 = 0.1182. Important amplitudes:; occ i occ j vir a vir b v ; ----------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190
https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:3733,Energy Efficiency,energy,energy,3733," 1 1.594e-05 3.188e-05 0.0042 y n ; 28 4 1 1.087e-05 2.174e-05 0.0042 y n Subspace collapsed.; 29 6 1 1.321e-05 2.642e-05 0.0042 y n ; 30 8 1 1.632e-05 3.264e-05 0.0042 y n ; 31 10 1 1.548e-05 3.097e-05 0.0042 y n ; 32 12 1 1.273e-05 2.545e-05 0.0042 y n ; 33 14 1 8.743e-06 1.749e-05 0.0042 y n ; 34 16 1 6.470e-06 1.294e-05 0.0042 y n ; 35 18 1 4.029e-06 8.058e-06 0.0042 y n ; 36 20 1 3.371e-06 6.743e-06 0.0042 y n ; 37 4 1 2.548e-06 5.096e-06 0.0042 y n Subspace collapsed.; 38 6 1 3.507e-06 7.014e-06 0.0042 y n ; 39 8 1 2.837e-06 5.674e-06 0.0042 y n ; 40 9 1 2.146e-06 4.292e-06 0.0042 y n ; 41 10 1 1.649e-06 3.299e-06 0.0042 y n ; 42 11 1 1.116e-06 2.232e-06 0.0042 y n ; 43 12 1 7.351e-07 1.470e-06 0.0042 y n ; 44 13 2 4.965e-07 9.931e-07 0.0042 y y Converged.; --------------------------------------------------------------------------------; Davidson Summary: ; ------------------------------------------------------------; State 0: excitation energy = 0.0042 a.u. (converged); State 1: excitation energy = 0.0607 a.u. (converged); ------------------------------------------------------------. --------------------------------------------------------------------------------; Excited State Summary; --------------------------------------------------------------------------------; --------------------------------------------------------------------------------. Excited state 1 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 2 (1) A R^2 = 4.36142e-13. Total energy: -908.4624177856 a.u.; Excitation energy: 0.113938 eV. Osc. strength: 0.006302; Trans. dip. moment [a.u.]: [ 0.022562, -1.502315, -0.006471]; <i|r^2|0> [a.u.]: [ 0.119363, -0.062262, 0.001507]. V1^2 = 0.8818, V2^2 = 0.1182. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 69 (A) A 70 (A) A -0.6410; 69 (A) A 73 (A) A -0.1086; ---------------------------------------------------------; ----",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190
https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:4264,Energy Efficiency,energy,energy,4264," 0.0042 y n ; 40 9 1 2.146e-06 4.292e-06 0.0042 y n ; 41 10 1 1.649e-06 3.299e-06 0.0042 y n ; 42 11 1 1.116e-06 2.232e-06 0.0042 y n ; 43 12 1 7.351e-07 1.470e-06 0.0042 y n ; 44 13 2 4.965e-07 9.931e-07 0.0042 y y Converged.; --------------------------------------------------------------------------------; Davidson Summary: ; ------------------------------------------------------------; State 0: excitation energy = 0.0042 a.u. (converged); State 1: excitation energy = 0.0607 a.u. (converged); ------------------------------------------------------------. --------------------------------------------------------------------------------; Excited State Summary; --------------------------------------------------------------------------------; --------------------------------------------------------------------------------. Excited state 1 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 2 (1) A R^2 = 4.36142e-13. Total energy: -908.4624177856 a.u.; Excitation energy: 0.113938 eV. Osc. strength: 0.006302; Trans. dip. moment [a.u.]: [ 0.022562, -1.502315, -0.006471]; <i|r^2|0> [a.u.]: [ 0.119363, -0.062262, 0.001507]. V1^2 = 0.8818, V2^2 = 0.1182. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 69 (A) A 70 (A) A -0.6410; 69 (A) A 73 (A) A -0.1086; ---------------------------------------------------------; ----------------------------------------------------------------------------. Excited state 2 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 3 (1) A R^2 = 9.93080e-07. Total energy: -908.4058618791 a.u.; Excitation energy: 1.652903 eV. Osc. strength: 0.003742; Trans. dip. moment [a.u.]: [ -0.000934, -0.303942, -0.005679]; <i|r^2|0> [a.u.]: [ 0.050382, -0.071767, 0.005428]. V1^2 = 0.8715, V2^2 = 0.1285. Important amplitudes:; occ i occ j vir a vir b v ; ----------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190
https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:4305,Energy Efficiency,energy,energy,4305,"e-06 0.0042 y n ; 41 10 1 1.649e-06 3.299e-06 0.0042 y n ; 42 11 1 1.116e-06 2.232e-06 0.0042 y n ; 43 12 1 7.351e-07 1.470e-06 0.0042 y n ; 44 13 2 4.965e-07 9.931e-07 0.0042 y y Converged.; --------------------------------------------------------------------------------; Davidson Summary: ; ------------------------------------------------------------; State 0: excitation energy = 0.0042 a.u. (converged); State 1: excitation energy = 0.0607 a.u. (converged); ------------------------------------------------------------. --------------------------------------------------------------------------------; Excited State Summary; --------------------------------------------------------------------------------; --------------------------------------------------------------------------------. Excited state 1 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 2 (1) A R^2 = 4.36142e-13. Total energy: -908.4624177856 a.u.; Excitation energy: 0.113938 eV. Osc. strength: 0.006302; Trans. dip. moment [a.u.]: [ 0.022562, -1.502315, -0.006471]; <i|r^2|0> [a.u.]: [ 0.119363, -0.062262, 0.001507]. V1^2 = 0.8818, V2^2 = 0.1182. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 69 (A) A 70 (A) A -0.6410; 69 (A) A 73 (A) A -0.1086; ---------------------------------------------------------; ----------------------------------------------------------------------------. Excited state 2 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 3 (1) A R^2 = 9.93080e-07. Total energy: -908.4058618791 a.u.; Excitation energy: 1.652903 eV. Osc. strength: 0.003742; Trans. dip. moment [a.u.]: [ -0.000934, -0.303942, -0.005679]; <i|r^2|0> [a.u.]: [ 0.050382, -0.071767, 0.005428]. V1^2 = 0.8715, V2^2 = 0.1285. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190
https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:4962,Energy Efficiency,energy,energy,4962,"d.; --------------------------------------------------------------------------------; Davidson Summary: ; ------------------------------------------------------------; State 0: excitation energy = 0.0042 a.u. (converged); State 1: excitation energy = 0.0607 a.u. (converged); ------------------------------------------------------------. --------------------------------------------------------------------------------; Excited State Summary; --------------------------------------------------------------------------------; --------------------------------------------------------------------------------. Excited state 1 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 2 (1) A R^2 = 4.36142e-13. Total energy: -908.4624177856 a.u.; Excitation energy: 0.113938 eV. Osc. strength: 0.006302; Trans. dip. moment [a.u.]: [ 0.022562, -1.502315, -0.006471]; <i|r^2|0> [a.u.]: [ 0.119363, -0.062262, 0.001507]. V1^2 = 0.8818, V2^2 = 0.1182. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 69 (A) A 70 (A) A -0.6410; 69 (A) A 73 (A) A -0.1086; ---------------------------------------------------------; ----------------------------------------------------------------------------. Excited state 2 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 3 (1) A R^2 = 9.93080e-07. Total energy: -908.4058618791 a.u.; Excitation energy: 1.652903 eV. Osc. strength: 0.003742; Trans. dip. moment [a.u.]: [ -0.000934, -0.303942, -0.005679]; <i|r^2|0> [a.u.]: [ 0.050382, -0.071767, 0.005428]. V1^2 = 0.8715, V2^2 = 0.1285. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 67 (A) A 70 (A) A 0.6385; 67 (A) A 73 (A) A 0.1036; ---------------------------------------------------------; ----------------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190
https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:5003,Energy Efficiency,energy,energy,5003,"d.; --------------------------------------------------------------------------------; Davidson Summary: ; ------------------------------------------------------------; State 0: excitation energy = 0.0042 a.u. (converged); State 1: excitation energy = 0.0607 a.u. (converged); ------------------------------------------------------------. --------------------------------------------------------------------------------; Excited State Summary; --------------------------------------------------------------------------------; --------------------------------------------------------------------------------. Excited state 1 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 2 (1) A R^2 = 4.36142e-13. Total energy: -908.4624177856 a.u.; Excitation energy: 0.113938 eV. Osc. strength: 0.006302; Trans. dip. moment [a.u.]: [ 0.022562, -1.502315, -0.006471]; <i|r^2|0> [a.u.]: [ 0.119363, -0.062262, 0.001507]. V1^2 = 0.8818, V2^2 = 0.1182. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 69 (A) A 70 (A) A -0.6410; 69 (A) A 73 (A) A -0.1086; ---------------------------------------------------------; ----------------------------------------------------------------------------. Excited state 2 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 3 (1) A R^2 = 9.93080e-07. Total energy: -908.4058618791 a.u.; Excitation energy: 1.652903 eV. Osc. strength: 0.003742; Trans. dip. moment [a.u.]: [ -0.000934, -0.303942, -0.005679]; <i|r^2|0> [a.u.]: [ 0.050382, -0.071767, 0.005428]. V1^2 = 0.8715, V2^2 = 0.1285. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 67 (A) A 70 (A) A 0.6385; 67 (A) A 73 (A) A 0.1036; ---------------------------------------------------------; ----------------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190
https://github.com/psi4/psi4/issues/1600#issuecomment-483002552:182,Usability,clear,clearly,182,"I had a quick look at this, and it looks like the `least_squares_fit_polynomial()` function behaves a little dodgy on the first iteration - the minimum of your supplied potential is clearly the 1.1\AA value, while on the first iteration the solver settles on 3.2\AA and keeps increasing. The 30\AA point seems to be throwing the solver off, as the initial guess is taken as mean(r). To get a quick fix, try to remove it - it seems to work fine on my computer without that one, converging on a physical 1.08\AA r_e value. . What also seems to work is to switch off weighting for the first iteration of calculating the derivatives - then it doesn't care about the far away point. It's perhaps better to hear from @andysim whether that's sensible or not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483002552
https://github.com/psi4/psi4/issues/1600#issuecomment-483058661:123,Energy Efficiency,efficient,efficient,123,"@loriab I'll try to do it, but, as we can see, the grid is already computed with 0.05A step - that should be enough for an efficient interpolation, in my opinion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483058661
https://github.com/psi4/psi4/issues/1600#issuecomment-483076180:73,Energy Efficiency,energy,energy,73,"0.05A is definitely sensible for an interpolation of the whole potential energy curve. But for this function, what you want is a region that looks essentially harmonic so that the function can pick out the anharmonicity. Recently, I used 0.005A.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483076180
https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:81,Availability,error,error,81,"Sorry for being late on this one - I've been doing taxes all day :( The original error comes from a negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also u",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393
https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:1730,Availability,error,error,1730," negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also using tightly converged full CI so there were no problems with the underlying potential. Good luck!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393
https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:926,Safety,safe,safer,926,"Sorry for being late on this one - I've been doing taxes all day :( The original error comes from a negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also u",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393
https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:1438,Testability,test,testing,1438," negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also using tightly converged full CI so there were no problems with the underlying potential. Good luck!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393
https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:1542,Testability,test,testing,1542," negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also using tightly converged full CI so there were no problems with the underlying potential. Good luck!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393
https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:1876,Testability,test,tested,1876," negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also using tightly converged full CI so there were no problems with the underlying potential. Good luck!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393
https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:1906,Testability,test,test,1906," negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also using tightly converged full CI so there were no problems with the underlying potential. Good luck!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393
https://github.com/psi4/psi4/issues/1600#issuecomment-483124279:363,Deployability,install,install,363,"@andysim the potential provided by @MartinBeseda (see figure) has a slight dip at around 4.50 angstrom, and the mean of the provided radii puts it around 3.5 there. That's my take on this.; ![issue-1600](https://user-images.githubusercontent.com/5336995/56111506-82ef6a80-5f58-11e9-8435-3803035cb374.png). As for the plotting issue - I wouldn't know, as I didn't install matplotlib into that environment. I can have a look later, but it is confusing that it wouldn't work, when it calculates all spectroscopic constants properly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483124279
https://github.com/psi4/psi4/issues/1600#issuecomment-483463166:459,Energy Efficiency,Energy,Energy,459,"@loriab @PeterKraus @andysim Thank you all for valuable advice!. I've computed 9 points as @loriab suggested:; ```; r=[1.08, 1.085, 1.09, 1.095, 1.1, 1.105, 1.11, 1.115, 1.12]; eng=[-108.679699, -108.679654, -108.6794818, -108.679188, -108.6787779, -108.6782569, -108.6776548, -108.6769276, -108.6761047]; ```. Fit now looks much better, as can be seen in the file [fit.pdf](https://github.com/psi4/psi4/files/3082472/fit.pdf). The results:; ```; Equilibrium Energy -108.67970105590722 Hartrees; Gradient 0.00000000002038; Quadratic Force Constant 24.8569214 MDYNE/A; Cubic Force Constant -505.1574283 MDYNE/A**2; Quartic Force Constant 17972.8369840 MDYNE/A**3. re = 1.080957 A check: 1.080957; r0 = 1.089667 A; we = 2454.7194 cm-1; wexe = -10.4449 cm-1; nu = 2475.6093 cm-1; ZPVE(nu) = 1229.9709 cm-1; Be = 2.0606 cm-1; B0 = 2.0278 cm-1; ae = 0.0656 cm-1; De = 0.0000058 cm-1; ```. seem quite good, except `wexe`, `ae` and `De`. Let's take [this paper](https://www.researchgate.net/publication/257738988_Spectroscopic_constants_and_molecular_properties_of_X2Sg_A2Pu_B2Su_and_D2Pg_electronic_states_of_the_N2_ion) as a reference, or let's see a summary of their results compared with results from other publications; ![header](https://user-images.githubusercontent.com/8162544/56172997-1b82fa80-5fec-11e9-970f-cc318f6e422d.png); ![sigmau+_reference](https://user-images.githubusercontent.com/8162544/56172944-fa220e80-5feb-11e9-9dc1-48b50ab25730.png). Apart from `wexe` and `ae`, which are clearly different from the results of the paper, `De` has a value of `0.0000058 cm-1 = 7.1910832e-10 eV`, which is significantly different from the reference results. What am I missing now?. And thank you for your help once more!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483463166
https://github.com/psi4/psi4/issues/1600#issuecomment-483463166:1491,Usability,clear,clearly,1491,"@loriab @PeterKraus @andysim Thank you all for valuable advice!. I've computed 9 points as @loriab suggested:; ```; r=[1.08, 1.085, 1.09, 1.095, 1.1, 1.105, 1.11, 1.115, 1.12]; eng=[-108.679699, -108.679654, -108.6794818, -108.679188, -108.6787779, -108.6782569, -108.6776548, -108.6769276, -108.6761047]; ```. Fit now looks much better, as can be seen in the file [fit.pdf](https://github.com/psi4/psi4/files/3082472/fit.pdf). The results:; ```; Equilibrium Energy -108.67970105590722 Hartrees; Gradient 0.00000000002038; Quadratic Force Constant 24.8569214 MDYNE/A; Cubic Force Constant -505.1574283 MDYNE/A**2; Quartic Force Constant 17972.8369840 MDYNE/A**3. re = 1.080957 A check: 1.080957; r0 = 1.089667 A; we = 2454.7194 cm-1; wexe = -10.4449 cm-1; nu = 2475.6093 cm-1; ZPVE(nu) = 1229.9709 cm-1; Be = 2.0606 cm-1; B0 = 2.0278 cm-1; ae = 0.0656 cm-1; De = 0.0000058 cm-1; ```. seem quite good, except `wexe`, `ae` and `De`. Let's take [this paper](https://www.researchgate.net/publication/257738988_Spectroscopic_constants_and_molecular_properties_of_X2Sg_A2Pu_B2Su_and_D2Pg_electronic_states_of_the_N2_ion) as a reference, or let's see a summary of their results compared with results from other publications; ![header](https://user-images.githubusercontent.com/8162544/56172997-1b82fa80-5fec-11e9-970f-cc318f6e422d.png); ![sigmau+_reference](https://user-images.githubusercontent.com/8162544/56172944-fa220e80-5feb-11e9-9dc1-48b50ab25730.png). Apart from `wexe` and `ae`, which are clearly different from the results of the paper, `De` has a value of `0.0000058 cm-1 = 7.1910832e-10 eV`, which is significantly different from the reference results. What am I missing now?. And thank you for your help once more!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483463166
https://github.com/psi4/psi4/issues/1600#issuecomment-483463782:152,Testability,test,testing,152,I think you need some more data for shorter bond lengths for one; your computed `re` is right at the bottom end of the input values. I'd also recommend testing to see how sensitive the results are to the grid spacing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483463782
https://github.com/psi4/psi4/issues/1600#issuecomment-483482031:118,Energy Efficiency,Energy,Energy,118,"@andysim Well, I've tried to add more points with the same 0.005A step. . Results are as following:; ```; Equilibrium Energy -108.68016248232071 Hartrees; Gradient -0.00000000054148; Quadratic Force Constant 23.1018206 MDYNE/A; Cubic Force Constant -201.1767529 MDYNE/A**2; Quartic Force Constant 945.5330232 MDYNE/A**3. re = 1.080176 A check: 1.080176; r0 = 1.083206 A; we = 2366.4716 cm-1; wexe = 25.7210 cm-1; nu = 2315.0297 cm-1; ZPVE(nu) = 1176.8056 cm-1; Be = 2.0635 cm-1; B0 = 2.0520 cm-1; ae = 0.0231 cm-1; De = 0.0000063 cm-1; ```; And [fit.pdf](https://github.com/psi4/psi4/files/3082699/fit.pdf) looks really well. The only value which looks really off is `De`. Is it really computed in `cm-1`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483482031
https://github.com/psi4/psi4/issues/1600#issuecomment-483535360:104,Energy Efficiency,energy,energy,104,"@PeterKraus Thank you! That explains it. So, one last question - is it possible to get the dissociation energy somehow?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483535360
https://github.com/psi4/psi4/issues/1600#issuecomment-483543201:83,Energy Efficiency,energy,energy,83,"Yes, one way is to compare your energies at the minimum (r_e) from the dissociated energy (eg. the 30 angstrom value) and correct by adding zero point energy:; ```; De = E(30A) - E(r_e) + ZPE; ```; Another way is to do a counterpoise-corrected calculation, which due to the charges is a little more tricky to set up:; ```; mol = psi4.core.Molecule.from_arrays(; elez=[7, 7],; fragment_separators=[1],; fix_com=True,; fix_orientation=True,; fix_symmetry='c1',; fragment_multiplicities=[2, 1],; fragment_charges=[0, 1],; molecular_charge=1,; molecular_multiplicity=2,; geom= [; 0.000, 0.000, 0.000000,; 0.000, 0.000, 1.080176]); activate(mol). ...; set reference uks; energy(""method/basis"", bsse_type=""cp""); ```; where 1.080176 is the `re` from above, and i'm using UKS assuming it's a DFT calc (for wavefunction theory the alternative is UHF). The other text is pretty self-explanatory. You still have to correct the resulting interaction energy by the ZPE of N2+, though. (I should note the energies calculated above are negative - i.e. the ""complexation"" of N with N+ is exothermic; in the paper they're quoting them as positive.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483543201
https://github.com/psi4/psi4/issues/1600#issuecomment-483543201:151,Energy Efficiency,energy,energy,151,"Yes, one way is to compare your energies at the minimum (r_e) from the dissociated energy (eg. the 30 angstrom value) and correct by adding zero point energy:; ```; De = E(30A) - E(r_e) + ZPE; ```; Another way is to do a counterpoise-corrected calculation, which due to the charges is a little more tricky to set up:; ```; mol = psi4.core.Molecule.from_arrays(; elez=[7, 7],; fragment_separators=[1],; fix_com=True,; fix_orientation=True,; fix_symmetry='c1',; fragment_multiplicities=[2, 1],; fragment_charges=[0, 1],; molecular_charge=1,; molecular_multiplicity=2,; geom= [; 0.000, 0.000, 0.000000,; 0.000, 0.000, 1.080176]); activate(mol). ...; set reference uks; energy(""method/basis"", bsse_type=""cp""); ```; where 1.080176 is the `re` from above, and i'm using UKS assuming it's a DFT calc (for wavefunction theory the alternative is UHF). The other text is pretty self-explanatory. You still have to correct the resulting interaction energy by the ZPE of N2+, though. (I should note the energies calculated above are negative - i.e. the ""complexation"" of N with N+ is exothermic; in the paper they're quoting them as positive.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483543201
https://github.com/psi4/psi4/issues/1600#issuecomment-483543201:274,Energy Efficiency,charge,charges,274,"Yes, one way is to compare your energies at the minimum (r_e) from the dissociated energy (eg. the 30 angstrom value) and correct by adding zero point energy:; ```; De = E(30A) - E(r_e) + ZPE; ```; Another way is to do a counterpoise-corrected calculation, which due to the charges is a little more tricky to set up:; ```; mol = psi4.core.Molecule.from_arrays(; elez=[7, 7],; fragment_separators=[1],; fix_com=True,; fix_orientation=True,; fix_symmetry='c1',; fragment_multiplicities=[2, 1],; fragment_charges=[0, 1],; molecular_charge=1,; molecular_multiplicity=2,; geom= [; 0.000, 0.000, 0.000000,; 0.000, 0.000, 1.080176]); activate(mol). ...; set reference uks; energy(""method/basis"", bsse_type=""cp""); ```; where 1.080176 is the `re` from above, and i'm using UKS assuming it's a DFT calc (for wavefunction theory the alternative is UHF). The other text is pretty self-explanatory. You still have to correct the resulting interaction energy by the ZPE of N2+, though. (I should note the energies calculated above are negative - i.e. the ""complexation"" of N with N+ is exothermic; in the paper they're quoting them as positive.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483543201
https://github.com/psi4/psi4/issues/1600#issuecomment-483543201:666,Energy Efficiency,energy,energy,666,"Yes, one way is to compare your energies at the minimum (r_e) from the dissociated energy (eg. the 30 angstrom value) and correct by adding zero point energy:; ```; De = E(30A) - E(r_e) + ZPE; ```; Another way is to do a counterpoise-corrected calculation, which due to the charges is a little more tricky to set up:; ```; mol = psi4.core.Molecule.from_arrays(; elez=[7, 7],; fragment_separators=[1],; fix_com=True,; fix_orientation=True,; fix_symmetry='c1',; fragment_multiplicities=[2, 1],; fragment_charges=[0, 1],; molecular_charge=1,; molecular_multiplicity=2,; geom= [; 0.000, 0.000, 0.000000,; 0.000, 0.000, 1.080176]); activate(mol). ...; set reference uks; energy(""method/basis"", bsse_type=""cp""); ```; where 1.080176 is the `re` from above, and i'm using UKS assuming it's a DFT calc (for wavefunction theory the alternative is UHF). The other text is pretty self-explanatory. You still have to correct the resulting interaction energy by the ZPE of N2+, though. (I should note the energies calculated above are negative - i.e. the ""complexation"" of N with N+ is exothermic; in the paper they're quoting them as positive.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483543201
https://github.com/psi4/psi4/issues/1600#issuecomment-483543201:938,Energy Efficiency,energy,energy,938,"Yes, one way is to compare your energies at the minimum (r_e) from the dissociated energy (eg. the 30 angstrom value) and correct by adding zero point energy:; ```; De = E(30A) - E(r_e) + ZPE; ```; Another way is to do a counterpoise-corrected calculation, which due to the charges is a little more tricky to set up:; ```; mol = psi4.core.Molecule.from_arrays(; elez=[7, 7],; fragment_separators=[1],; fix_com=True,; fix_orientation=True,; fix_symmetry='c1',; fragment_multiplicities=[2, 1],; fragment_charges=[0, 1],; molecular_charge=1,; molecular_multiplicity=2,; geom= [; 0.000, 0.000, 0.000000,; 0.000, 0.000, 1.080176]); activate(mol). ...; set reference uks; energy(""method/basis"", bsse_type=""cp""); ```; where 1.080176 is the `re` from above, and i'm using UKS assuming it's a DFT calc (for wavefunction theory the alternative is UHF). The other text is pretty self-explanatory. You still have to correct the resulting interaction energy by the ZPE of N2+, though. (I should note the energies calculated above are negative - i.e. the ""complexation"" of N with N+ is exothermic; in the paper they're quoting them as positive.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483543201
https://github.com/psi4/psi4/issues/1600#issuecomment-483556131:205,Energy Efficiency,energy,energy,205,"Happy to help. I'll reopen this issue as I believe there is a a todo item:. The `np.mean(rvals)` is probably not the best idea as a first guess of `r_e` for the fit. We should probably find the minimum of energy along the `rvals`, and then look at how symmetrically the points are distributed around it: I'd suggest if we have less than 3 points at either side of the minimum, we raise a warning. We could also rise the minimum number of points to 7... Another quick check would be to make sure there's only one minimum in the provided data, but I guess that might be a bit more involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483556131
https://github.com/psi4/psi4/issues/1600#issuecomment-483565607:88,Energy Efficiency,energy,energy,88,"@PeterKraus And, as I'm looking at it now, it would be also nice to have an equilibrium energy in the returned dictionary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483565607
https://github.com/psi4/psi4/issues/1600#issuecomment-483629512:194,Energy Efficiency,energy,energy,194,"I agree with all of the above, especially a sanity check on the number of points provided and the use of the minimum as a guess. One very minor correction: the ""bottom of the well"" dissociation energy `De` is the difference between the minimized energy and the dissociated products. The zero-point corrected value (which is what's really measured in experiments, because the molecule cannot reach the bottom of the well), is `D0` and comes from subtracting the `ZPVE(nu)` value reported in the dictionary from `De`. For the record, that ZPVE is `0.5 we - 0.25 wexe`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483629512
https://github.com/psi4/psi4/issues/1600#issuecomment-483629512:246,Energy Efficiency,energy,energy,246,"I agree with all of the above, especially a sanity check on the number of points provided and the use of the minimum as a guess. One very minor correction: the ""bottom of the well"" dissociation energy `De` is the difference between the minimized energy and the dissociated products. The zero-point corrected value (which is what's really measured in experiments, because the molecule cannot reach the bottom of the well), is `D0` and comes from subtracting the `ZPVE(nu)` value reported in the dictionary from `De`. For the record, that ZPVE is `0.5 we - 0.25 wexe`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483629512
https://github.com/psi4/psi4/issues/1600#issuecomment-483629512:44,Safety,sanity check,sanity check,44,"I agree with all of the above, especially a sanity check on the number of points provided and the use of the minimum as a guess. One very minor correction: the ""bottom of the well"" dissociation energy `De` is the difference between the minimized energy and the dissociated products. The zero-point corrected value (which is what's really measured in experiments, because the molecule cannot reach the bottom of the well), is `D0` and comes from subtracting the `ZPVE(nu)` value reported in the dictionary from `De`. For the record, that ZPVE is `0.5 we - 0.25 wexe`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483629512
https://github.com/psi4/psi4/pull/1602#issuecomment-484646322:87,Testability,test,test,87,"Fixes look so simple in retrospect :-). Could you take one of your examples and make a test case, please? Not parsing the NBO output and checking the numbers or anything, just running the `NBOWriter` (we've no examples at present) and getting a `reference.dat` of the compliant psi nbo output and a copy of the qchem nbo output into the repository.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1602#issuecomment-484646322
https://github.com/psi4/psi4/pull/1602#issuecomment-484646322:14,Usability,simpl,simple,14,"Fixes look so simple in retrospect :-). Could you take one of your examples and make a test case, please? Not parsing the NBO output and checking the numbers or anything, just running the `NBOWriter` (we've no examples at present) and getting a `reference.dat` of the compliant psi nbo output and a copy of the qchem nbo output into the repository.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1602#issuecomment-484646322
https://github.com/psi4/psi4/issues/1604#issuecomment-800346857:131,Availability,down,down,131,Something like this was also reported last summer where the t2 amplitude return was all zeros if string basis. I couldn't track it down in quarter hour. Thanks for harvesting report.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1604#issuecomment-800346857
https://github.com/psi4/psi4/issues/1604#issuecomment-800490149:70,Availability,failure,failures,70,"Indeed, that's the question to ask 😄 ; Varying `scf_type`, I only get failures for `disk_df` (`mem_df` and `pk` are fine), but again, at least for TDSCF, the problem is triggered by system size ☹️ Seems like a rabbit hole to me...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1604#issuecomment-800490149
https://github.com/psi4/psi4/issues/1604#issuecomment-806174930:34,Availability,down,down,34,"Before anyone else tries to track down what's going on: I've found the ""problem"", working on a sustainable fix with @loriab 😬",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1604#issuecomment-806174930
https://github.com/psi4/psi4/issues/1604#issuecomment-806174930:95,Energy Efficiency,sustainab,sustainable,95,"Before anyone else tries to track down what's going on: I've found the ""problem"", working on a sustainable fix with @loriab 😬",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1604#issuecomment-806174930
https://github.com/psi4/psi4/pull/1607#issuecomment-485806973:360,Testability,log,log,360,"> The way I read the `_np_read()` function, that really is just numpy arrays (not classes or etc) - not a pickle file; perhaps try adding `allow_pickle=False` and see what breaks?. `allow_pickle=True` was the NumPy default behavior, so this PR just maintains that for Psi. `allow_pickle=False` is the new default behavior, which breaks Psi. See this Travis to log to see the test cases that fail: https://travis-ci.org/psi4/psi4/jobs/523119052",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485806973
https://github.com/psi4/psi4/pull/1607#issuecomment-485806973:375,Testability,test,test,375,"> The way I read the `_np_read()` function, that really is just numpy arrays (not classes or etc) - not a pickle file; perhaps try adding `allow_pickle=False` and see what breaks?. `allow_pickle=True` was the NumPy default behavior, so this PR just maintains that for Psi. `allow_pickle=False` is the new default behavior, which breaks Psi. See this Travis to log to see the test cases that fail: https://travis-ci.org/psi4/psi4/jobs/523119052",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485806973
https://github.com/psi4/psi4/pull/1607#issuecomment-485808406:368,Testability,log,log,368,"> > The way I read the `_np_read()` function, that really is just numpy arrays (not classes or etc) - not a pickle file; perhaps try adding `allow_pickle=False` and see what breaks?; > ; > `allow_pickle=True` was the NumPy default behavior, so this PR just maintains that for Psi. `allow_pickle=False` is the new default behavior, which breaks Psi. See this Travis to log to see the test cases that fail: https://travis-ci.org/psi4/psi4/jobs/523119052. Yes, but that's crashing because of `_core_wavefunction_from_file()`, not `_np_read()`, right? Raw log shows that 14 tests fail because of the former, and none because of the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485808406
https://github.com/psi4/psi4/pull/1607#issuecomment-485808406:383,Testability,test,test,383,"> > The way I read the `_np_read()` function, that really is just numpy arrays (not classes or etc) - not a pickle file; perhaps try adding `allow_pickle=False` and see what breaks?; > ; > `allow_pickle=True` was the NumPy default behavior, so this PR just maintains that for Psi. `allow_pickle=False` is the new default behavior, which breaks Psi. See this Travis to log to see the test cases that fail: https://travis-ci.org/psi4/psi4/jobs/523119052. Yes, but that's crashing because of `_core_wavefunction_from_file()`, not `_np_read()`, right? Raw log shows that 14 tests fail because of the former, and none because of the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485808406
https://github.com/psi4/psi4/pull/1607#issuecomment-485808406:552,Testability,log,log,552,"> > The way I read the `_np_read()` function, that really is just numpy arrays (not classes or etc) - not a pickle file; perhaps try adding `allow_pickle=False` and see what breaks?; > ; > `allow_pickle=True` was the NumPy default behavior, so this PR just maintains that for Psi. `allow_pickle=False` is the new default behavior, which breaks Psi. See this Travis to log to see the test cases that fail: https://travis-ci.org/psi4/psi4/jobs/523119052. Yes, but that's crashing because of `_core_wavefunction_from_file()`, not `_np_read()`, right? Raw log shows that 14 tests fail because of the former, and none because of the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485808406
https://github.com/psi4/psi4/pull/1607#issuecomment-485808406:570,Testability,test,tests,570,"> > The way I read the `_np_read()` function, that really is just numpy arrays (not classes or etc) - not a pickle file; perhaps try adding `allow_pickle=False` and see what breaks?; > ; > `allow_pickle=True` was the NumPy default behavior, so this PR just maintains that for Psi. `allow_pickle=False` is the new default behavior, which breaks Psi. See this Travis to log to see the test cases that fail: https://travis-ci.org/psi4/psi4/jobs/523119052. Yes, but that's crashing because of `_core_wavefunction_from_file()`, not `_np_read()`, right? Raw log shows that 14 tests fail because of the former, and none because of the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485808406
https://github.com/psi4/psi4/pull/1607#issuecomment-485810151:54,Performance,load,load,54,"Yes, I think you're both right. the numpy_helpers `np.load` is serializing ordinary floats for Matrix/Vector, so np machinery, not pickle, used. Then the python_helpers `np.load` is forming the custom Matrix/Vector objects themselves, so they do need pickle True, and >=16.3 need it explicitly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485810151
https://github.com/psi4/psi4/pull/1607#issuecomment-485810151:173,Performance,load,load,173,"Yes, I think you're both right. the numpy_helpers `np.load` is serializing ordinary floats for Matrix/Vector, so np machinery, not pickle, used. Then the python_helpers `np.load` is forming the custom Matrix/Vector objects themselves, so they do need pickle True, and >=16.3 need it explicitly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485810151
https://github.com/psi4/psi4/pull/1607#issuecomment-485812426:22,Integrability,interface,interface,22,I think the `np-array-interface` [test](https://github.com/psi4/psi4/blob/master/tests/numpy-array-interface/input.dat) should be checking for this already: it is hitting `Matrix.np_read()` after writing it into file.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485812426
https://github.com/psi4/psi4/pull/1607#issuecomment-485812426:99,Integrability,interface,interface,99,I think the `np-array-interface` [test](https://github.com/psi4/psi4/blob/master/tests/numpy-array-interface/input.dat) should be checking for this already: it is hitting `Matrix.np_read()` after writing it into file.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485812426
https://github.com/psi4/psi4/pull/1607#issuecomment-485812426:34,Testability,test,test,34,I think the `np-array-interface` [test](https://github.com/psi4/psi4/blob/master/tests/numpy-array-interface/input.dat) should be checking for this already: it is hitting `Matrix.np_read()` after writing it into file.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485812426
https://github.com/psi4/psi4/pull/1607#issuecomment-485812426:81,Testability,test,tests,81,I think the `np-array-interface` [test](https://github.com/psi4/psi4/blob/master/tests/numpy-array-interface/input.dat) should be checking for this already: it is hitting `Matrix.np_read()` after writing it into file.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485812426
https://github.com/psi4/psi4/pull/1607#issuecomment-485813657:422,Integrability,interface,interface,422,"I'm having a hard time following all this, so let me try to make sure I'm understanding your concerns about `driver/p4util/numpy_helper.py:_np_read`. I think you're suggesting we explicitly mark `allow_pickle=False` for that function because; 1. security reasons mean `allow_pickle` should be `False` unless needed to be `True`; 2. `allow_pickle` is not needed to be `True` for that function (as demonstrated by `np-array-interface` passing, even with Travis passing in `False`); 3. some users may compile with pre-16.3 NumPy, where default definitions would make `allow_pickle=True`, which is bad by (1) and (2). Did I get that right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485813657
https://github.com/psi4/psi4/pull/1607#issuecomment-485813657:246,Security,secur,security,246,"I'm having a hard time following all this, so let me try to make sure I'm understanding your concerns about `driver/p4util/numpy_helper.py:_np_read`. I think you're suggesting we explicitly mark `allow_pickle=False` for that function because; 1. security reasons mean `allow_pickle` should be `False` unless needed to be `True`; 2. `allow_pickle` is not needed to be `True` for that function (as demonstrated by `np-array-interface` passing, even with Travis passing in `False`); 3. some users may compile with pre-16.3 NumPy, where default definitions would make `allow_pickle=True`, which is bad by (1) and (2). Did I get that right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485813657
https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:2927,Deployability,Patch,Patch,2927,"stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1608; > Commit Summary; >; > - Added external potential to FISAPT one-electron potential; > - Fixed double counting external interaction in one-electron potential; >; > File Changes; >; > - *M* psi4/driver/procrouting/proc_util.py; > <https://github.com/psi4/psi4/pull/1608/files#diff-0> (2); > - *M* psi4/src/psi4/fisapt/fisapt.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-1> (68); > - *M* psi4/src/psi4/libmints/wavefunction.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-2> (2); > - *M* psi4/src/psi4/libmints/wavefunction.h; > <https://github.com/psi4/psi4/pull/1608/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1608.patch; > - https://github.com/psi4/psi4/pull/1608.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1608>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5Q26LUISGVVNYCPO5TPSMNXLANCNFSM4HIWTBEQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275
https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:2987,Deployability,patch,patch,2987,"stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1608; > Commit Summary; >; > - Added external potential to FISAPT one-electron potential; > - Fixed double counting external interaction in one-electron potential; >; > File Changes; >; > - *M* psi4/driver/procrouting/proc_util.py; > <https://github.com/psi4/psi4/pull/1608/files#diff-0> (2); > - *M* psi4/src/psi4/fisapt/fisapt.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-1> (68); > - *M* psi4/src/psi4/libmints/wavefunction.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-2> (2); > - *M* psi4/src/psi4/libmints/wavefunction.h; > <https://github.com/psi4/psi4/pull/1608/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1608.patch; > - https://github.com/psi4/psi4/pull/1608.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1608>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5Q26LUISGVVNYCPO5TPSMNXLANCNFSM4HIWTBEQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275
https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:901,Energy Efficiency,energy,energy,901,"Very happy to see this, it will be a nice addition!. Maybe @andysim and/or @robertodr can check some of the external potential; handling stuff. My group and I will look into some of the subtleties of FSAPT and ISAPT ...; off the top of my head, I think there may be some additional places; (induction) where the external potential needs to go. Maybe also the; dressing on the two-electron integrals. Best,; David. On Fri, Apr 26, 2019 at 11:29 AM chapincavender <notifications@github.com>; wrote:. > Description; >; > Include external potentials in the FISAPT module; > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies wit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275
https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1328,Energy Efficiency,energy,energy,1328,"f FSAPT and ISAPT ...; off the top of my head, I think there may be some additional places; (induction) where the external potential needs to go. Maybe also the; dressing on the two-electron integrals. Best,; David. On Fri, Apr 26, 2019 at 11:29 AM chapincavender <notifications@github.com>; wrote:. > Description; >; > Include external potentials in the FISAPT module; > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > --------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275
https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1648,Energy Efficiency,energy,energy,1648,"interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1608; > Commit Summary; >; > - Added external potential to FISAPT one-electron potential; > - Fixed double counting external interaction in one-electron potential; >; > File Changes; >; > - *M* psi4/driver/procrouting/proc_util.py; > <https://github.com/psi4/psi4/pull/1608/files#diff-0> (2); > - *M* psi4/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275
https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1763,Energy Efficiency,energy,energy,1763,"tion class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1608; > Commit Summary; >; > - Added external potential to FISAPT one-electron potential; > - Fixed double counting external interaction in one-electron potential; >; > File Changes; >; > - *M* psi4/driver/procrouting/proc_util.py; > <https://github.com/psi4/psi4/pull/1608/files#diff-0> (2); > - *M* psi4/src/psi4/fisapt/fisapt.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-1> (68); > - *M* psi4/src/psi4/libmints/wavefunction.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-2> (2); > - *M* psi4/src/psi4/libmints/wavefunction.h; > <https://github.com/psi4/psi4/pull/1608/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1608.patch; > - http",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275
https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1016,Security,access,access,1016,"ry happy to see this, it will be a nice addition!. Maybe @andysim and/or @robertodr can check some of the external potential; handling stuff. My group and I will look into some of the subtleties of FSAPT and ISAPT ...; off the top of my head, I think there may be some additional places; (induction) where the external potential needs to go. Maybe also the; dressing on the two-electron integrals. Best,; David. On Fri, Apr 26, 2019 at 11:29 AM chapincavender <notifications@github.com>; wrote:. > Description; >; > Include external potentials in the FISAPT module; > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275
https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1100,Security,access,accessed,1100,"f FSAPT and ISAPT ...; off the top of my head, I think there may be some additional places; (induction) where the external potential needs to go. Maybe also the; dressing on the two-electron integrals. Best,; David. On Fri, Apr 26, 2019 at 11:29 AM chapincavender <notifications@github.com>; wrote:. > Description; >; > Include external potentials in the FISAPT module; > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > --------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275
https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:2101,Testability,test,tests,2101,"tion class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1608; > Commit Summary; >; > - Added external potential to FISAPT one-electron potential; > - Fixed double counting external interaction in one-electron potential; >; > File Changes; >; > - *M* psi4/driver/procrouting/proc_util.py; > <https://github.com/psi4/psi4/pull/1608/files#diff-0> (2); > - *M* psi4/src/psi4/fisapt/fisapt.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-1> (68); > - *M* psi4/src/psi4/libmints/wavefunction.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-2> (2); > - *M* psi4/src/psi4/libmints/wavefunction.h; > <https://github.com/psi4/psi4/pull/1608/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1608.patch; > - http",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:895,Deployability,update,updated,895,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:1073,Integrability,depend,depends,1073,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:158,Safety,avoid,avoid,158,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:267,Testability,test,test,267,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:353,Testability,test,test,353,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:467,Testability,test,test,467,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:536,Testability,test,tests,536,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:985,Testability,test,test,985,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:1008,Testability,test,test,1008,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:1275,Testability,test,test,1275,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:1395,Testability,test,tests,1395,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:1437,Testability,test,test,1437,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:1621,Testability,test,test,1621,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:1679,Testability,test,tests,1679,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:1717,Testability,test,testing,1717,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:1828,Testability,test,test,1828,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576
https://github.com/psi4/psi4/pull/1608#issuecomment-492705223:160,Energy Efficiency,charge,charges,160,"I've added a new test called fsapt-ext that uses a water trimer, performing F-SAPT on two waters and representing the third as an external potential with TIP3P charges. The test runs in less than a minute on my machine. I've left the fsapt-ref folder as this is part of the output of the FISAPT module. I also verified that the test breaks without my revisions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223
https://github.com/psi4/psi4/pull/1608#issuecomment-492705223:65,Performance,perform,performing,65,"I've added a new test called fsapt-ext that uses a water trimer, performing F-SAPT on two waters and representing the third as an external potential with TIP3P charges. The test runs in less than a minute on my machine. I've left the fsapt-ref folder as this is part of the output of the FISAPT module. I also verified that the test breaks without my revisions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223
https://github.com/psi4/psi4/pull/1608#issuecomment-492705223:17,Testability,test,test,17,"I've added a new test called fsapt-ext that uses a water trimer, performing F-SAPT on two waters and representing the third as an external potential with TIP3P charges. The test runs in less than a minute on my machine. I've left the fsapt-ref folder as this is part of the output of the FISAPT module. I also verified that the test breaks without my revisions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223
https://github.com/psi4/psi4/pull/1608#issuecomment-492705223:173,Testability,test,test,173,"I've added a new test called fsapt-ext that uses a water trimer, performing F-SAPT on two waters and representing the third as an external potential with TIP3P charges. The test runs in less than a minute on my machine. I've left the fsapt-ref folder as this is part of the output of the FISAPT module. I also verified that the test breaks without my revisions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223
https://github.com/psi4/psi4/pull/1608#issuecomment-492705223:328,Testability,test,test,328,"I've added a new test called fsapt-ext that uses a water trimer, performing F-SAPT on two waters and representing the third as an external potential with TIP3P charges. The test runs in less than a minute on my machine. I've left the fsapt-ref folder as this is part of the output of the FISAPT module. I also verified that the test breaks without my revisions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223
https://github.com/psi4/psi4/pull/1608#issuecomment-492708985:24,Availability,Error,Error,24,"You have hit The Rebase Error! Fear not, we can solve this. . Follow the advice in https://github.com/psi4/psi4/pull/1490#issuecomment-457765390. In your case, you'll only want the pure-you commits: 1e5cf3a, b9c1a00, 11307b7, 50d44d6 in that order. Post here if you've any questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492708985
https://github.com/psi4/psi4/pull/1608#issuecomment-492716743:70,Usability,clear,clear,70,Sorry about that! Looks like everything is back to normal. Thanks for clear instructions on the fix.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492716743
https://github.com/psi4/psi4/issues/1610#issuecomment-487277542:236,Availability,down,downgrade,236,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542
https://github.com/psi4/psi4/issues/1610#issuecomment-487277542:117,Deployability,release,release,117,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542
https://github.com/psi4/psi4/issues/1610#issuecomment-487277542:372,Deployability,install,installed,372,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542
https://github.com/psi4/psi4/issues/1610#issuecomment-487277542:354,Integrability,depend,depend,354,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542
https://github.com/psi4/psi4/issues/1610#issuecomment-487277664:196,Availability,down,downgrade,196,"> Already known and fixed in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place. OK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664
https://github.com/psi4/psi4/issues/1610#issuecomment-487277664:77,Deployability,release,release,77,"> Already known and fixed in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place. OK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664
https://github.com/psi4/psi4/issues/1610#issuecomment-487277664:332,Deployability,install,installed,332,"> Already known and fixed in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place. OK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664
https://github.com/psi4/psi4/issues/1610#issuecomment-487277664:314,Integrability,depend,depend,314,"> Already known and fixed in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place. OK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664
https://github.com/psi4/psi4/issues/1611#issuecomment-487276503:0,Availability,Down,Downgrade,0,Downgrade numpy to 1.16.2 may work.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487276503
https://github.com/psi4/psi4/issues/1611#issuecomment-487277350:2,Availability,Down,Downgrade,2,"> Downgrade numpy to 1.16.2 may work. Thanks tzyii. . I have noticed that error information and downgrade the numpy, all are ok now. This just a report that PSI4 is incompatible with numpy >= 1.16.3?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487277350
https://github.com/psi4/psi4/issues/1611#issuecomment-487277350:74,Availability,error,error,74,"> Downgrade numpy to 1.16.2 may work. Thanks tzyii. . I have noticed that error information and downgrade the numpy, all are ok now. This just a report that PSI4 is incompatible with numpy >= 1.16.3?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487277350
https://github.com/psi4/psi4/issues/1611#issuecomment-487277350:96,Availability,down,downgrade,96,"> Downgrade numpy to 1.16.2 may work. Thanks tzyii. . I have noticed that error information and downgrade the numpy, all are ok now. This just a report that PSI4 is incompatible with numpy >= 1.16.3?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487277350
https://github.com/psi4/psi4/issues/1611#issuecomment-487277567:236,Availability,down,downgrade,236,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487277567
https://github.com/psi4/psi4/issues/1611#issuecomment-487277567:117,Deployability,release,release,117,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487277567
https://github.com/psi4/psi4/issues/1611#issuecomment-487277567:372,Deployability,install,installed,372,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487277567
https://github.com/psi4/psi4/issues/1611#issuecomment-487277567:354,Integrability,depend,depend,354,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487277567
https://github.com/psi4/psi4/issues/1611#issuecomment-487403610:27,Deployability,install,install,27,"The ""nightly"" build `conda install psi4 -c psi4/label/dev` for Linux/WSL is published and should be compatible with numpy `1.16.3`. I looked in sns-mp2 and didn't see the `np.load` culprit, so should be fine, but please let me know if not. Yeah, the ""nightly"" build _is_ nightly (unless I forget to toggle it on), but it's also an extension of our CI system, so it's catching extra things (in this most recent halt -- the Hessian CPHF threshold) from more tests and ecosystem integration. So appears sporadic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610
https://github.com/psi4/psi4/issues/1611#issuecomment-487403610:299,Deployability,toggle,toggle,299,"The ""nightly"" build `conda install psi4 -c psi4/label/dev` for Linux/WSL is published and should be compatible with numpy `1.16.3`. I looked in sns-mp2 and didn't see the `np.load` culprit, so should be fine, but please let me know if not. Yeah, the ""nightly"" build _is_ nightly (unless I forget to toggle it on), but it's also an extension of our CI system, so it's catching extra things (in this most recent halt -- the Hessian CPHF threshold) from more tests and ecosystem integration. So appears sporadic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610
https://github.com/psi4/psi4/issues/1611#issuecomment-487403610:476,Deployability,integrat,integration,476,"The ""nightly"" build `conda install psi4 -c psi4/label/dev` for Linux/WSL is published and should be compatible with numpy `1.16.3`. I looked in sns-mp2 and didn't see the `np.load` culprit, so should be fine, but please let me know if not. Yeah, the ""nightly"" build _is_ nightly (unless I forget to toggle it on), but it's also an extension of our CI system, so it's catching extra things (in this most recent halt -- the Hessian CPHF threshold) from more tests and ecosystem integration. So appears sporadic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610
https://github.com/psi4/psi4/issues/1611#issuecomment-487403610:476,Integrability,integrat,integration,476,"The ""nightly"" build `conda install psi4 -c psi4/label/dev` for Linux/WSL is published and should be compatible with numpy `1.16.3`. I looked in sns-mp2 and didn't see the `np.load` culprit, so should be fine, but please let me know if not. Yeah, the ""nightly"" build _is_ nightly (unless I forget to toggle it on), but it's also an extension of our CI system, so it's catching extra things (in this most recent halt -- the Hessian CPHF threshold) from more tests and ecosystem integration. So appears sporadic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610
https://github.com/psi4/psi4/issues/1611#issuecomment-487403610:175,Performance,load,load,175,"The ""nightly"" build `conda install psi4 -c psi4/label/dev` for Linux/WSL is published and should be compatible with numpy `1.16.3`. I looked in sns-mp2 and didn't see the `np.load` culprit, so should be fine, but please let me know if not. Yeah, the ""nightly"" build _is_ nightly (unless I forget to toggle it on), but it's also an extension of our CI system, so it's catching extra things (in this most recent halt -- the Hessian CPHF threshold) from more tests and ecosystem integration. So appears sporadic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610
https://github.com/psi4/psi4/issues/1611#issuecomment-487403610:456,Testability,test,tests,456,"The ""nightly"" build `conda install psi4 -c psi4/label/dev` for Linux/WSL is published and should be compatible with numpy `1.16.3`. I looked in sns-mp2 and didn't see the `np.load` culprit, so should be fine, but please let me know if not. Yeah, the ""nightly"" build _is_ nightly (unless I forget to toggle it on), but it's also an extension of our CI system, so it's catching extra things (in this most recent halt -- the Hessian CPHF threshold) from more tests and ecosystem integration. So appears sporadic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610
https://github.com/psi4/psi4/issues/1611#issuecomment-490665325:27,Deployability,update,updated,27,"Conda development packages updated to psi4-1.4a1.dev163 - thanks @loriab ! I must have gotten confused above, it is actually #1607 that resolves the issue. It is also marked as backport, so in case 1.3.2 is planned, we shouldn't forget. Closing this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-490665325
https://github.com/psi4/psi4/issues/1613#issuecomment-487622646:222,Energy Efficiency,energy,energy,222,"P.S. The following two similar inputs do work, but correspond to different calculations, I assume:. ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; basis_relativistic ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); ```. and . ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; reference uhf; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487622646
https://github.com/psi4/psi4/issues/1613#issuecomment-487622646:323,Energy Efficiency,energy,energy,323,"P.S. The following two similar inputs do work, but correspond to different calculations, I assume:. ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; basis_relativistic ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); ```. and . ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; reference uhf; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487622646
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:1908,Energy Efficiency,energy,energy,1908,"zkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. *** tstart() called on psinet; *** at Mon Apr 29 11:26:26 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:2551,Energy Efficiency,charge,charge,2551,"rted on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. *** tstart() called on psinet; *** at Mon Apr 29 11:26:26 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. => Loading Basis Set <=. Name: (ANO-RCC AUX); Role: DECON; Keyword: BASIS_R",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:2977,Energy Efficiency,Charge,Charge,2977," called on psinet; *** at Mon Apr 29 11:26:26 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. => Loading Basis Set <=. Name: (ANO-RCC AUX); Role: DECON; Keyword: BASIS_RELATIVISTIC; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs func decontract. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 15 15 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 1 1 0 0 0 0; B1u 7 7 0 0 0 0; B2u 7 7 0 0 0 0; B3u 7 7 0 0 0 0; --------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:3175,Energy Efficiency,Energy,Energy,3175,"s/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. => Loading Basis Set <=. Name: (ANO-RCC AUX); Role: DECON; Keyword: BASIS_RELATIVISTIC; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs func decontract. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 15 15 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 1 1 0 0 0 0; B1u 7 7 0 0 0 0; B2u 7 7 0 0 0 0; B3u 7 7 0 0 0 0; -------------------------------------------------------; Total 46 46 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. OEINTS: Using relativistic (X2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:5548,Energy Efficiency,Energy,Energy,5548,"ian will be computed in the X2C Basis. Comparing only 15 out of 17 elements of H_Dirac. The 1-norm of |H_X2C - H_Dirac| is: 9.762433630521. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set. Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of primitives: 74; Number of atomic orbitals: 46; Number of basis functions: 46. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 1169642 doubles for integral storage.; We computed 5565 shell quartets total.; Whereas there are 5565 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 1.6573405367E-05.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @UHF iter 1: -0.49999200764265 -4.99992e-01 2.73366e-14 DIIS; @UHF iter 2: -0.49999200764259 5.80092e-14 1.96206e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1Ag -0.499992 . Alpha Virtual: . 2Ag 0.054719 1B1u 0.189699 1B3u 0.189699 ; 1B2u 0.189699 3Ag 0.302215 2B3u 0.741625 ; 2B2u 0.741625 2B1u 0.741625 4Ag 0.880345 ; 1B2g 0.880345 1B3g 0.880345 1B1g 0.880345 ; 5Ag 0.880345 6Ag 0.985424 3B2u 2.200372 ; 3B3u 2.200372 3B1u 2.200372 7Ag 2.508422 ; 8Ag 2.916076 2B1g 2.916076 2B3g 2.916076 ; 2B2g 2.916076 9Ag 2.916076 4B3u 4.215041 ; 4B1u 4.215041 4B2u 4.215041 5B1u 4.215041 ; 1Au 4.215041 5B3u 4.215041 5B2u 4.215041 ; 10Ag 5.006734 6B3u 5.367541 6B2u 5.367541 ; 6B1u 5.367541 11Ag 8.068526 12Ag 8.272193 ; 3B3g 8.272193",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:5699,Energy Efficiency,Energy,Energy,5699,"he X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set. Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of primitives: 74; Number of atomic orbitals: 46; Number of basis functions: 46. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 1169642 doubles for integral storage.; We computed 5565 shell quartets total.; Whereas there are 5565 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 1.6573405367E-05.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @UHF iter 1: -0.49999200764265 -4.99992e-01 2.73366e-14 DIIS; @UHF iter 2: -0.49999200764259 5.80092e-14 1.96206e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1Ag -0.499992 . Alpha Virtual: . 2Ag 0.054719 1B1u 0.189699 1B3u 0.189699 ; 1B2u 0.189699 3Ag 0.302215 2B3u 0.741625 ; 2B2u 0.741625 2B1u 0.741625 4Ag 0.880345 ; 1B2g 0.880345 1B3g 0.880345 1B1g 0.880345 ; 5Ag 0.880345 6Ag 0.985424 3B2u 2.200372 ; 3B3u 2.200372 3B1u 2.200372 7Ag 2.508422 ; 8Ag 2.916076 2B1g 2.916076 2B3g 2.916076 ; 2B2g 2.916076 9Ag 2.916076 4B3u 4.215041 ; 4B1u 4.215041 4B2u 4.215041 5B1u 4.215041 ; 1Au 4.215041 5B3u 4.215041 5B2u 4.215041 ; 10Ag 5.006734 6B3u 5.367541 6B2u 5.367541 ; 6B1u 5.367541 11Ag 8.068526 12Ag 8.272193 ; 3B3g 8.272193 3B2g 8.272193 3B1g 8.272193 ; 13Ag 8.272193 7B3u 11.798691 7B2u 11.798691 ; 7B1u 11.798691 14Ag 14.696251 15Ag 34.149342 . Beta Occupied: . . Beta Vir",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:7525,Energy Efficiency,Energy,Energy,7525,"8526 12Ag 8.272193 ; 3B3g 8.272193 3B2g 8.272193 3B1g 8.272193 ; 13Ag 8.272193 7B3u 11.798691 7B2u 11.798691 ; 7B1u 11.798691 14Ag 14.696251 15Ag 34.149342 . Beta Occupied: . . Beta Virtual: . 1Ag 0.016098 2Ag 0.109076 1B2u 0.211108 ; 1B1u 0.211108 1B3u 0.211108 3Ag 0.385413 ; 2B1u 0.802773 2B2u 0.802773 2B3u 0.802773 ; 4Ag 0.900610 1B3g 0.900610 1B2g 0.900610 ; 1B1g 0.900610 5Ag 0.900610 6Ag 1.071716 ; 3B1u 2.265097 3B3u 2.265097 3B2u 2.265097 ; 7Ag 2.575158 8Ag 2.953058 2B2g 2.953058 ; 2B3g 2.953058 2B1g 2.953058 9Ag 2.953058 ; 4B1u 4.243456 4B3u 4.243456 4B2u 4.243456 ; 5B1u 4.243456 1Au 4.243456 5B3u 4.243456 ; 5B2u 4.243456 10Ag 5.042050 6B3u 5.416218 ; 6B1u 5.416218 6B2u 5.416218 11Ag 8.101653 ; 12Ag 8.311198 3B3g 8.311198 3B2g 8.311198 ; 3B1g 8.311198 13Ag 8.311198 7B3u 11.838258 ; 7B2u 11.838258 7B1u 11.838258 14Ag 14.727369 ; 15Ag 34.174361 . Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]. @UHF Final Energy: -0.49999200764259. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4999920076425929; Two-Electron Energy = 0.0000000000000002; Total Energy = -0.4999920076425927. UHF NO Occupations:; HONO-0 : 1 Ag 1.0000000; LUNO+0 : 2 Ag 0.0000000; LUNO+1 : 3 Ag 0.0000000; LUNO+2 : 4 Ag 0.0000000; LUNO+3 : 5 Ag 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on psinet at Mon Apr 29 11:26:27 2019; Module time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 0.87 seconds = 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:7588,Energy Efficiency,Energy,Energy,7588,"93 ; 13Ag 8.272193 7B3u 11.798691 7B2u 11.798691 ; 7B1u 11.798691 14Ag 14.696251 15Ag 34.149342 . Beta Occupied: . . Beta Virtual: . 1Ag 0.016098 2Ag 0.109076 1B2u 0.211108 ; 1B1u 0.211108 1B3u 0.211108 3Ag 0.385413 ; 2B1u 0.802773 2B2u 0.802773 2B3u 0.802773 ; 4Ag 0.900610 1B3g 0.900610 1B2g 0.900610 ; 1B1g 0.900610 5Ag 0.900610 6Ag 1.071716 ; 3B1u 2.265097 3B3u 2.265097 3B2u 2.265097 ; 7Ag 2.575158 8Ag 2.953058 2B2g 2.953058 ; 2B3g 2.953058 2B1g 2.953058 9Ag 2.953058 ; 4B1u 4.243456 4B3u 4.243456 4B2u 4.243456 ; 5B1u 4.243456 1Au 4.243456 5B3u 4.243456 ; 5B2u 4.243456 10Ag 5.042050 6B3u 5.416218 ; 6B1u 5.416218 6B2u 5.416218 11Ag 8.101653 ; 12Ag 8.311198 3B3g 8.311198 3B2g 8.311198 ; 3B1g 8.311198 13Ag 8.311198 7B3u 11.838258 ; 7B2u 11.838258 7B1u 11.838258 14Ag 14.727369 ; 15Ag 34.174361 . Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]. @UHF Final Energy: -0.49999200764259. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4999920076425929; Two-Electron Energy = 0.0000000000000002; Total Energy = -0.4999920076425927. UHF NO Occupations:; HONO-0 : 1 Ag 1.0000000; LUNO+0 : 2 Ag 0.0000000; LUNO+1 : 3 Ag 0.0000000; LUNO+2 : 4 Ag 0.0000000; LUNO+3 : 5 Ag 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on psinet at Mon Apr 29 11:26:27 2019; Module time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	to",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:7630,Energy Efficiency,Energy,Energy,7630,"2u 11.798691 ; 7B1u 11.798691 14Ag 14.696251 15Ag 34.149342 . Beta Occupied: . . Beta Virtual: . 1Ag 0.016098 2Ag 0.109076 1B2u 0.211108 ; 1B1u 0.211108 1B3u 0.211108 3Ag 0.385413 ; 2B1u 0.802773 2B2u 0.802773 2B3u 0.802773 ; 4Ag 0.900610 1B3g 0.900610 1B2g 0.900610 ; 1B1g 0.900610 5Ag 0.900610 6Ag 1.071716 ; 3B1u 2.265097 3B3u 2.265097 3B2u 2.265097 ; 7Ag 2.575158 8Ag 2.953058 2B2g 2.953058 ; 2B3g 2.953058 2B1g 2.953058 9Ag 2.953058 ; 4B1u 4.243456 4B3u 4.243456 4B2u 4.243456 ; 5B1u 4.243456 1Au 4.243456 5B3u 4.243456 ; 5B2u 4.243456 10Ag 5.042050 6B3u 5.416218 ; 6B1u 5.416218 6B2u 5.416218 11Ag 8.101653 ; 12Ag 8.311198 3B3g 8.311198 3B2g 8.311198 ; 3B1g 8.311198 13Ag 8.311198 7B3u 11.838258 ; 7B2u 11.838258 7B1u 11.838258 14Ag 14.727369 ; 15Ag 34.174361 . Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]. @UHF Final Energy: -0.49999200764259. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4999920076425929; Two-Electron Energy = 0.0000000000000002; Total Energy = -0.4999920076425927. UHF NO Occupations:; HONO-0 : 1 Ag 1.0000000; LUNO+0 : 2 Ag 0.0000000; LUNO+1 : 3 Ag 0.0000000; LUNO+2 : 4 Ag 0.0000000; LUNO+3 : 5 Ag 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on psinet at Mon Apr 29 11:26:27 2019; Module time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes. ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:7673,Energy Efficiency,Energy,Energy,7673,"1 15Ag 34.149342 . Beta Occupied: . . Beta Virtual: . 1Ag 0.016098 2Ag 0.109076 1B2u 0.211108 ; 1B1u 0.211108 1B3u 0.211108 3Ag 0.385413 ; 2B1u 0.802773 2B2u 0.802773 2B3u 0.802773 ; 4Ag 0.900610 1B3g 0.900610 1B2g 0.900610 ; 1B1g 0.900610 5Ag 0.900610 6Ag 1.071716 ; 3B1u 2.265097 3B3u 2.265097 3B2u 2.265097 ; 7Ag 2.575158 8Ag 2.953058 2B2g 2.953058 ; 2B3g 2.953058 2B1g 2.953058 9Ag 2.953058 ; 4B1u 4.243456 4B3u 4.243456 4B2u 4.243456 ; 5B1u 4.243456 1Au 4.243456 5B3u 4.243456 ; 5B2u 4.243456 10Ag 5.042050 6B3u 5.416218 ; 6B1u 5.416218 6B2u 5.416218 11Ag 8.101653 ; 12Ag 8.311198 3B3g 8.311198 3B2g 8.311198 ; 3B1g 8.311198 13Ag 8.311198 7B3u 11.838258 ; 7B2u 11.838258 7B1u 11.838258 14Ag 14.727369 ; 15Ag 34.174361 . Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]. @UHF Final Energy: -0.49999200764259. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4999920076425929; Two-Electron Energy = 0.0000000000000002; Total Energy = -0.4999920076425927. UHF NO Occupations:; HONO-0 : 1 Ag 1.0000000; LUNO+0 : 2 Ag 0.0000000; LUNO+1 : 3 Ag 0.0000000; LUNO+2 : 4 Ag 0.0000000; LUNO+3 : 5 Ag 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on psinet at Mon Apr 29 11:26:27 2019; Module time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes. Psi4 stopped on: Monday, 29 April 2019 11:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:7708,Energy Efficiency,Energy,Energy,7708,"eta Virtual: . 1Ag 0.016098 2Ag 0.109076 1B2u 0.211108 ; 1B1u 0.211108 1B3u 0.211108 3Ag 0.385413 ; 2B1u 0.802773 2B2u 0.802773 2B3u 0.802773 ; 4Ag 0.900610 1B3g 0.900610 1B2g 0.900610 ; 1B1g 0.900610 5Ag 0.900610 6Ag 1.071716 ; 3B1u 2.265097 3B3u 2.265097 3B2u 2.265097 ; 7Ag 2.575158 8Ag 2.953058 2B2g 2.953058 ; 2B3g 2.953058 2B1g 2.953058 9Ag 2.953058 ; 4B1u 4.243456 4B3u 4.243456 4B2u 4.243456 ; 5B1u 4.243456 1Au 4.243456 5B3u 4.243456 ; 5B2u 4.243456 10Ag 5.042050 6B3u 5.416218 ; 6B1u 5.416218 6B2u 5.416218 11Ag 8.101653 ; 12Ag 8.311198 3B3g 8.311198 3B2g 8.311198 ; 3B1g 8.311198 13Ag 8.311198 7B3u 11.838258 ; 7B2u 11.838258 7B1u 11.838258 14Ag 14.727369 ; 15Ag 34.174361 . Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]. @UHF Final Energy: -0.49999200764259. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4999920076425929; Two-Electron Energy = 0.0000000000000002; Total Energy = -0.4999920076425927. UHF NO Occupations:; HONO-0 : 1 Ag 1.0000000; LUNO+0 : 2 Ag 0.0000000; LUNO+1 : 3 Ag 0.0000000; LUNO+2 : 4 Ag 0.0000000; LUNO+3 : 5 Ag 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on psinet at Mon Apr 29 11:26:27 2019; Module time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes. Psi4 stopped on: Monday, 29 April 2019 11:26AM; Psi4 wall time for execution: 0:0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:2065,Performance,Load,Loading,2065,", H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. *** tstart() called on psinet; *** at Mon Apr 29 11:26:26 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algori",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:3468,Performance,Load,Loading,3468,"---. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. => Loading Basis Set <=. Name: (ANO-RCC AUX); Role: DECON; Keyword: BASIS_RELATIVISTIC; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs func decontract. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 15 15 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 1 1 0 0 0 0; B1u 7 7 0 0 0 0; B2u 7 7 0 0 0 0; B3u 7 7 0 0 0 0; -------------------------------------------------------; Total 46 46 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. OEINTS: Using relativistic (X2C) overlap, kinetic, and potential integrals.; ------------------------------------------------------------; Spin-Free X2C Integrals at the One-Electron Level (SFX2C-1e); by Prakash Verma and Francesco A. Evangelista; ------------------------------------------------------------. ==> X2C Opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:5079,Performance,Perform,Performing,5079,"------------------. ==> Integral Setup <==. OEINTS: Using relativistic (X2C) overlap, kinetic, and potential integrals.; ------------------------------------------------------------; Spin-Free X2C Integrals at the One-Electron Level (SFX2C-1e); by Prakash Verma and Francesco A. Evangelista; ------------------------------------------------------------. ==> X2C Options <==. Computational Basis: ANO-RCC; X2C Basis: (ANO-RCC AUX); The X2C Hamiltonian will be computed in the X2C Basis. Comparing only 15 out of 17 elements of H_Dirac. The 1-norm of |H_X2C - H_Dirac| is: 9.762433630521. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set. Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of primitives: 74; Number of atomic orbitals: 46; Number of basis functions: 46. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 1169642 doubles for integral storage.; We computed 5565 shell quartets total.; Whereas there are 5565 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 1.6573405367E-05.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @UHF iter 1: -0.49999200764265 -4.99992e-01 2.73366e-14 DIIS; @UHF iter 2: -0.49999200764259 5.80092e-14 1.96206e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1Ag -0.499992 . Alpha Virtual: . 2Ag 0.054719 1B1u 0.189699 1B3u 0.189699 ; 1B2u 0.189699 3Ag 0.302215 2B3u 0.741625 ; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:223,Safety,sanity check,sanity check,223,"Did you put the sph/cart flag at the top of the basis file? MolSSI's new library does it automatically if you select ""psi4"" format, but it has to be by hand for the old one. It at least runs for me -- output is below for a sanity check. ```; >>> head stage/share/psi4/basis/ano-rcc.gbs; cartesian. !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.7.0; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: ANO-RCC; ! Description: Full ANO-RCC basis; ! Role: orbital; ```. ```>>> cat toon.out . -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.4a1.dev99 . Git: Rev {cphfconv} bddb364 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. ***",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:47,Availability,error,error,47,"@loriab I did. I guess you don't encounter the error because you are not using `$PSIPATH`, see http://www.psicode.org/psi4manual/master/external.html#envvar-PSIPATH. (I'm using this to reproduce the situation of a user who wants to use a custom basis set file on a system-wide PSI4 installation to which he/she does not have write access.) It seems that basis set files in `$PSIPATH` are somehow handled differently. These are my corresponding files:. ```; head $PSIPATH/ano-rcc.gbs; cartesian. !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.7.0; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: ANO-RCC; ! Description: Full ANO-RCC basis; ! Role: orbital; ```. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.4a1.dev101 . Git: Rev {master} 302cd1d dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:2352,Availability,Down,Downloads,2352,"angelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); --------------------------------------------------------------------------. *** tstart() called on molmod00.ugent.be; *** at Mon Apr 29 19:36:44 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 16 file /home/toon/Downloads/jobs/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:5559,Availability,error,error,5559,"home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filename(basgbs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1396, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""""); core.set_global_option(""SCF_TYPE"", ""pk""); core.set_global_option(""BASIS"", ""ano-rcc""); core.set_global_option(""RELATIVISTIC"", ""x2c""); core.set_global_option(""REFERENCE"", ""uhf""); --> energy('hf'). Psi4 stopped on: Monday, 29 April 2019 07:36PM; Psi4 wall time for execution: 0:00:00.18. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:282,Deployability,install,installation,282,"@loriab I did. I guess you don't encounter the error because you are not using `$PSIPATH`, see http://www.psicode.org/psi4manual/master/external.html#envvar-PSIPATH. (I'm using this to reproduce the situation of a user who wants to use a custom basis set file on a system-wide PSI4 installation to which he/she does not have write access.) It seems that basis set files in `$PSIPATH` are somehow handled differently. These are my corresponding files:. ```; head $PSIPATH/ano-rcc.gbs; cartesian. !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.7.0; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: ANO-RCC; ! Description: Full ANO-RCC basis; ! Role: orbital; ```. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.4a1.dev101 . Git: Rev {master} 302cd1d dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:2076,Energy Efficiency,energy,energy,2076,"Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); --------------------------------------------------------------------------. *** tstart() called on molmod00.ugent.be; *** at Mon Apr 29 19:36:44 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 16 file /home/toon/Downloads/jobs/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Cha",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:2691,Energy Efficiency,charge,charge,2691,"-----------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); --------------------------------------------------------------------------. *** tstart() called on molmod00.ugent.be; *** at Mon Apr 29 19:36:44 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 16 file /home/toon/Downloads/jobs/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:3117,Energy Efficiency,Charge,Charge,3117,"--------------. *** tstart() called on molmod00.ugent.be; *** at Mon Apr 29 19:36:44 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 16 file /home/toon/Downloads/jobs/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:3315,Energy Efficiency,Energy,Energy,3315,"y H line 16 file /home/toon/Downloads/jobs/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:3848,Energy Efficiency,energy,energy,3848,"tational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filenam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:3874,Energy Efficiency,energy,energy,3874,"tational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filenam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:5431,Energy Efficiency,energy,energy,5431,"home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filename(basgbs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1396, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""""); core.set_global_option(""SCF_TYPE"", ""pk""); core.set_global_option(""BASIS"", ""ano-rcc""); core.set_global_option(""RELATIVISTIC"", ""x2c""); core.set_global_option(""REFERENCE"", ""uhf""); --> energy('hf'). Psi4 stopped on: Monday, 29 April 2019 07:36PM; Psi4 wall time for execution: 0:00:00.18. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:2244,Performance,Load,Loading,2244,", H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); --------------------------------------------------------------------------. *** tstart() called on molmod00.ugent.be; *** at Mon Apr 29 19:36:44 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 16 file /home/toon/Downloads/jobs/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM dis",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:331,Security,access,access,331,"@loriab I did. I guess you don't encounter the error because you are not using `$PSIPATH`, see http://www.psicode.org/psi4manual/master/external.html#envvar-PSIPATH. (I'm using this to reproduce the situation of a user who wants to use a custom basis set file on a system-wide PSI4 installation to which he/she does not have write access.) It seems that basis set files in `$PSIPATH` are somehow handled differently. These are my corresponding files:. ```; head $PSIPATH/ano-rcc.gbs; cartesian. !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.7.0; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: ANO-RCC; ! Description: Full ANO-RCC basis; ! Role: orbital; ```. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.4a1.dev101 . Git: Rev {master} 302cd1d dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807
https://github.com/psi4/psi4/issues/1613#issuecomment-487691447:518,Deployability,install,install,518,"you're right. it's hitting [this logic](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasisset.py#L802) which didn't have aux-basis-sets-derived-from-orbital-basis-sets in mind when it was derived. two solutions:. a) forget envvar `PSIPATH`. instead, put the `ano-rcc.gbs` in the same directory as the input file. `.` is in the search path.; b) edit `libraryPath` to `basisPath` [here](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasisset.py#L811) and remake (and possibly re-install) to copy into right place. Without write access, (a) is probably the way to go. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487691447
https://github.com/psi4/psi4/issues/1613#issuecomment-487691447:567,Security,access,access,567,"you're right. it's hitting [this logic](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasisset.py#L802) which didn't have aux-basis-sets-derived-from-orbital-basis-sets in mind when it was derived. two solutions:. a) forget envvar `PSIPATH`. instead, put the `ano-rcc.gbs` in the same directory as the input file. `.` is in the search path.; b) edit `libraryPath` to `basisPath` [here](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasisset.py#L811) and remake (and possibly re-install) to copy into right place. Without write access, (a) is probably the way to go. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487691447
https://github.com/psi4/psi4/issues/1613#issuecomment-487691447:33,Testability,log,logic,33,"you're right. it's hitting [this logic](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasisset.py#L802) which didn't have aux-basis-sets-derived-from-orbital-basis-sets in mind when it was derived. two solutions:. a) forget envvar `PSIPATH`. instead, put the `ano-rcc.gbs` in the same directory as the input file. `.` is in the search path.; b) edit `libraryPath` to `basisPath` [here](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasisset.py#L811) and remake (and possibly re-install) to copy into right place. Without write access, (a) is probably the way to go. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487691447
https://github.com/psi4/psi4/issues/1614#issuecomment-487980493:334,Energy Efficiency,charge,charged,334,"At least the speed issue is probably fundamental. Calculating the potential and the field at a grid point amounts to calculating a full set of one-electron Coulomb integrals for every one of these points. (Physically, the potential caused by a distribution of electron density onto a point r is the same as evaluating the effect of a charged nucleus at r onto the distribution of electrons.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1614#issuecomment-487980493
https://github.com/psi4/psi4/issues/1614#issuecomment-488006485:5,Integrability,depend,depends,5,That depends on whether `integral_->electrostatic()` is threaded or not. But threading over grid points would probably be faster in this case.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1614#issuecomment-488006485
https://github.com/psi4/psi4/pull/1617#issuecomment-489083065:22,Safety,safe,safer,22,"I think it's slightly safer as these are evaluated left to right. It shouldn't be a problem, but good practice to be consistent throughout the whole code base to cast on the left.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1617#issuecomment-489083065
https://github.com/psi4/psi4/pull/1628#issuecomment-643792621:19,Deployability,patch,patch,19,@obrien951 Can you patch this up for 1.4?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1628#issuecomment-643792621
https://github.com/psi4/psi4/pull/1628#issuecomment-683466334:16,Deployability,patch,patch,16,@obrien951 Lets patch this up or close this.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1628#issuecomment-683466334
https://github.com/psi4/psi4/pull/1635#issuecomment-683466510:23,Testability,test,tests,23,@obrien951 Can you fix tests here so we can merge this in?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1635#issuecomment-683466510
https://github.com/psi4/psi4/issues/1638#issuecomment-489080431:357,Availability,avail,available,357,"Yes, I think what you show should work as `molden` excepts a MO matrix. Since we can compute CISD in multiple ways this gets a little tricky as only the DETCI module returns a CIWavefunction, the best way to check for this is `isinstance(wan, psi4.core.CIWavefunction)` I believe. By default FCI only computes the ground state, so only the `(0, 0)` OPDM is available. Additional states (roots) can be computed by setting the `num_roots` to a value other than 1 and the `(n, n)` OPDMs will be available via `get_opdm`. `tdm True` creates all possible `(n, m)` OPDMs. The `True` in `wfn.get_opdm(0, 0, ""A"", True)` is needed for non FCI wavefunctions as a `False` value will return a matrix of size `nact x nact`. Setting this to `True` will return a matrix the size of `nmo x nmo` with the inactive space set to the diagonal and the virtual space set to zero. Before coffee has quite kicked in yet, hopefully this makes sense.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1638#issuecomment-489080431
https://github.com/psi4/psi4/issues/1638#issuecomment-489080431:492,Availability,avail,available,492,"Yes, I think what you show should work as `molden` excepts a MO matrix. Since we can compute CISD in multiple ways this gets a little tricky as only the DETCI module returns a CIWavefunction, the best way to check for this is `isinstance(wan, psi4.core.CIWavefunction)` I believe. By default FCI only computes the ground state, so only the `(0, 0)` OPDM is available. Additional states (roots) can be computed by setting the `num_roots` to a value other than 1 and the `(n, n)` OPDMs will be available via `get_opdm`. `tdm True` creates all possible `(n, m)` OPDMs. The `True` in `wfn.get_opdm(0, 0, ""A"", True)` is needed for non FCI wavefunctions as a `False` value will return a matrix of size `nact x nact`. Setting this to `True` will return a matrix the size of `nmo x nmo` with the inactive space set to the diagonal and the virtual space set to zero. Before coffee has quite kicked in yet, hopefully this makes sense.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1638#issuecomment-489080431
https://github.com/psi4/psi4/issues/1638#issuecomment-489100885:106,Deployability,update,update,106,Totally makes sense to me and works well. Thank you for your helpful comments! I'll make a PR with a docu update.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1638#issuecomment-489100885
https://github.com/psi4/psi4/pull/1640#issuecomment-489288722:96,Modifiability,evolve,evolve,96,"No problem, this is a simple enough hack that we can apply locally for now. Perhaps the PR will evolve into a better solution once we investigate more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-489288722
https://github.com/psi4/psi4/pull/1640#issuecomment-489288722:22,Usability,simpl,simple,22,"No problem, this is a simple enough hack that we can apply locally for now. Perhaps the PR will evolve into a better solution once we investigate more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-489288722
https://github.com/psi4/psi4/pull/1640#issuecomment-489927058:216,Availability,error,error,216,"@robertodr, was using `MODULE` instead of `SHARED` deliberate? https://github.com/pybind/pybind11/blob/master/tools/pybind11Tools.cmake#L116. I confirm that v2rdm won't build in psi4's current state with same module error. @fevangelista, there's a new ambit 0.3 conda pkg available for Mac now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-489927058
https://github.com/psi4/psi4/pull/1640#issuecomment-489927058:272,Availability,avail,available,272,"@robertodr, was using `MODULE` instead of `SHARED` deliberate? https://github.com/pybind/pybind11/blob/master/tools/pybind11Tools.cmake#L116. I confirm that v2rdm won't build in psi4's current state with same module error. @fevangelista, there's a new ambit 0.3 conda pkg available for Mac now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-489927058
https://github.com/psi4/psi4/pull/1640#issuecomment-490072262:119,Modifiability,plugin,plugins,119,"I was following the CMake manual: ""SHARED libraries are linked dynamically and loaded at runtime. MODULE libraries are plugins that are not linked into other targets but may be loaded dynamically at runtime using dlopen-like functionality."" Guess I was wrong? Maybe @fevangelista can test that out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262
https://github.com/psi4/psi4/pull/1640#issuecomment-490072262:79,Performance,load,loaded,79,"I was following the CMake manual: ""SHARED libraries are linked dynamically and loaded at runtime. MODULE libraries are plugins that are not linked into other targets but may be loaded dynamically at runtime using dlopen-like functionality."" Guess I was wrong? Maybe @fevangelista can test that out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262
https://github.com/psi4/psi4/pull/1640#issuecomment-490072262:177,Performance,load,loaded,177,"I was following the CMake manual: ""SHARED libraries are linked dynamically and loaded at runtime. MODULE libraries are plugins that are not linked into other targets but may be loaded dynamically at runtime using dlopen-like functionality."" Guess I was wrong? Maybe @fevangelista can test that out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262
https://github.com/psi4/psi4/pull/1640#issuecomment-490072262:284,Testability,test,test,284,"I was following the CMake manual: ""SHARED libraries are linked dynamically and loaded at runtime. MODULE libraries are plugins that are not linked into other targets but may be loaded dynamically at runtime using dlopen-like functionality."" Guess I was wrong? Maybe @fevangelista can test that out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262
https://github.com/psi4/psi4/pull/1640#issuecomment-490221675:0,Testability,test,testing,0,testing the `MODULE` --> `SHARED` on v2rdm now,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-490221675
https://github.com/psi4/psi4/pull/1645#issuecomment-492445140:0,Availability,Failure,Failures,0,"Failures are my fault, and the fix is in-PR. Just to be clear, Psi4 doesn't use pylibxc -- only the compiled library API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492445140
https://github.com/psi4/psi4/pull/1645#issuecomment-492445140:16,Availability,fault,fault,16,"Failures are my fault, and the fix is in-PR. Just to be clear, Psi4 doesn't use pylibxc -- only the compiled library API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492445140
https://github.com/psi4/psi4/pull/1645#issuecomment-492445140:56,Usability,clear,clear,56,"Failures are my fault, and the fix is in-PR. Just to be clear, Psi4 doesn't use pylibxc -- only the compiled library API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492445140
https://github.com/psi4/psi4/pull/1645#issuecomment-492614066:113,Testability,test,tests,113,"OK, if you could post the dicts which you used to run the functionals, that'd be much appreciated - I'll add the tests later, separately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492614066
https://github.com/psi4/psi4/pull/1645#issuecomment-492620323:478,Availability,avail,available,478,"Example; ```; molecule {; 0 1; Ne; }. set basis aug-cc-pV5Z; set dft_spherical_points 974; set dft_radial_points 450. camlda0 = {; ""name"": ""CAM-LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_CAM_LDA0"": {""use_libxc"": True} }; }; lda0 = {; ""name"": ""LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_LDA0"": {""use_libxc"": True} }; }; ```; I've just merged these into libxc master. The hybrid LDA family and these two functionals will appear in the next (major?) release. Unfortunately, these aren't available anywhere else, so I can't be 100% sure the functionals themselves are correct. I just checked that the energies appear to be sane, i.e. the Ne energy is somewhere around -128 hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323
https://github.com/psi4/psi4/pull/1645#issuecomment-492620323:441,Deployability,release,release,441,"Example; ```; molecule {; 0 1; Ne; }. set basis aug-cc-pV5Z; set dft_spherical_points 974; set dft_radial_points 450. camlda0 = {; ""name"": ""CAM-LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_CAM_LDA0"": {""use_libxc"": True} }; }; lda0 = {; ""name"": ""LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_LDA0"": {""use_libxc"": True} }; }; ```; I've just merged these into libxc master. The hybrid LDA family and these two functionals will appear in the next (major?) release. Unfortunately, these aren't available anywhere else, so I can't be 100% sure the functionals themselves are correct. I just checked that the energies appear to be sane, i.e. the Ne energy is somewhere around -128 hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323
https://github.com/psi4/psi4/pull/1645#issuecomment-492620323:631,Energy Efficiency,energy,energy,631,"Example; ```; molecule {; 0 1; Ne; }. set basis aug-cc-pV5Z; set dft_spherical_points 974; set dft_radial_points 450. camlda0 = {; ""name"": ""CAM-LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_CAM_LDA0"": {""use_libxc"": True} }; }; lda0 = {; ""name"": ""LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_LDA0"": {""use_libxc"": True} }; }; ```; I've just merged these into libxc master. The hybrid LDA family and these two functionals will appear in the next (major?) release. Unfortunately, these aren't available anywhere else, so I can't be 100% sure the functionals themselves are correct. I just checked that the energies appear to be sane, i.e. the Ne energy is somewhere around -128 hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323
https://github.com/psi4/psi4/pull/1645#issuecomment-492646574:63,Testability,test,tests,63,"Looks great. CI should pass now after a rebase. And note that `tests/pytest/` has moved to `tests/pytests/` to follow Peter's links. Ref values _much_ appreciated, even if they're only a warning that we differ from you rather than we're not matching literature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492646574
https://github.com/psi4/psi4/pull/1645#issuecomment-492646574:92,Testability,test,tests,92,"Looks great. CI should pass now after a rebase. And note that `tests/pytest/` has moved to `tests/pytests/` to follow Peter's links. Ref values _much_ appreciated, even if they're only a warning that we differ from you rather than we're not matching literature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492646574
https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:528,Deployability,update,update,528,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797
https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:963,Deployability,update,update,963,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797
https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:834,Integrability,depend,depend,834,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797
https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:1308,Modifiability,evolve,evolved,1308,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797
https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:431,Performance,optimiz,optimization,431,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797
https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:461,Performance,optimiz,optimization,461,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797
https://github.com/psi4/psi4/issues/1646#issuecomment-492649900:257,Availability,ping,ping,257,"Let me know if I can help here, it would be great to get something like this in. The iterations are now in Python so implementing a new solver should be much more accessible to new developers as well. This could be a fun project to tackle... . Feel free to ping someone to add occupation smearing to the density formation which would likely need to happen C side, should be very straightforward to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492649900
https://github.com/psi4/psi4/issues/1646#issuecomment-492649900:163,Security,access,accessible,163,"Let me know if I can help here, it would be great to get something like this in. The iterations are now in Python so implementing a new solver should be much more accessible to new developers as well. This could be a fun project to tackle... . Feel free to ping someone to add occupation smearing to the density formation which would likely need to happen C side, should be very straightforward to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492649900
https://github.com/psi4/psi4/issues/1646#issuecomment-497970273:111,Usability,simpl,simple,111,> @ffangliu What scheme does Terachem use to converge their finite temperature computations?; I think it's the simple scheme with damping,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-497970273
https://github.com/psi4/psi4/issues/1649#issuecomment-493665743:163,Availability,error,error,163,"As @hokru pointed out, this is because I forgot to define fragments in my system. Perhaps we should check for that in the n-body driver somehow and print a better error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1649#issuecomment-493665743
https://github.com/psi4/psi4/issues/1649#issuecomment-493665743:169,Integrability,message,message,169,"As @hokru pointed out, this is because I forgot to define fragments in my system. Perhaps we should check for that in the n-body driver somehow and print a better error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1649#issuecomment-493665743
https://github.com/psi4/psi4/issues/1649#issuecomment-493675525:96,Safety,sanity check,sanity check,96,"Agreed, checking that the sys has at least as many bodies as the nbody requests would be a good sanity check. Mol.nfragments() is the fn, I think. run_sapt in proc.py does something similar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1649#issuecomment-493675525
https://github.com/psi4/psi4/issues/1653#issuecomment-497265265:0,Usability,Simpl,Simple,0,"Simple to implement, but virial ratios don't make sense for DFT since the energies are anyhow off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1653#issuecomment-497265265
https://github.com/psi4/psi4/issues/1656#issuecomment-670372487:90,Integrability,interface,interface,90,"tagging @robertodr because of pcmsolver, but I assume it's an issue on psi4's side of the interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1656#issuecomment-670372487
https://github.com/psi4/psi4/issues/1656#issuecomment-670418149:123,Energy Efficiency,energy,energy-in-solution-potential-pcmsolver-bug,123,Occurs also for automatic counterpoise calculations as reported in the forum: http://forum.psicode.org/t/non-covalent-bond-energy-in-solution-potential-pcmsolver-bug/1896/3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1656#issuecomment-670418149
https://github.com/psi4/psi4/pull/1657#issuecomment-499154239:178,Testability,test,tests,178,"Alright. I'll try to change the order. ~~Should we switch to `multipolepotentials` for EFP in this PR already? Would be clever probably, because then at least some functionality tests of the code are executed.~~; Done. That was super easy. Btw: Python one-liner to generate the 'correct' alphabetical ordering:; `list(itertools.combinations_with_replacement((""X"", ""Y"", ""Z""), dim))`; where `dim` is the dimension of the tensor.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499154239
https://github.com/psi4/psi4/pull/1657#issuecomment-499469261:19,Testability,test,tests,19,"Since there are no tests for the existing EFP multipole potential integrals (at least I did not find anything...), I quickly implemented some tests on the Python layer using finite differences, which can be found [here](https://gist.github.com/maxscheurer/ded7fbb08dcda1fc68b5bce8033f33f4). I would feel more comfortable if these tests were added somewhere to Psi4. Is there any place in the code base dedicated to such test?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499469261
https://github.com/psi4/psi4/pull/1657#issuecomment-499469261:142,Testability,test,tests,142,"Since there are no tests for the existing EFP multipole potential integrals (at least I did not find anything...), I quickly implemented some tests on the Python layer using finite differences, which can be found [here](https://gist.github.com/maxscheurer/ded7fbb08dcda1fc68b5bce8033f33f4). I would feel more comfortable if these tests were added somewhere to Psi4. Is there any place in the code base dedicated to such test?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499469261
https://github.com/psi4/psi4/pull/1657#issuecomment-499469261:330,Testability,test,tests,330,"Since there are no tests for the existing EFP multipole potential integrals (at least I did not find anything...), I quickly implemented some tests on the Python layer using finite differences, which can be found [here](https://gist.github.com/maxscheurer/ded7fbb08dcda1fc68b5bce8033f33f4). I would feel more comfortable if these tests were added somewhere to Psi4. Is there any place in the code base dedicated to such test?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499469261
https://github.com/psi4/psi4/pull/1657#issuecomment-499469261:420,Testability,test,test,420,"Since there are no tests for the existing EFP multipole potential integrals (at least I did not find anything...), I quickly implemented some tests on the Python layer using finite differences, which can be found [here](https://gist.github.com/maxscheurer/ded7fbb08dcda1fc68b5bce8033f33f4). I would feel more comfortable if these tests were added somewhere to Psi4. Is there any place in the code base dedicated to such test?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499469261
https://github.com/psi4/psi4/pull/1657#issuecomment-499471595:22,Testability,test,tests,22,Very nice to add unit tests! Have a look under `tests/pytests` for where to hook it up.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499471595
https://github.com/psi4/psi4/pull/1657#issuecomment-499471595:48,Testability,test,tests,48,Very nice to add unit tests! Have a look under `tests/pytests` for where to hook it up.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499471595
https://github.com/psi4/psi4/pull/1657#issuecomment-499629662:29,Testability,test,tests,29,Now Travis fails... 😦 ; Some tests involving `test_qcng_dftd3.py::test_mp2d__run_mp2d__2body` and `test_mp2d` are breaking. Any hints on that?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499629662
https://github.com/psi4/psi4/pull/1657#issuecomment-499894732:120,Performance,perform,performs,120,"@jturney, @andysim, should the efp files be removed from libmints and instead a python fn that calls the generic fn and performs the std --> efp mapping be constructed and attached to the mints object so efp doesn't know the difference? That `mints.ao_efp_multipole_potential` call is in psi4numpy, the pylibefp tests as well as here in the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499894732
https://github.com/psi4/psi4/pull/1657#issuecomment-499894732:312,Testability,test,tests,312,"@jturney, @andysim, should the efp files be removed from libmints and instead a python fn that calls the generic fn and performs the std --> efp mapping be constructed and attached to the mints object so efp doesn't know the difference? That `mints.ao_efp_multipole_potential` call is in psi4numpy, the pylibefp tests as well as here in the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499894732
https://github.com/psi4/psi4/pull/1657#issuecomment-500113924:102,Performance,perform,performs,102,"> should the efp files be removed from libmints and instead a python fn that calls the generic fn and performs the std --> efp mapping be constructed and attached to the mints object so efp doesn't know the difference?. I just implemented these suggested changes. Makes the code a bit nicer since calls; to `mints.ao_efp_multipole_potential` can be left as they are at the moment, and the re-mapping is not spilled over to EFP code. The following files could be removed now:; - `efpmultipolepotential.hh`; - `efpmultipolepotential.cc`. These files are used in:; - `integral.cc`. Before proceeding, I need an OK/suggestions from you guys, @loriab, @andysim, @jturney.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-500113924
https://github.com/psi4/psi4/pull/1657#issuecomment-500405513:236,Integrability,contract,contracting,236,"> I guess efpmultipolepotential.h and efpmultipolepotential.cc can also be nuked at this point?. Yes, these are gone now. I have some ideas to improve the `multipole_potential` integrals further (e.g., computing multiple sites at once, contracting over the multipole values, etc.), but I'll make another PR for that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-500405513
https://github.com/psi4/psi4/pull/1657#issuecomment-500498238:24,Testability,test,tests,24,Ready for merge (if all tests succeed).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-500498238
https://github.com/psi4/psi4/issues/1660#issuecomment-500006294:55,Safety,safe,safety,55,"This usually falls in our memory overhead buffers (our safety margins of 20%). Can just assume nbf x nbf, the size is trivial enough to elide any possible space saving in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1660#issuecomment-500006294
https://github.com/psi4/psi4/pull/1661#issuecomment-500280898:305,Modifiability,variab,variable,305,This pull request **introduces 1 alert** and **fixes 15** when merging 6a41d7180671e5037ee2fd306cc186a80aa4defd into a1f7bb34db8c37c399b3ecb216a5952d14fb0ef7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8a7c3d52e76a9d71521f3149d806ac16512fcb58). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500280898
https://github.com/psi4/psi4/pull/1661#issuecomment-500280898:429,Modifiability,variab,variable,429,This pull request **introduces 1 alert** and **fixes 15** when merging 6a41d7180671e5037ee2fd306cc186a80aa4defd into a1f7bb34db8c37c399b3ecb216a5952d14fb0ef7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8a7c3d52e76a9d71521f3149d806ac16512fcb58). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500280898
https://github.com/psi4/psi4/pull/1661#issuecomment-500280898:447,Modifiability,Variab,Variable,447,This pull request **introduces 1 alert** and **fixes 15** when merging 6a41d7180671e5037ee2fd306cc186a80aa4defd into a1f7bb34db8c37c399b3ecb216a5952d14fb0ef7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8a7c3d52e76a9d71521f3149d806ac16512fcb58). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500280898
https://github.com/psi4/psi4/pull/1661#issuecomment-500503632:305,Modifiability,variab,variable,305,This pull request **introduces 1 alert** and **fixes 15** when merging 2e38ebcf81ab131bc2942150691f3fd6c5b92138 into 1b13841c90d8a46e462c590b281b32350a27c64d - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-18faade50f7d08e03578791ba3741680033bd9c5). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500503632
https://github.com/psi4/psi4/pull/1661#issuecomment-500503632:429,Modifiability,variab,variable,429,This pull request **introduces 1 alert** and **fixes 15** when merging 2e38ebcf81ab131bc2942150691f3fd6c5b92138 into 1b13841c90d8a46e462c590b281b32350a27c64d - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-18faade50f7d08e03578791ba3741680033bd9c5). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500503632
https://github.com/psi4/psi4/pull/1661#issuecomment-500503632:447,Modifiability,Variab,Variable,447,This pull request **introduces 1 alert** and **fixes 15** when merging 2e38ebcf81ab131bc2942150691f3fd6c5b92138 into 1b13841c90d8a46e462c590b281b32350a27c64d - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-18faade50f7d08e03578791ba3741680033bd9c5). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500503632
https://github.com/psi4/psi4/pull/1661#issuecomment-500709663:305,Modifiability,variab,variable,305,This pull request **introduces 1 alert** and **fixes 15** when merging 306a4dde3470d89fbb884124d6c7cb03143de2cd into d6b9d6a117c1ed468eb966597a9c8a9b3e8589b4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ac6877b616efbf0e16df18aea94dfb053ac18b0c). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500709663
https://github.com/psi4/psi4/pull/1661#issuecomment-500709663:429,Modifiability,variab,variable,429,This pull request **introduces 1 alert** and **fixes 15** when merging 306a4dde3470d89fbb884124d6c7cb03143de2cd into d6b9d6a117c1ed468eb966597a9c8a9b3e8589b4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ac6877b616efbf0e16df18aea94dfb053ac18b0c). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500709663
https://github.com/psi4/psi4/pull/1661#issuecomment-500709663:447,Modifiability,Variab,Variable,447,This pull request **introduces 1 alert** and **fixes 15** when merging 306a4dde3470d89fbb884124d6c7cb03143de2cd into d6b9d6a117c1ed468eb966597a9c8a9b3e8589b4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ac6877b616efbf0e16df18aea94dfb053ac18b0c). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500709663
https://github.com/psi4/psi4/pull/1661#issuecomment-502267181:152,Deployability,release,release,152,"this has had added to it the option to turn off dispersion during an FISAPT calc. it'd be helpful to get a 3rd review so it's ready to merge after qcng release. presently, master qcng and master psi4 don't play nicely because of renamed dashparams file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-502267181
https://github.com/psi4/psi4/pull/1661#issuecomment-502315227:306,Modifiability,variab,variable,306,This pull request **introduces 2 alerts** and **fixes 15** when merging 89b187c27049a5003cd2ee96ef8b033cbdc7fdf7 into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9bcf3c5063e4ac5f4424caaff170d255cf469b66). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-502315227
https://github.com/psi4/psi4/pull/1661#issuecomment-502315227:453,Modifiability,variab,variable,453,This pull request **introduces 2 alerts** and **fixes 15** when merging 89b187c27049a5003cd2ee96ef8b033cbdc7fdf7 into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9bcf3c5063e4ac5f4424caaff170d255cf469b66). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-502315227
https://github.com/psi4/psi4/pull/1661#issuecomment-502315227:471,Modifiability,Variab,Variable,471,This pull request **introduces 2 alerts** and **fixes 15** when merging 89b187c27049a5003cd2ee96ef8b033cbdc7fdf7 into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9bcf3c5063e4ac5f4424caaff170d255cf469b66). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-502315227
https://github.com/psi4/psi4/pull/1661#issuecomment-503022082:305,Modifiability,variab,variable,305,This pull request **introduces 1 alert** and **fixes 15** when merging 46722a8a81eafc40dcc11622236cd5be13900087 into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3ef0ea64f89e698bd2fd600a3a05b5b6b2e22676). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-503022082
https://github.com/psi4/psi4/pull/1661#issuecomment-503022082:429,Modifiability,variab,variable,429,This pull request **introduces 1 alert** and **fixes 15** when merging 46722a8a81eafc40dcc11622236cd5be13900087 into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3ef0ea64f89e698bd2fd600a3a05b5b6b2e22676). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-503022082
https://github.com/psi4/psi4/pull/1661#issuecomment-503022082:447,Modifiability,Variab,Variable,447,This pull request **introduces 1 alert** and **fixes 15** when merging 46722a8a81eafc40dcc11622236cd5be13900087 into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3ef0ea64f89e698bd2fd600a3a05b5b6b2e22676). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-503022082
https://github.com/psi4/psi4/pull/1661#issuecomment-503308310:305,Modifiability,variab,variable,305,This pull request **introduces 1 alert** and **fixes 15** when merging 0f88f10af7b332323ba7c8a2c4335d41ef4e92cf into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-91cfe09575cc1f1b31e33577597b4baa4fa06582). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-503308310
https://github.com/psi4/psi4/pull/1661#issuecomment-503308310:429,Modifiability,variab,variable,429,This pull request **introduces 1 alert** and **fixes 15** when merging 0f88f10af7b332323ba7c8a2c4335d41ef4e92cf into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-91cfe09575cc1f1b31e33577597b4baa4fa06582). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-503308310
https://github.com/psi4/psi4/pull/1661#issuecomment-503308310:447,Modifiability,Variab,Variable,447,This pull request **introduces 1 alert** and **fixes 15** when merging 0f88f10af7b332323ba7c8a2c4335d41ef4e92cf into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-91cfe09575cc1f1b31e33577597b4baa4fa06582). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-503308310
https://github.com/psi4/psi4/pull/1663#issuecomment-500833979:42,Modifiability,enhance,enhancement,42,"This should be marked bug fix rather than enhancement. There are transition states that I cannot get an IRC for, without that fix. Also, corrected a comment per @andysim's observation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1663#issuecomment-500833979
https://github.com/psi4/psi4/pull/1664#issuecomment-502138356:156,Testability,log,logic,156,"I think we can add by class like https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L216 . Just have to be careful to use `not` logic because `is_gga` is True for all, rather than being the final classification, as we think of it. https://github.com/psi4/psi4/blob/master/tests/docs-dft/input.dat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502138356
https://github.com/psi4/psi4/pull/1664#issuecomment-502138356:300,Testability,test,tests,300,"I think we can add by class like https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L216 . Just have to be careful to use `not` logic because `is_gga` is True for all, rather than being the final classification, as we think of it. https://github.com/psi4/psi4/blob/master/tests/docs-dft/input.dat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502138356
https://github.com/psi4/psi4/pull/1664#issuecomment-502144293:162,Modifiability,refactor,refactoring,162,"Thirding the enthusiasm for this. A couple notes:; * As discussed on conference call, `scfgrad` is just fine on its own and shouldn't be affected by the gradient refactoring elsewhere; * Let me know if you continue investigating noise in the FD. I have a lot of experience testing that code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502144293
https://github.com/psi4/psi4/pull/1664#issuecomment-502144293:273,Testability,test,testing,273,"Thirding the enthusiasm for this. A couple notes:; * As discussed on conference call, `scfgrad` is just fine on its own and shouldn't be affected by the gradient refactoring elsewhere; * Let me know if you continue investigating noise in the FD. I have a lot of experience testing that code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502144293
https://github.com/psi4/psi4/pull/1664#issuecomment-502375914:573,Performance,optimiz,optimize,573,"Alrighty, I've figured it out; I was missing yet another pesky CPKS term. After running this test, all looks great:; ```; molecule {; O 0.000000000000 0.000000000000 -0.076532381406; H 0.000000000000 -0.769857650400 0.607312215449; H -0.000000000000 0.769857650400 0.607312215449; }. dft_grids = [ (75, 302), (90, 434), (99, 590) ]; for radial,spherical in dft_grids:; set {; scf_type pk; d_convergence 12; #dft_v2_rho_cutoff 1e-16; dft_spherical_points $spherical; dft_radial_points $radial; points 5; disp_size 1e-4; g_convergence gau_tight; }. method = 'SVWN/def2-svp'. optimize(method); Eener, Ewfn = freq(method, dertype=0, return_wfn=True); Egrad, Gwfn = freq(method, dertype=1, return_wfn=True); Ehess, Hwfn = freq(method, dertype=2, return_wfn=True). Ewfn.frequencies().print_out(); Gwfn.frequencies().print_out(); Hwfn.frequencies().print_out(); ```; This tests the frequencies by 5 point finite differences of energies (which includes full grid weight derivatives, as a result of the displacements each rebuilding their grid), by gradients (which includes only the first order grid weight derivative term) and by analytic Hessians (which has no grid weight derivative term coded up). The results below confirm that the implementation is now correct (well, for water at least):. |Grid | FD type | mode 1 | mode 2 | mode 3 |; |--------|----------|-----------|-----------|----------|; | | Ener | 1559.6255 | 3735.3708 | 3841.9257| ; | 75,302 | Grad | 1560.1514 | 3735.4746 | 3841.8555| ; | | Hess | 1560.1712 | 3735.5120 | 3841.8152| ; | | | | | | ; | | Ener | 1560.2564 | 3735.4425 | 3841.8996| ; | 90,434 | Grad | 1560.1980 | 3735.4777 | 3841.7622| ; | | Hess | 1560.2152 | 3735.5349 | 3841.8257| ; | | | | | |; | | Ener | 1559.9800 | 3735.4104 | 3841.5086| ; | 99,590 | Grad | 1560.2142 | 3735.4799 | 3841.7807| ; | | Hess | 1560.2242 | 3735.5373 | 3841.8279| . It's really not worth adding the grid weight derivatives, on the basis of this simple test. We just need to ensure that users don",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914
https://github.com/psi4/psi4/pull/1664#issuecomment-502375914:93,Testability,test,test,93,"Alrighty, I've figured it out; I was missing yet another pesky CPKS term. After running this test, all looks great:; ```; molecule {; O 0.000000000000 0.000000000000 -0.076532381406; H 0.000000000000 -0.769857650400 0.607312215449; H -0.000000000000 0.769857650400 0.607312215449; }. dft_grids = [ (75, 302), (90, 434), (99, 590) ]; for radial,spherical in dft_grids:; set {; scf_type pk; d_convergence 12; #dft_v2_rho_cutoff 1e-16; dft_spherical_points $spherical; dft_radial_points $radial; points 5; disp_size 1e-4; g_convergence gau_tight; }. method = 'SVWN/def2-svp'. optimize(method); Eener, Ewfn = freq(method, dertype=0, return_wfn=True); Egrad, Gwfn = freq(method, dertype=1, return_wfn=True); Ehess, Hwfn = freq(method, dertype=2, return_wfn=True). Ewfn.frequencies().print_out(); Gwfn.frequencies().print_out(); Hwfn.frequencies().print_out(); ```; This tests the frequencies by 5 point finite differences of energies (which includes full grid weight derivatives, as a result of the displacements each rebuilding their grid), by gradients (which includes only the first order grid weight derivative term) and by analytic Hessians (which has no grid weight derivative term coded up). The results below confirm that the implementation is now correct (well, for water at least):. |Grid | FD type | mode 1 | mode 2 | mode 3 |; |--------|----------|-----------|-----------|----------|; | | Ener | 1559.6255 | 3735.3708 | 3841.9257| ; | 75,302 | Grad | 1560.1514 | 3735.4746 | 3841.8555| ; | | Hess | 1560.1712 | 3735.5120 | 3841.8152| ; | | | | | | ; | | Ener | 1560.2564 | 3735.4425 | 3841.8996| ; | 90,434 | Grad | 1560.1980 | 3735.4777 | 3841.7622| ; | | Hess | 1560.2152 | 3735.5349 | 3841.8257| ; | | | | | |; | | Ener | 1559.9800 | 3735.4104 | 3841.5086| ; | 99,590 | Grad | 1560.2142 | 3735.4799 | 3841.7807| ; | | Hess | 1560.2242 | 3735.5373 | 3841.8279| . It's really not worth adding the grid weight derivatives, on the basis of this simple test. We just need to ensure that users don",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914
https://github.com/psi4/psi4/pull/1664#issuecomment-502375914:865,Testability,test,tests,865,"gured it out; I was missing yet another pesky CPKS term. After running this test, all looks great:; ```; molecule {; O 0.000000000000 0.000000000000 -0.076532381406; H 0.000000000000 -0.769857650400 0.607312215449; H -0.000000000000 0.769857650400 0.607312215449; }. dft_grids = [ (75, 302), (90, 434), (99, 590) ]; for radial,spherical in dft_grids:; set {; scf_type pk; d_convergence 12; #dft_v2_rho_cutoff 1e-16; dft_spherical_points $spherical; dft_radial_points $radial; points 5; disp_size 1e-4; g_convergence gau_tight; }. method = 'SVWN/def2-svp'. optimize(method); Eener, Ewfn = freq(method, dertype=0, return_wfn=True); Egrad, Gwfn = freq(method, dertype=1, return_wfn=True); Ehess, Hwfn = freq(method, dertype=2, return_wfn=True). Ewfn.frequencies().print_out(); Gwfn.frequencies().print_out(); Hwfn.frequencies().print_out(); ```; This tests the frequencies by 5 point finite differences of energies (which includes full grid weight derivatives, as a result of the displacements each rebuilding their grid), by gradients (which includes only the first order grid weight derivative term) and by analytic Hessians (which has no grid weight derivative term coded up). The results below confirm that the implementation is now correct (well, for water at least):. |Grid | FD type | mode 1 | mode 2 | mode 3 |; |--------|----------|-----------|-----------|----------|; | | Ener | 1559.6255 | 3735.3708 | 3841.9257| ; | 75,302 | Grad | 1560.1514 | 3735.4746 | 3841.8555| ; | | Hess | 1560.1712 | 3735.5120 | 3841.8152| ; | | | | | | ; | | Ener | 1560.2564 | 3735.4425 | 3841.8996| ; | 90,434 | Grad | 1560.1980 | 3735.4777 | 3841.7622| ; | | Hess | 1560.2152 | 3735.5349 | 3841.8257| ; | | | | | |; | | Ener | 1559.9800 | 3735.4104 | 3841.5086| ; | 99,590 | Grad | 1560.2142 | 3735.4799 | 3841.7807| ; | | Hess | 1560.2242 | 3735.5373 | 3841.8279| . It's really not worth adding the grid weight derivatives, on the basis of this simple test. We just need to ensure that users don't run analytic H",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914
https://github.com/psi4/psi4/pull/1664#issuecomment-502375914:1958,Testability,test,test,1958,"15449; H -0.000000000000 0.769857650400 0.607312215449; }. dft_grids = [ (75, 302), (90, 434), (99, 590) ]; for radial,spherical in dft_grids:; set {; scf_type pk; d_convergence 12; #dft_v2_rho_cutoff 1e-16; dft_spherical_points $spherical; dft_radial_points $radial; points 5; disp_size 1e-4; g_convergence gau_tight; }. method = 'SVWN/def2-svp'. optimize(method); Eener, Ewfn = freq(method, dertype=0, return_wfn=True); Egrad, Gwfn = freq(method, dertype=1, return_wfn=True); Ehess, Hwfn = freq(method, dertype=2, return_wfn=True). Ewfn.frequencies().print_out(); Gwfn.frequencies().print_out(); Hwfn.frequencies().print_out(); ```; This tests the frequencies by 5 point finite differences of energies (which includes full grid weight derivatives, as a result of the displacements each rebuilding their grid), by gradients (which includes only the first order grid weight derivative term) and by analytic Hessians (which has no grid weight derivative term coded up). The results below confirm that the implementation is now correct (well, for water at least):. |Grid | FD type | mode 1 | mode 2 | mode 3 |; |--------|----------|-----------|-----------|----------|; | | Ener | 1559.6255 | 3735.3708 | 3841.9257| ; | 75,302 | Grad | 1560.1514 | 3735.4746 | 3841.8555| ; | | Hess | 1560.1712 | 3735.5120 | 3841.8152| ; | | | | | | ; | | Ener | 1560.2564 | 3735.4425 | 3841.8996| ; | 90,434 | Grad | 1560.1980 | 3735.4777 | 3841.7622| ; | | Hess | 1560.2152 | 3735.5349 | 3841.8257| ; | | | | | |; | | Ener | 1559.9800 | 3735.4104 | 3841.5086| ; | 99,590 | Grad | 1560.2142 | 3735.4799 | 3841.7807| ; | | Hess | 1560.2242 | 3735.5373 | 3841.8279| . It's really not worth adding the grid weight derivatives, on the basis of this simple test. We just need to ensure that users don't run analytic Hessians with tiny grids. There could be a problem with noise if people want to do things like quartic force fields from analytic second derivatives, but those kinds of jobs should be using huge grids anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914
https://github.com/psi4/psi4/pull/1664#issuecomment-502375914:1951,Usability,simpl,simple,1951,"15449; H -0.000000000000 0.769857650400 0.607312215449; }. dft_grids = [ (75, 302), (90, 434), (99, 590) ]; for radial,spherical in dft_grids:; set {; scf_type pk; d_convergence 12; #dft_v2_rho_cutoff 1e-16; dft_spherical_points $spherical; dft_radial_points $radial; points 5; disp_size 1e-4; g_convergence gau_tight; }. method = 'SVWN/def2-svp'. optimize(method); Eener, Ewfn = freq(method, dertype=0, return_wfn=True); Egrad, Gwfn = freq(method, dertype=1, return_wfn=True); Ehess, Hwfn = freq(method, dertype=2, return_wfn=True). Ewfn.frequencies().print_out(); Gwfn.frequencies().print_out(); Hwfn.frequencies().print_out(); ```; This tests the frequencies by 5 point finite differences of energies (which includes full grid weight derivatives, as a result of the displacements each rebuilding their grid), by gradients (which includes only the first order grid weight derivative term) and by analytic Hessians (which has no grid weight derivative term coded up). The results below confirm that the implementation is now correct (well, for water at least):. |Grid | FD type | mode 1 | mode 2 | mode 3 |; |--------|----------|-----------|-----------|----------|; | | Ener | 1559.6255 | 3735.3708 | 3841.9257| ; | 75,302 | Grad | 1560.1514 | 3735.4746 | 3841.8555| ; | | Hess | 1560.1712 | 3735.5120 | 3841.8152| ; | | | | | | ; | | Ener | 1560.2564 | 3735.4425 | 3841.8996| ; | 90,434 | Grad | 1560.1980 | 3735.4777 | 3841.7622| ; | | Hess | 1560.2152 | 3735.5349 | 3841.8257| ; | | | | | |; | | Ener | 1559.9800 | 3735.4104 | 3841.5086| ; | 99,590 | Grad | 1560.2142 | 3735.4799 | 3841.7807| ; | | Hess | 1560.2242 | 3735.5373 | 3841.8279| . It's really not worth adding the grid weight derivatives, on the basis of this simple test. We just need to ensure that users don't run analytic Hessians with tiny grids. There could be a problem with noise if people want to do things like quartic force fields from analytic second derivatives, but those kinds of jobs should be using huge grids anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914
https://github.com/psi4/psi4/pull/1664#issuecomment-502410715:636,Energy Efficiency,efficient,efficient,636,"Realistically I'm not going to have the bandwidth to get full (i.e. production quality) DFT hessians up and running in one shot, so I'm in favor of incremental PRs. This one does two things: 1) sets up the CPKS stuff we'll need for all restricted DFT methods and 2) paves the way for GGA Hessians, by adding all the appropriate hooks for the various derivative terms. It currently needs 3 x Natom x nbf^2 memory for the Fock derivatives, but that will be easy to fix in the future. Therefore, my preference is to get this PR in as-is, so that I (and, hopefully, others) can build on it by adding the GGA terms and making it more memory efficient. I'd be very happy to guide any interested people on the refactoring front, but will do it myself if needed; either way, it's something that's much easier to do when there's at least something that works in place already. The main review questions I have were already sorted out in the great feedback I've had so far: @loriab told me exactly where, and how, to hook into the driver. You (@dgasmith) have pointed out a good source of inspiration for the refactoring pass, so I think my questions are answered at this point. Once this is merged, I'll continue to work on the restricted GGA terms so that we're well poised for a brainstorming session to make the code more efficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715
https://github.com/psi4/psi4/pull/1664#issuecomment-502410715:1316,Energy Efficiency,efficient,efficient,1316,"Realistically I'm not going to have the bandwidth to get full (i.e. production quality) DFT hessians up and running in one shot, so I'm in favor of incremental PRs. This one does two things: 1) sets up the CPKS stuff we'll need for all restricted DFT methods and 2) paves the way for GGA Hessians, by adding all the appropriate hooks for the various derivative terms. It currently needs 3 x Natom x nbf^2 memory for the Fock derivatives, but that will be easy to fix in the future. Therefore, my preference is to get this PR in as-is, so that I (and, hopefully, others) can build on it by adding the GGA terms and making it more memory efficient. I'd be very happy to guide any interested people on the refactoring front, but will do it myself if needed; either way, it's something that's much easier to do when there's at least something that works in place already. The main review questions I have were already sorted out in the great feedback I've had so far: @loriab told me exactly where, and how, to hook into the driver. You (@dgasmith) have pointed out a good source of inspiration for the refactoring pass, so I think my questions are answered at this point. Once this is merged, I'll continue to work on the restricted GGA terms so that we're well poised for a brainstorming session to make the code more efficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715
https://github.com/psi4/psi4/pull/1664#issuecomment-502410715:703,Modifiability,refactor,refactoring,703,"Realistically I'm not going to have the bandwidth to get full (i.e. production quality) DFT hessians up and running in one shot, so I'm in favor of incremental PRs. This one does two things: 1) sets up the CPKS stuff we'll need for all restricted DFT methods and 2) paves the way for GGA Hessians, by adding all the appropriate hooks for the various derivative terms. It currently needs 3 x Natom x nbf^2 memory for the Fock derivatives, but that will be easy to fix in the future. Therefore, my preference is to get this PR in as-is, so that I (and, hopefully, others) can build on it by adding the GGA terms and making it more memory efficient. I'd be very happy to guide any interested people on the refactoring front, but will do it myself if needed; either way, it's something that's much easier to do when there's at least something that works in place already. The main review questions I have were already sorted out in the great feedback I've had so far: @loriab told me exactly where, and how, to hook into the driver. You (@dgasmith) have pointed out a good source of inspiration for the refactoring pass, so I think my questions are answered at this point. Once this is merged, I'll continue to work on the restricted GGA terms so that we're well poised for a brainstorming session to make the code more efficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715
https://github.com/psi4/psi4/pull/1664#issuecomment-502410715:1099,Modifiability,refactor,refactoring,1099,"Realistically I'm not going to have the bandwidth to get full (i.e. production quality) DFT hessians up and running in one shot, so I'm in favor of incremental PRs. This one does two things: 1) sets up the CPKS stuff we'll need for all restricted DFT methods and 2) paves the way for GGA Hessians, by adding all the appropriate hooks for the various derivative terms. It currently needs 3 x Natom x nbf^2 memory for the Fock derivatives, but that will be easy to fix in the future. Therefore, my preference is to get this PR in as-is, so that I (and, hopefully, others) can build on it by adding the GGA terms and making it more memory efficient. I'd be very happy to guide any interested people on the refactoring front, but will do it myself if needed; either way, it's something that's much easier to do when there's at least something that works in place already. The main review questions I have were already sorted out in the great feedback I've had so far: @loriab told me exactly where, and how, to hook into the driver. You (@dgasmith) have pointed out a good source of inspiration for the refactoring pass, so I think my questions are answered at this point. Once this is merged, I'll continue to work on the restricted GGA terms so that we're well poised for a brainstorming session to make the code more efficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715
https://github.com/psi4/psi4/pull/1664#issuecomment-502410715:668,Usability,guid,guide,668,"Realistically I'm not going to have the bandwidth to get full (i.e. production quality) DFT hessians up and running in one shot, so I'm in favor of incremental PRs. This one does two things: 1) sets up the CPKS stuff we'll need for all restricted DFT methods and 2) paves the way for GGA Hessians, by adding all the appropriate hooks for the various derivative terms. It currently needs 3 x Natom x nbf^2 memory for the Fock derivatives, but that will be easy to fix in the future. Therefore, my preference is to get this PR in as-is, so that I (and, hopefully, others) can build on it by adding the GGA terms and making it more memory efficient. I'd be very happy to guide any interested people on the refactoring front, but will do it myself if needed; either way, it's something that's much easier to do when there's at least something that works in place already. The main review questions I have were already sorted out in the great feedback I've had so far: @loriab told me exactly where, and how, to hook into the driver. You (@dgasmith) have pointed out a good source of inspiration for the refactoring pass, so I think my questions are answered at this point. Once this is merged, I'll continue to work on the restricted GGA terms so that we're well poised for a brainstorming session to make the code more efficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715
https://github.com/psi4/psi4/pull/1664#issuecomment-502410715:938,Usability,feedback,feedback,938,"Realistically I'm not going to have the bandwidth to get full (i.e. production quality) DFT hessians up and running in one shot, so I'm in favor of incremental PRs. This one does two things: 1) sets up the CPKS stuff we'll need for all restricted DFT methods and 2) paves the way for GGA Hessians, by adding all the appropriate hooks for the various derivative terms. It currently needs 3 x Natom x nbf^2 memory for the Fock derivatives, but that will be easy to fix in the future. Therefore, my preference is to get this PR in as-is, so that I (and, hopefully, others) can build on it by adding the GGA terms and making it more memory efficient. I'd be very happy to guide any interested people on the refactoring front, but will do it myself if needed; either way, it's something that's much easier to do when there's at least something that works in place already. The main review questions I have were already sorted out in the great feedback I've had so far: @loriab told me exactly where, and how, to hook into the driver. You (@dgasmith) have pointed out a good source of inspiration for the refactoring pass, so I think my questions are answered at this point. Once this is merged, I'll continue to work on the restricted GGA terms so that we're well poised for a brainstorming session to make the code more efficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715
https://github.com/psi4/psi4/pull/1665#issuecomment-503905741:44,Availability,failure,failure,44,"Looks like Travis is still feeling ill: the failure is caused by; ```; > raise ResourceError(f""MP2D version '{self.get_version()}' too old. Please update to at least '1.1'.""); E qcengine.exceptions.ResourceError: MP2D version '' too old. Please update to at least '1.1'.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1665#issuecomment-503905741
https://github.com/psi4/psi4/pull/1665#issuecomment-503905741:147,Deployability,update,update,147,"Looks like Travis is still feeling ill: the failure is caused by; ```; > raise ResourceError(f""MP2D version '{self.get_version()}' too old. Please update to at least '1.1'.""); E qcengine.exceptions.ResourceError: MP2D version '' too old. Please update to at least '1.1'.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1665#issuecomment-503905741
https://github.com/psi4/psi4/pull/1665#issuecomment-503905741:245,Deployability,update,update,245,"Looks like Travis is still feeling ill: the failure is caused by; ```; > raise ResourceError(f""MP2D version '{self.get_version()}' too old. Please update to at least '1.1'.""); E qcengine.exceptions.ResourceError: MP2D version '' too old. Please update to at least '1.1'.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1665#issuecomment-503905741
https://github.com/psi4/psi4/issues/1666#issuecomment-503136419:88,Integrability,rout,routing,88,"Would you post the input that triggered this, please? I had thought we had the disk/mem routing printing right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503136419
https://github.com/psi4/psi4/issues/1666#issuecomment-503139259:78,Energy Efficiency,energy,energy,78,It is; ```; molecule {; pubchem:91749189; }. memory 40 gb; set basis pcseg-0; energy('pbe'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503139259
https://github.com/psi4/psi4/issues/1666#issuecomment-503206352:1055,Modifiability,variab,variable,1055,"Hi Dr. Lehtola,. Would you be able to post the output file as well? I was hoping to know exactly what code you're using because there have been a lot of revisions to JK algorithm selection based on memory lately. This would help me look at the code block that selected your algorithm and possibly help with your first bug. This bug usually shows up when the user selects an ""SCF_TYPE"" and then doesn't supply an amount of memory that warrants Disk/core. The second bug isn't so much a bug as a troublesome name. MemDFJK is a JK build package that is optimized to work in the case that there is enough core memory to hold the 3-index integral tensors, and DiskDFJK is a JK build package that we found performs better in the case where these tensors have to be read from disk. They were named after the cases in which they worked best for us not for their capabilities or limitations. . That being said, each of these packages has machinery to handle both in-core and disk-based integral handling. Psi4 chooses the package based on the value of the memory_ variable, and each package should then use the algorithm (""Disk"" or ""Core"") that best fits the case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503206352
https://github.com/psi4/psi4/issues/1666#issuecomment-503206352:550,Performance,optimiz,optimized,550,"Hi Dr. Lehtola,. Would you be able to post the output file as well? I was hoping to know exactly what code you're using because there have been a lot of revisions to JK algorithm selection based on memory lately. This would help me look at the code block that selected your algorithm and possibly help with your first bug. This bug usually shows up when the user selects an ""SCF_TYPE"" and then doesn't supply an amount of memory that warrants Disk/core. The second bug isn't so much a bug as a troublesome name. MemDFJK is a JK build package that is optimized to work in the case that there is enough core memory to hold the 3-index integral tensors, and DiskDFJK is a JK build package that we found performs better in the case where these tensors have to be read from disk. They were named after the cases in which they worked best for us not for their capabilities or limitations. . That being said, each of these packages has machinery to handle both in-core and disk-based integral handling. Psi4 chooses the package based on the value of the memory_ variable, and each package should then use the algorithm (""Disk"" or ""Core"") that best fits the case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503206352
https://github.com/psi4/psi4/issues/1666#issuecomment-503206352:700,Performance,perform,performs,700,"Hi Dr. Lehtola,. Would you be able to post the output file as well? I was hoping to know exactly what code you're using because there have been a lot of revisions to JK algorithm selection based on memory lately. This would help me look at the code block that selected your algorithm and possibly help with your first bug. This bug usually shows up when the user selects an ""SCF_TYPE"" and then doesn't supply an amount of memory that warrants Disk/core. The second bug isn't so much a bug as a troublesome name. MemDFJK is a JK build package that is optimized to work in the case that there is enough core memory to hold the 3-index integral tensors, and DiskDFJK is a JK build package that we found performs better in the case where these tensors have to be read from disk. They were named after the cases in which they worked best for us not for their capabilities or limitations. . That being said, each of these packages has machinery to handle both in-core and disk-based integral handling. Psi4 chooses the package based on the value of the memory_ variable, and each package should then use the algorithm (""Disk"" or ""Core"") that best fits the case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503206352
https://github.com/psi4/psi4/issues/1666#issuecomment-503207470:147,Availability,error,error,147,"What's strange is that DFHelper thinks it has 19 gib, it only needs 5 gib, but it insists on using its disk machinery. It could just be a printing error where the code is printing out the wrong message. The calculation should give you a ""timer.dat"" file too. can you post that as well? That one has timers around the disk writes, so we can see if they're actually happening.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503207470
https://github.com/psi4/psi4/issues/1666#issuecomment-503207470:194,Integrability,message,message,194,"What's strange is that DFHelper thinks it has 19 gib, it only needs 5 gib, but it insists on using its disk machinery. It could just be a printing error where the code is printing out the wrong message. The calculation should give you a ""timer.dat"" file too. can you post that as well? That one has timers around the disk writes, so we can see if they're actually happening.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503207470
https://github.com/psi4/psi4/issues/1666#issuecomment-503214336:0,Testability,Log,Log,0,"Log file attached.; [memdfjk.txt](https://github.com/psi4/psi4/files/3302510/memdfjk.txt). The issue is simple, however, and the fix is in #1667 as I posted already above.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503214336
https://github.com/psi4/psi4/issues/1666#issuecomment-503214336:104,Usability,simpl,simple,104,"Log file attached.; [memdfjk.txt](https://github.com/psi4/psi4/files/3302510/memdfjk.txt). The issue is simple, however, and the fix is in #1667 as I posted already above.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503214336
https://github.com/psi4/psi4/issues/1666#issuecomment-503715161:70,Safety,safe,safety,70,"Ok, the memory makes sense if confusing. 37.25 GiB supplied, 0.75 SCF safety factor so 28 GiB passed to SCF. The collection took 8 GiB so 20 GiB given to JK (all extra is fed there). Still a bit confused why Disk is used though and why #1667 is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503715161
https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:707,Deployability,install,install,707,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160
https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:801,Deployability,install,install,801,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160
https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:895,Deployability,install,install,895,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160
https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:991,Deployability,install,install,991,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160
https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:1088,Deployability,install,install,1088,"a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix that ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160
https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:1185,Deployability,install,install,1185,"a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix that ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160
https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:46,Integrability,rout,routine,46,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160
https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:1846,Integrability,rout,routine,1846,"a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix that ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160
https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:579,Performance,Load,Loading,579,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160
https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:359,Testability,log,log,359,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160
https://github.com/psi4/psi4/issues/1666#issuecomment-503734011:185,Deployability,patch,patch,185,"> ah! thanks for that. it looks like it's called in `get_core_size();`, this issue is probably resolved if 229 assigns in both outcomes. Um, @schiebermc, you mean you are fine with the patch in #1667 as-is..?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503734011
https://github.com/psi4/psi4/issues/1666#issuecomment-503753281:194,Deployability,patch,patch,194,"> > ah! thanks for that. it looks like it's called in `get_core_size();`, this issue is probably resolved if 229 assigns in both outcomes.; > ; > Um, @schiebermc, you mean you are fine with the patch in #1667 as-is..?. Yes. Although others who are actively moving the code around might want to consider if there are any repercussions to calling `AO_core()` with the default `memory_`. I do not think so. . `get_core_size()` is just used when considering which object to build, MemDFJK or DiskDFJK in: https://github.com/psi4/psi4/blob/a6305a1b251d0812ecc93438bc907a91964b0ca9/psi4/src/psi4/libfock/jk.cc#L172. As you pointed out, this call had the unintended consequence of reassigning `AO_core_`. Another solution could be to make sure `memory_` gets set (so the default is not used) before:; https://github.com/psi4/psi4/blob/a6305a1b251d0812ecc93438bc907a91964b0ca9/psi4/src/psi4/libfock/MemDFJK.cc#L68. Unfortunately, this might have resulted in the wrong code (disk based MemDFJK) being used where `required_core_size_` \in [256M, memory_].",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503753281
https://github.com/psi4/psi4/issues/1669#issuecomment-503735519:189,Performance,tune,tuned,189,"well, COSX was developed for ORCA :-); Very high accuracy needs rather large grids in my experience, but that is fine. Not needed for most cases. Turbomole showed the implementation can be tuned as well. I like the method a lot, but I don't think I will have time to implement it. Maybe the existing pseudo-spectral code makes an implementation easier, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1669#issuecomment-503735519
https://github.com/psi4/psi4/issues/1669#issuecomment-503910522:103,Availability,down,down,103,> @hokru Would you have time for a Psi4NumPy implementation?. I cannot promise anything but I write it down as a potential project.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1669#issuecomment-503910522
https://github.com/psi4/psi4/pull/1671#issuecomment-504721011:1172,Deployability,update,update,1172,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=h1) Report; > Merging [#1671](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=desc) into [master](https://codecov.io/gh/psi4/psi4/commit/7fb7634f7f591a7c53bdf885228731390782df28?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1671/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1671 +/- ##; =======================================; Coverage 70.9% 70.9% ; =======================================; Files 1468 1468 ; Lines 316368 316368 ; =======================================; Hits 224327 224327 ; Misses 92041 92041; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=footer). Last update [7fb7634...b61a16b](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-504721011
https://github.com/psi4/psi4/pull/1671#issuecomment-504721011:1085,Energy Efficiency,Power,Powered,1085,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=h1) Report; > Merging [#1671](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=desc) into [master](https://codecov.io/gh/psi4/psi4/commit/7fb7634f7f591a7c53bdf885228731390782df28?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1671/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1671 +/- ##; =======================================; Coverage 70.9% 70.9% ; =======================================; Files 1468 1468 ; Lines 316368 316368 ; =======================================; Hits 224327 224327 ; Misses 92041 92041; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=footer). Last update [7fb7634...b61a16b](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-504721011
https://github.com/psi4/psi4/pull/1671#issuecomment-504721011:948,Usability,learn,learn,948,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=h1) Report; > Merging [#1671](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=desc) into [master](https://codecov.io/gh/psi4/psi4/commit/7fb7634f7f591a7c53bdf885228731390782df28?src=pr&el=desc) will **not change** coverage.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1671/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1671 +/- ##; =======================================; Coverage 70.9% 70.9% ; =======================================; Files 1468 1468 ; Lines 316368 316368 ; =======================================; Hits 224327 224327 ; Misses 92041 92041; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=footer). Last update [7fb7634...b61a16b](https://codecov.io/gh/psi4/psi4/pull/1671?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-504721011
https://github.com/psi4/psi4/pull/1671#issuecomment-505032082:146,Integrability,rout,routines,146,"> This is awesome! Less code and faster, always nice to see. Thanks! 😊 ; I'll polish the code a little ~~and make the EFP driver code use the new routines.~~ ➡️ other PR. Another question: The current implementation (both the ""new"" and ""old"" field integral code) does not seem to make use of OpenMP parallelism. Is this correct or did I mess something up?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505032082
https://github.com/psi4/psi4/pull/1671#issuecomment-505033362:113,Performance,bottleneck,bottleneck,113,"The field integrals are not OMP parallel, no (we only ever evaluated them at nuclei before, so they were never a bottleneck). The easiest way to go is to make `buffer_` into a std::vector of buffers instead (one for each thread) and then use the appropriate one for each thread. That would probably be best done on a separate PR, but whatever is easiest for you is fine with me",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505033362
https://github.com/psi4/psi4/pull/1671#issuecomment-505108492:134,Integrability,rout,routines,134,Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505108492
https://github.com/psi4/psi4/pull/1671#issuecomment-505110154:136,Integrability,rout,routines,136,"> Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?. I did not rewrite any recursion routines (just removed `ObaraSaikaTwoCenterEFPRecursion`, which became obsolete since my recent PR #1657). However, the overhead of having to call `mints.electric_field` several hundred times in a row for each site is eliminated by the new implementation, since the coordinates are directly ""injected"" into the collection of the integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154
https://github.com/psi4/psi4/pull/1671#issuecomment-505110154:214,Integrability,rout,routines,214,"> Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?. I did not rewrite any recursion routines (just removed `ObaraSaikaTwoCenterEFPRecursion`, which became obsolete since my recent PR #1657). However, the overhead of having to call `mints.electric_field` several hundred times in a row for each site is eliminated by the new implementation, since the coordinates are directly ""injected"" into the collection of the integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154
https://github.com/psi4/psi4/pull/1671#issuecomment-505110154:506,Integrability,inject,injected,506,"> Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?. I did not rewrite any recursion routines (just removed `ObaraSaikaTwoCenterEFPRecursion`, which became obsolete since my recent PR #1657). However, the overhead of having to call `mints.electric_field` several hundred times in a row for each site is eliminated by the new implementation, since the coordinates are directly ""injected"" into the collection of the integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154
https://github.com/psi4/psi4/pull/1671#issuecomment-505110154:192,Modifiability,rewrite,rewrite,192,"> Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?. I did not rewrite any recursion routines (just removed `ObaraSaikaTwoCenterEFPRecursion`, which became obsolete since my recent PR #1657). However, the overhead of having to call `mints.electric_field` several hundred times in a row for each site is eliminated by the new implementation, since the coordinates are directly ""injected"" into the collection of the integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154
https://github.com/psi4/psi4/pull/1671#issuecomment-505110154:506,Security,inject,injected,506,"> Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?. I did not rewrite any recursion routines (just removed `ObaraSaikaTwoCenterEFPRecursion`, which became obsolete since my recent PR #1657). However, the overhead of having to call `mints.electric_field` several hundred times in a row for each site is eliminated by the new implementation, since the coordinates are directly ""injected"" into the collection of the integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154
https://github.com/psi4/psi4/pull/1671#issuecomment-505191466:61,Integrability,rout,routine,61,"The `MintsHelper::one_body_ao_computer` function is a helper routine for all one-body integrals to parallelize them. All of the overlap, potential, etc run through them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505191466
https://github.com/psi4/psi4/pull/1676#issuecomment-510713898:350,Modifiability,Variab,Variable,350,This pull request **introduces 4 alerts** when merging d930c8d097a2d33c2a512ff320a23305610a57e1 into 6e6752949022c5cc61953a9cff384220ae80feda - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8eb6d86d35a3c2dd6eba5f480ad322baeff507a0). **new alerts:**. * 2 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-510713898
https://github.com/psi4/psi4/pull/1676#issuecomment-510816321:222,Availability,error,error-reference,222,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@8d6a59d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1676/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1676 +/- ##; =========================================; Coverage ? 71.08% ; =========================================; Files ? 1468 ; Lines ? 315595 ; Branches ? 0 ; =========================================; Hits ? 224354 ; Misses ? 91241 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=footer). Last update [8d6a59d...aeac164](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-510816321
https://github.com/psi4/psi4/pull/1676#issuecomment-510816321:1164,Deployability,update,update,1164,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@8d6a59d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1676/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1676 +/- ##; =========================================; Coverage ? 71.08% ; =========================================; Files ? 1468 ; Lines ? 315595 ; Branches ? 0 ; =========================================; Hits ? 224354 ; Misses ? 91241 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=footer). Last update [8d6a59d...aeac164](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-510816321
https://github.com/psi4/psi4/pull/1676#issuecomment-510816321:1077,Energy Efficiency,Power,Powered,1077,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@8d6a59d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1676/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1676 +/- ##; =========================================; Coverage ? 71.08% ; =========================================; Files ? 1468 ; Lines ? 315595 ; Branches ? 0 ; =========================================; Hits ? 224354 ; Misses ? 91241 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=footer). Last update [8d6a59d...aeac164](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-510816321
https://github.com/psi4/psi4/pull/1676#issuecomment-510816321:170,Usability,learn,learn,170,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@8d6a59d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1676/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1676 +/- ##; =========================================; Coverage ? 71.08% ; =========================================; Files ? 1468 ; Lines ? 315595 ; Branches ? 0 ; =========================================; Hits ? 224354 ; Misses ? 91241 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=footer). Last update [8d6a59d...aeac164](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-510816321
https://github.com/psi4/psi4/pull/1676#issuecomment-510816321:940,Usability,learn,learn,940,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@8d6a59d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/psi4/psi4/pull/1676/graphs/tree.svg?width=650&token=w7A43dTksA&height=150&src=pr)](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1676 +/- ##; =========================================; Coverage ? 71.08% ; =========================================; Files ? 1468 ; Lines ? 315595 ; Branches ? 0 ; =========================================; Hits ? 224354 ; Misses ? 91241 ; Partials ? 0; ```. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=footer). Last update [8d6a59d...aeac164](https://codecov.io/gh/psi4/psi4/pull/1676?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-510816321
https://github.com/psi4/psi4/pull/1676#issuecomment-511528510:102,Testability,log,log,102,"@taylor-a-barnes I don't see any special issues in our Azure DevOps internals. Can you post the build log here?. @loriab @raimis Taylor is trying to reproduce Psi builds on his own Azure DevOps dashboard to debug the above issue, but even the simple Azure steps like check python version fail. Any ideas what this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511528510
https://github.com/psi4/psi4/pull/1676#issuecomment-511528510:243,Usability,simpl,simple,243,"@taylor-a-barnes I don't see any special issues in our Azure DevOps internals. Can you post the build log here?. @loriab @raimis Taylor is trying to reproduce Psi builds on his own Azure DevOps dashboard to debug the above issue, but even the simple Azure steps like check python version fail. Any ideas what this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511528510
https://github.com/psi4/psi4/pull/1676#issuecomment-511751304:49,Deployability,pipeline,pipeline,49,"@taylor-a-barnes I suspect, you are missing some pipeline variables. Check if your pipeline is configured like this:; ![azure_config](https://user-images.githubusercontent.com/2469715/61285389-230b9880-a7c1-11e9-9035-669f83ec66ad.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304
https://github.com/psi4/psi4/pull/1676#issuecomment-511751304:83,Deployability,pipeline,pipeline,83,"@taylor-a-barnes I suspect, you are missing some pipeline variables. Check if your pipeline is configured like this:; ![azure_config](https://user-images.githubusercontent.com/2469715/61285389-230b9880-a7c1-11e9-9035-669f83ec66ad.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304
https://github.com/psi4/psi4/pull/1676#issuecomment-511751304:58,Modifiability,variab,variables,58,"@taylor-a-barnes I suspect, you are missing some pipeline variables. Check if your pipeline is configured like this:; ![azure_config](https://user-images.githubusercontent.com/2469715/61285389-230b9880-a7c1-11e9-9035-669f83ec66ad.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304
https://github.com/psi4/psi4/pull/1676#issuecomment-511751304:95,Modifiability,config,configured,95,"@taylor-a-barnes I suspect, you are missing some pipeline variables. Check if your pipeline is configured like this:; ![azure_config](https://user-images.githubusercontent.com/2469715/61285389-230b9880-a7c1-11e9-9035-669f83ec66ad.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304
https://github.com/psi4/psi4/pull/1676#issuecomment-512852479:170,Availability,failure,failures,170,"@raimis Thanks very much - this is exactly the information I needed, and I've been able to reproduce the Azure DevOps results in my own tests. @dgasmith The Azure DevOps failures were associated with how the MDI Library compiles and installs DLL libraries. I've fixed the problems with the library, and all the tests are finishing successfully now. The relevant commits are [here](https://github.com/MolSSI/MDI_Library/commit/25cdcb30abfb4e13ced726249f619ef8acc19582) and [here](https://github.com/MolSSI/MDI_Library/commit/2ea5621ff3ee2020276c588a9962d756cc2cfb18). Thanks for your comments; I've incorporated them in the latest commits. @loriab Thanks very much for these comments. I'll try to address them soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479
https://github.com/psi4/psi4/pull/1676#issuecomment-512852479:233,Deployability,install,installs,233,"@raimis Thanks very much - this is exactly the information I needed, and I've been able to reproduce the Azure DevOps results in my own tests. @dgasmith The Azure DevOps failures were associated with how the MDI Library compiles and installs DLL libraries. I've fixed the problems with the library, and all the tests are finishing successfully now. The relevant commits are [here](https://github.com/MolSSI/MDI_Library/commit/25cdcb30abfb4e13ced726249f619ef8acc19582) and [here](https://github.com/MolSSI/MDI_Library/commit/2ea5621ff3ee2020276c588a9962d756cc2cfb18). Thanks for your comments; I've incorporated them in the latest commits. @loriab Thanks very much for these comments. I'll try to address them soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479
https://github.com/psi4/psi4/pull/1676#issuecomment-512852479:136,Testability,test,tests,136,"@raimis Thanks very much - this is exactly the information I needed, and I've been able to reproduce the Azure DevOps results in my own tests. @dgasmith The Azure DevOps failures were associated with how the MDI Library compiles and installs DLL libraries. I've fixed the problems with the library, and all the tests are finishing successfully now. The relevant commits are [here](https://github.com/MolSSI/MDI_Library/commit/25cdcb30abfb4e13ced726249f619ef8acc19582) and [here](https://github.com/MolSSI/MDI_Library/commit/2ea5621ff3ee2020276c588a9962d756cc2cfb18). Thanks for your comments; I've incorporated them in the latest commits. @loriab Thanks very much for these comments. I'll try to address them soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479
https://github.com/psi4/psi4/pull/1676#issuecomment-512852479:311,Testability,test,tests,311,"@raimis Thanks very much - this is exactly the information I needed, and I've been able to reproduce the Azure DevOps results in my own tests. @dgasmith The Azure DevOps failures were associated with how the MDI Library compiles and installs DLL libraries. I've fixed the problems with the library, and all the tests are finishing successfully now. The relevant commits are [here](https://github.com/MolSSI/MDI_Library/commit/25cdcb30abfb4e13ced726249f619ef8acc19582) and [here](https://github.com/MolSSI/MDI_Library/commit/2ea5621ff3ee2020276c588a9962d756cc2cfb18). Thanks for your comments; I've incorporated them in the latest commits. @loriab Thanks very much for these comments. I'll try to address them soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479
https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:929,Availability,error,error,929,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015
https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:1025,Availability,Error,Error,1025,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015
https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:1092,Availability,Error,Error,1092,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015
https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:1160,Availability,Error,Error,1160,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015
https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:1191,Availability,Error,Error,1191,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015
https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:1236,Deployability,install,installation,1236,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015
https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:1373,Energy Efficiency,energy,energy,1373,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015
https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:967,Modifiability,inherit,inherited,967,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015
https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:52,Usability,simpl,simple,52,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015
https://github.com/psi4/psi4/pull/1676#issuecomment-592038986:25,Deployability,update,update,25,@taylor-a-barnes Can you update this PR for the MDI 1.0 release? We are looking to get Psi4 1.4 out soon and love to get this in!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-592038986
https://github.com/psi4/psi4/pull/1676#issuecomment-592038986:56,Deployability,release,release,56,@taylor-a-barnes Can you update this PR for the MDI 1.0 release? We are looking to get Psi4 1.4 out soon and love to get this in!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-592038986
https://github.com/psi4/psi4/pull/1676#issuecomment-593419816:12,Deployability,update,updated,12,@dgasmith I updated to support MDI 1.0 in commit 736ac2c. The build failed due to reasons that I believe are independent of this PR. I'll rebase and see if that fixes things.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-593419816
https://github.com/psi4/psi4/pull/1676#issuecomment-642818175:38,Energy Efficiency,energy,energy,38,"@loriab @PeterKraus I agree that the `energy('hf/cc-pvdz', mdi=True)` input format is the way to go. The MDI Standard doesn't include commands for sending information about method type or related parameters, since there are so many possible ways of representing this information in various codes (i.e., Gaussian codes, plane wave codes, molecular dynamics codes, etc.). Calling energy with an `mdi` argument seems like the most sensible way for the user to set this information in Psi4. I've made the change in 403e742.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-642818175
https://github.com/psi4/psi4/pull/1676#issuecomment-642818175:378,Energy Efficiency,energy,energy,378,"@loriab @PeterKraus I agree that the `energy('hf/cc-pvdz', mdi=True)` input format is the way to go. The MDI Standard doesn't include commands for sending information about method type or related parameters, since there are so many possible ways of representing this information in various codes (i.e., Gaussian codes, plane wave codes, molecular dynamics codes, etc.). Calling energy with an `mdi` argument seems like the most sensible way for the user to set this information in Psi4. I've made the change in 403e742.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-642818175
https://github.com/psi4/psi4/issues/1677#issuecomment-510926629:182,Deployability,patch,patch,182,"Hi Konrad,; Thanks for bringing this up. Do you know the magnitude of the change that this will introduce? We will likely need to make the fix and then highlight this heavily in our patch notes. @ehohenstein2 any thoughts here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1677#issuecomment-510926629
https://github.com/psi4/psi4/issues/1677#issuecomment-510938024:55,Testability,benchmark,benchmark,55,"Looks like 0-60 cal/mol, thanks for already doing this benchmark!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1677#issuecomment-510938024
https://github.com/psi4/psi4/issues/1679#issuecomment-511841966:135,Modifiability,variab,variables,135,"To say anything I need to debug it. However, I do not have that much memory to run the input. I guess the situation may be related int variables, which should be defined as long int for such large molecules. @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1679#issuecomment-511841966
https://github.com/psi4/psi4/issues/1679#issuecomment-511918494:7,Usability,simpl,simply,7,Can we simply replace all ints with a `long long int`? Or should it be more surgical and only touch the compound index files and consciously coerce them to `size_t`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1679#issuecomment-511918494
https://github.com/psi4/psi4/issues/1679#issuecomment-511959405:58,Deployability,update,update,58,"OK, this sounds like a possible plan. I'm going to try to update dfocc.h and replace orbital related ints with long long ints... fingers crossed it'll work :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1679#issuecomment-511959405
https://github.com/psi4/psi4/issues/1679#issuecomment-511962199:172,Testability,test,tests,172,"Many of the modules got a size_t pass (eff. long int) during lgtm season. But no one dares touch Bozkaya modules until that PR (in my name) goes in, and that needs several tests added to ensure we’re not breaking stuff as we go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1679#issuecomment-511962199
https://github.com/psi4/psi4/issues/1681#issuecomment-515176656:120,Energy Efficiency,energy,energy,120,"When I did a calculation on a doublet, I got the following outputs during the convergence of CCSD. ```; MP2 correlation energy -0.3532279300684508; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; 0 -0.353227930068451 0.000e+00 0.000000 0.000000 0.000000 0.000000; 1 -0.372702747934713 9.484e-02 0.016815 0.000000 0.000000 0.000000; 2 -0.388397428813444 4.357e-02 0.025198 0.000000 0.000000 0.000000; 3 -0.394491992316835 2.808e-02 0.035707 0.000000 0.000000 0.000000; 4 -0.395063121334025 1.162e-02 0.041511 0.000000 0.000000 0.000000; 5 -0.395062761630612 3.231e-03 0.042317 0.000000 0.000000 0.000000; 6 -0.395097874139116 1.330e-03 0.042563 0.000000 0.000000 0.000000; 7 -0.395105439920260 5.176e-04 0.042615 0.000000 0.000000 0.000000; 8 -0.395105335262559 2.249e-04 0.042627 0.000000 0.000000 0.000000; 9 -0.395105487878768 1.167e-04 0.042635 0.000000 0.000000 0.000000; 10 -0.395106716028309 6.184e-05 0.042637 0.000000 0.000000 0.000000; 11 -0.395106616553506 2.856e-05 0.042640 0.000000 0.000000 0.000000; 12 -0.395107024185774 1.291e-05 0.042640 0.000000 0.000000 0.000000; 13 -0.395107014887657 5.342e-06 0.042641 0.000000 0.000000 0.000000; 14 -0.395106962475645 1.871e-06 0.042641 0.000000 0.000000 0.000000; 15 -0.395106957186010 7.159e-07 0.042641 0.000000 0.000000 0.000000; 16 -0.395106960040855 3.172e-07 0.042641 0.000000 0.000000 0.000000; 17 -0.395106969782621 1.352e-07 0.042641 0.000000 0.000000 0.000000; 18 -0.395106971659234 5.567e-08 0.042641 0.000000 0.000000 0.000000. Iterations converged.; ```. Hope this output could help to clarify the question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1681#issuecomment-515176656
https://github.com/psi4/psi4/issues/1681#issuecomment-515176656:217,Energy Efficiency,Energy,Energy,217,"When I did a calculation on a doublet, I got the following outputs during the convergence of CCSD. ```; MP2 correlation energy -0.3532279300684508; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; 0 -0.353227930068451 0.000e+00 0.000000 0.000000 0.000000 0.000000; 1 -0.372702747934713 9.484e-02 0.016815 0.000000 0.000000 0.000000; 2 -0.388397428813444 4.357e-02 0.025198 0.000000 0.000000 0.000000; 3 -0.394491992316835 2.808e-02 0.035707 0.000000 0.000000 0.000000; 4 -0.395063121334025 1.162e-02 0.041511 0.000000 0.000000 0.000000; 5 -0.395062761630612 3.231e-03 0.042317 0.000000 0.000000 0.000000; 6 -0.395097874139116 1.330e-03 0.042563 0.000000 0.000000 0.000000; 7 -0.395105439920260 5.176e-04 0.042615 0.000000 0.000000 0.000000; 8 -0.395105335262559 2.249e-04 0.042627 0.000000 0.000000 0.000000; 9 -0.395105487878768 1.167e-04 0.042635 0.000000 0.000000 0.000000; 10 -0.395106716028309 6.184e-05 0.042637 0.000000 0.000000 0.000000; 11 -0.395106616553506 2.856e-05 0.042640 0.000000 0.000000 0.000000; 12 -0.395107024185774 1.291e-05 0.042640 0.000000 0.000000 0.000000; 13 -0.395107014887657 5.342e-06 0.042641 0.000000 0.000000 0.000000; 14 -0.395106962475645 1.871e-06 0.042641 0.000000 0.000000 0.000000; 15 -0.395106957186010 7.159e-07 0.042641 0.000000 0.000000 0.000000; 16 -0.395106960040855 3.172e-07 0.042641 0.000000 0.000000 0.000000; 17 -0.395106969782621 1.352e-07 0.042641 0.000000 0.000000 0.000000; 18 -0.395106971659234 5.567e-08 0.042641 0.000000 0.000000 0.000000. Iterations converged.; ```. Hope this output could help to clarify the question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1681#issuecomment-515176656
https://github.com/psi4/psi4/issues/1681#issuecomment-516138878:428,Energy Efficiency,energy,energy,428,Have you been using UHF for open-shell? Looks like the diagnostics are defined for RHF and ROHF ([Lee article](https://www.sciencedirect.com/science/article/pii/S0009261403004354) agrees). I get the following print patterns by varying reference. ```. molecule {; #-1 1; 0 2; O 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set {; scf_type pk; e_convergence 8; r_convergence 6; basis cc-pvdz; #reference rhf; #reference rohf; reference uhf; }. energy('ccsd'). print_variables(). # <<< RHF -1 1; #; # Solving CC Amplitude Equations; # ------------------------------; # Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; # ---- --------------------- --------- ---------- ---------- ---------- --------; # 0 -0.197723974784437 0.000e+00 0.000000 0.000000 0.000000 0.116770; # 1 -0.200886440649593 2.613e-02 0.003711 0.010524 0.010524 0.124980; # 2 -0.204664297940221 9.774e-03 0.004249 0.012062 0.012062 0.132065; # 3 -0.205054447874144 2.517e-03 0.004541 0.012898 0.012898 0.134019; # 4 -0.205079571860144 5.102e-04 0.004543 0.012929 0.012929 0.134351; # 5 -0.205083329294564 8.900e-05 0.004542 0.012931 0.012931 0.134394; # 6 -0.205082593077830 2.128e-05 0.004542 0.012931 0.012931 0.134399; # 7 -0.205082451507967 3.672e-06 0.004542 0.012931 0.012931 0.134400; # 8 -0.205082414774114 9.732e-07 0.004542 0.012932 0.012932 0.134400; # 9 -0.205082388497871 3.442e-07 0.004542 0.012932 0.012932 0.134400; # 10 -0.205082395296112 1.014e-07 0.004542 0.012932 0.012932 0.134400; # 11 -0.205082394755246 2.995e-08 0.004542 0.012932 0.012932 0.134400. # <<< ROHF -1 1; #; # Solving CC Amplitude Equations; # ------------------------------; # Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; # ---- --------------------- --------- ---------- ---------- ---------- --------; # 0 -0.197723974731951 0.000e+00 0.000000 0.000000 0.000000 0.000000; # 1 -0.200886440618237 3.243e-02 0.003711 0.010524 0.010524 0.000000; # 2 -0.204564275493213 1.028e-02 0.004234 0.012020 0.012020 0.000000; # 3 -0.205087135995954 3.025e-03 0.004542 0.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1681#issuecomment-516138878
https://github.com/psi4/psi4/issues/1681#issuecomment-516138878:557,Energy Efficiency,Energy,Energy,557,Have you been using UHF for open-shell? Looks like the diagnostics are defined for RHF and ROHF ([Lee article](https://www.sciencedirect.com/science/article/pii/S0009261403004354) agrees). I get the following print patterns by varying reference. ```. molecule {; #-1 1; 0 2; O 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set {; scf_type pk; e_convergence 8; r_convergence 6; basis cc-pvdz; #reference rhf; #reference rohf; reference uhf; }. energy('ccsd'). print_variables(). # <<< RHF -1 1; #; # Solving CC Amplitude Equations; # ------------------------------; # Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; # ---- --------------------- --------- ---------- ---------- ---------- --------; # 0 -0.197723974784437 0.000e+00 0.000000 0.000000 0.000000 0.116770; # 1 -0.200886440649593 2.613e-02 0.003711 0.010524 0.010524 0.124980; # 2 -0.204664297940221 9.774e-03 0.004249 0.012062 0.012062 0.132065; # 3 -0.205054447874144 2.517e-03 0.004541 0.012898 0.012898 0.134019; # 4 -0.205079571860144 5.102e-04 0.004543 0.012929 0.012929 0.134351; # 5 -0.205083329294564 8.900e-05 0.004542 0.012931 0.012931 0.134394; # 6 -0.205082593077830 2.128e-05 0.004542 0.012931 0.012931 0.134399; # 7 -0.205082451507967 3.672e-06 0.004542 0.012931 0.012931 0.134400; # 8 -0.205082414774114 9.732e-07 0.004542 0.012932 0.012932 0.134400; # 9 -0.205082388497871 3.442e-07 0.004542 0.012932 0.012932 0.134400; # 10 -0.205082395296112 1.014e-07 0.004542 0.012932 0.012932 0.134400; # 11 -0.205082394755246 2.995e-08 0.004542 0.012932 0.012932 0.134400. # <<< ROHF -1 1; #; # Solving CC Amplitude Equations; # ------------------------------; # Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; # ---- --------------------- --------- ---------- ---------- ---------- --------; # 0 -0.197723974731951 0.000e+00 0.000000 0.000000 0.000000 0.000000; # 1 -0.200886440618237 3.243e-02 0.003711 0.010524 0.010524 0.000000; # 2 -0.204564275493213 1.028e-02 0.004234 0.012020 0.012020 0.000000; # 3 -0.205087135995954 3.025e-03 0.004542 0.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1681#issuecomment-516138878
https://github.com/psi4/psi4/issues/1681#issuecomment-516138878:1620,Energy Efficiency,Energy,Energy,1620,- ---------- ---------- ---------- --------; # 0 -0.197723974784437 0.000e+00 0.000000 0.000000 0.000000 0.116770; # 1 -0.200886440649593 2.613e-02 0.003711 0.010524 0.010524 0.124980; # 2 -0.204664297940221 9.774e-03 0.004249 0.012062 0.012062 0.132065; # 3 -0.205054447874144 2.517e-03 0.004541 0.012898 0.012898 0.134019; # 4 -0.205079571860144 5.102e-04 0.004543 0.012929 0.012929 0.134351; # 5 -0.205083329294564 8.900e-05 0.004542 0.012931 0.012931 0.134394; # 6 -0.205082593077830 2.128e-05 0.004542 0.012931 0.012931 0.134399; # 7 -0.205082451507967 3.672e-06 0.004542 0.012931 0.012931 0.134400; # 8 -0.205082414774114 9.732e-07 0.004542 0.012932 0.012932 0.134400; # 9 -0.205082388497871 3.442e-07 0.004542 0.012932 0.012932 0.134400; # 10 -0.205082395296112 1.014e-07 0.004542 0.012932 0.012932 0.134400; # 11 -0.205082394755246 2.995e-08 0.004542 0.012932 0.012932 0.134400. # <<< ROHF -1 1; #; # Solving CC Amplitude Equations; # ------------------------------; # Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; # ---- --------------------- --------- ---------- ---------- ---------- --------; # 0 -0.197723974731951 0.000e+00 0.000000 0.000000 0.000000 0.000000; # 1 -0.200886440618237 3.243e-02 0.003711 0.010524 0.010524 0.000000; # 2 -0.204564275493213 1.028e-02 0.004234 0.012020 0.012020 0.000000; # 3 -0.205087135995954 3.025e-03 0.004542 0.012902 0.012902 0.000000; # 4 -0.205085978714777 5.217e-04 0.004543 0.012930 0.012930 0.000000; # 5 -0.205082549603111 1.001e-04 0.004542 0.012930 0.012930 0.000000; # 6 -0.205082454897800 2.411e-05 0.004542 0.012931 0.012931 0.000000; # 7 -0.205082465175532 4.603e-06 0.004542 0.012931 0.012931 0.000000; # 8 -0.205082405504007 1.288e-06 0.004542 0.012931 0.012931 0.000000; # 9 -0.205082391075850 4.771e-07 0.004542 0.012932 0.012932 0.000000; # 10 -0.205082394886181 1.354e-07 0.004542 0.012932 0.012932 0.000000; # 11 -0.205082394594478 3.436e-08 0.004542 0.012932 0.012932 0.000000. # <<< ROHF 0 2; #; # Solving CC Amplitude Equations,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1681#issuecomment-516138878
https://github.com/psi4/psi4/issues/1681#issuecomment-516138878:2682,Energy Efficiency,Energy,Energy,2682,- ---------- ---------- ---------- --------; # 0 -0.197723974731951 0.000e+00 0.000000 0.000000 0.000000 0.000000; # 1 -0.200886440618237 3.243e-02 0.003711 0.010524 0.010524 0.000000; # 2 -0.204564275493213 1.028e-02 0.004234 0.012020 0.012020 0.000000; # 3 -0.205087135995954 3.025e-03 0.004542 0.012902 0.012902 0.000000; # 4 -0.205085978714777 5.217e-04 0.004543 0.012930 0.012930 0.000000; # 5 -0.205082549603111 1.001e-04 0.004542 0.012930 0.012930 0.000000; # 6 -0.205082454897800 2.411e-05 0.004542 0.012931 0.012931 0.000000; # 7 -0.205082465175532 4.603e-06 0.004542 0.012931 0.012931 0.000000; # 8 -0.205082405504007 1.288e-06 0.004542 0.012931 0.012931 0.000000; # 9 -0.205082391075850 4.771e-07 0.004542 0.012932 0.012932 0.000000; # 10 -0.205082394886181 1.354e-07 0.004542 0.012932 0.012932 0.000000; # 11 -0.205082394594478 3.436e-08 0.004542 0.012932 0.012932 0.000000. # <<< ROHF 0 2; #; # Solving CC Amplitude Equations; # ------------------------------; # Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; # ---- --------------------- --------- ---------- ---------- ---------- --------; # 0 -0.156206806450125 0.000e+00 0.000148 0.000440 0.000440 0.000000; # 1 -0.166781714187105 2.912e-02 0.003397 0.008427 0.008427 0.000000; # 2 -0.170234135862397 1.036e-02 0.004356 0.011185 0.011185 0.000000; # 3 -0.170533030368765 3.269e-03 0.004712 0.012280 0.012280 0.000000; # 4 -0.170520797742350 1.364e-03 0.004743 0.012467 0.012467 0.000000; # 5 -0.170530231230523 5.667e-04 0.004748 0.012499 0.012499 0.000000; # 6 -0.170534925559369 1.852e-04 0.004747 0.012487 0.012487 0.000000; # 7 -0.170534620418104 6.567e-05 0.004746 0.012484 0.012484 0.000000; # 8 -0.170534869316551 1.694e-05 0.004747 0.012485 0.012485 0.000000; # 9 -0.170534904690435 3.137e-06 0.004747 0.012486 0.012486 0.000000; # 10 -0.170534914990853 8.802e-07 0.004747 0.012486 0.012486 0.000000; # 11 -0.170534902081469 2.450e-07 0.004747 0.012486 0.012486 0.000000; # 12 -0.170534896808386 6.485e-08 0.004747 0.012486,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1681#issuecomment-516138878
https://github.com/psi4/psi4/issues/1681#issuecomment-516138878:3885,Energy Efficiency,Energy,Energy,3885,40 0.000440 0.000000; # 1 -0.166781714187105 2.912e-02 0.003397 0.008427 0.008427 0.000000; # 2 -0.170234135862397 1.036e-02 0.004356 0.011185 0.011185 0.000000; # 3 -0.170533030368765 3.269e-03 0.004712 0.012280 0.012280 0.000000; # 4 -0.170520797742350 1.364e-03 0.004743 0.012467 0.012467 0.000000; # 5 -0.170530231230523 5.667e-04 0.004748 0.012499 0.012499 0.000000; # 6 -0.170534925559369 1.852e-04 0.004747 0.012487 0.012487 0.000000; # 7 -0.170534620418104 6.567e-05 0.004746 0.012484 0.012484 0.000000; # 8 -0.170534869316551 1.694e-05 0.004747 0.012485 0.012485 0.000000; # 9 -0.170534904690435 3.137e-06 0.004747 0.012486 0.012486 0.000000; # 10 -0.170534914990853 8.802e-07 0.004747 0.012486 0.012486 0.000000; # 11 -0.170534902081469 2.450e-07 0.004747 0.012486 0.012486 0.000000; # 12 -0.170534896808386 6.485e-08 0.004747 0.012486 0.012486 0.000000; # 13 -0.170534896376153 1.539e-08 0.004747 0.012486 0.012486 0.000000. # <<< UHF 0 2; #; # Solving CC Amplitude Equations; # ------------------------------; # Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; # ---- --------------------- --------- ---------- ---------- ---------- --------; # 0 -0.151977581658240 0.000e+00 0.000000 0.000000 0.000000 0.000000; # 1 -0.162681999947581 2.938e-02 0.005213 0.000000 0.000000 0.000000; # 2 -0.166308992560651 1.058e-02 0.006944 0.000000 0.000000 0.000000; # 3 -0.166660093741321 3.466e-03 0.007594 0.000000 0.000000 0.000000; # 4 -0.166661277725523 1.547e-03 0.007724 0.000000 0.000000 0.000000; # 5 -0.166677647024115 6.654e-04 0.007758 0.000000 0.000000 0.000000; # 6 -0.166683473651993 2.053e-04 0.007754 0.000000 0.000000 0.000000; # 7 -0.166682599714116 5.860e-05 0.007753 0.000000 0.000000 0.000000; # 8 -0.166682521547769 1.601e-05 0.007754 0.000000 0.000000 0.000000; # 9 -0.166682485121206 3.774e-06 0.007754 0.000000 0.000000 0.000000; # 10 -0.166682476022498 1.246e-06 0.007754 0.000000 0.000000 0.000000; # 11 -0.166682454455366 2.896e-07 0.007754 0.000000 0.000000 0.000000; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1681#issuecomment-516138878
https://github.com/psi4/psi4/issues/1682#issuecomment-515269174:90,Availability,toler,tolerance,90,"Not completely sure this is fixable besides using a different basis or tuning the overlap tolerance in the SCF. You can suggest a user changing the `s_tolerance`, but beyond that we cannot really reproduce or do much about it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515269174
https://github.com/psi4/psi4/issues/1682#issuecomment-515464684:73,Availability,error,error,73,"Right, without more information, the most I'm expecting is to update the error message with something that makes clear whether this is something the user can fix by changing settings as well as what the problem is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684
https://github.com/psi4/psi4/issues/1682#issuecomment-515464684:62,Deployability,update,update,62,"Right, without more information, the most I'm expecting is to update the error message with something that makes clear whether this is something the user can fix by changing settings as well as what the problem is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684
https://github.com/psi4/psi4/issues/1682#issuecomment-515464684:79,Integrability,message,message,79,"Right, without more information, the most I'm expecting is to update the error message with something that makes clear whether this is something the user can fix by changing settings as well as what the problem is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684
https://github.com/psi4/psi4/issues/1682#issuecomment-515464684:113,Usability,clear,clear,113,"Right, without more information, the most I'm expecting is to update the error message with something that makes clear whether this is something the user can fix by changing settings as well as what the problem is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684
https://github.com/psi4/psi4/issues/1682#issuecomment-515481737:139,Availability,error,error,139,"Hello everyone,; So this is for a DFT-SAPT computation I'm assuming? I'm less familiar with this code, but in Hartree-Fock based SAPT this error indicates that the orbital hessian has a negative eigenvalue, i.e. the SCF did not converge on a minimum. This would usually be solved by doing a stability analysis on the SCF before passing the correct solution to SAPT. The [advanced example](http://www.psicode.org/psi4manual/master/sapt.html#advanced-example) in the manual shows how to do that, and has the stability analysis included for monomer A in the Hartree-Fock case. Not sure any of that works for DFT. I believe the array s in the incriminated lines contains the product of the orbital hessian with the amplitudes. I haven't touched the code in some time so I may be wrong but that is my current hypothesis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515481737
https://github.com/psi4/psi4/issues/1682#issuecomment-532191893:85,Availability,error,error-a-matrix-is-not-spd,85,"We now have [a reproducible example of the problem](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471/4?u=jmisiewicz)! As @jgonthier suspected, this indicates a negative eigenvalue in the orbital hessian. The following input will run into the problem. Stability analysis indicates a tiny negative eigenvalue in the MO hessian. When you follow the instability, SAPT completes with no problems. The error message should be rewritten to suggest the user adds stability following. If we want to collect pathological test cases for future SCF work, we should also recommend they post their failing inputs on the forums. ```; molecule {; 0 1; C -1.39179 -0.20044 0.00015; Cl -0.43716 1.29883 0.00009; F -1.08662 -0.91763 1.08111; F -1.08730 -0.91729 -1.08123; H -2.44780 0.05805 0.00053; --; 0 2; Cl 2.22327 -0.26007 -0.00012; }. set {; basis 6-311++G**; reference uhf; soscf true; soscf_max_iter 30; }. energy('sapt0'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893
https://github.com/psi4/psi4/issues/1682#issuecomment-532191893:411,Availability,error,error,411,"We now have [a reproducible example of the problem](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471/4?u=jmisiewicz)! As @jgonthier suspected, this indicates a negative eigenvalue in the orbital hessian. The following input will run into the problem. Stability analysis indicates a tiny negative eigenvalue in the MO hessian. When you follow the instability, SAPT completes with no problems. The error message should be rewritten to suggest the user adds stability following. If we want to collect pathological test cases for future SCF work, we should also recommend they post their failing inputs on the forums. ```; molecule {; 0 1; C -1.39179 -0.20044 0.00015; Cl -0.43716 1.29883 0.00009; F -1.08662 -0.91763 1.08111; F -1.08730 -0.91729 -1.08123; H -2.44780 0.05805 0.00053; --; 0 2; Cl 2.22327 -0.26007 -0.00012; }. set {; basis 6-311++G**; reference uhf; soscf true; soscf_max_iter 30; }. energy('sapt0'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893
https://github.com/psi4/psi4/issues/1682#issuecomment-532191893:912,Energy Efficiency,energy,energy,912,"We now have [a reproducible example of the problem](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471/4?u=jmisiewicz)! As @jgonthier suspected, this indicates a negative eigenvalue in the orbital hessian. The following input will run into the problem. Stability analysis indicates a tiny negative eigenvalue in the MO hessian. When you follow the instability, SAPT completes with no problems. The error message should be rewritten to suggest the user adds stability following. If we want to collect pathological test cases for future SCF work, we should also recommend they post their failing inputs on the forums. ```; molecule {; 0 1; C -1.39179 -0.20044 0.00015; Cl -0.43716 1.29883 0.00009; F -1.08662 -0.91763 1.08111; F -1.08730 -0.91729 -1.08123; H -2.44780 0.05805 0.00053; --; 0 2; Cl 2.22327 -0.26007 -0.00012; }. set {; basis 6-311++G**; reference uhf; soscf true; soscf_max_iter 30; }. energy('sapt0'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893
https://github.com/psi4/psi4/issues/1682#issuecomment-532191893:417,Integrability,message,message,417,"We now have [a reproducible example of the problem](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471/4?u=jmisiewicz)! As @jgonthier suspected, this indicates a negative eigenvalue in the orbital hessian. The following input will run into the problem. Stability analysis indicates a tiny negative eigenvalue in the MO hessian. When you follow the instability, SAPT completes with no problems. The error message should be rewritten to suggest the user adds stability following. If we want to collect pathological test cases for future SCF work, we should also recommend they post their failing inputs on the forums. ```; molecule {; 0 1; C -1.39179 -0.20044 0.00015; Cl -0.43716 1.29883 0.00009; F -1.08662 -0.91763 1.08111; F -1.08730 -0.91729 -1.08123; H -2.44780 0.05805 0.00053; --; 0 2; Cl 2.22327 -0.26007 -0.00012; }. set {; basis 6-311++G**; reference uhf; soscf true; soscf_max_iter 30; }. energy('sapt0'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893
https://github.com/psi4/psi4/issues/1682#issuecomment-532191893:526,Testability,test,test,526,"We now have [a reproducible example of the problem](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471/4?u=jmisiewicz)! As @jgonthier suspected, this indicates a negative eigenvalue in the orbital hessian. The following input will run into the problem. Stability analysis indicates a tiny negative eigenvalue in the MO hessian. When you follow the instability, SAPT completes with no problems. The error message should be rewritten to suggest the user adds stability following. If we want to collect pathological test cases for future SCF work, we should also recommend they post their failing inputs on the forums. ```; molecule {; 0 1; C -1.39179 -0.20044 0.00015; Cl -0.43716 1.29883 0.00009; F -1.08662 -0.91763 1.08111; F -1.08730 -0.91729 -1.08123; H -2.44780 0.05805 0.00053; --; 0 2; Cl 2.22327 -0.26007 -0.00012; }. set {; basis 6-311++G**; reference uhf; soscf true; soscf_max_iter 30; }. energy('sapt0'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893
https://github.com/psi4/psi4/issues/1684#issuecomment-515629304:276,Energy Efficiency,energy,energy,276,"The test is very like [sapt-dft1](https://github.com/psi4/psi4/blob/master/tests/sapt-dft1/input.dat) except He instead of Ar. I computed the grac-s of all three in molpro, and it still fails on iterations, though far better behaved. ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between He and Ar atoms. molecule dimer {; He; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.2316; sapt_dft_grac_shift_b 0.14208 #0.138264; }. # Molpro Ne,Ar: aug-cc-pvqz He: def2-qzvpp; # He 0.23160613844599998; # Ne 0.2069797945509999; # Ar 0.14207557000000004. energy('sapt(dft)', molecule=dimer); ```. ```; @DF-RKS iter 95: -0.14789452072560 -7.20653e-11 2.50590e-02 DIIS; @DF-RKS iter 96: -0.14789452081143 -8.58302e-11 2.50590e-02 DIIS; @DF-RKS iter 97: -0.14789452057679 2.34638e-10 2.50590e-02 DIIS; @DF-RKS iter 98: -0.14789452082882 -2.52026e-10 2.50590e-02 DIIS; @DF-RKS iter 99: -0.14789452079974 2.90820e-11 2.50590e-02 DIIS; @DF-RKS iter 100: -0.14789452100104 -2.01303e-10 2.50590e-02 DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1684#issuecomment-515629304
https://github.com/psi4/psi4/issues/1684#issuecomment-515629304:593,Energy Efficiency,energy,energy,593,"The test is very like [sapt-dft1](https://github.com/psi4/psi4/blob/master/tests/sapt-dft1/input.dat) except He instead of Ar. I computed the grac-s of all three in molpro, and it still fails on iterations, though far better behaved. ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between He and Ar atoms. molecule dimer {; He; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.2316; sapt_dft_grac_shift_b 0.14208 #0.138264; }. # Molpro Ne,Ar: aug-cc-pvqz He: def2-qzvpp; # He 0.23160613844599998; # Ne 0.2069797945509999; # Ar 0.14207557000000004. energy('sapt(dft)', molecule=dimer); ```. ```; @DF-RKS iter 95: -0.14789452072560 -7.20653e-11 2.50590e-02 DIIS; @DF-RKS iter 96: -0.14789452081143 -8.58302e-11 2.50590e-02 DIIS; @DF-RKS iter 97: -0.14789452057679 2.34638e-10 2.50590e-02 DIIS; @DF-RKS iter 98: -0.14789452082882 -2.52026e-10 2.50590e-02 DIIS; @DF-RKS iter 99: -0.14789452079974 2.90820e-11 2.50590e-02 DIIS; @DF-RKS iter 100: -0.14789452100104 -2.01303e-10 2.50590e-02 DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1684#issuecomment-515629304
https://github.com/psi4/psi4/issues/1684#issuecomment-515629304:4,Testability,test,test,4,"The test is very like [sapt-dft1](https://github.com/psi4/psi4/blob/master/tests/sapt-dft1/input.dat) except He instead of Ar. I computed the grac-s of all three in molpro, and it still fails on iterations, though far better behaved. ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between He and Ar atoms. molecule dimer {; He; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.2316; sapt_dft_grac_shift_b 0.14208 #0.138264; }. # Molpro Ne,Ar: aug-cc-pvqz He: def2-qzvpp; # He 0.23160613844599998; # Ne 0.2069797945509999; # Ar 0.14207557000000004. energy('sapt(dft)', molecule=dimer); ```. ```; @DF-RKS iter 95: -0.14789452072560 -7.20653e-11 2.50590e-02 DIIS; @DF-RKS iter 96: -0.14789452081143 -8.58302e-11 2.50590e-02 DIIS; @DF-RKS iter 97: -0.14789452057679 2.34638e-10 2.50590e-02 DIIS; @DF-RKS iter 98: -0.14789452082882 -2.52026e-10 2.50590e-02 DIIS; @DF-RKS iter 99: -0.14789452079974 2.90820e-11 2.50590e-02 DIIS; @DF-RKS iter 100: -0.14789452100104 -2.01303e-10 2.50590e-02 DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1684#issuecomment-515629304
https://github.com/psi4/psi4/issues/1684#issuecomment-515629304:75,Testability,test,tests,75,"The test is very like [sapt-dft1](https://github.com/psi4/psi4/blob/master/tests/sapt-dft1/input.dat) except He instead of Ar. I computed the grac-s of all three in molpro, and it still fails on iterations, though far better behaved. ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between He and Ar atoms. molecule dimer {; He; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.2316; sapt_dft_grac_shift_b 0.14208 #0.138264; }. # Molpro Ne,Ar: aug-cc-pvqz He: def2-qzvpp; # He 0.23160613844599998; # Ne 0.2069797945509999; # Ar 0.14207557000000004. energy('sapt(dft)', molecule=dimer); ```. ```; @DF-RKS iter 95: -0.14789452072560 -7.20653e-11 2.50590e-02 DIIS; @DF-RKS iter 96: -0.14789452081143 -8.58302e-11 2.50590e-02 DIIS; @DF-RKS iter 97: -0.14789452057679 2.34638e-10 2.50590e-02 DIIS; @DF-RKS iter 98: -0.14789452082882 -2.52026e-10 2.50590e-02 DIIS; @DF-RKS iter 99: -0.14789452079974 2.90820e-11 2.50590e-02 DIIS; @DF-RKS iter 100: -0.14789452100104 -2.01303e-10 2.50590e-02 DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1684#issuecomment-515629304
https://github.com/psi4/psi4/issues/1685#issuecomment-515615749:537,Deployability,update,update,537,"Yeah, this is just too big a problem for DETCI's poor CISD capabilities. I answered this in the forums. Basically, if you optimize the code to do full CI very efficiently, you can wind up with an algorithm that creates intermediate data that is small enough to work fine for full CI, but blows up for CISD and makes the code run out of memory. And indeed, that's how I wrote the code, because we didn't care about CISD when we wrote it. I'm pretty sure the molecule reported here is big enough to run into this problem. I issued a PR to update the documentation to warn users away from DETCI CISD unless it's a tiny molecule (with a small basis).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749
https://github.com/psi4/psi4/issues/1685#issuecomment-515615749:159,Energy Efficiency,efficient,efficiently,159,"Yeah, this is just too big a problem for DETCI's poor CISD capabilities. I answered this in the forums. Basically, if you optimize the code to do full CI very efficiently, you can wind up with an algorithm that creates intermediate data that is small enough to work fine for full CI, but blows up for CISD and makes the code run out of memory. And indeed, that's how I wrote the code, because we didn't care about CISD when we wrote it. I'm pretty sure the molecule reported here is big enough to run into this problem. I issued a PR to update the documentation to warn users away from DETCI CISD unless it's a tiny molecule (with a small basis).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749
https://github.com/psi4/psi4/issues/1685#issuecomment-515615749:122,Performance,optimiz,optimize,122,"Yeah, this is just too big a problem for DETCI's poor CISD capabilities. I answered this in the forums. Basically, if you optimize the code to do full CI very efficiently, you can wind up with an algorithm that creates intermediate data that is small enough to work fine for full CI, but blows up for CISD and makes the code run out of memory. And indeed, that's how I wrote the code, because we didn't care about CISD when we wrote it. I'm pretty sure the molecule reported here is big enough to run into this problem. I issued a PR to update the documentation to warn users away from DETCI CISD unless it's a tiny molecule (with a small basis).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749
https://github.com/psi4/psi4/issues/1686#issuecomment-515268274:0,Availability,Ping,Pinging,0,"Pinging... Well, @lothian?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1686#issuecomment-515268274
https://github.com/psi4/psi4/pull/1687#issuecomment-518364448:24,Availability,avail,available,24,"The Azure build log not available, so I can't see its exact problem, but I recall Windows to have very strict ideas about file handlers and closing files. So while I agree that `with open` constructs are better than `open`/`close`, I think go with the simple solution that pleases Windows. Plus, I hope to retire this function in the next few months when we switch over to the new MolSSI BSE. Thanks for following up on the slack question/fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1687#issuecomment-518364448
https://github.com/psi4/psi4/pull/1687#issuecomment-518364448:16,Testability,log,log,16,"The Azure build log not available, so I can't see its exact problem, but I recall Windows to have very strict ideas about file handlers and closing files. So while I agree that `with open` constructs are better than `open`/`close`, I think go with the simple solution that pleases Windows. Plus, I hope to retire this function in the next few months when we switch over to the new MolSSI BSE. Thanks for following up on the slack question/fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1687#issuecomment-518364448
https://github.com/psi4/psi4/pull/1687#issuecomment-518364448:252,Usability,simpl,simple,252,"The Azure build log not available, so I can't see its exact problem, but I recall Windows to have very strict ideas about file handlers and closing files. So while I agree that `with open` constructs are better than `open`/`close`, I think go with the simple solution that pleases Windows. Plus, I hope to retire this function in the next few months when we switch over to the new MolSSI BSE. Thanks for following up on the slack question/fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1687#issuecomment-518364448
https://github.com/psi4/psi4/pull/1687#issuecomment-518681059:102,Security,Validat,ValidationError,102,"What about:. ```python; try:; infile = open(filename, 'r'); if os.stat(filename).st_size == 0:; raise ValidationError(""""""BasisSetParser::parse: given filename '%s' is blank."""""" % (filename)); contents = infile.readlines(); except IOError:; raise BasisSetFileNotFound(""""""BasisSetParser::parse: Unable to open basis set file: %s"""""" % (filename)); finally:; infile.close(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1687#issuecomment-518681059
https://github.com/psi4/psi4/pull/1687#issuecomment-520571901:67,Availability,down,download,67,"I am reasonably sure that Azure failed due to the issue with libxc download location (while tddft.org was down), and it wasn't a problem with the `with ... as ` way. Anyway, merging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1687#issuecomment-520571901
https://github.com/psi4/psi4/pull/1687#issuecomment-520571901:106,Availability,down,down,106,"I am reasonably sure that Azure failed due to the issue with libxc download location (while tddft.org was down), and it wasn't a problem with the `with ... as ` way. Anyway, merging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1687#issuecomment-520571901
https://github.com/psi4/psi4/pull/1688#issuecomment-515613120:134,Security,firewall,firewall,134,"FYI, @susilehtola the site has been unreachable for me all afternoon and still is. Just letting you know in case it's a misconfigured firewall or something similar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1688#issuecomment-515613120
https://github.com/psi4/psi4/issues/1691#issuecomment-518705808:7,Deployability,update,updated,7,"Yes, I updated this to do monomer-basis calculations. They are needed for correct counterpoise-corrected total energies. Maybe we should not compute them when the user requests interaction quantities with the option `return_total_data=False`. A new Psi4 driver is coming. It should have better control over which terms of the expansion are computed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-518705808
https://github.com/psi4/psi4/issues/1691#issuecomment-519006759:153,Safety,safe,safe,153,"The new `bsse_type='cp'` does what `bsse_type=['cp','nocp']` used to do, calculation wise, except the `nocp` interaction energies are not reported. . To safe computer time it was useful to only calculate the dimer-basis part and get CP-corrected interaction energies directly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-519006759
https://github.com/psi4/psi4/issues/1691#issuecomment-519261214:181,Performance,optimiz,optimization,181,"I agree we should allow the user to drop the computation of monomer-basis calculation. However, total counterpoise-corrected energies are sometimes needed, e.g. when doing geometry optimization, and so they should be computed when needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-519261214
https://github.com/psi4/psi4/issues/1691#issuecomment-558877867:11,Deployability,release,release,11,Before the release of 1.4 we should ensure that these monomer calculations are not included by default and are opt-in only to keep currently released behavior.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-558877867
https://github.com/psi4/psi4/issues/1691#issuecomment-558877867:141,Deployability,release,released,141,Before the release of 1.4 we should ensure that these monomer calculations are not included by default and are opt-in only to keep currently released behavior.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-558877867
https://github.com/psi4/psi4/issues/1691#issuecomment-869394243:1425,Availability,error,error,1425,"Alright, I'm having a go at this - fixing the number of calculations is trivial, but knowing what we want to print is not. For the `bsse_type=[""nocp""]` case, we want to calculate `AB in AB`, `A in A` and `B in B`. We can print the total no-CP energy at nbody(1) = `A in A` + `B in B`, nbody(2) = `AB in AB`, and the interaction energy is the difference of the two. For the `bsse_type=[""cp""]` case, we want `AB in AB`, `A in AB` and `B in AB`. We _cannot_ print any total CP energies, because for those we need the monomer terms. But we _can_ print the CP interaction energy. In my view, the table as printed by the driver currently is wrong for `bsse_type=[""cp""]` case. Also, the `return_total_data` keyword has no effect on the returned energy, or the ""CURRENT ENERGY"" in the returned `wfn` object. For the `bsse_type=[""cp"", ""nocp""]` case, we want to calculate `A in A` and `B in B` in addition to the above. This allows us to calculate the counterpoise corrections to the total energies for A and B, and by extension, to AB. I think the table should be modified so that only total energies are printed in the total energies column, which means printing an empty column for `bsse_type=""cp""`, but a populated column for `bsse_type=[""cp"", ""nocp""]`. Also, it might make sense if `return_total_data=""True""` with `bsse_type=""cp""` triggered calculation essentially equivalent to `bsse_type=[""cp"", ""nocp""]`, or at least printed an error that total energies are not available with only `bsse_type=""cp""`. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243
https://github.com/psi4/psi4/issues/1691#issuecomment-869394243:1459,Availability,avail,available,1459,"Alright, I'm having a go at this - fixing the number of calculations is trivial, but knowing what we want to print is not. For the `bsse_type=[""nocp""]` case, we want to calculate `AB in AB`, `A in A` and `B in B`. We can print the total no-CP energy at nbody(1) = `A in A` + `B in B`, nbody(2) = `AB in AB`, and the interaction energy is the difference of the two. For the `bsse_type=[""cp""]` case, we want `AB in AB`, `A in AB` and `B in AB`. We _cannot_ print any total CP energies, because for those we need the monomer terms. But we _can_ print the CP interaction energy. In my view, the table as printed by the driver currently is wrong for `bsse_type=[""cp""]` case. Also, the `return_total_data` keyword has no effect on the returned energy, or the ""CURRENT ENERGY"" in the returned `wfn` object. For the `bsse_type=[""cp"", ""nocp""]` case, we want to calculate `A in A` and `B in B` in addition to the above. This allows us to calculate the counterpoise corrections to the total energies for A and B, and by extension, to AB. I think the table should be modified so that only total energies are printed in the total energies column, which means printing an empty column for `bsse_type=""cp""`, but a populated column for `bsse_type=[""cp"", ""nocp""]`. Also, it might make sense if `return_total_data=""True""` with `bsse_type=""cp""` triggered calculation essentially equivalent to `bsse_type=[""cp"", ""nocp""]`, or at least printed an error that total energies are not available with only `bsse_type=""cp""`. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243
https://github.com/psi4/psi4/issues/1691#issuecomment-869394243:243,Energy Efficiency,energy,energy,243,"Alright, I'm having a go at this - fixing the number of calculations is trivial, but knowing what we want to print is not. For the `bsse_type=[""nocp""]` case, we want to calculate `AB in AB`, `A in A` and `B in B`. We can print the total no-CP energy at nbody(1) = `A in A` + `B in B`, nbody(2) = `AB in AB`, and the interaction energy is the difference of the two. For the `bsse_type=[""cp""]` case, we want `AB in AB`, `A in AB` and `B in AB`. We _cannot_ print any total CP energies, because for those we need the monomer terms. But we _can_ print the CP interaction energy. In my view, the table as printed by the driver currently is wrong for `bsse_type=[""cp""]` case. Also, the `return_total_data` keyword has no effect on the returned energy, or the ""CURRENT ENERGY"" in the returned `wfn` object. For the `bsse_type=[""cp"", ""nocp""]` case, we want to calculate `A in A` and `B in B` in addition to the above. This allows us to calculate the counterpoise corrections to the total energies for A and B, and by extension, to AB. I think the table should be modified so that only total energies are printed in the total energies column, which means printing an empty column for `bsse_type=""cp""`, but a populated column for `bsse_type=[""cp"", ""nocp""]`. Also, it might make sense if `return_total_data=""True""` with `bsse_type=""cp""` triggered calculation essentially equivalent to `bsse_type=[""cp"", ""nocp""]`, or at least printed an error that total energies are not available with only `bsse_type=""cp""`. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243
https://github.com/psi4/psi4/issues/1691#issuecomment-869394243:328,Energy Efficiency,energy,energy,328,"Alright, I'm having a go at this - fixing the number of calculations is trivial, but knowing what we want to print is not. For the `bsse_type=[""nocp""]` case, we want to calculate `AB in AB`, `A in A` and `B in B`. We can print the total no-CP energy at nbody(1) = `A in A` + `B in B`, nbody(2) = `AB in AB`, and the interaction energy is the difference of the two. For the `bsse_type=[""cp""]` case, we want `AB in AB`, `A in AB` and `B in AB`. We _cannot_ print any total CP energies, because for those we need the monomer terms. But we _can_ print the CP interaction energy. In my view, the table as printed by the driver currently is wrong for `bsse_type=[""cp""]` case. Also, the `return_total_data` keyword has no effect on the returned energy, or the ""CURRENT ENERGY"" in the returned `wfn` object. For the `bsse_type=[""cp"", ""nocp""]` case, we want to calculate `A in A` and `B in B` in addition to the above. This allows us to calculate the counterpoise corrections to the total energies for A and B, and by extension, to AB. I think the table should be modified so that only total energies are printed in the total energies column, which means printing an empty column for `bsse_type=""cp""`, but a populated column for `bsse_type=[""cp"", ""nocp""]`. Also, it might make sense if `return_total_data=""True""` with `bsse_type=""cp""` triggered calculation essentially equivalent to `bsse_type=[""cp"", ""nocp""]`, or at least printed an error that total energies are not available with only `bsse_type=""cp""`. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243
https://github.com/psi4/psi4/issues/1691#issuecomment-869394243:567,Energy Efficiency,energy,energy,567,"Alright, I'm having a go at this - fixing the number of calculations is trivial, but knowing what we want to print is not. For the `bsse_type=[""nocp""]` case, we want to calculate `AB in AB`, `A in A` and `B in B`. We can print the total no-CP energy at nbody(1) = `A in A` + `B in B`, nbody(2) = `AB in AB`, and the interaction energy is the difference of the two. For the `bsse_type=[""cp""]` case, we want `AB in AB`, `A in AB` and `B in AB`. We _cannot_ print any total CP energies, because for those we need the monomer terms. But we _can_ print the CP interaction energy. In my view, the table as printed by the driver currently is wrong for `bsse_type=[""cp""]` case. Also, the `return_total_data` keyword has no effect on the returned energy, or the ""CURRENT ENERGY"" in the returned `wfn` object. For the `bsse_type=[""cp"", ""nocp""]` case, we want to calculate `A in A` and `B in B` in addition to the above. This allows us to calculate the counterpoise corrections to the total energies for A and B, and by extension, to AB. I think the table should be modified so that only total energies are printed in the total energies column, which means printing an empty column for `bsse_type=""cp""`, but a populated column for `bsse_type=[""cp"", ""nocp""]`. Also, it might make sense if `return_total_data=""True""` with `bsse_type=""cp""` triggered calculation essentially equivalent to `bsse_type=[""cp"", ""nocp""]`, or at least printed an error that total energies are not available with only `bsse_type=""cp""`. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243
https://github.com/psi4/psi4/issues/1691#issuecomment-869394243:738,Energy Efficiency,energy,energy,738,"Alright, I'm having a go at this - fixing the number of calculations is trivial, but knowing what we want to print is not. For the `bsse_type=[""nocp""]` case, we want to calculate `AB in AB`, `A in A` and `B in B`. We can print the total no-CP energy at nbody(1) = `A in A` + `B in B`, nbody(2) = `AB in AB`, and the interaction energy is the difference of the two. For the `bsse_type=[""cp""]` case, we want `AB in AB`, `A in AB` and `B in AB`. We _cannot_ print any total CP energies, because for those we need the monomer terms. But we _can_ print the CP interaction energy. In my view, the table as printed by the driver currently is wrong for `bsse_type=[""cp""]` case. Also, the `return_total_data` keyword has no effect on the returned energy, or the ""CURRENT ENERGY"" in the returned `wfn` object. For the `bsse_type=[""cp"", ""nocp""]` case, we want to calculate `A in A` and `B in B` in addition to the above. This allows us to calculate the counterpoise corrections to the total energies for A and B, and by extension, to AB. I think the table should be modified so that only total energies are printed in the total energies column, which means printing an empty column for `bsse_type=""cp""`, but a populated column for `bsse_type=[""cp"", ""nocp""]`. Also, it might make sense if `return_total_data=""True""` with `bsse_type=""cp""` triggered calculation essentially equivalent to `bsse_type=[""cp"", ""nocp""]`, or at least printed an error that total energies are not available with only `bsse_type=""cp""`. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243
https://github.com/psi4/psi4/issues/1691#issuecomment-869394243:762,Energy Efficiency,ENERGY,ENERGY,762,"Alright, I'm having a go at this - fixing the number of calculations is trivial, but knowing what we want to print is not. For the `bsse_type=[""nocp""]` case, we want to calculate `AB in AB`, `A in A` and `B in B`. We can print the total no-CP energy at nbody(1) = `A in A` + `B in B`, nbody(2) = `AB in AB`, and the interaction energy is the difference of the two. For the `bsse_type=[""cp""]` case, we want `AB in AB`, `A in AB` and `B in AB`. We _cannot_ print any total CP energies, because for those we need the monomer terms. But we _can_ print the CP interaction energy. In my view, the table as printed by the driver currently is wrong for `bsse_type=[""cp""]` case. Also, the `return_total_data` keyword has no effect on the returned energy, or the ""CURRENT ENERGY"" in the returned `wfn` object. For the `bsse_type=[""cp"", ""nocp""]` case, we want to calculate `A in A` and `B in B` in addition to the above. This allows us to calculate the counterpoise corrections to the total energies for A and B, and by extension, to AB. I think the table should be modified so that only total energies are printed in the total energies column, which means printing an empty column for `bsse_type=""cp""`, but a populated column for `bsse_type=[""cp"", ""nocp""]`. Also, it might make sense if `return_total_data=""True""` with `bsse_type=""cp""` triggered calculation essentially equivalent to `bsse_type=[""cp"", ""nocp""]`, or at least printed an error that total energies are not available with only `bsse_type=""cp""`. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869394243
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:69,Availability,redundant,redundant,69,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:36,Deployability,update,update,36,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:465,Energy Efficiency,energy,energy,465,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:1154,Energy Efficiency,energy,energy,1154,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:1399,Energy Efficiency,energy,energy,1399,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:1427,Energy Efficiency,energy,energy,1427,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:1470,Energy Efficiency,energy,energy,1470,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:232,Integrability,interface,interface,232,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:282,Performance,optimiz,optimization,282,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:440,Performance,optimiz,optimize,440,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:518,Performance,optimiz,optimizer,518,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:902,Performance,optimiz,optimization,902,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:1006,Performance,optimiz,optimizations,1006,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:69,Safety,redund,redundant,69,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:176,Testability,test,testing,176,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254
https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:334,Availability,avail,available,334,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520
https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:147,Deployability,toggle,toggle,147,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520
https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:193,Energy Efficiency,energy,energy,193,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520
https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:306,Energy Efficiency,energy,energy,306,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520
https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:117,Performance,optimiz,optimization,117,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520
https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:15,Usability,feedback,feedback,15,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520
https://github.com/psi4/psi4/issues/1691#issuecomment-869913964:150,Performance,optimiz,optimizer,150,"I don't think I understand what the difference in the program behavior would be if you chose one solution over the other, so I'm not sure. Unless the optimizer needs to get handed the total energies and gradients via a return of the N-body function that happens when return_total_data=True, in which case the first solution would seem to be easier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869913964
https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:22,Availability,ping,ping,22,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783
https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:289,Energy Efficiency,energy,energy,289,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783
https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:332,Energy Efficiency,energy,energy,332,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783
https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:385,Energy Efficiency,energy,energy,385,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783
https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:434,Energy Efficiency,energy,energy,434,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783
https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:49,Performance,load,loaded,49,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783
https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:252,Performance,perform,performs,252,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783
https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:776,Performance,optimiz,optimize,776,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783
https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:794,Performance,optimiz,optimizer,794,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783
https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:162,Testability,test,test,162,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783
https://github.com/psi4/psi4/issues/1691#issuecomment-869935780:94,Performance,optimiz,optimize,94,"If the table from @loriab is how the program is behaving, then yes, it would seem to be ok if optimize() defaulted to return_total_data True. However, shouldn't we also make this the default behavior with gradient(), just in case anyone did call it with cp? (or is that somehow not possible)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869935780
https://github.com/psi4/psi4/issues/1691#issuecomment-869969864:108,Energy Efficiency,energy,energy,108,"the CP IE gradient is correct from 3 SP gradients, right? and nothing labeled CP total gradient or CP total energy is printed from line 6. so I'd think line 6 would be ok without altering the defaults. if the user was interested in total energies/gradients, he'd add `return_total_data=True` for line 5 and get the 5 SP gradients and correct CP total gradient and CP total energy. maybe I'm supposing incorrectly that users easily notice when IE vs tot_E returned is not what they intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869969864
https://github.com/psi4/psi4/issues/1691#issuecomment-869969864:373,Energy Efficiency,energy,energy,373,"the CP IE gradient is correct from 3 SP gradients, right? and nothing labeled CP total gradient or CP total energy is printed from line 6. so I'd think line 6 would be ok without altering the defaults. if the user was interested in total energies/gradients, he'd add `return_total_data=True` for line 5 and get the 5 SP gradients and correct CP total gradient and CP total energy. maybe I'm supposing incorrectly that users easily notice when IE vs tot_E returned is not what they intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869969864
https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:943,Energy Efficiency,energy,energy,943,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704
https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:1073,Energy Efficiency,energy,energy,1073,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704
https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:1195,Energy Efficiency,energy,energy,1195,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704
https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:1244,Energy Efficiency,energy,energy,1244,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704
https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:773,Performance,optimiz,optimize,773,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704
https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:1022,Performance,optimiz,optimizer,1022,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704
https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:1290,Performance,perform,performing,1290,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704
https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:1305,Performance,optimiz,optimization,1305,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704
https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:1053,Safety,sanity check,sanity check,1053,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704
https://github.com/psi4/psi4/issues/1691#issuecomment-870054471:196,Energy Efficiency,energy,energy,196,"fear not, we've got a sol'n for item 1 -- `AtomicInput.keywords[""function_kwargs""]` https://github.com/psi4/psi4/blob/master/psi4/driver/schema_wrapper.py#L534 . psi passes these on to the e.g., `energy()` call rather than to `psi4.set_options()`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870054471
https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:314,Energy Efficiency,energy,energy,314,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772
https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:367,Energy Efficiency,energy,energy,367,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772
https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:438,Energy Efficiency,energy,energy,438,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772
https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:492,Energy Efficiency,energy,energy,492,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772
https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:552,Energy Efficiency,energy,energy,552,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772
https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:611,Energy Efficiency,energy,energy,611,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772
https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:1508,Energy Efficiency,energy,energy,1508,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772
https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:1561,Energy Efficiency,energy,energy,1561,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772
https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:230,Performance,perform,perform,230,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772
https://github.com/psi4/psi4/issues/1692#issuecomment-518465242:181,Performance,optimiz,optimization,181,"This might be an ""issue"" with the new guess. Can you try a `guess core` or `gwh`?. Issue in this case is in quotes as this may be something odd where the guess pushes this unstable optimization to a poor value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518465242
https://github.com/psi4/psi4/issues/1692#issuecomment-518487956:699,Energy Efficiency,energy,energy,699,"Hi, thanks for the quick answer. Could be: as I was starting MOM within very few iterations, the impact of the guess may have been decisive. However, changing the guess (specifically from sad to read, taking the orbitals from the previous RHF calculation) did not work. What apparently fixes the issue, independently of the guess, was increasing the number of SCF iterations before activating MOM. So I don't really know what is it. . Also note that, while my inputs may seem very strange (and, quite possibly, messy), the HF/UHF case is the most simple one. Converging these states with large basis sets in DFT is a true pain, and often requires a lot of toying around). As an additional note, the energy that the program was giving with that output is exactly 9.3609016111309238, the nuclear repulsion energy. So, for whatever reason, the electronic energy is 0 in that state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518487956
https://github.com/psi4/psi4/issues/1692#issuecomment-518487956:804,Energy Efficiency,energy,energy,804,"Hi, thanks for the quick answer. Could be: as I was starting MOM within very few iterations, the impact of the guess may have been decisive. However, changing the guess (specifically from sad to read, taking the orbitals from the previous RHF calculation) did not work. What apparently fixes the issue, independently of the guess, was increasing the number of SCF iterations before activating MOM. So I don't really know what is it. . Also note that, while my inputs may seem very strange (and, quite possibly, messy), the HF/UHF case is the most simple one. Converging these states with large basis sets in DFT is a true pain, and often requires a lot of toying around). As an additional note, the energy that the program was giving with that output is exactly 9.3609016111309238, the nuclear repulsion energy. So, for whatever reason, the electronic energy is 0 in that state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518487956
https://github.com/psi4/psi4/issues/1692#issuecomment-518487956:852,Energy Efficiency,energy,energy,852,"Hi, thanks for the quick answer. Could be: as I was starting MOM within very few iterations, the impact of the guess may have been decisive. However, changing the guess (specifically from sad to read, taking the orbitals from the previous RHF calculation) did not work. What apparently fixes the issue, independently of the guess, was increasing the number of SCF iterations before activating MOM. So I don't really know what is it. . Also note that, while my inputs may seem very strange (and, quite possibly, messy), the HF/UHF case is the most simple one. Converging these states with large basis sets in DFT is a true pain, and often requires a lot of toying around). As an additional note, the energy that the program was giving with that output is exactly 9.3609016111309238, the nuclear repulsion energy. So, for whatever reason, the electronic energy is 0 in that state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518487956
https://github.com/psi4/psi4/issues/1692#issuecomment-518487956:547,Usability,simpl,simple,547,"Hi, thanks for the quick answer. Could be: as I was starting MOM within very few iterations, the impact of the guess may have been decisive. However, changing the guess (specifically from sad to read, taking the orbitals from the previous RHF calculation) did not work. What apparently fixes the issue, independently of the guess, was increasing the number of SCF iterations before activating MOM. So I don't really know what is it. . Also note that, while my inputs may seem very strange (and, quite possibly, messy), the HF/UHF case is the most simple one. Converging these states with large basis sets in DFT is a true pain, and often requires a lot of toying around). As an additional note, the energy that the program was giving with that output is exactly 9.3609016111309238, the nuclear repulsion energy. So, for whatever reason, the electronic energy is 0 in that state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518487956
https://github.com/psi4/psi4/issues/1692#issuecomment-518570167:29,Energy Efficiency,energy,energy,29,"> As an additional note, the energy that the program was giving with that output is exactly 9.3609016111309238, the nuclear repulsion energy. So, for whatever reason, the electronic energy is 0 in that state. That sounds highly unlikely. Maybe PySCF isn't getting a properly formatted density matrix, and is not really evaluating anything?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518570167
https://github.com/psi4/psi4/issues/1692#issuecomment-518570167:134,Energy Efficiency,energy,energy,134,"> As an additional note, the energy that the program was giving with that output is exactly 9.3609016111309238, the nuclear repulsion energy. So, for whatever reason, the electronic energy is 0 in that state. That sounds highly unlikely. Maybe PySCF isn't getting a properly formatted density matrix, and is not really evaluating anything?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518570167
https://github.com/psi4/psi4/issues/1692#issuecomment-518570167:182,Energy Efficiency,energy,energy,182,"> As an additional note, the energy that the program was giving with that output is exactly 9.3609016111309238, the nuclear repulsion energy. So, for whatever reason, the electronic energy is 0 in that state. That sounds highly unlikely. Maybe PySCF isn't getting a properly formatted density matrix, and is not really evaluating anything?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518570167
https://github.com/psi4/psi4/issues/1692#issuecomment-518740195:96,Energy Efficiency,energy,energy,96,Check the output for the water+_homo-4.out in the Psi4 1.4(...) version. **That's the converged energy in PSI4!** Hence this issue. Its clearly converging to some crazy unphysical state. I would not worry if it was just a strange energy... MOM is like that. But this is an impossible energy!. The whole PySCF thing is a different ordeal that probably has to do with some weird reordering in the .fchk writer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518740195
https://github.com/psi4/psi4/issues/1692#issuecomment-518740195:230,Energy Efficiency,energy,energy,230,Check the output for the water+_homo-4.out in the Psi4 1.4(...) version. **That's the converged energy in PSI4!** Hence this issue. Its clearly converging to some crazy unphysical state. I would not worry if it was just a strange energy... MOM is like that. But this is an impossible energy!. The whole PySCF thing is a different ordeal that probably has to do with some weird reordering in the .fchk writer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518740195
https://github.com/psi4/psi4/issues/1692#issuecomment-518740195:284,Energy Efficiency,energy,energy,284,Check the output for the water+_homo-4.out in the Psi4 1.4(...) version. **That's the converged energy in PSI4!** Hence this issue. Its clearly converging to some crazy unphysical state. I would not worry if it was just a strange energy... MOM is like that. But this is an impossible energy!. The whole PySCF thing is a different ordeal that probably has to do with some weird reordering in the .fchk writer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518740195
https://github.com/psi4/psi4/issues/1692#issuecomment-518740195:136,Usability,clear,clearly,136,Check the output for the water+_homo-4.out in the Psi4 1.4(...) version. **That's the converged energy in PSI4!** Hence this issue. Its clearly converging to some crazy unphysical state. I would not worry if it was just a strange energy... MOM is like that. But this is an impossible energy!. The whole PySCF thing is a different ordeal that probably has to do with some weird reordering in the .fchk writer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518740195
https://github.com/psi4/psi4/issues/1692#issuecomment-518786574:215,Energy Efficiency,Energy,Energy,215,"@rlaplaza but the issue is exactly as I suspected. Look at the log file:; ```. Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0 ]; NA [ 0, 0, 0, 0 ]; NB [ 0, 0, 0, 0 ]. @DF-UHF Final Energy: 9.36090161113092; ```. There are **no** electrons in the calculation. Getting zero contributions from the energy just doesn't happen otherwise, usually you just get nonsense.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518786574
https://github.com/psi4/psi4/issues/1692#issuecomment-518786574:329,Energy Efficiency,energy,energy,329,"@rlaplaza but the issue is exactly as I suspected. Look at the log file:; ```. Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0 ]; NA [ 0, 0, 0, 0 ]; NB [ 0, 0, 0, 0 ]. @DF-UHF Final Energy: 9.36090161113092; ```. There are **no** electrons in the calculation. Getting zero contributions from the energy just doesn't happen otherwise, usually you just get nonsense.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518786574
https://github.com/psi4/psi4/issues/1692#issuecomment-518786574:63,Testability,log,log,63,"@rlaplaza but the issue is exactly as I suspected. Look at the log file:; ```. Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0 ]; NA [ 0, 0, 0, 0 ]; NB [ 0, 0, 0, 0 ]. @DF-UHF Final Energy: 9.36090161113092; ```. There are **no** electrons in the calculation. Getting zero contributions from the energy just doesn't happen otherwise, usually you just get nonsense.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518786574
https://github.com/psi4/psi4/issues/1692#issuecomment-518801826:186,Energy Efficiency,Energy,Energy,186,"@susilehtola indeed. The question is, what is really happening in this step, the 2nd MOM activation:. ```; ==> MOM Excited-State Iterations <==; Excitations:; A -> A : 1A1 -> 4A1; Total Energy Delta E Density RMS; @DF-UHF iter 0: -75.32089478045290 -1.26766e+00 1.13211e-02 DIIS/MOM; @DF-UHF iter 1: 9.36090161113092 8.46818e+01 0.00000e+00 DIIS/MOM; @DF-UHF iter 2: 9.36090161113092 0.00000e+00 0.00000e+00 DIIS/MOM; Energy and wave function converged.; ```. Are the electrons anihilated in that MOM activation step? Are all the occ. orbitals wrongly deleted, leading to an awkward situation? Maybe then some iterator does not check the virtuals? And, most importantly, what is the change from 1.1 to 1.4(...) that makes this ""a thing"". I really have no hypothesis. My point is, this is not a ""MOM converging to some weird state"" thing: this is probably some sort of bug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518801826
https://github.com/psi4/psi4/issues/1692#issuecomment-518801826:418,Energy Efficiency,Energy,Energy,418,"@susilehtola indeed. The question is, what is really happening in this step, the 2nd MOM activation:. ```; ==> MOM Excited-State Iterations <==; Excitations:; A -> A : 1A1 -> 4A1; Total Energy Delta E Density RMS; @DF-UHF iter 0: -75.32089478045290 -1.26766e+00 1.13211e-02 DIIS/MOM; @DF-UHF iter 1: 9.36090161113092 8.46818e+01 0.00000e+00 DIIS/MOM; @DF-UHF iter 2: 9.36090161113092 0.00000e+00 0.00000e+00 DIIS/MOM; Energy and wave function converged.; ```. Are the electrons anihilated in that MOM activation step? Are all the occ. orbitals wrongly deleted, leading to an awkward situation? Maybe then some iterator does not check the virtuals? And, most importantly, what is the change from 1.1 to 1.4(...) that makes this ""a thing"". I really have no hypothesis. My point is, this is not a ""MOM converging to some weird state"" thing: this is probably some sort of bug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518801826
https://github.com/psi4/psi4/issues/1692#issuecomment-518807757:289,Testability,log,logic,289,"A big suspect if MOM changed between v1.2 and v1.3 is the migration of SCF iterations from [C++ to Python](https://github.com/psi4/psi4/pull/953/files). That's an awfully big diff, so the main orientation is that some libscf_solver code headed to driver/proc/scf. I ""standardized"" the MOM logic a touch in a way I thought to be harmless. Certainly all tests were ok, but there wasn't much MOM testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518807757
https://github.com/psi4/psi4/issues/1692#issuecomment-518807757:352,Testability,test,tests,352,"A big suspect if MOM changed between v1.2 and v1.3 is the migration of SCF iterations from [C++ to Python](https://github.com/psi4/psi4/pull/953/files). That's an awfully big diff, so the main orientation is that some libscf_solver code headed to driver/proc/scf. I ""standardized"" the MOM logic a touch in a way I thought to be harmless. Certainly all tests were ok, but there wasn't much MOM testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518807757
https://github.com/psi4/psi4/issues/1692#issuecomment-518807757:393,Testability,test,testing,393,"A big suspect if MOM changed between v1.2 and v1.3 is the migration of SCF iterations from [C++ to Python](https://github.com/psi4/psi4/pull/953/files). That's an awfully big diff, so the main orientation is that some libscf_solver code headed to driver/proc/scf. I ""standardized"" the MOM logic a touch in a way I thought to be harmless. Certainly all tests were ok, but there wasn't much MOM testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518807757
https://github.com/psi4/psi4/issues/1693#issuecomment-520830260:1454,Availability,error,error,1454,"als are doubly occupied.; (""docc"" = ""doubly occupied""). Also, if you're doing a RAS, you need to tell the code the max number of; holes in RAS I, and the max number of particles in RAS III. I forget the; keywords off the top of my head. Additionally, if it's high-spin open-shell, at least to keep the SCF; straight (can't remember if DETCI needs this or not), you probably should; be specifying the symmetries of the singly occupied orbitals with the SOCC; keyword. There may or may not be some additional problems. On Tue, Aug 13, 2019 at 6:42 AM Susi Lehtola <notifications@github.com>; wrote:. > The following input fails with a segfault; >; > molecule {; > 0 5; > Fe; > }; >; > set basis pcseg-0; > set reference rohf; > set scf_type pk; > set mcscf_type conv; > # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]; >; > # Ar core; > set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; > # spd active space; > set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; > set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; > set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; > cas_e, cas_wfn = energy('rasscf', return_wfn=True); >; > # Dynamical correlation from Ar core; > set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; > set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; > ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); >; > There's something wrong in the input or the code, since there's an error; > message in the log file; >; > ==> Setting up CI strings <==; >; > There are 2730 alpha and 105 beta strings; > (subgr_lex_addr): Impossible walk!; > The CI space requires 18211 (1.82E+04) determinants and 44 blocks; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1693?email_source=notifications&email_token=AAXVA5TD2EJDK5M4KQ6Q5TTQEKFYNA5CNFSM4ILJOWVKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HE5Q2AQ>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5QEYCCJVE5424DTXB3QEKFYNANCNFSM4ILJOWVA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260
https://github.com/psi4/psi4/issues/1693#issuecomment-520830260:1149,Energy Efficiency,energy,energy,1149,"als are doubly occupied.; (""docc"" = ""doubly occupied""). Also, if you're doing a RAS, you need to tell the code the max number of; holes in RAS I, and the max number of particles in RAS III. I forget the; keywords off the top of my head. Additionally, if it's high-spin open-shell, at least to keep the SCF; straight (can't remember if DETCI needs this or not), you probably should; be specifying the symmetries of the singly occupied orbitals with the SOCC; keyword. There may or may not be some additional problems. On Tue, Aug 13, 2019 at 6:42 AM Susi Lehtola <notifications@github.com>; wrote:. > The following input fails with a segfault; >; > molecule {; > 0 5; > Fe; > }; >; > set basis pcseg-0; > set reference rohf; > set scf_type pk; > set mcscf_type conv; > # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]; >; > # Ar core; > set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; > # spd active space; > set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; > set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; > set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; > cas_e, cas_wfn = energy('rasscf', return_wfn=True); >; > # Dynamical correlation from Ar core; > set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; > set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; > ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); >; > There's something wrong in the input or the code, since there's an error; > message in the log file; >; > ==> Setting up CI strings <==; >; > There are 2730 alpha and 105 beta strings; > (subgr_lex_addr): Impossible walk!; > The CI space requires 18211 (1.82E+04) determinants and 44 blocks; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1693?email_source=notifications&email_token=AAXVA5TD2EJDK5M4KQ6Q5TTQEKFYNA5CNFSM4ILJOWVKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HE5Q2AQ>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5QEYCCJVE5424DTXB3QEKFYNANCNFSM4ILJOWVA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260
https://github.com/psi4/psi4/issues/1693#issuecomment-520830260:1331,Energy Efficiency,energy,energy,1331,"als are doubly occupied.; (""docc"" = ""doubly occupied""). Also, if you're doing a RAS, you need to tell the code the max number of; holes in RAS I, and the max number of particles in RAS III. I forget the; keywords off the top of my head. Additionally, if it's high-spin open-shell, at least to keep the SCF; straight (can't remember if DETCI needs this or not), you probably should; be specifying the symmetries of the singly occupied orbitals with the SOCC; keyword. There may or may not be some additional problems. On Tue, Aug 13, 2019 at 6:42 AM Susi Lehtola <notifications@github.com>; wrote:. > The following input fails with a segfault; >; > molecule {; > 0 5; > Fe; > }; >; > set basis pcseg-0; > set reference rohf; > set scf_type pk; > set mcscf_type conv; > # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]; >; > # Ar core; > set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; > # spd active space; > set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; > set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; > set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; > cas_e, cas_wfn = energy('rasscf', return_wfn=True); >; > # Dynamical correlation from Ar core; > set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; > set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; > ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); >; > There's something wrong in the input or the code, since there's an error; > message in the log file; >; > ==> Setting up CI strings <==; >; > There are 2730 alpha and 105 beta strings; > (subgr_lex_addr): Impossible walk!; > The CI space requires 18211 (1.82E+04) determinants and 44 blocks; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1693?email_source=notifications&email_token=AAXVA5TD2EJDK5M4KQ6Q5TTQEKFYNA5CNFSM4ILJOWVKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HE5Q2AQ>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5QEYCCJVE5424DTXB3QEKFYNANCNFSM4ILJOWVA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260
https://github.com/psi4/psi4/issues/1693#issuecomment-520830260:1463,Integrability,message,message,1463,"als are doubly occupied.; (""docc"" = ""doubly occupied""). Also, if you're doing a RAS, you need to tell the code the max number of; holes in RAS I, and the max number of particles in RAS III. I forget the; keywords off the top of my head. Additionally, if it's high-spin open-shell, at least to keep the SCF; straight (can't remember if DETCI needs this or not), you probably should; be specifying the symmetries of the singly occupied orbitals with the SOCC; keyword. There may or may not be some additional problems. On Tue, Aug 13, 2019 at 6:42 AM Susi Lehtola <notifications@github.com>; wrote:. > The following input fails with a segfault; >; > molecule {; > 0 5; > Fe; > }; >; > set basis pcseg-0; > set reference rohf; > set scf_type pk; > set mcscf_type conv; > # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]; >; > # Ar core; > set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; > # spd active space; > set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; > set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; > set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; > cas_e, cas_wfn = energy('rasscf', return_wfn=True); >; > # Dynamical correlation from Ar core; > set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; > set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; > ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); >; > There's something wrong in the input or the code, since there's an error; > message in the log file; >; > ==> Setting up CI strings <==; >; > There are 2730 alpha and 105 beta strings; > (subgr_lex_addr): Impossible walk!; > The CI space requires 18211 (1.82E+04) determinants and 44 blocks; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1693?email_source=notifications&email_token=AAXVA5TD2EJDK5M4KQ6Q5TTQEKFYNA5CNFSM4ILJOWVKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HE5Q2AQ>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5QEYCCJVE5424DTXB3QEKFYNANCNFSM4ILJOWVA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260
https://github.com/psi4/psi4/issues/1693#issuecomment-520830260:1478,Testability,log,log,1478,"als are doubly occupied.; (""docc"" = ""doubly occupied""). Also, if you're doing a RAS, you need to tell the code the max number of; holes in RAS I, and the max number of particles in RAS III. I forget the; keywords off the top of my head. Additionally, if it's high-spin open-shell, at least to keep the SCF; straight (can't remember if DETCI needs this or not), you probably should; be specifying the symmetries of the singly occupied orbitals with the SOCC; keyword. There may or may not be some additional problems. On Tue, Aug 13, 2019 at 6:42 AM Susi Lehtola <notifications@github.com>; wrote:. > The following input fails with a segfault; >; > molecule {; > 0 5; > Fe; > }; >; > set basis pcseg-0; > set reference rohf; > set scf_type pk; > set mcscf_type conv; > # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]; >; > # Ar core; > set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; > # spd active space; > set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; > set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; > set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; > cas_e, cas_wfn = energy('rasscf', return_wfn=True); >; > # Dynamical correlation from Ar core; > set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; > set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; > ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); >; > There's something wrong in the input or the code, since there's an error; > message in the log file; >; > ==> Setting up CI strings <==; >; > There are 2730 alpha and 105 beta strings; > (subgr_lex_addr): Impossible walk!; > The CI space requires 18211 (1.82E+04) determinants and 44 blocks; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1693?email_source=notifications&email_token=AAXVA5TD2EJDK5M4KQ6Q5TTQEKFYNA5CNFSM4ILJOWVKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HE5Q2AQ>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5QEYCCJVE5424DTXB3QEKFYNANCNFSM4ILJOWVA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260
https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:177,Availability,error,error,177,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143
https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:123,Deployability,configurat,configuration,123,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143
https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:183,Integrability,message,message,183,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143
https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:123,Modifiability,config,configuration,123,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143
https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:215,Safety,detect,detecting,215,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143
https://github.com/psi4/psi4/issues/1694#issuecomment-520789143:57,Deployability,update,updated,57,"Ah, nevermind, the pybind11 issue is because it had been updated and I just needed a recompile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1694#issuecomment-520789143
https://github.com/psi4/psi4/pull/1699#issuecomment-521029898:20,Integrability,interface,interface,20,This will be a nice interface to have!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521029898
https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:49,Deployability,integrat,integration,49,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759
https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:181,Deployability,integrat,integrate,181,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759
https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:775,Deployability,integrat,integrated,775,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759
https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:49,Integrability,integrat,integration,49,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759
https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:181,Integrability,integrat,integrate,181,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759
https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:775,Integrability,integrat,integrated,775,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759
https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:595,Modifiability,variab,variables,595,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759
https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:241,Safety,avoid,avoid,241,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759
https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:438,Testability,log,logic,438,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759
https://github.com/psi4/psi4/pull/1699#issuecomment-521307048:277,Testability,log,logic,277,"Sure, sounds good. ; - OK with moving to qcengine (sorry about that; I didn't want to touch multiple repos at the same time, hence the `## hack ##`).; - That github repo is where postg development occurs, yes. PRs and requests for features are welcome.; - OK with changing the logic in any way that is more appropriate. Let me know and I can make an attempt.; - Never used conda. I'm OK with making a postg package, though, but I'll probably need some guidance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521307048
https://github.com/psi4/psi4/pull/1699#issuecomment-521307048:452,Usability,guid,guidance,452,"Sure, sounds good. ; - OK with moving to qcengine (sorry about that; I didn't want to touch multiple repos at the same time, hence the `## hack ##`).; - That github repo is where postg development occurs, yes. PRs and requests for features are welcome.; - OK with changing the logic in any way that is more appropriate. Let me know and I can make an attempt.; - Never used conda. I'm OK with making a postg package, though, but I'll probably need some guidance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521307048
https://github.com/psi4/psi4/pull/1700#issuecomment-521380033:25,Testability,log,logs,25,save others scanning the logs: https://travis-ci.org/psi4/psi4/jobs/571932399#L1608-L1630,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1700#issuecomment-521380033
https://github.com/psi4/psi4/pull/1700#issuecomment-531489364:25,Availability,failure,failure,25,"Hmm, looks like a libint failure?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1700#issuecomment-531489364
https://github.com/psi4/psi4/pull/1700#issuecomment-531648876:36,Availability,error,error,36,"No need, @susilehtola, as the azure error has to do with azure, clang-cl, and gau2grid, not SAP.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1700#issuecomment-531648876
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:58,Energy Efficiency,energy,energy,58,"These definitions all look ok. It's correct that the CCSD energy should; not equal the sum of the same-spin and opposite-spin terms, b/c those terms; refer to the doubles, and singles are held out as separate (; https://aip.scitation.org/doi/10.1063/1.2883974 ). On Thu, Aug 15, 2019 at 5:50 PM Lori A. Burns <notifications@github.com>; wrote:. > Note this is only a psivars issue -- printed energies are fine.; >; > singles contributions to UHF & ROHF CCSD (; > https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:530,Energy Efficiency,energy,energy,530,"These definitions all look ok. It's correct that the CCSD energy should; not equal the sum of the same-spin and opposite-spin terms, b/c those terms; refer to the doubles, and singles are held out as separate (; https://aip.scitation.org/doi/10.1063/1.2883974 ). On Thu, Aug 15, 2019 at 5:50 PM Lori A. Burns <notifications@github.com>; wrote:. > Note this is only a psivars issue -- printed energies are fine.; >; > singles contributions to UHF & ROHF CCSD (; > https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:645,Energy Efficiency,ENERGY,ENERGY,645,"These definitions all look ok. It's correct that the CCSD energy should; not equal the sum of the same-spin and opposite-spin terms, b/c those terms; refer to the doubles, and singles are held out as separate (; https://aip.scitation.org/doi/10.1063/1.2883974 ). On Thu, Aug 15, 2019 at 5:50 PM Lori A. Burns <notifications@github.com>; wrote:. > Note this is only a psivars issue -- printed energies are fine.; >; > singles contributions to UHF & ROHF CCSD (; > https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:687,Energy Efficiency,ENERGY,ENERGY,687,"These definitions all look ok. It's correct that the CCSD energy should; not equal the sum of the same-spin and opposite-spin terms, b/c those terms; refer to the doubles, and singles are held out as separate (; https://aip.scitation.org/doi/10.1063/1.2883974 ). On Thu, Aug 15, 2019 at 5:50 PM Lori A. Burns <notifications@github.com>; wrote:. > Note this is only a psivars issue -- printed energies are fine.; >; > singles contributions to UHF & ROHF CCSD (; > https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:727,Energy Efficiency,ENERGY,ENERGY,727,"These definitions all look ok. It's correct that the CCSD energy should; not equal the sum of the same-spin and opposite-spin terms, b/c those terms; refer to the doubles, and singles are held out as separate (; https://aip.scitation.org/doi/10.1063/1.2883974 ). On Thu, Aug 15, 2019 at 5:50 PM Lori A. Burns <notifications@github.com>; wrote:. > Note this is only a psivars issue -- printed energies are fine.; >; > singles contributions to UHF & ROHF CCSD (; > https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:1051,Energy Efficiency,ENERGY,ENERGY,1051,"e-spin and opposite-spin terms, b/c those terms; refer to the doubles, and singles are held out as separate (; https://aip.scitation.org/doi/10.1063/1.2883974 ). On Thu, Aug 15, 2019 at 5:50 PM Lori A. Burns <notifications@github.com>; wrote:. > Note this is only a psivars issue -- printed energies are fine.; >; > singles contributions to UHF & ROHF CCSD (; > https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin and opposite-spin correlations.; > :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; > """"""}; >; >; > - let",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:1149,Energy Efficiency,energy,energy,1149,"e-spin and opposite-spin terms, b/c those terms; refer to the doubles, and singles are held out as separate (; https://aip.scitation.org/doi/10.1063/1.2883974 ). On Thu, Aug 15, 2019 at 5:50 PM Lori A. Burns <notifications@github.com>; wrote:. > Note this is only a psivars issue -- printed energies are fine.; >; > singles contributions to UHF & ROHF CCSD (; > https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin and opposite-spin correlations.; > :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; > """"""}; >; >; > - let",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:1419,Energy Efficiency,ENERGY,ENERGY,1419,"/github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin and opposite-spin correlations.; > :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; > """"""}; >; >; > - let us implement storing singles for all three refs in cc* modules; > (only rohf will be nonzero).; > - let us implement storing all three consistently in any other cc codes; > - let us make sure to place these var on wfn, not in P::e.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <http",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:1517,Energy Efficiency,energy,energy,1517,"/github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin and opposite-spin correlations.; > :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; > """"""}; >; >; > - let us implement storing singles for all three refs in cc* modules; > (only rohf will be nonzero).; > - let us implement storing all three consistently in any other cc codes; > - let us make sure to place these var on wfn, not in P::e.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <http",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:1663,Energy Efficiency,ENERGY,ENERGY,1663," don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin and opposite-spin correlations.; > :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; > """"""}; >; >; > - let us implement storing singles for all three refs in cc* modules; > (only rohf will be nonzero).; > - let us implement storing all three consistently in any other cc codes; > - let us make sure to place these var on wfn, not in P::e.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1702?email_source=notifications&email_token=AAXVA5Q5HSV262BE27LUCI3QEXFTZA5CNFSM4IMCFUIKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HFQ4I4Q>,; > or mute the thread; > <https://github.com/n",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:1760,Energy Efficiency,energy,energy,1760," don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin and opposite-spin correlations.; > :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; > """"""}; >; >; > - let us implement storing singles for all three refs in cc* modules; > (only rohf will be nonzero).; > - let us implement storing all three consistently in any other cc codes; > - let us make sure to place these var on wfn, not in P::e.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1702?email_source=notifications&email_token=AAXVA5Q5HSV262BE27LUCI3QEXFTZA5CNFSM4IMCFUIKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HFQ4I4Q>,; > or mute the thread; > <https://github.com/n",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:1875,Energy Efficiency,ENERGY,ENERGY,1875," up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin and opposite-spin correlations.; > :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; > """"""}; >; >; > - let us implement storing singles for all three refs in cc* modules; > (only rohf will be nonzero).; > - let us implement storing all three consistently in any other cc codes; > - let us make sure to place these var on wfn, not in P::e.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1702?email_source=notifications&email_token=AAXVA5Q5HSV262BE27LUCI3QEXFTZA5CNFSM4IMCFUIKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HFQ4I4Q>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5TNKXMJ7CHGNVYFDH3QEXFTZANCNFSM4IMCFUIA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:1972,Energy Efficiency,energy,energy,1972," up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin and opposite-spin correlations.; > :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; > """"""}; >; >; > - let us implement storing singles for all three refs in cc* modules; > (only rohf will be nonzero).; > - let us implement storing all three consistently in any other cc codes; > - let us make sure to place these var on wfn, not in P::e.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1702?email_source=notifications&email_token=AAXVA5Q5HSV262BE27LUCI3QEXFTZA5CNFSM4IMCFUIKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HFQ4I4Q>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5TNKXMJ7CHGNVYFDH3QEXFTZANCNFSM4IMCFUIA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517
https://github.com/psi4/psi4/issues/1703#issuecomment-523825418:333,Performance,optimiz,optimization,333,"I guess the problem is related to the bond very close to 180deg. Maybe some small perturbation of the central atom could be done in these case before giving up?. When I repeated with the coordinates after some Cartesian steps it worked fine to generate internal coordinates, so another approach could be to start with Cartesian only optimization for the first 5-10 steps and then try again to generate internal and so forth until reaching maxiter",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1703#issuecomment-523825418
https://github.com/psi4/psi4/issues/1704#issuecomment-523874957:197,Availability,failure,failure,197,"What version are you using? I'm running on commit dd6b45b (updated May 7), and I can't reproduce this. Two geometry iterations finish successfully before SCF convergence fails. The SCF convergence failure appears to the fault of my old ""friend"", orbital guesses not correcting for changes in the overlap matrix when reading in orbitals for the initial guess... The initial guess from orbital read is terrible, and I see a large change in geometry for the update where the failure happened. The previous geometry, which also reads orbitals but from a much more similar geometry, seems to work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1704#issuecomment-523874957
https://github.com/psi4/psi4/issues/1704#issuecomment-523874957:220,Availability,fault,fault,220,"What version are you using? I'm running on commit dd6b45b (updated May 7), and I can't reproduce this. Two geometry iterations finish successfully before SCF convergence fails. The SCF convergence failure appears to the fault of my old ""friend"", orbital guesses not correcting for changes in the overlap matrix when reading in orbitals for the initial guess... The initial guess from orbital read is terrible, and I see a large change in geometry for the update where the failure happened. The previous geometry, which also reads orbitals but from a much more similar geometry, seems to work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1704#issuecomment-523874957
https://github.com/psi4/psi4/issues/1704#issuecomment-523874957:472,Availability,failure,failure,472,"What version are you using? I'm running on commit dd6b45b (updated May 7), and I can't reproduce this. Two geometry iterations finish successfully before SCF convergence fails. The SCF convergence failure appears to the fault of my old ""friend"", orbital guesses not correcting for changes in the overlap matrix when reading in orbitals for the initial guess... The initial guess from orbital read is terrible, and I see a large change in geometry for the update where the failure happened. The previous geometry, which also reads orbitals but from a much more similar geometry, seems to work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1704#issuecomment-523874957
https://github.com/psi4/psi4/issues/1704#issuecomment-523874957:59,Deployability,update,updated,59,"What version are you using? I'm running on commit dd6b45b (updated May 7), and I can't reproduce this. Two geometry iterations finish successfully before SCF convergence fails. The SCF convergence failure appears to the fault of my old ""friend"", orbital guesses not correcting for changes in the overlap matrix when reading in orbitals for the initial guess... The initial guess from orbital read is terrible, and I see a large change in geometry for the update where the failure happened. The previous geometry, which also reads orbitals but from a much more similar geometry, seems to work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1704#issuecomment-523874957
https://github.com/psi4/psi4/issues/1704#issuecomment-523874957:455,Deployability,update,update,455,"What version are you using? I'm running on commit dd6b45b (updated May 7), and I can't reproduce this. Two geometry iterations finish successfully before SCF convergence fails. The SCF convergence failure appears to the fault of my old ""friend"", orbital guesses not correcting for changes in the overlap matrix when reading in orbitals for the initial guess... The initial guess from orbital read is terrible, and I see a large change in geometry for the update where the failure happened. The previous geometry, which also reads orbitals but from a much more similar geometry, seems to work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1704#issuecomment-523874957
https://github.com/psi4/psi4/issues/1704#issuecomment-524287571:411,Modifiability,rewrite,rewrite,411,"Glad to hear you were able to converge the geometry. I'll leave the ECP logging question to Lori, but I can speak to the orbital reading issue. The issue here is one of the two improvements to the orbital read/guess system that I need for my own research, so the permanent fix is high priority for me. However, the relevant code is intimately tied up with a part of the code that is currently unergoing a large rewrite, so I won't be able to start on the fixes until that's done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1704#issuecomment-524287571
https://github.com/psi4/psi4/issues/1704#issuecomment-524287571:72,Testability,log,logging,72,"Glad to hear you were able to converge the geometry. I'll leave the ECP logging question to Lori, but I can speak to the orbital reading issue. The issue here is one of the two improvements to the orbital read/guess system that I need for my own research, so the permanent fix is high priority for me. However, the relevant code is intimately tied up with a part of the code that is currently unergoing a large rewrite, so I won't be able to start on the fixes until that's done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1704#issuecomment-524287571
https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:194,Availability,avail,available,194,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814
https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:530,Deployability,install,install,530,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814
https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:677,Deployability,install,installing,677,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814
https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:710,Deployability,install,installer,710,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814
https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:786,Deployability,install,installs,786,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814
https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:988,Deployability,install,install,988,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814
https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:294,Energy Efficiency,adapt,adapted,294,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814
https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:294,Modifiability,adapt,adapted,294,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814
https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:823,Performance,optimiz,optimized,823,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814
https://github.com/psi4/psi4/pull/1706#issuecomment-524597709:113,Usability,clear,clear,113,"Could you talk about the purpose of this PR? Looking at the other code in `_core_wavefunction_to_file`, it isn't clear to me what data `wfn_data` has that would need to be pickled. Floats, booleans, tuples, arrays, ints, strings... None of those types should require pickling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524597709
https://github.com/psi4/psi4/pull/1706#issuecomment-524598951:125,Usability,clear,clear,125,"Let me clarify: Can you talk about what you did to cause this crash? I have had no luck trying to reproduce it, and it isn't clear to me from the code why that function would crash unless this `wavefunction` object is being modified by a third-party program in ways that violate the design of the `wavefunction` class. I see the file that caused the crash is `test_psi4_interface_minimal.py`. I've had no luck finding a file of that name in the Psi repository, which leads me to believe this is a case of third-party modification.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524598951
https://github.com/psi4/psi4/pull/1706#issuecomment-524599229:11,Availability,fault,fault,11,"Ah yes, my fault for not suggesting posting the input file when OP asked the form for PRs. I can believe that we could stick something funny on `wfn` (or the user could) like EFP object, stray array that `save` could balk at. But, yes, we would have hit the problem if it had been in test suite. the MP2 error in CI is new this week. i'll have to look into that. but it's unrelated to this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524599229
https://github.com/psi4/psi4/pull/1706#issuecomment-524599229:304,Availability,error,error,304,"Ah yes, my fault for not suggesting posting the input file when OP asked the form for PRs. I can believe that we could stick something funny on `wfn` (or the user could) like EFP object, stray array that `save` could balk at. But, yes, we would have hit the problem if it had been in test suite. the MP2 error in CI is new this week. i'll have to look into that. but it's unrelated to this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524599229
https://github.com/psi4/psi4/pull/1706#issuecomment-524599229:284,Testability,test,test,284,"Ah yes, my fault for not suggesting posting the input file when OP asked the form for PRs. I can believe that we could stick something funny on `wfn` (or the user could) like EFP object, stray array that `save` could balk at. But, yes, we would have hit the problem if it had been in test suite. the MP2 error in CI is new this week. i'll have to look into that. but it's unrelated to this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524599229
https://github.com/psi4/psi4/pull/1706#issuecomment-524623782:160,Integrability,interface,interfaced,160,"@JonathonMisiewicz sorry for in-complete PR, I have edited it to include a script that has crashed.; Yes, test_psi4_interface_minimal.py is part of custom code interfaced with Psi4 that I'm working on, but Psi4 was built without any mods to the source code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524623782
https://github.com/psi4/psi4/pull/1706#issuecomment-524631541:15,Deployability,update,update,15,"Thanks for the update!. I still can't reproduce this on either `6e67529` or the 1.3.2 release. What version are you using? I doubt the problem is a version issue, but we might as well check. Second, is the input file you posted actually the input file you ran and found a bug with? In the screenshot Lori posted, the problem is on line 56 of the Python file. The sample you gave doesn't even have that many lines.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524631541
https://github.com/psi4/psi4/pull/1706#issuecomment-524631541:86,Deployability,release,release,86,"Thanks for the update!. I still can't reproduce this on either `6e67529` or the 1.3.2 release. What version are you using? I doubt the problem is a version issue, but we might as well check. Second, is the input file you posted actually the input file you ran and found a bug with? In the screenshot Lori posted, the problem is on line 56 of the Python file. The sample you gave doesn't even have that many lines.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524631541
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:677,Availability,down,down,677,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:778,Availability,avail,available,778,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:7692,Availability,Mask,Mask,7692,"imary Basis <==. Basis Set: JUN-CC-PVDZ; Blend: JUN-CC-PVDZ; Number of shells: 6; Number of basis function: 10; Number of Cartesian functions: 10; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (JUN-CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-qzvpp-jkfit.gbs . Computing basis projection from 3-21G to JUN-CC-PVDZ. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 0 0 0 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 0.000 GiB; user supplied 0.366 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Memory [MiB]: 375; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (JUN-CC-PVDZ AUX); Blend: DEF2-QZVPP-JKFIT; Number of shells: 18; Number of basis function: 46; Number of Cartesian functions: 50; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 3.6142168109E-01.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -2.85515015411516 -2.85515e+00 1.19401e-03 ; @DF-UHF iter 1: -2.85520007568163 -4.99216e-05 7.84987e-05 DIIS; @DF-UHF iter 2: -2.85520042336024 -3.47679e-07 7.68575e-06 DIIS; @DF-UHF iter 3: -2.85520042767878 -4.31854e-09 3.18063e-07 DIIS; @DF-UHF iter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:1756,Energy Efficiency,charge,charge,1756,"ncies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AU",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:2239,Energy Efficiency,Charge,Charge,2239,"file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Den",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:2436,Energy Efficiency,Energy,Energy,2436,"--------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 375; Algorithm: Core; Integral Cache: NONE; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:3906,Energy Efficiency,Energy,Energy,3906,"rations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 4.0357381281E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:4386,Energy Efficiency,Energy,Energy,4386,"[MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 4.0357381281E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:4906,Energy Efficiency,Energy,Energy,4906,"l Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:4969,Energy Efficiency,Energy,Energy,4969,"9461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- -----",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:5011,Energy Efficiency,Energy,Energy,5011,"UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:5054,Energy Efficiency,Energy,Energy,5054,"9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.48169297000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:5089,Energy Efficiency,Energy,Energy,5089,"568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:5860,Energy Efficiency,charge,charge,5860,"; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is MEM_DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: JUN-CC-PVDZ; Blend: JUN-CC-PVDZ; Number of shells: 6; Number of basis function: 10; Number of Cartesian functions: 10; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:6343,Energy Efficiency,Charge,Charge,6343," Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is MEM_DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: JUN-CC-PVDZ; Blend: JUN-CC-PVDZ; Number of shells: 6; Number of basis function: 10; Number of Cartesian functions: 10; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (JUN-CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-qzvpp-jkfit.gbs . Computing basis projection from 3-21G to JUN-CC-PVDZ. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 0 0 0 0; -------------------------------------------------------; Total 10 10 1 1 1 0; ---------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:6544,Energy Efficiency,Energy,Energy,6544,"----------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is MEM_DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: JUN-CC-PVDZ; Blend: JUN-CC-PVDZ; Number of shells: 6; Number of basis function: 10; Number of Cartesian functions: 10; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (JUN-CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-qzvpp-jkfit.gbs . Computing basis projection from 3-21G to JUN-CC-PVDZ. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 0 0 0 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 0.000 GiB; user supplied 0.366 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:8159,Energy Efficiency,Energy,Energy,8159,"Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 0 0 0 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 0.000 GiB; user supplied 0.366 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Memory [MiB]: 375; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (JUN-CC-PVDZ AUX); Blend: DEF2-QZVPP-JKFIT; Number of shells: 18; Number of basis function: 46; Number of Cartesian functions: 50; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 3.6142168109E-01.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -2.85515015411516 -2.85515e+00 1.19401e-03 ; @DF-UHF iter 1: -2.85520007568163 -4.99216e-05 7.84987e-05 DIIS; @DF-UHF iter 2: -2.85520042336024 -3.47679e-07 7.68575e-06 DIIS; @DF-UHF iter 3: -2.85520042767878 -4.31854e-09 3.18063e-07 DIIS; @DF-UHF iter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:8638,Energy Efficiency,Energy,Energy,8638,"375; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (JUN-CC-PVDZ AUX); Blend: DEF2-QZVPP-JKFIT; Number of shells: 18; Number of basis function: 46; Number of Cartesian functions: 50; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 3.6142168109E-01.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -2.85515015411516 -2.85515e+00 1.19401e-03 ; @DF-UHF iter 1: -2.85520007568163 -4.99216e-05 7.84987e-05 DIIS; @DF-UHF iter 2: -2.85520042336024 -3.47679e-07 7.68575e-06 DIIS; @DF-UHF iter 3: -2.85520042767878 -4.31854e-09 3.18063e-07 DIIS; @DF-UHF iter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.85520042768698. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8820241745672806; Two-Electron Energy = 1.0268237468803001; Total Energy = -2.8552004276869805. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:9314,Energy Efficiency,Energy,Energy,9314," @DF-UHF iter 2: -2.85520042336024 -3.47679e-07 7.68575e-06 DIIS; @DF-UHF iter 3: -2.85520042767878 -4.31854e-09 3.18063e-07 DIIS; @DF-UHF iter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.85520042768698. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8820241745672806; Two-Electron Energy = 1.0268237468803001; Total Energy = -2.8552004276869805. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:9377,Energy Efficiency,Energy,Energy,9377,"IIS; @DF-UHF iter 3: -2.85520042767878 -4.31854e-09 3.18063e-07 DIIS; @DF-UHF iter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.85520042768698. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8820241745672806; Two-Electron Energy = 1.0268237468803001; Total Energy = -2.8552004276869805. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pick",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:9419,Energy Efficiency,Energy,Energy,9419,"78 -4.31854e-09 3.18063e-07 DIIS; @DF-UHF iter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.85520042768698. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8820241745672806; Two-Electron Energy = 1.0268237468803001; Total Energy = -2.8552004276869805. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:9462,Energy Efficiency,Energy,Energy,9462,"ter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.85520042768698. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8820241745672806; Two-Electron Energy = 1.0268237468803001; Total Energy = -2.8552004276869805. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (most recent call last):; File ""minimal.py""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:9497,Energy Efficiency,Energy,Energy,9497,".59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.85520042768698. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8820241745672806; Two-Electron Energy = 1.0268237468803001; Total Energy = -2.8552004276869805. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (most recent call last):; File ""minimal.py"", line 34, in <module>; scf_e_A, wfnA =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:10497,Energy Efficiency,energy,energy,10497,"ations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (most recent call last):; File ""minimal.py"", line 34, in <module>; scf_e_A, wfnA = psi4.energy(""SCF"", return_wfn=True, molecule=monomerA); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 2058, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 1423, in scf_helper; scf_wfn.to_file(write_filename); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/p4util/python_helpers.py"", line 303, in _core_wavefunction_to_file; np.save(filename, wfn_data); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py"", line 538, in save; pickle_kwargs=pickle_kwargs); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/format.py"", line 637, in write_array; raise ValueError(""Object arrays cannot be saved when ""; ValueError: Object arrays canno",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:10631,Energy Efficiency,energy,energy,10631,": 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (most recent call last):; File ""minimal.py"", line 34, in <module>; scf_e_A, wfnA = psi4.energy(""SCF"", return_wfn=True, molecule=monomerA); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 2058, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 1423, in scf_helper; scf_wfn.to_file(write_filename); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/p4util/python_helpers.py"", line 303, in _core_wavefunction_to_file; np.save(filename, wfn_data); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py"", line 538, in save; pickle_kwargs=pickle_kwargs); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/format.py"", line 637, in write_array; raise ValueError(""Object arrays cannot be saved when ""; ValueError: Object arrays cannot be saved when allow_pickle=False. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:10657,Energy Efficiency,energy,energy,10657,": 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (most recent call last):; File ""minimal.py"", line 34, in <module>; scf_e_A, wfnA = psi4.energy(""SCF"", return_wfn=True, molecule=monomerA); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 2058, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 1423, in scf_helper; scf_wfn.to_file(write_filename); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/p4util/python_helpers.py"", line 303, in _core_wavefunction_to_file; np.save(filename, wfn_data); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py"", line 538, in save; pickle_kwargs=pickle_kwargs); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/format.py"", line 637, in write_array; raise ValueError(""Object arrays cannot be saved when ""; ValueError: Object arrays cannot be saved when allow_pickle=False. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:751,Integrability,depend,dependencies,751,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:1179,Performance,Load,Loading,1179,".lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:2722,Performance,Load,Loading,2722,". Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:3433,Performance,Cache,Cache,3433,"upation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 4.0357381281E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:5355,Performance,Load,Loading,5355,"e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplic",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:6843,Performance,Load,Loading,6843,"gstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is MEM_DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: JUN-CC-PVDZ; Blend: JUN-CC-PVDZ; Number of shells: 6; Number of basis function: 10; Number of Cartesian functions: 10; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (JUN-CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-qzvpp-jkfit.gbs . Computing basis projection from 3-21G to JUN-CC-PVDZ. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 0 0 0 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 0.000 GiB; user supplied 0.366 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Memory [MiB]: 375; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (JUN-CC-PVDZ AUX); Blend: DEF2-QZVPP-JKFIT; Number of shells: 18; Num",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:281,Testability,test,tests,281,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:685,Testability,test,test,685,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:274,Usability,simpl,simple,274,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282
https://github.com/psi4/psi4/issues/1708#issuecomment-525852062:223,Deployability,install,installed,223,"Thanks for the report! We'll change it to `python3` since Psi is 3.6+ anyways. (Or feel free to submit a PR.). Longer term, we've gotten vexed that `ctest` requires the source and build directories and so one can't test an installed Psi4. Because of this, we're moving to `pytest` (currently, the other half of the test suite callable by `psi4 --test`) and will eventually drop that `ctest` machinery. I'll look around for other `bin/python` or `bin/env python` that might be vulnerable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1708#issuecomment-525852062
https://github.com/psi4/psi4/issues/1708#issuecomment-525852062:215,Testability,test,test,215,"Thanks for the report! We'll change it to `python3` since Psi is 3.6+ anyways. (Or feel free to submit a PR.). Longer term, we've gotten vexed that `ctest` requires the source and build directories and so one can't test an installed Psi4. Because of this, we're moving to `pytest` (currently, the other half of the test suite callable by `psi4 --test`) and will eventually drop that `ctest` machinery. I'll look around for other `bin/python` or `bin/env python` that might be vulnerable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1708#issuecomment-525852062
https://github.com/psi4/psi4/issues/1708#issuecomment-525852062:315,Testability,test,test,315,"Thanks for the report! We'll change it to `python3` since Psi is 3.6+ anyways. (Or feel free to submit a PR.). Longer term, we've gotten vexed that `ctest` requires the source and build directories and so one can't test an installed Psi4. Because of this, we're moving to `pytest` (currently, the other half of the test suite callable by `psi4 --test`) and will eventually drop that `ctest` machinery. I'll look around for other `bin/python` or `bin/env python` that might be vulnerable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1708#issuecomment-525852062
https://github.com/psi4/psi4/issues/1708#issuecomment-525852062:346,Testability,test,test,346,"Thanks for the report! We'll change it to `python3` since Psi is 3.6+ anyways. (Or feel free to submit a PR.). Longer term, we've gotten vexed that `ctest` requires the source and build directories and so one can't test an installed Psi4. Because of this, we're moving to `pytest` (currently, the other half of the test suite callable by `psi4 --test`) and will eventually drop that `ctest` machinery. I'll look around for other `bin/python` or `bin/env python` that might be vulnerable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1708#issuecomment-525852062
https://github.com/psi4/psi4/pull/1709#issuecomment-526614553:78,Deployability,install,installation-on-windows-running-from-command-line,78,"the consensus from [SO](https://stackoverflow.com/questions/34212036/python-3-installation-on-windows-running-from-command-line) and azure is that Windows has no `python3` cmd. if from #1708, redhat has no `python`, then we're in a pickle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526614553
https://github.com/psi4/psi4/pull/1709#issuecomment-526620503:157,Integrability,inject,inject,157,"A couple of options: 1) use [find_executable()]( https://docs.python.org/3.5/distutils/apiref.html#module-distutils.spawn) to figure it out or 2) have CMake inject the python executable path that it detected, using something like [configure_file](https://cmake.org/cmake/help/latest/command/configure_file.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503
https://github.com/psi4/psi4/pull/1709#issuecomment-526620503:199,Safety,detect,detected,199,"A couple of options: 1) use [find_executable()]( https://docs.python.org/3.5/distutils/apiref.html#module-distutils.spawn) to figure it out or 2) have CMake inject the python executable path that it detected, using something like [configure_file](https://cmake.org/cmake/help/latest/command/configure_file.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503
https://github.com/psi4/psi4/pull/1709#issuecomment-526620503:157,Security,inject,inject,157,"A couple of options: 1) use [find_executable()]( https://docs.python.org/3.5/distutils/apiref.html#module-distutils.spawn) to figure it out or 2) have CMake inject the python executable path that it detected, using something like [configure_file](https://cmake.org/cmake/help/latest/command/configure_file.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503
https://github.com/psi4/psi4/pull/1709#issuecomment-526690296:69,Testability,test,testing,69,"The difficulty with those normally good solutions, @andysim, is that testing writes its output to `objdir/` but all the testing files and `runtest.py` itself stay in source. My last commit was stupid -- ignore that one. These ""special"" `ctest` dirs `python/`, `json/`, `psi4numpy/` that `python input.py` (instead of `psi4 input.dat` like the others) were constructed when there was no `pytest`. Since we want to kill off `ctest` anyways, any objections to just moving these over to pytest now? CI covers pytest tests already. Only loss in coverage will be among users/devs who don't know to run `pytest` as well as `ctest`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526690296
https://github.com/psi4/psi4/pull/1709#issuecomment-526690296:120,Testability,test,testing,120,"The difficulty with those normally good solutions, @andysim, is that testing writes its output to `objdir/` but all the testing files and `runtest.py` itself stay in source. My last commit was stupid -- ignore that one. These ""special"" `ctest` dirs `python/`, `json/`, `psi4numpy/` that `python input.py` (instead of `psi4 input.dat` like the others) were constructed when there was no `pytest`. Since we want to kill off `ctest` anyways, any objections to just moving these over to pytest now? CI covers pytest tests already. Only loss in coverage will be among users/devs who don't know to run `pytest` as well as `ctest`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526690296
https://github.com/psi4/psi4/pull/1709#issuecomment-526690296:512,Testability,test,tests,512,"The difficulty with those normally good solutions, @andysim, is that testing writes its output to `objdir/` but all the testing files and `runtest.py` itself stay in source. My last commit was stupid -- ignore that one. These ""special"" `ctest` dirs `python/`, `json/`, `psi4numpy/` that `python input.py` (instead of `psi4 input.dat` like the others) were constructed when there was no `pytest`. Since we want to kill off `ctest` anyways, any objections to just moving these over to pytest now? CI covers pytest tests already. Only loss in coverage will be among users/devs who don't know to run `pytest` as well as `ctest`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526690296
https://github.com/psi4/psi4/pull/1709#issuecomment-758434711:150,Deployability,patch,patch,150,"This PR is a good idea, but we just use python in so many different ways that it's risky w/o having OSes to test it on. OS packagers may just need to patch in python3. Leaving PR open for guidance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711
https://github.com/psi4/psi4/pull/1709#issuecomment-758434711:83,Safety,risk,risky,83,"This PR is a good idea, but we just use python in so many different ways that it's risky w/o having OSes to test it on. OS packagers may just need to patch in python3. Leaving PR open for guidance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711
https://github.com/psi4/psi4/pull/1709#issuecomment-758434711:108,Testability,test,test,108,"This PR is a good idea, but we just use python in so many different ways that it's risky w/o having OSes to test it on. OS packagers may just need to patch in python3. Leaving PR open for guidance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711
https://github.com/psi4/psi4/pull/1709#issuecomment-758434711:188,Usability,guid,guidance,188,"This PR is a good idea, but we just use python in so many different ways that it's risky w/o having OSes to test it on. OS packagers may just need to patch in python3. Leaving PR open for guidance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711
https://github.com/psi4/psi4/issues/1710#issuecomment-526599417:200,Integrability,interface,interface,200,"Yes! I just spoke to Stefan Grimme about it this week. On Fri, Aug 30, 2019, 5:25 AM Chrinide <notifications@github.com> wrote:. > Dear Psi4 Developers,; >; > Is there any plan to add the newly DFTD4 interface in Psi4; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1710?email_source=notifications&email_token=AAXVA5QI52CHLFQNLL3YE5LQHDRPZA5CNFSM4ISLIJ2KYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HIM3Y5A>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5VQ3EV6BB4PVR3LQ43QHDRPZANCNFSM4ISLIJ2A>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1710#issuecomment-526599417
https://github.com/psi4/psi4/issues/1711#issuecomment-528355257:132,Availability,avail,available,132,"SAD is annoying :-(. Maybe it is best to keep printing zeros for SAD (somehow) and additional a note saying that no occupations are available yet. For difficult open-shell systems, where this table becomes interesting, people might switch the guess anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1711#issuecomment-528355257
https://github.com/psi4/psi4/pull/1713#issuecomment-528746372:62,Availability,down,down,62,"I wonder if it would be better if we moved the pre-iterations down so that it generated the one-electron quantities in the ""pre-iterations"" and then the the occupations. . We would have a `==> JK Setup <==` area where the JK builds would be moved down to after the occupation printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-528746372
https://github.com/psi4/psi4/pull/1713#issuecomment-528746372:247,Availability,down,down,247,"I wonder if it would be better if we moved the pre-iterations down so that it generated the one-electron quantities in the ""pre-iterations"" and then the the occupations. . We would have a `==> JK Setup <==` area where the JK builds would be moved down to after the occupation printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-528746372
https://github.com/psi4/psi4/pull/1713#issuecomment-528858486:6,Deployability,update,update,6,Small update on this. Also moved `==> Pre-Iterations <==` to before the SCF guess:. ```; Minimum eigenvalue in the overlap matrix is 3.2955701764E-02.; Using Symmetric Orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. Note: current guess does not provide; initial orbital occupations. -------------------------; Irrep Nso Nmo ; -------------------------; A 48 48 ; -------------------------; Total 48 48; -------------------------. ==> Iterations <==; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-528858486
https://github.com/psi4/psi4/pull/1713#issuecomment-533802390:0,Deployability,Update,Updated,0,"Updated according to suggestions. ; ```; => Pre-Iterations <==. Minimum eigenvalue in the overlap matrix is 3.9724095377E-02.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation info). -------------------------; Irrep Nso Nmo; -------------------------; A' 18 18; A"" 6 6; -------------------------; Total 24 24; -------------------------. ==> 2e-Integral Setup <==. DFHelper Memory: AOs need 0.001 GiB; user supplied 0.321 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-533802390
https://github.com/psi4/psi4/pull/1713#issuecomment-594204058:0,Deployability,Update,Updated,0,"Updated. Had some rebase issues to solve. A vimdiff of the old and new output below. ---; vimdiff of the output between 1.4a2.dev215 (left) and this PR (right); <img width=""1606"" alt=""Screenshot 2020-03-03 at 23 18 02"" src=""https://user-images.githubusercontent.com/1648640/75825522-d69fb800-5da5-11ea-8c2d-8db2b8a723d5.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-594204058
https://github.com/psi4/psi4/pull/1713#issuecomment-594742595:15,Deployability,update,update,15,Thanks for the update! Looks good. @psi4/admins Can we get one more review here?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-594742595
https://github.com/psi4/psi4/issues/1716#issuecomment-530374708:30,Availability,down,down,30,But the energy is still going down all the time!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-530374708
https://github.com/psi4/psi4/issues/1716#issuecomment-530374708:8,Energy Efficiency,energy,energy,8,But the energy is still going down all the time!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-530374708
https://github.com/psi4/psi4/issues/1716#issuecomment-530400897:65,Integrability,depend,depending,65,"The ROHF Hessian isn't very stable, could be that CG isn't valid depending on the condition value of the Hessian.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-530400897
https://github.com/psi4/psi4/issues/1716#issuecomment-546623859:1134,Energy Efficiency,energy,energy,1134,"Carrying forward another case that SOSCF can't get. It can converge to a saddle point on the orbital surface, but not to a minimum. This is yet another case that originates from open-shell SAPT on the forums. We'll need to investigate whether the numerical problem is simply ill-conditioned, or if this means we need to improve open-shell SOSCF. ```; molecule {; 0 3; C 2.146191145 -2.250869610 -0.229432545; H 2.796153988 -3.111981487 -0.362347932; H 1.465215175 -2.173397551 -1.073297820; H 1.533174247 -2.389665597 0.657575818; C 2.900923223 -0.952856733 -0.096839038; O 2.324207776 0.122438123 0.059749704; N 4.251556346 -1.050359417 -0.161457007; H 4.652507974 -1.960893396 -0.290972105; C 5.119798458 0.101611043 -0.052013925; H 4.483304328 0.969911486 0.082770682; H 5.785387965 0.010155845 0.804078956; H 5.714264181 0.231031532 -0.954273112; --; 0 1; O -0.392018453 -0.384718737 0.076071325; H -0.911460851 0.413812040 0.177648774; H 0.524903820 -0.068484694 0.090511364; }. set {; reference uhf; basis jun-cc-pVDZ; maxiter 200; stability_analysis follow; soscf true; soscf_print true; soscf_max_iter 50; soscf_conv 1e-4; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-546623859
https://github.com/psi4/psi4/issues/1716#issuecomment-546623859:268,Usability,simpl,simply,268,"Carrying forward another case that SOSCF can't get. It can converge to a saddle point on the orbital surface, but not to a minimum. This is yet another case that originates from open-shell SAPT on the forums. We'll need to investigate whether the numerical problem is simply ill-conditioned, or if this means we need to improve open-shell SOSCF. ```; molecule {; 0 3; C 2.146191145 -2.250869610 -0.229432545; H 2.796153988 -3.111981487 -0.362347932; H 1.465215175 -2.173397551 -1.073297820; H 1.533174247 -2.389665597 0.657575818; C 2.900923223 -0.952856733 -0.096839038; O 2.324207776 0.122438123 0.059749704; N 4.251556346 -1.050359417 -0.161457007; H 4.652507974 -1.960893396 -0.290972105; C 5.119798458 0.101611043 -0.052013925; H 4.483304328 0.969911486 0.082770682; H 5.785387965 0.010155845 0.804078956; H 5.714264181 0.231031532 -0.954273112; --; 0 1; O -0.392018453 -0.384718737 0.076071325; H -0.911460851 0.413812040 0.177648774; H 0.524903820 -0.068484694 0.090511364; }. set {; reference uhf; basis jun-cc-pVDZ; maxiter 200; stability_analysis follow; soscf true; soscf_print true; soscf_max_iter 50; soscf_conv 1e-4; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-546623859
https://github.com/psi4/psi4/pull/1717#issuecomment-531880609:51,Availability,error,error,51,I think pull this in after 3rd review -- the Azure error has nothing to do with the PR,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1717#issuecomment-531880609
https://github.com/psi4/psi4/pull/1718#issuecomment-531546088:137,Deployability,release,release,137,"@dgasmith, so this gets passed the mm_malloc header the other PRs were having. Unfortunately, by building off g2g master rather than Dec release, it hits all the ordering changes you made. The current state compiles and runs but gives nonsensical results for DFT. You perhaps had other plans for psi's transition on this matter. Basically, is it better to patch the ifdef rerouting onto 1.3.1 and keep gg_collocation stable, or is now as good a time as any to update the psi interface to g2g?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1718#issuecomment-531546088
https://github.com/psi4/psi4/pull/1718#issuecomment-531546088:356,Deployability,patch,patch,356,"@dgasmith, so this gets passed the mm_malloc header the other PRs were having. Unfortunately, by building off g2g master rather than Dec release, it hits all the ordering changes you made. The current state compiles and runs but gives nonsensical results for DFT. You perhaps had other plans for psi's transition on this matter. Basically, is it better to patch the ifdef rerouting onto 1.3.1 and keep gg_collocation stable, or is now as good a time as any to update the psi interface to g2g?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1718#issuecomment-531546088
https://github.com/psi4/psi4/pull/1718#issuecomment-531546088:460,Deployability,update,update,460,"@dgasmith, so this gets passed the mm_malloc header the other PRs were having. Unfortunately, by building off g2g master rather than Dec release, it hits all the ordering changes you made. The current state compiles and runs but gives nonsensical results for DFT. You perhaps had other plans for psi's transition on this matter. Basically, is it better to patch the ifdef rerouting onto 1.3.1 and keep gg_collocation stable, or is now as good a time as any to update the psi interface to g2g?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1718#issuecomment-531546088
https://github.com/psi4/psi4/pull/1718#issuecomment-531546088:475,Integrability,interface,interface,475,"@dgasmith, so this gets passed the mm_malloc header the other PRs were having. Unfortunately, by building off g2g master rather than Dec release, it hits all the ordering changes you made. The current state compiles and runs but gives nonsensical results for DFT. You perhaps had other plans for psi's transition on this matter. Basically, is it better to patch the ifdef rerouting onto 1.3.1 and keep gg_collocation stable, or is now as good a time as any to update the psi interface to g2g?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1718#issuecomment-531546088
https://github.com/psi4/psi4/pull/1718#issuecomment-531592608:62,Availability,error,error,62,"ok, folks, this now gives correct answers and fixes the azure error. * @dgasmith, what's the prospect of a g2g 2.0 release; * all those who consider pointers their allies should check that my formation of `xyz` is equivalent to https://github.com/dgasmith/gau2grid/compare/v1.3.1...master#diff-f8f6cc08ea43fcbc6d2e07d960e118c2L69-R94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1718#issuecomment-531592608
https://github.com/psi4/psi4/pull/1718#issuecomment-531592608:115,Deployability,release,release,115,"ok, folks, this now gives correct answers and fixes the azure error. * @dgasmith, what's the prospect of a g2g 2.0 release; * all those who consider pointers their allies should check that my formation of `xyz` is equivalent to https://github.com/dgasmith/gau2grid/compare/v1.3.1...master#diff-f8f6cc08ea43fcbc6d2e07d960e118c2L69-R94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1718#issuecomment-531592608
https://github.com/psi4/psi4/pull/1719#issuecomment-532653590:121,Availability,error,error,121,"The main things worth looking at:; * psi4/driver/driver.py, psi4/src/core.cc; 	Do we have any recommended changes to the error messages? Any error messages I should add but didn't?; * Are there any files I didn't edit that I should have, just based on the fact that I am renaming an entire module?; * I also removed some options which the code stopped using. (The MO_RELAX and IGNORE_TAU options, both of which were marked to be used as debug tools.) Is there anything I should do for that other than remove mention of them in psi4/src/read_options.cc and anywhere they appeared in the DCT code?. Beyond that, the changes should be search and replace. Particularly zealous reviewers can double-check that the only instances of `dcft` left are those that refer to specific citations or say that `dcft` was the old name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-532653590
https://github.com/psi4/psi4/pull/1719#issuecomment-532653590:141,Availability,error,error,141,"The main things worth looking at:; * psi4/driver/driver.py, psi4/src/core.cc; 	Do we have any recommended changes to the error messages? Any error messages I should add but didn't?; * Are there any files I didn't edit that I should have, just based on the fact that I am renaming an entire module?; * I also removed some options which the code stopped using. (The MO_RELAX and IGNORE_TAU options, both of which were marked to be used as debug tools.) Is there anything I should do for that other than remove mention of them in psi4/src/read_options.cc and anywhere they appeared in the DCT code?. Beyond that, the changes should be search and replace. Particularly zealous reviewers can double-check that the only instances of `dcft` left are those that refer to specific citations or say that `dcft` was the old name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-532653590
https://github.com/psi4/psi4/pull/1719#issuecomment-532653590:127,Integrability,message,messages,127,"The main things worth looking at:; * psi4/driver/driver.py, psi4/src/core.cc; 	Do we have any recommended changes to the error messages? Any error messages I should add but didn't?; * Are there any files I didn't edit that I should have, just based on the fact that I am renaming an entire module?; * I also removed some options which the code stopped using. (The MO_RELAX and IGNORE_TAU options, both of which were marked to be used as debug tools.) Is there anything I should do for that other than remove mention of them in psi4/src/read_options.cc and anywhere they appeared in the DCT code?. Beyond that, the changes should be search and replace. Particularly zealous reviewers can double-check that the only instances of `dcft` left are those that refer to specific citations or say that `dcft` was the old name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-532653590
https://github.com/psi4/psi4/pull/1719#issuecomment-532653590:147,Integrability,message,messages,147,"The main things worth looking at:; * psi4/driver/driver.py, psi4/src/core.cc; 	Do we have any recommended changes to the error messages? Any error messages I should add but didn't?; * Are there any files I didn't edit that I should have, just based on the fact that I am renaming an entire module?; * I also removed some options which the code stopped using. (The MO_RELAX and IGNORE_TAU options, both of which were marked to be used as debug tools.) Is there anything I should do for that other than remove mention of them in psi4/src/read_options.cc and anywhere they appeared in the DCT code?. Beyond that, the changes should be search and replace. Particularly zealous reviewers can double-check that the only instances of `dcft` left are those that refer to specific citations or say that `dcft` was the old name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-532653590
https://github.com/psi4/psi4/pull/1719#issuecomment-533099356:79,Availability,error,error,79,"That's a great idea. Do you have an example of where pytest catches a _C-side_ error? The error handling in renamed options needs to be C-side, and I don't know how to refer to C's PsiException Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-533099356
https://github.com/psi4/psi4/pull/1719#issuecomment-533099356:90,Availability,error,error,90,"That's a great idea. Do you have an example of where pytest catches a _C-side_ error? The error handling in renamed options needs to be C-side, and I don't know how to refer to C's PsiException Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-533099356
https://github.com/psi4/psi4/pull/1719#issuecomment-534638677:62,Availability,error,errors,62,"Sorry for the really slow response. No, haven't caught c-side errors before. You can see if catching general `Exception` works and if can scan traceback for text. Bu don't expend too much effort. It's the placement of driver logic that I'm more worried about breaking. Also, if you rebase, Azure should heal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-534638677
https://github.com/psi4/psi4/pull/1719#issuecomment-534638677:225,Testability,log,logic,225,"Sorry for the really slow response. No, haven't caught c-side errors before. You can see if catching general `Exception` works and if can scan traceback for text. Bu don't expend too much effort. It's the placement of driver logic that I'm more worried about breaking. Also, if you rebase, Azure should heal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-534638677
https://github.com/psi4/psi4/pull/1719#issuecomment-534816591:149,Availability,error,error,149,"All comments addressed. Unfortunately, I need to filter out renamed methods before any checks of the derivative type, since that raises a validation error if the method is invalid. Hence I need to catch the error in multiple branches of `gradient`. Isn't recursive driver wonderful?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-534816591
https://github.com/psi4/psi4/pull/1719#issuecomment-534816591:207,Availability,error,error,207,"All comments addressed. Unfortunately, I need to filter out renamed methods before any checks of the derivative type, since that raises a validation error if the method is invalid. Hence I need to catch the error in multiple branches of `gradient`. Isn't recursive driver wonderful?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-534816591
https://github.com/psi4/psi4/pull/1719#issuecomment-534816591:138,Security,validat,validation,138,"All comments addressed. Unfortunately, I need to filter out renamed methods before any checks of the derivative type, since that raises a validation error if the method is invalid. Hence I need to catch the error in multiple branches of `gradient`. Isn't recursive driver wonderful?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-534816591
https://github.com/psi4/psi4/pull/1721#issuecomment-534313474:603,Availability,down,down,603,"@jturney @andysim @fevangelista @zachglick ; FYI, both libint1 and libint2 can now be built internally from this PR. * libint1 pulls a branch where the `Libint_t` has already become `Libint1_t`. Because the compiler looks everywhere in includes directories for headers, easiest to still build this branch in a conda env _without_ `libint` in `conda list`. (If you have `psi4-dev` installed, `conda remove libint --force` is what you need.); * libint2 pulls a tarball, then configures with spherical `gaussian` (looks like the quotes were the problem last week).; * if using `psi4-dev`, may want to dial down `-DMAX_AM_ERI` to 6 or so. If you've already built the specialized libint1 and/or libint2 externally, the below are what you want to tell psi4 to find them (it's the location of the Config.cmake file).; ```; -DLibint2_DIR=/programming/libint-2.6.0/installdir/lib/cmake/libint2 ; -DLibint_DIR=/programming/libint1/installdir/share/cmake/Libint; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474
https://github.com/psi4/psi4/pull/1721#issuecomment-534313474:380,Deployability,install,installed,380,"@jturney @andysim @fevangelista @zachglick ; FYI, both libint1 and libint2 can now be built internally from this PR. * libint1 pulls a branch where the `Libint_t` has already become `Libint1_t`. Because the compiler looks everywhere in includes directories for headers, easiest to still build this branch in a conda env _without_ `libint` in `conda list`. (If you have `psi4-dev` installed, `conda remove libint --force` is what you need.); * libint2 pulls a tarball, then configures with spherical `gaussian` (looks like the quotes were the problem last week).; * if using `psi4-dev`, may want to dial down `-DMAX_AM_ERI` to 6 or so. If you've already built the specialized libint1 and/or libint2 externally, the below are what you want to tell psi4 to find them (it's the location of the Config.cmake file).; ```; -DLibint2_DIR=/programming/libint-2.6.0/installdir/lib/cmake/libint2 ; -DLibint_DIR=/programming/libint1/installdir/share/cmake/Libint; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474
https://github.com/psi4/psi4/pull/1721#issuecomment-534313474:856,Deployability,install,installdir,856,"@jturney @andysim @fevangelista @zachglick ; FYI, both libint1 and libint2 can now be built internally from this PR. * libint1 pulls a branch where the `Libint_t` has already become `Libint1_t`. Because the compiler looks everywhere in includes directories for headers, easiest to still build this branch in a conda env _without_ `libint` in `conda list`. (If you have `psi4-dev` installed, `conda remove libint --force` is what you need.); * libint2 pulls a tarball, then configures with spherical `gaussian` (looks like the quotes were the problem last week).; * if using `psi4-dev`, may want to dial down `-DMAX_AM_ERI` to 6 or so. If you've already built the specialized libint1 and/or libint2 externally, the below are what you want to tell psi4 to find them (it's the location of the Config.cmake file).; ```; -DLibint2_DIR=/programming/libint-2.6.0/installdir/lib/cmake/libint2 ; -DLibint_DIR=/programming/libint1/installdir/share/cmake/Libint; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474
https://github.com/psi4/psi4/pull/1721#issuecomment-534313474:921,Deployability,install,installdir,921,"@jturney @andysim @fevangelista @zachglick ; FYI, both libint1 and libint2 can now be built internally from this PR. * libint1 pulls a branch where the `Libint_t` has already become `Libint1_t`. Because the compiler looks everywhere in includes directories for headers, easiest to still build this branch in a conda env _without_ `libint` in `conda list`. (If you have `psi4-dev` installed, `conda remove libint --force` is what you need.); * libint2 pulls a tarball, then configures with spherical `gaussian` (looks like the quotes were the problem last week).; * if using `psi4-dev`, may want to dial down `-DMAX_AM_ERI` to 6 or so. If you've already built the specialized libint1 and/or libint2 externally, the below are what you want to tell psi4 to find them (it's the location of the Config.cmake file).; ```; -DLibint2_DIR=/programming/libint-2.6.0/installdir/lib/cmake/libint2 ; -DLibint_DIR=/programming/libint1/installdir/share/cmake/Libint; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474
https://github.com/psi4/psi4/pull/1721#issuecomment-534313474:473,Modifiability,config,configures,473,"@jturney @andysim @fevangelista @zachglick ; FYI, both libint1 and libint2 can now be built internally from this PR. * libint1 pulls a branch where the `Libint_t` has already become `Libint1_t`. Because the compiler looks everywhere in includes directories for headers, easiest to still build this branch in a conda env _without_ `libint` in `conda list`. (If you have `psi4-dev` installed, `conda remove libint --force` is what you need.); * libint2 pulls a tarball, then configures with spherical `gaussian` (looks like the quotes were the problem last week).; * if using `psi4-dev`, may want to dial down `-DMAX_AM_ERI` to 6 or so. If you've already built the specialized libint1 and/or libint2 externally, the below are what you want to tell psi4 to find them (it's the location of the Config.cmake file).; ```; -DLibint2_DIR=/programming/libint-2.6.0/installdir/lib/cmake/libint2 ; -DLibint_DIR=/programming/libint1/installdir/share/cmake/Libint; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474
https://github.com/psi4/psi4/pull/1721#issuecomment-534313474:790,Modifiability,Config,Config,790,"@jturney @andysim @fevangelista @zachglick ; FYI, both libint1 and libint2 can now be built internally from this PR. * libint1 pulls a branch where the `Libint_t` has already become `Libint1_t`. Because the compiler looks everywhere in includes directories for headers, easiest to still build this branch in a conda env _without_ `libint` in `conda list`. (If you have `psi4-dev` installed, `conda remove libint --force` is what you need.); * libint2 pulls a tarball, then configures with spherical `gaussian` (looks like the quotes were the problem last week).; * if using `psi4-dev`, may want to dial down `-DMAX_AM_ERI` to 6 or so. If you've already built the specialized libint1 and/or libint2 externally, the below are what you want to tell psi4 to find them (it's the location of the Config.cmake file).; ```; -DLibint2_DIR=/programming/libint-2.6.0/installdir/lib/cmake/libint2 ; -DLibint_DIR=/programming/libint1/installdir/share/cmake/Libint; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474
https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:1620,Availability,error,errors,1620,"im/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_t`. Also I strongly recommend adding the `-O0` flag to the compiler flags, because our CMake debug build doesn't do this (we should change that) and the code takes a _very_ long time to compile with optimization. A lot of this will be streamlined in the not so distant future, and much of the complication will be eased when we nuke libint1. Until then, the above command should be sufficient to get you up and running with a development build. Please try it out - I'd love to have some help with getting the derivatives working :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417
https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:815,Deployability,install,install,815,"Ok, I just pushed a (still slightly broken) version that changes the libint2 interface very significantly, and almost has gradients working. The problematic derivatives are those where the angular momentum is greater in the bra than the ket, so perhaps that's a limitation that I need to resolve by ensuring loops satisfy ang mom constraints. Here's how I built the code in case anybody wants to replicate... 1. Clone the libint2 repo and checkout the v2.6 branch. 2. `LIBS=-L/u/andysim/anaconda3/lib CXXFLAGS=""-std=c++14 -I/u/andysim/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417
https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:1816,Deployability,install,installdir,1816,"im/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_t`. Also I strongly recommend adding the `-O0` flag to the compiler flags, because our CMake debug build doesn't do this (we should change that) and the code takes a _very_ long time to compile with optimization. A lot of this will be streamlined in the not so distant future, and much of the complication will be eased when we nuke libint1. Until then, the above command should be sufficient to get you up and running with a development build. Please try it out - I'd love to have some help with getting the derivatives working :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417
https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:77,Integrability,interface,interface,77,"Ok, I just pushed a (still slightly broken) version that changes the libint2 interface very significantly, and almost has gradients working. The problematic derivatives are those where the angular momentum is greater in the bra than the ket, so perhaps that's a limitation that I need to resolve by ensuring loops satisfy ang mom constraints. Here's how I built the code in case anybody wants to replicate... 1. Clone the libint2 repo and checkout the v2.6 branch. 2. `LIBS=-L/u/andysim/anaconda3/lib CXXFLAGS=""-std=c++14 -I/u/andysim/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417
https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:557,Modifiability,config,configure,557,"Ok, I just pushed a (still slightly broken) version that changes the libint2 interface very significantly, and almost has gradients working. The problematic derivatives are those where the angular momentum is greater in the bra than the ket, so perhaps that's a limitation that I need to resolve by ensuring loops satisfy ang mom constraints. Here's how I built the code in case anybody wants to replicate... 1. Clone the libint2 repo and checkout the v2.6 branch. 2. `LIBS=-L/u/andysim/anaconda3/lib CXXFLAGS=""-std=c++14 -I/u/andysim/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417
https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:2200,Performance,optimiz,optimization,2200,"im/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_t`. Also I strongly recommend adding the `-O0` flag to the compiler flags, because our CMake debug build doesn't do this (we should change that) and the code takes a _very_ long time to compile with optimization. A lot of this will be streamlined in the not so distant future, and much of the complication will be eased when we nuke libint1. Until then, the above command should be sufficient to get you up and running with a development build. Please try it out - I'd love to have some help with getting the derivatives working :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417
https://github.com/psi4/psi4/pull/1721#issuecomment-537946083:90,Deployability,install,installed,90,"I should add that the reason I point to conda in the first step of the above is because I installed boost, Eigen and gmp in there. Those are all needed for libint2, and are easily obtained via conda.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537946083
https://github.com/psi4/psi4/pull/1721#issuecomment-537953601:22,Testability,test,test,22,"Also, here's a useful test case for anyone interested in getting their hands dirty. Toggling between the (correct) libint1 and engine and libint2 version in C1 / cartesians should yield identical results.; ```; molecule h2o {; 0 1; O; H 1 R; H 1 R 2 A. R = 1.0; A = 104.5; }. set {; integral_package libint1; puream false; scf_type direct; df_scf_guess false; guess core; reference rhf; basis sto-3g; e_convergence 12; d_convergence 9; }. analytic = gradient('scf'). set findif points 3; findif = gradient('scf', dertype=0). compare_matrices(analytic, findif, 5, ""RHF SCF finite-diff (3-pt) vs. analytic gradient to 10^-5"") #TEST. set findif points 5; findif = gradient('scf', dertype=0). compare_matrices(analytic, findif, 7, ""RHF SCF finite-diff (5-pt) vs. analytic gradient to 10^-7"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537953601
https://github.com/psi4/psi4/pull/1721#issuecomment-537953601:625,Testability,TEST,TEST,625,"Also, here's a useful test case for anyone interested in getting their hands dirty. Toggling between the (correct) libint1 and engine and libint2 version in C1 / cartesians should yield identical results.; ```; molecule h2o {; 0 1; O; H 1 R; H 1 R 2 A. R = 1.0; A = 104.5; }. set {; integral_package libint1; puream false; scf_type direct; df_scf_guess false; guess core; reference rhf; basis sto-3g; e_convergence 12; d_convergence 9; }. analytic = gradient('scf'). set findif points 3; findif = gradient('scf', dertype=0). compare_matrices(analytic, findif, 5, ""RHF SCF finite-diff (3-pt) vs. analytic gradient to 10^-5"") #TEST. set findif points 5; findif = gradient('scf', dertype=0). compare_matrices(analytic, findif, 7, ""RHF SCF finite-diff (5-pt) vs. analytic gradient to 10^-7"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537953601
https://github.com/psi4/psi4/pull/1721#issuecomment-537953601:789,Testability,TEST,TEST,789,"Also, here's a useful test case for anyone interested in getting their hands dirty. Toggling between the (correct) libint1 and engine and libint2 version in C1 / cartesians should yield identical results.; ```; molecule h2o {; 0 1; O; H 1 R; H 1 R 2 A. R = 1.0; A = 104.5; }. set {; integral_package libint1; puream false; scf_type direct; df_scf_guess false; guess core; reference rhf; basis sto-3g; e_convergence 12; d_convergence 9; }. analytic = gradient('scf'). set findif points 3; findif = gradient('scf', dertype=0). compare_matrices(analytic, findif, 5, ""RHF SCF finite-diff (3-pt) vs. analytic gradient to 10^-5"") #TEST. set findif points 5; findif = gradient('scf', dertype=0). compare_matrices(analytic, findif, 7, ""RHF SCF finite-diff (5-pt) vs. analytic gradient to 10^-7"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537953601
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:1749,Availability,down,downloading,1749,"bint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2003,Availability,down,down,2003,"b/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's no",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2280,Availability,error,error,2280,"make configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push fixes step 7, also the MAX_AMs now start with WITH_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2292,Availability,error,error,2292,"make configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push fixes step 7, also the MAX_AMs now start with WITH_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2892,Availability,error,errors,2892,"make configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push fixes step 7, also the MAX_AMs now start with WITH_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:226,Deployability,install,install,226,"Alternatively to the [separate libtool build of libint2](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:773,Deployability,install,installed,773,"Alternatively to the [separate libtool build of libint2](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:1050,Deployability,toggle,toggles,1050,"com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confid",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:1192,Deployability,configurat,configuration,1192," dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:206,Integrability,depend,dependencies,206,"Alternatively to the [separate libtool build of libint2](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:332,Integrability,interface,interface,332,"Alternatively to the [separate libtool build of libint2](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2162,Integrability,depend,dependencies-or-headers,2162," out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2990,Integrability,depend,dependency,2990,"make configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push fixes step 7, also the MAX_AMs now start with WITH_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:1192,Modifiability,config,configuration,1192," dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:3044,Modifiability,config,config,3044,"make configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push fixes step 7, also the MAX_AMs now start with WITH_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:1066,Safety,detect,detect-prebuilt-libtool-,1066,"com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confid",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:1096,Safety,detect,detect-or-build-pure-cmake-,1096,"com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confid",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2030,Testability,test,test,2030,"b/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's no",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2531,Usability,resume,resume,2531,"make configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push fixes step 7, also the MAX_AMs now start with WITH_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901
https://github.com/psi4/psi4/pull/1721#issuecomment-568185446:54,Availability,avail,available,54,"@susilehtola it does, and we do plan to interface all available integrals. I also have plans to generalize the Erfc integrals to a form like `(a + b erf(omega r)/r` so we don't have to compute two sets of integrals for the range separated functionals",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-568185446
https://github.com/psi4/psi4/pull/1721#issuecomment-568185446:40,Integrability,interface,interface,40,"@susilehtola it does, and we do plan to interface all available integrals. I also have plans to generalize the Erfc integrals to a form like `(a + b erf(omega r)/r` so we don't have to compute two sets of integrals for the range separated functionals",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-568185446
https://github.com/psi4/psi4/pull/1721#issuecomment-685960414:651,Availability,down,downstream,651,"> Hm, is there a requirement on the ordering used in Libint2? This may complicate packaging... Yes, there's ordering requirements at two different levels. The cartgauss_ordering has to be chosen at code-generation time, but fortunately psi4 uses `standard`. The spgauss_ordering can be selected at code-compile time, and here psi4 uses `gaussian` (not default). So for binary distribution, yes, there's going to be packaging complications. I've translated both stages of libint2 build to cmake and added in `find_package(..., COMPONENTS ...)` selectors https://github.com/evaleev/libint/pull/148/files#diff-4cfbbb105ca3b371b7251a6e37a56f74R41 so that downstream programs can avoid detecting unsuitable installations. Of course that doesn't help non-cmake downstreams much ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414
https://github.com/psi4/psi4/pull/1721#issuecomment-685960414:755,Availability,down,downstreams,755,"> Hm, is there a requirement on the ordering used in Libint2? This may complicate packaging... Yes, there's ordering requirements at two different levels. The cartgauss_ordering has to be chosen at code-generation time, but fortunately psi4 uses `standard`. The spgauss_ordering can be selected at code-compile time, and here psi4 uses `gaussian` (not default). So for binary distribution, yes, there's going to be packaging complications. I've translated both stages of libint2 build to cmake and added in `find_package(..., COMPONENTS ...)` selectors https://github.com/evaleev/libint/pull/148/files#diff-4cfbbb105ca3b371b7251a6e37a56f74R41 so that downstream programs can avoid detecting unsuitable installations. Of course that doesn't help non-cmake downstreams much ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414
https://github.com/psi4/psi4/pull/1721#issuecomment-685960414:702,Deployability,install,installations,702,"> Hm, is there a requirement on the ordering used in Libint2? This may complicate packaging... Yes, there's ordering requirements at two different levels. The cartgauss_ordering has to be chosen at code-generation time, but fortunately psi4 uses `standard`. The spgauss_ordering can be selected at code-compile time, and here psi4 uses `gaussian` (not default). So for binary distribution, yes, there's going to be packaging complications. I've translated both stages of libint2 build to cmake and added in `find_package(..., COMPONENTS ...)` selectors https://github.com/evaleev/libint/pull/148/files#diff-4cfbbb105ca3b371b7251a6e37a56f74R41 so that downstream programs can avoid detecting unsuitable installations. Of course that doesn't help non-cmake downstreams much ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414
https://github.com/psi4/psi4/pull/1721#issuecomment-685960414:675,Safety,avoid,avoid,675,"> Hm, is there a requirement on the ordering used in Libint2? This may complicate packaging... Yes, there's ordering requirements at two different levels. The cartgauss_ordering has to be chosen at code-generation time, but fortunately psi4 uses `standard`. The spgauss_ordering can be selected at code-compile time, and here psi4 uses `gaussian` (not default). So for binary distribution, yes, there's going to be packaging complications. I've translated both stages of libint2 build to cmake and added in `find_package(..., COMPONENTS ...)` selectors https://github.com/evaleev/libint/pull/148/files#diff-4cfbbb105ca3b371b7251a6e37a56f74R41 so that downstream programs can avoid detecting unsuitable installations. Of course that doesn't help non-cmake downstreams much ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414
https://github.com/psi4/psi4/pull/1721#issuecomment-685960414:681,Safety,detect,detecting,681,"> Hm, is there a requirement on the ordering used in Libint2? This may complicate packaging... Yes, there's ordering requirements at two different levels. The cartgauss_ordering has to be chosen at code-generation time, but fortunately psi4 uses `standard`. The spgauss_ordering can be selected at code-compile time, and here psi4 uses `gaussian` (not default). So for binary distribution, yes, there's going to be packaging complications. I've translated both stages of libint2 build to cmake and added in `find_package(..., COMPONENTS ...)` selectors https://github.com/evaleev/libint/pull/148/files#diff-4cfbbb105ca3b371b7251a6e37a56f74R41 so that downstream programs can avoid detecting unsuitable installations. Of course that doesn't help non-cmake downstreams much ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414
https://github.com/psi4/psi4/pull/1721#issuecomment-693289853:288,Modifiability,variab,variable,288,This pull request **introduces 1 alert** when merging 95c129ec2eefb971145191216c10a512b532b54d into b603cfcd0fd6317e6ad5e25bc58d7a828e4d310a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-94cbcc8552c02017ae85bb4926515b57ef69858b). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-693289853
https://github.com/psi4/psi4/pull/1721#issuecomment-730193219:235,Availability,avail,available,235,"I agree with Andy about merge-as-is. Also more people than just the listed reviewers looked at (parts of) the code according to github. Before we merge, just wanting to confirm if the right `conda install libint2 -c psi4/label/dev` is available?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-730193219
https://github.com/psi4/psi4/pull/1721#issuecomment-730193219:197,Deployability,install,install,197,"I agree with Andy about merge-as-is. Also more people than just the listed reviewers looked at (parts of) the code according to github. Before we merge, just wanting to confirm if the right `conda install libint2 -c psi4/label/dev` is available?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-730193219
https://github.com/psi4/psi4/pull/1721#issuecomment-730250341:99,Availability,avail,available,99,"> Before we merge, just wanting to confirm if the right conda install libint2 -c psi4/label/dev is available?. I hope so -- they should be: https://anaconda.org/psi4/libint2/files",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-730250341
https://github.com/psi4/psi4/pull/1721#issuecomment-730250341:62,Deployability,install,install,62,"> Before we merge, just wanting to confirm if the right conda install libint2 -c psi4/label/dev is available?. I hope so -- they should be: https://anaconda.org/psi4/libint2/files",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-730250341
https://github.com/psi4/psi4/issues/1722#issuecomment-534296270:302,Deployability,install,install,302,"I just ran . ```memory 8 Gb. molecule {; O; H 1 1.0; H 1 1.0 2 90.0; }. set basis 6-31G; set scf_type df; set freeze_core True; set cubeprop_tasks ['frontier_orbitals']; E, wfn = optimize('b3lyp', return_wfn=True); cubeprop(wfn); ```. and it correctly produced cube files. Are you running from a conda install or a compiled version? If the latter and you recompiled recently, try `touch`ing the `psi4/src/core.cc` and `psi4/src/export_*` files and re `make`ing. I suspect there's something odd going on with the pybind11 2.3.0 update and mixed versions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534296270
https://github.com/psi4/psi4/issues/1722#issuecomment-534296270:527,Deployability,update,update,527,"I just ran . ```memory 8 Gb. molecule {; O; H 1 1.0; H 1 1.0 2 90.0; }. set basis 6-31G; set scf_type df; set freeze_core True; set cubeprop_tasks ['frontier_orbitals']; E, wfn = optimize('b3lyp', return_wfn=True); cubeprop(wfn); ```. and it correctly produced cube files. Are you running from a conda install or a compiled version? If the latter and you recompiled recently, try `touch`ing the `psi4/src/core.cc` and `psi4/src/export_*` files and re `make`ing. I suspect there's something odd going on with the pybind11 2.3.0 update and mixed versions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534296270
https://github.com/psi4/psi4/issues/1722#issuecomment-534296270:179,Performance,optimiz,optimize,179,"I just ran . ```memory 8 Gb. molecule {; O; H 1 1.0; H 1 1.0 2 90.0; }. set basis 6-31G; set scf_type df; set freeze_core True; set cubeprop_tasks ['frontier_orbitals']; E, wfn = optimize('b3lyp', return_wfn=True); cubeprop(wfn); ```. and it correctly produced cube files. Are you running from a conda install or a compiled version? If the latter and you recompiled recently, try `touch`ing the `psi4/src/core.cc` and `psi4/src/export_*` files and re `make`ing. I suspect there's something odd going on with the pybind11 2.3.0 update and mixed versions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534296270
https://github.com/psi4/psi4/issues/1722#issuecomment-534496864:6,Deployability,install,installed,6,"Hi, I installed via sudo apt install psi4 on Windows Subsystem for Linux; Ubuntu. I believe this version may not be up to date as the online manual; on the psi4 website for version 1.2 indicates no frontier_orbital option; for cubeprop_tasks, whilst the manual for 1.3 indicates the option. I will recompile the latest stable release from source tonight and confirm,; which may then allow this issue to be closed. Currently at work so will be; a while until I can check. Thanks. On Mon, 23 Sep 2019, 22:40 Lori A. Burns, <notifications@github.com> wrote:. > I just ran; >; >; > molecule {; > O; > H 1 1.0; > H 1 1.0 2 90.0; > }; >; > set basis 6-31G; > set scf_type df; > set freeze_core True; > set cubeprop_tasks ['frontier_orbitals']; > E, wfn = optimize('b3lyp', return_wfn=True); > cubeprop(wfn); >; > and it correctly produced cube files. Are you running from a conda install; > or a compiled version? If the latter and you recompiled recently, try; > touching the psi4/src/core.cc and psi4/src/export_* files and re makeing.; > I suspect there's something odd going on with the pybind11 2.3.0 update and; > mixed versions.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1722?email_source=notifications&email_token=ANJDDIFK6K3R2HAQ7BJLEV3QLEZUFA5CNFSM4IZS2FU2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7MLNTQ#issuecomment-534296270>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ANJDDIFGT4Q26HSV47LQHXDQLEZUFANCNFSM4IZS2FUQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864
https://github.com/psi4/psi4/issues/1722#issuecomment-534496864:29,Deployability,install,install,29,"Hi, I installed via sudo apt install psi4 on Windows Subsystem for Linux; Ubuntu. I believe this version may not be up to date as the online manual; on the psi4 website for version 1.2 indicates no frontier_orbital option; for cubeprop_tasks, whilst the manual for 1.3 indicates the option. I will recompile the latest stable release from source tonight and confirm,; which may then allow this issue to be closed. Currently at work so will be; a while until I can check. Thanks. On Mon, 23 Sep 2019, 22:40 Lori A. Burns, <notifications@github.com> wrote:. > I just ran; >; >; > molecule {; > O; > H 1 1.0; > H 1 1.0 2 90.0; > }; >; > set basis 6-31G; > set scf_type df; > set freeze_core True; > set cubeprop_tasks ['frontier_orbitals']; > E, wfn = optimize('b3lyp', return_wfn=True); > cubeprop(wfn); >; > and it correctly produced cube files. Are you running from a conda install; > or a compiled version? If the latter and you recompiled recently, try; > touching the psi4/src/core.cc and psi4/src/export_* files and re makeing.; > I suspect there's something odd going on with the pybind11 2.3.0 update and; > mixed versions.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1722?email_source=notifications&email_token=ANJDDIFK6K3R2HAQ7BJLEV3QLEZUFA5CNFSM4IZS2FU2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7MLNTQ#issuecomment-534296270>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ANJDDIFGT4Q26HSV47LQHXDQLEZUFANCNFSM4IZS2FUQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864
https://github.com/psi4/psi4/issues/1722#issuecomment-534496864:326,Deployability,release,release,326,"Hi, I installed via sudo apt install psi4 on Windows Subsystem for Linux; Ubuntu. I believe this version may not be up to date as the online manual; on the psi4 website for version 1.2 indicates no frontier_orbital option; for cubeprop_tasks, whilst the manual for 1.3 indicates the option. I will recompile the latest stable release from source tonight and confirm,; which may then allow this issue to be closed. Currently at work so will be; a while until I can check. Thanks. On Mon, 23 Sep 2019, 22:40 Lori A. Burns, <notifications@github.com> wrote:. > I just ran; >; >; > molecule {; > O; > H 1 1.0; > H 1 1.0 2 90.0; > }; >; > set basis 6-31G; > set scf_type df; > set freeze_core True; > set cubeprop_tasks ['frontier_orbitals']; > E, wfn = optimize('b3lyp', return_wfn=True); > cubeprop(wfn); >; > and it correctly produced cube files. Are you running from a conda install; > or a compiled version? If the latter and you recompiled recently, try; > touching the psi4/src/core.cc and psi4/src/export_* files and re makeing.; > I suspect there's something odd going on with the pybind11 2.3.0 update and; > mixed versions.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1722?email_source=notifications&email_token=ANJDDIFK6K3R2HAQ7BJLEV3QLEZUFA5CNFSM4IZS2FU2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7MLNTQ#issuecomment-534296270>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ANJDDIFGT4Q26HSV47LQHXDQLEZUFANCNFSM4IZS2FUQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864
https://github.com/psi4/psi4/issues/1722#issuecomment-534496864:874,Deployability,install,install,874,"Hi, I installed via sudo apt install psi4 on Windows Subsystem for Linux; Ubuntu. I believe this version may not be up to date as the online manual; on the psi4 website for version 1.2 indicates no frontier_orbital option; for cubeprop_tasks, whilst the manual for 1.3 indicates the option. I will recompile the latest stable release from source tonight and confirm,; which may then allow this issue to be closed. Currently at work so will be; a while until I can check. Thanks. On Mon, 23 Sep 2019, 22:40 Lori A. Burns, <notifications@github.com> wrote:. > I just ran; >; >; > molecule {; > O; > H 1 1.0; > H 1 1.0 2 90.0; > }; >; > set basis 6-31G; > set scf_type df; > set freeze_core True; > set cubeprop_tasks ['frontier_orbitals']; > E, wfn = optimize('b3lyp', return_wfn=True); > cubeprop(wfn); >; > and it correctly produced cube files. Are you running from a conda install; > or a compiled version? If the latter and you recompiled recently, try; > touching the psi4/src/core.cc and psi4/src/export_* files and re makeing.; > I suspect there's something odd going on with the pybind11 2.3.0 update and; > mixed versions.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1722?email_source=notifications&email_token=ANJDDIFK6K3R2HAQ7BJLEV3QLEZUFA5CNFSM4IZS2FU2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7MLNTQ#issuecomment-534296270>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ANJDDIFGT4Q26HSV47LQHXDQLEZUFANCNFSM4IZS2FUQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864
https://github.com/psi4/psi4/issues/1722#issuecomment-534496864:1100,Deployability,update,update,1100,"Hi, I installed via sudo apt install psi4 on Windows Subsystem for Linux; Ubuntu. I believe this version may not be up to date as the online manual; on the psi4 website for version 1.2 indicates no frontier_orbital option; for cubeprop_tasks, whilst the manual for 1.3 indicates the option. I will recompile the latest stable release from source tonight and confirm,; which may then allow this issue to be closed. Currently at work so will be; a while until I can check. Thanks. On Mon, 23 Sep 2019, 22:40 Lori A. Burns, <notifications@github.com> wrote:. > I just ran; >; >; > molecule {; > O; > H 1 1.0; > H 1 1.0 2 90.0; > }; >; > set basis 6-31G; > set scf_type df; > set freeze_core True; > set cubeprop_tasks ['frontier_orbitals']; > E, wfn = optimize('b3lyp', return_wfn=True); > cubeprop(wfn); >; > and it correctly produced cube files. Are you running from a conda install; > or a compiled version? If the latter and you recompiled recently, try; > touching the psi4/src/core.cc and psi4/src/export_* files and re makeing.; > I suspect there's something odd going on with the pybind11 2.3.0 update and; > mixed versions.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1722?email_source=notifications&email_token=ANJDDIFK6K3R2HAQ7BJLEV3QLEZUFA5CNFSM4IZS2FU2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7MLNTQ#issuecomment-534296270>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ANJDDIFGT4Q26HSV47LQHXDQLEZUFANCNFSM4IZS2FUQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864
https://github.com/psi4/psi4/issues/1722#issuecomment-534496864:749,Performance,optimiz,optimize,749,"Hi, I installed via sudo apt install psi4 on Windows Subsystem for Linux; Ubuntu. I believe this version may not be up to date as the online manual; on the psi4 website for version 1.2 indicates no frontier_orbital option; for cubeprop_tasks, whilst the manual for 1.3 indicates the option. I will recompile the latest stable release from source tonight and confirm,; which may then allow this issue to be closed. Currently at work so will be; a while until I can check. Thanks. On Mon, 23 Sep 2019, 22:40 Lori A. Burns, <notifications@github.com> wrote:. > I just ran; >; >; > molecule {; > O; > H 1 1.0; > H 1 1.0 2 90.0; > }; >; > set basis 6-31G; > set scf_type df; > set freeze_core True; > set cubeprop_tasks ['frontier_orbitals']; > E, wfn = optimize('b3lyp', return_wfn=True); > cubeprop(wfn); >; > and it correctly produced cube files. Are you running from a conda install; > or a compiled version? If the latter and you recompiled recently, try; > touching the psi4/src/core.cc and psi4/src/export_* files and re makeing.; > I suspect there's something odd going on with the pybind11 2.3.0 update and; > mixed versions.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1722?email_source=notifications&email_token=ANJDDIFK6K3R2HAQ7BJLEV3QLEZUFA5CNFSM4IZS2FU2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7MLNTQ#issuecomment-534296270>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ANJDDIFGT4Q26HSV47LQHXDQLEZUFANCNFSM4IZS2FUQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864
https://github.com/psi4/psi4/issues/1722#issuecomment-534511091:51,Deployability,release,release,51,"Yeah, that would be the reason - 1.3 was the first release with that `cubeprop` keyword. The easiest way to install is probably using the pre-built binaries for 1.3.2:. https://admiring-tesla-08529a.netlify.com/installs/v132/. If you need further help, give us a shout.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534511091
https://github.com/psi4/psi4/issues/1722#issuecomment-534511091:108,Deployability,install,install,108,"Yeah, that would be the reason - 1.3 was the first release with that `cubeprop` keyword. The easiest way to install is probably using the pre-built binaries for 1.3.2:. https://admiring-tesla-08529a.netlify.com/installs/v132/. If you need further help, give us a shout.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534511091
https://github.com/psi4/psi4/issues/1722#issuecomment-534511091:211,Deployability,install,installs,211,"Yeah, that would be the reason - 1.3 was the first release with that `cubeprop` keyword. The easiest way to install is probably using the pre-built binaries for 1.3.2:. https://admiring-tesla-08529a.netlify.com/installs/v132/. If you need further help, give us a shout.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534511091
https://github.com/psi4/psi4/issues/1724#issuecomment-534710889:65,Deployability,install,installer,65,"Where did you get your current Psi4 / dftd3 from? Is it from the installer, via conda, or compiled from source?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1724#issuecomment-534710889
https://github.com/psi4/psi4/issues/1724#issuecomment-534721360:179,Modifiability,variab,variable,179,"It's always going to write at least one file (the parameters file) to $HOME b/c that's where dftd3 wants to read it; ```; >>> dftd3 -help; dftd3 <coord filename> [-options]; ...; variable parameters can be read from <current-directory>/.dftd3par.local; or ; variable parameters read from ~/.dftd3par.<hostname>; ```. Looks like https://github.com/loriab/psi4/blob/libint2/psi4/driver/procrouting/empirical_dispersion.py#L209 ought to have `local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path()}` as an extra argument to put the dftd3 scratch in `$PSI_SCRATCH`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1724#issuecomment-534721360
https://github.com/psi4/psi4/issues/1724#issuecomment-534721360:258,Modifiability,variab,variable,258,"It's always going to write at least one file (the parameters file) to $HOME b/c that's where dftd3 wants to read it; ```; >>> dftd3 -help; dftd3 <coord filename> [-options]; ...; variable parameters can be read from <current-directory>/.dftd3par.local; or ; variable parameters read from ~/.dftd3par.<hostname>; ```. Looks like https://github.com/loriab/psi4/blob/libint2/psi4/driver/procrouting/empirical_dispersion.py#L209 ought to have `local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path()}` as an extra argument to put the dftd3 scratch in `$PSI_SCRATCH`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1724#issuecomment-534721360
https://github.com/psi4/psi4/issues/1724#issuecomment-534725448:288,Availability,ping,ping,288,"Sounds like an uninviting $HOME. I think we can work around this in future. I could suggest some edits to manoeuvre around the problem for you now, but if you're psi4conda, then that's v1.3.x which has things in different places. I suggest your HOME aliasing workaround for now, and I'll ping when other is in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1724#issuecomment-534725448
https://github.com/psi4/psi4/issues/1734#issuecomment-541328605:56,Energy Efficiency,energy,energy,56,"Do you have the equations for reintegrating the kinetic energy density from grid to AO space? I could likely guess, but best to be sure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1734#issuecomment-541328605
https://github.com/psi4/psi4/issues/1734#issuecomment-541356534:72,Energy Efficiency,energy,energy,72,I'm not sure what you're asking... Do you want to calculate the kinetic energy matrix T using DFT quadrature?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1734#issuecomment-541356534
https://github.com/psi4/psi4/issues/1736#issuecomment-546491403:406,Integrability,interface,interface,406,"Two rather immediate questions:; * Do we want to allow computing separate reference and correlation densities? We have some machinery for this in Psi starting [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L472), but no current code in Psi uses this. The alternative is that the caller code manually adds the reference 1PDM/2PDM/Lagrangian to the correlated values.; * The interface I'm currently planning for the 1RDM/Lagrangian is that the caller code passes a map from an array of orbital space labels to a SharedMatrix with the relevant 1RDM/Lagrangian block. This is what most codes have natively, the one exception being CC. Opinions on this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1736#issuecomment-546491403
https://github.com/psi4/psi4/pull/1738#issuecomment-545163931:331,Availability,error,error,331,This pull request **introduces 3 alerts** and **fixes 35** when merging 5cdb0aac52477b199271a52a1e269fd1bc7587ba into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a92e22e7909909388abb7b6c40655cb128965e2e). **new alerts:**. * 1 for Unused local variable; * 1 for Syntax error; * 1 for Variable defined multiple times. **fixed alerts:**. * 29 for Module\-level cyclic import; * 4 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import; * 1 for Unreachable code,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1738#issuecomment-545163931
https://github.com/psi4/psi4/pull/1738#issuecomment-545163931:306,Modifiability,variab,variable,306,This pull request **introduces 3 alerts** and **fixes 35** when merging 5cdb0aac52477b199271a52a1e269fd1bc7587ba into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a92e22e7909909388abb7b6c40655cb128965e2e). **new alerts:**. * 1 for Unused local variable; * 1 for Syntax error; * 1 for Variable defined multiple times. **fixed alerts:**. * 29 for Module\-level cyclic import; * 4 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import; * 1 for Unreachable code,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1738#issuecomment-545163931
https://github.com/psi4/psi4/pull/1738#issuecomment-545163931:346,Modifiability,Variab,Variable,346,This pull request **introduces 3 alerts** and **fixes 35** when merging 5cdb0aac52477b199271a52a1e269fd1bc7587ba into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a92e22e7909909388abb7b6c40655cb128965e2e). **new alerts:**. * 1 for Unused local variable; * 1 for Syntax error; * 1 for Variable defined multiple times. **fixed alerts:**. * 29 for Module\-level cyclic import; * 4 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import; * 1 for Unreachable code,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1738#issuecomment-545163931
https://github.com/psi4/psi4/pull/1741#issuecomment-546423848:38,Testability,test,tests,38,"This has made it through a clean full tests, so would be good to get it in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1741#issuecomment-546423848
https://github.com/psi4/psi4/pull/1744#issuecomment-546681392:276,Modifiability,Variab,Variable,276,This pull request **introduces 3 alerts** when merging 536387c880270ca4fe776de392f68fbbccf0a85c into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6f4307d6aaa9e7d8b0240a08640cd7a428620f2d). **new alerts:**. * 2 for Variable defined multiple times; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-546681392
https://github.com/psi4/psi4/pull/1744#issuecomment-546681392:330,Modifiability,variab,variable,330,This pull request **introduces 3 alerts** when merging 536387c880270ca4fe776de392f68fbbccf0a85c into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6f4307d6aaa9e7d8b0240a08640cd7a428620f2d). **new alerts:**. * 2 for Variable defined multiple times; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-546681392
https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:166,Deployability,integrat,integration,166,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492
https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:217,Deployability,integrat,integration,217,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492
https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:248,Deployability,integrat,integration,248,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492
https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:166,Integrability,integrat,integration,166,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492
https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:217,Integrability,integrat,integration,217,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492
https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:248,Integrability,integrat,integration,248,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492
https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:283,Integrability,depend,depends,283,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492
https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:194,Modifiability,plugin,plugin,194,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1609,Availability,toler,tolerances,1609,"o the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to worry that he/she does. > Should adcc be distributed/build with psi4 in the end? (conda, cmake, etc.). Not sure what will work best. We are working on getting adcc distributed via conda ourselves, so I guess one could just pull it from there as part of the usual psi4 installation procedure. If the interfacing is done on the python level as I described above and as I did in the PR so far, this should not introduce big changes. One could even easily make th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:142,Deployability,integrat,integration,142,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:193,Deployability,integrat,integration,193,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:227,Deployability,integrat,integration,227,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:386,Deployability,integrat,integration,386,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:433,Deployability,integrat,integration,433,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:604,Deployability,integrat,integrate,604,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:829,Deployability,integrat,integration,829,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1038,Deployability,integrat,integration,1038," to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one coul",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1179,Deployability,integrat,integrating,1179,"ndent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to wo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:2431,Deployability,install,installation,2431,"parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to worry that he/she does. > Should adcc be distributed/build with psi4 in the end? (conda, cmake, etc.). Not sure what will work best. We are working on getting adcc distributed via conda ourselves, so I guess one could just pull it from there as part of the usual psi4 installation procedure. If the interfacing is done on the python level as I described above and as I did in the PR so far, this should not introduce big changes. One could even easily make the dependency optional. I am happy to hear other suggestions, too :smile:. Since we have a mandatory binary blob (in the form of the `adccore` library) for the moment, building the code completely as part of the psi4 setup is not possible unfortunately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:773,Energy Efficiency,sustainab,sustainable,773,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:142,Integrability,integrat,integration,142,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:193,Integrability,integrat,integration,193,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:227,Integrability,integrat,integration,227,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:262,Integrability,depend,depends,262,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:320,Integrability,depend,depends,320,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:386,Integrability,integrat,integration,386,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:433,Integrability,integrat,integration,433,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:604,Integrability,integrat,integrate,604,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:829,Integrability,integrat,integration,829,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1038,Integrability,integrat,integration,1038," to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one coul",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1179,Integrability,integrat,integrating,1179,"ndent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to wo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1281,Integrability,interface,interface,1281,"so depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to worry that he/she does. > Should adcc be distributed/build with psi4 in the end? (conda, cmake, etc.). Not sure what will work best. We are working on gett",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:2624,Integrability,depend,dependency,2624,"parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to worry that he/she does. > Should adcc be distributed/build with psi4 in the end? (conda, cmake, etc.). Not sure what will work best. We are working on getting adcc distributed via conda ourselves, so I guess one could just pull it from there as part of the usual psi4 installation procedure. If the interfacing is done on the python level as I described above and as I did in the PR so far, this should not introduce big changes. One could even easily make the dependency optional. I am happy to hear other suggestions, too :smile:. Since we have a mandatory binary blob (in the form of the `adccore` library) for the moment, building the code completely as part of the psi4 setup is not possible unfortunately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:170,Modifiability,plugin,plugin,170,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1011,Modifiability,plugin,plugin,1011," to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one coul",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797
https://github.com/psi4/psi4/pull/1744#issuecomment-547399286:466,Deployability,integrat,integrations,466,"Thanks. I mainly wanted to get the discussion going. Slack can be used also in the browser. psi4 is very modular and having `adcc` as a fully optional dependency, c-layer or python-layer, is fine. The `psi4 plugins` (see http://psicode.org/psi4manual/master/prog_newcode.html) are independent of the psi4 code base, though can still use psi4's libraries. Examples would be `sns-mp2` or `v2rdm_casscf`. There you can basically do whatever you want. With python-layer integrations I mean that you add to the proper psi4 python code base. This is what you already did. http://psicode.org/psi4manual/master/proc_py.html; Check the managed method section for how multiple implementations of the same method are usually handled. You only need the `wfn` object?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286
https://github.com/psi4/psi4/pull/1744#issuecomment-547399286:151,Integrability,depend,dependency,151,"Thanks. I mainly wanted to get the discussion going. Slack can be used also in the browser. psi4 is very modular and having `adcc` as a fully optional dependency, c-layer or python-layer, is fine. The `psi4 plugins` (see http://psicode.org/psi4manual/master/prog_newcode.html) are independent of the psi4 code base, though can still use psi4's libraries. Examples would be `sns-mp2` or `v2rdm_casscf`. There you can basically do whatever you want. With python-layer integrations I mean that you add to the proper psi4 python code base. This is what you already did. http://psicode.org/psi4manual/master/proc_py.html; Check the managed method section for how multiple implementations of the same method are usually handled. You only need the `wfn` object?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286
https://github.com/psi4/psi4/pull/1744#issuecomment-547399286:466,Integrability,integrat,integrations,466,"Thanks. I mainly wanted to get the discussion going. Slack can be used also in the browser. psi4 is very modular and having `adcc` as a fully optional dependency, c-layer or python-layer, is fine. The `psi4 plugins` (see http://psicode.org/psi4manual/master/prog_newcode.html) are independent of the psi4 code base, though can still use psi4's libraries. Examples would be `sns-mp2` or `v2rdm_casscf`. There you can basically do whatever you want. With python-layer integrations I mean that you add to the proper psi4 python code base. This is what you already did. http://psicode.org/psi4manual/master/proc_py.html; Check the managed method section for how multiple implementations of the same method are usually handled. You only need the `wfn` object?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286
https://github.com/psi4/psi4/pull/1744#issuecomment-547399286:207,Modifiability,plugin,plugins,207,"Thanks. I mainly wanted to get the discussion going. Slack can be used also in the browser. psi4 is very modular and having `adcc` as a fully optional dependency, c-layer or python-layer, is fine. The `psi4 plugins` (see http://psicode.org/psi4manual/master/prog_newcode.html) are independent of the psi4 code base, though can still use psi4's libraries. Examples would be `sns-mp2` or `v2rdm_casscf`. There you can basically do whatever you want. With python-layer integrations I mean that you add to the proper psi4 python code base. This is what you already did. http://psicode.org/psi4manual/master/proc_py.html; Check the managed method section for how multiple implementations of the same method are usually handled. You only need the `wfn` object?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286
https://github.com/psi4/psi4/pull/1744#issuecomment-547402567:154,Availability,Down,Down,154,"Thanks for the pointers, I'll take a look. > You only need the `wfn` object?. Yes and no. To bootstrap the calculation in adcc that's all what is needed. Down the line we also need the `MintsHelper` (see our [psi4 backend code](https://github.com/adc-connect/adcc/blob/master/adcc/backends/psi4.py)) to get electronic dipoles and ERI integrals in MO. > The `scf_helper` can automatically convert an SCF calculation done with symmetry into C1. Most post-scf DF methods require this already. Perfect!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547402567
https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:509,Availability,down,down,509,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509
https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:351,Energy Efficiency,energy,energy,351,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509
https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:531,Integrability,depend,dependancies,531,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509
https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:176,Modifiability,plugin,plugin,176,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509
https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:616,Modifiability,coupling,coupling,616,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1729,Availability,avail,availablity,1729," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1573,Deployability,patch,patched,1573," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1671,Deployability,integrat,integrate,1671," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:552,Energy Efficiency,adapt,adapt,552,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:583,Energy Efficiency,energy,energy,583,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:624,Energy Efficiency,energy,energy,624,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:761,Energy Efficiency,energy,energy,761,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:2056,Energy Efficiency,energy,energy,2056," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:435,Integrability,rout,routing,435,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:501,Integrability,depend,dependencies,501,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1010,Integrability,depend,depending,1010,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1597,Integrability,wrap,wrapping,1597," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1671,Integrability,integrat,integrate,1671," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:97,Modifiability,plugin,plugin,97,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:552,Modifiability,adapt,adapt,552,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:868,Modifiability,plugin,plugin,868,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:977,Modifiability,plugin,plugin,977,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1188,Modifiability,plugin,plugin,1188,". On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tens",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1587,Modifiability,plugin,plugin,1587," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:878,Performance,load,loaded,878,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584
https://github.com/psi4/psi4/pull/1744#issuecomment-547800055:254,Integrability,rout,routine,254,Would it make sense to add a `qc_module adcc` in this case?; Then a new `select_adc` in proc.py could manage both the (old) `run_adc` and `run_adcc`. . Though having an optional/external `qc_module` is unprecedented I think. --. Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547800055
https://github.com/psi4/psi4/pull/1744#issuecomment-547800055:281,Performance,bottleneck,bottleneck,281,Would it make sense to add a `qc_module adcc` in this case?; Then a new `select_adc` in proc.py could manage both the (old) `run_adc` and `run_adcc`. . Though having an optional/external `qc_module` is unprecedented I think. --. Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547800055
https://github.com/psi4/psi4/pull/1744#issuecomment-547805180:202,Availability,avail,availability,202,"That's indeed what I had in mind (in my third ansatz). Add a `qc_module` and a `select_adc` branching between `adcc` and the builtin. I guess one can just use `psi4.addons` in `select_adc` to query the availability of `adcc` before going into the branching. That was at least my idea so for. --. > Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?. You mean because it's not parallel at the moment? Yes, that's indeed a problem and was a deal breaker for some of the things we wanted to try in the past ... I have already discussed this with @maxscheurer and he promised to have a look once we have gotten a few other things out of the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180
https://github.com/psi4/psi4/pull/1744#issuecomment-547805180:323,Integrability,rout,routine,323,"That's indeed what I had in mind (in my third ansatz). Add a `qc_module` and a `select_adc` branching between `adcc` and the builtin. I guess one can just use `psi4.addons` in `select_adc` to query the availability of `adcc` before going into the branching. That was at least my idea so for. --. > Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?. You mean because it's not parallel at the moment? Yes, that's indeed a problem and was a deal breaker for some of the things we wanted to try in the past ... I have already discussed this with @maxscheurer and he promised to have a look once we have gotten a few other things out of the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180
https://github.com/psi4/psi4/pull/1744#issuecomment-547805180:350,Performance,bottleneck,bottleneck,350,"That's indeed what I had in mind (in my third ansatz). Add a `qc_module` and a `select_adc` branching between `adcc` and the builtin. I guess one can just use `psi4.addons` in `select_adc` to query the availability of `adcc` before going into the branching. That was at least my idea so for. --. > Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?. You mean because it's not parallel at the moment? Yes, that's indeed a problem and was a deal breaker for some of the things we wanted to try in the past ... I have already discussed this with @maxscheurer and he promised to have a look once we have gotten a few other things out of the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180
https://github.com/psi4/psi4/pull/1744#issuecomment-547900288:232,Integrability,inject,inject,232,"There are suggestions that our ADC code is currently incorrect and we have marked it, we could consider deprecating our own ADC module in favor of this approach. Otherwise the select adc approach is the correct one. For now I would inject a name of `adcc-adc` or similar so that it is currently a unique identifier for testing and we can correctly wire up the select functionality later. Dictionary objects are fine to return to the user, the Wavefunction is a PyBind11 dynamic object so you can set additional objects to it `wfn.mydata = {""hello"": ""world""}`. I would take this approach for the first pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547900288
https://github.com/psi4/psi4/pull/1744#issuecomment-547900288:232,Security,inject,inject,232,"There are suggestions that our ADC code is currently incorrect and we have marked it, we could consider deprecating our own ADC module in favor of this approach. Otherwise the select adc approach is the correct one. For now I would inject a name of `adcc-adc` or similar so that it is currently a unique identifier for testing and we can correctly wire up the select functionality later. Dictionary objects are fine to return to the user, the Wavefunction is a PyBind11 dynamic object so you can set additional objects to it `wfn.mydata = {""hello"": ""world""}`. I would take this approach for the first pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547900288
https://github.com/psi4/psi4/pull/1744#issuecomment-547900288:319,Testability,test,testing,319,"There are suggestions that our ADC code is currently incorrect and we have marked it, we could consider deprecating our own ADC module in favor of this approach. Otherwise the select adc approach is the correct one. For now I would inject a name of `adcc-adc` or similar so that it is currently a unique identifier for testing and we can correctly wire up the select functionality later. Dictionary objects are fine to return to the user, the Wavefunction is a PyBind11 dynamic object so you can set additional objects to it `wfn.mydata = {""hello"": ""world""}`. I would take this approach for the first pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547900288
https://github.com/psi4/psi4/pull/1744#issuecomment-547902896:136,Integrability,depend,dependency,136,@dgasmith Just that I understand correctly. You suggest to:; - Develop a standalone `psi42adcc` python plugin for Psi4 with `adcc` as a dependency in the `setup.py`. In this all the mapping psi4 <-> adcc happens.; - Inside its `__init__.py` inject a `run_adcc_adc` method under unique method keys such as `adcc-adc(2)` into the proc mapping.; - Expose calculation results via the `wfn` using dynamic attributes. That sounds very doable for the first pass :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896
https://github.com/psi4/psi4/pull/1744#issuecomment-547902896:241,Integrability,inject,inject,241,@dgasmith Just that I understand correctly. You suggest to:; - Develop a standalone `psi42adcc` python plugin for Psi4 with `adcc` as a dependency in the `setup.py`. In this all the mapping psi4 <-> adcc happens.; - Inside its `__init__.py` inject a `run_adcc_adc` method under unique method keys such as `adcc-adc(2)` into the proc mapping.; - Expose calculation results via the `wfn` using dynamic attributes. That sounds very doable for the first pass :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896
https://github.com/psi4/psi4/pull/1744#issuecomment-547902896:103,Modifiability,plugin,plugin,103,@dgasmith Just that I understand correctly. You suggest to:; - Develop a standalone `psi42adcc` python plugin for Psi4 with `adcc` as a dependency in the `setup.py`. In this all the mapping psi4 <-> adcc happens.; - Inside its `__init__.py` inject a `run_adcc_adc` method under unique method keys such as `adcc-adc(2)` into the proc mapping.; - Expose calculation results via the `wfn` using dynamic attributes. That sounds very doable for the first pass :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896
https://github.com/psi4/psi4/pull/1744#issuecomment-547902896:241,Security,inject,inject,241,@dgasmith Just that I understand correctly. You suggest to:; - Develop a standalone `psi42adcc` python plugin for Psi4 with `adcc` as a dependency in the `setup.py`. In this all the mapping psi4 <-> adcc happens.; - Inside its `__init__.py` inject a `run_adcc_adc` method under unique method keys such as `adcc-adc(2)` into the proc mapping.; - Expose calculation results via the `wfn` using dynamic attributes. That sounds very doable for the first pass :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896
https://github.com/psi4/psi4/pull/1744#issuecomment-547902896:345,Security,Expose,Expose,345,@dgasmith Just that I understand correctly. You suggest to:; - Develop a standalone `psi42adcc` python plugin for Psi4 with `adcc` as a dependency in the `setup.py`. In this all the mapping psi4 <-> adcc happens.; - Inside its `__init__.py` inject a `run_adcc_adc` method under unique method keys such as `adcc-adc(2)` into the proc mapping.; - Expose calculation results via the `wfn` using dynamic attributes. That sounds very doable for the first pass :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896
https://github.com/psi4/psi4/pull/1744#issuecomment-547908018:76,Modifiability,plugin,plugin,76,"Yes on the first two items with a few tweaks. We can add you as an endorsed plugin [here](https://github.com/psi4/psi4/blob/fbb2ff444490bf6b43cb6e027637d8fd857adcee/psi4/driver/endorsed_plugins.py). I wouldn't write a new python module just for the binding, as long as the API is stable we could consider adding it directly to the endorsed plugin file. You could also consider reverse hooks where you have a method like `adcc.register_psi4()` which would hook into Psi4, but be called from the endorsed plugin file. . A few ways to do it, if your API is still in a bit of flux then it probably makes more sense for the code to live in your current repo. Yes to the third item :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547908018
https://github.com/psi4/psi4/pull/1744#issuecomment-547908018:340,Modifiability,plugin,plugin,340,"Yes on the first two items with a few tweaks. We can add you as an endorsed plugin [here](https://github.com/psi4/psi4/blob/fbb2ff444490bf6b43cb6e027637d8fd857adcee/psi4/driver/endorsed_plugins.py). I wouldn't write a new python module just for the binding, as long as the API is stable we could consider adding it directly to the endorsed plugin file. You could also consider reverse hooks where you have a method like `adcc.register_psi4()` which would hook into Psi4, but be called from the endorsed plugin file. . A few ways to do it, if your API is still in a bit of flux then it probably makes more sense for the code to live in your current repo. Yes to the third item :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547908018
https://github.com/psi4/psi4/pull/1744#issuecomment-547908018:503,Modifiability,plugin,plugin,503,"Yes on the first two items with a few tweaks. We can add you as an endorsed plugin [here](https://github.com/psi4/psi4/blob/fbb2ff444490bf6b43cb6e027637d8fd857adcee/psi4/driver/endorsed_plugins.py). I wouldn't write a new python module just for the binding, as long as the API is stable we could consider adding it directly to the endorsed plugin file. You could also consider reverse hooks where you have a method like `adcc.register_psi4()` which would hook into Psi4, but be called from the endorsed plugin file. . A few ways to do it, if your API is still in a bit of flux then it probably makes more sense for the code to live in your current repo. Yes to the third item :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547908018
https://github.com/psi4/psi4/pull/1744#issuecomment-548144326:547,Energy Efficiency,energy,energy,547,"I made a little progress and briefly want to summarise` briefly:. - `ADC(2)` is denoted as `adc` inside the Psi4 source code. This does not really make sense to me, since there are now plenty of more ADC methods, so I renamed it to `adc(2)`. `adc` now no longer exists as a method.; - I'm a bit confused about the `mtd_type`. If I get it right, neither the builtin (nor adcc) supports anything but `CONV`(entional) ERIs. But I might be wrong about the builtin code. I copied the value from `MP_TYPE`, since after all the energies returned by the `energy(adcN)` calls are `MP(N)` energies (ADC(n) is constructed for excited states building on top of an MP(n) ground state)). Still, one could introduce `ADC_TYPE` ... you're call.; - I have not registered `run_adcc` for MP(2) and MP(3), but I could because we can compute these energies (and a few properties), too. Not sure that's worth the effort, however.; - For determining frozen core and frozen virtual orbital count I used `Wavefunction.frzcpi` and `Wavefunction.frzvpi`, but it feels a bit strange to do it this way. Is there a better method?; - I added quite a couple of extra options. Is the only way to register them, to add them to the `C++` `read_options.cc`?; - adcc prints by default to `sys.stdout`, but can be easily redirected such that all output goes to another python stream. Psi4 wants to print via `core.print_out`, which takes only a string, so I'm forced to redirect a python stream to a text string. That could become messy unless there's a better option on the Psi4 end. Again thanks for your help :smile:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548144326
https://github.com/psi4/psi4/pull/1744#issuecomment-548146279:327,Modifiability,variab,variable,327,This pull request **introduces 12 alerts** when merging 465ae9977d4e8ff3e80a5524281a86a511c557e7 into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a7d23a248c3d380e084dd2fe8fbc059049ccf9b4). **new alerts:**. * 7 for Module\-level cyclic import; * 2 for Unused local variable; * 2 for Variable defined multiple times; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548146279
https://github.com/psi4/psi4/pull/1744#issuecomment-548146279:345,Modifiability,Variab,Variable,345,This pull request **introduces 12 alerts** when merging 465ae9977d4e8ff3e80a5524281a86a511c557e7 into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a7d23a248c3d380e084dd2fe8fbc059049ccf9b4). **new alerts:**. * 7 for Module\-level cyclic import; * 2 for Unused local variable; * 2 for Variable defined multiple times; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548146279
https://github.com/psi4/psi4/pull/1744#issuecomment-548622226:344,Modifiability,variab,variable,344,This pull request **introduces 23 alerts** and **fixes 1** when merging 2fcb1ca56e703e93db407d86f6e5d4fccb33106a into c876a45b706b0fe5e27993bec4c5dcd5ed812cd7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cedd7a7f58b1ec2f563d8e0f6f10f27cfe09aac8). **new alerts:**. * 16 for Module\-level cyclic import; * 3 for Unused local variable; * 2 for Variable defined multiple times; * 1 for Unnecessary pass; * 1 for Unused import. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548622226
https://github.com/psi4/psi4/pull/1744#issuecomment-548622226:362,Modifiability,Variab,Variable,362,This pull request **introduces 23 alerts** and **fixes 1** when merging 2fcb1ca56e703e93db407d86f6e5d4fccb33106a into c876a45b706b0fe5e27993bec4c5dcd5ed812cd7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cedd7a7f58b1ec2f563d8e0f6f10f27cfe09aac8). **new alerts:**. * 16 for Module\-level cyclic import; * 3 for Unused local variable; * 2 for Variable defined multiple times; * 1 for Unnecessary pass; * 1 for Unused import. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548622226
https://github.com/psi4/psi4/pull/1744#issuecomment-548702880:39,Availability,avail,available,39,"You are correct that the `adc` is only available as `conv`. Thus `mtd_type` is not necessarily needed for now. Unless `adcc` will support it sometime soon ;-) . You mentioned an inconsistent density being returned. This is OK but should be mentioned in the manual. Currently within psi4, e.g. simple MP2 single points also just return the SCF density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548702880
https://github.com/psi4/psi4/pull/1744#issuecomment-548702880:293,Usability,simpl,simple,293,"You are correct that the `adc` is only available as `conv`. Thus `mtd_type` is not necessarily needed for now. Unless `adcc` will support it sometime soon ;-) . You mentioned an inconsistent density being returned. This is OK but should be mentioned in the manual. Currently within psi4, e.g. simple MP2 single points also just return the SCF density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548702880
https://github.com/psi4/psi4/pull/1744#issuecomment-549067705:344,Modifiability,variab,variable,344,This pull request **introduces 23 alerts** and **fixes 1** when merging 162b23e599a016e505a48cb9c594b3726b952da8 into 2c00b358d646316d054f3f0104014662228e7989 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e0184b00477bf5fab6aae54aba5a6e79041c40a). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused local variable; * 2 for Unused import; * 2 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-549067705
https://github.com/psi4/psi4/pull/1744#issuecomment-549067705:385,Modifiability,Variab,Variable,385,This pull request **introduces 23 alerts** and **fixes 1** when merging 162b23e599a016e505a48cb9c594b3726b952da8 into 2c00b358d646316d054f3f0104014662228e7989 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e0184b00477bf5fab6aae54aba5a6e79041c40a). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused local variable; * 2 for Unused import; * 2 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-549067705
https://github.com/psi4/psi4/pull/1744#issuecomment-549809071:92,Availability,avail,available,92,"With @loriab's help, I managed to deploy `adcc` to conda.; There is a dev/temporary version available via; ```conda install -c adcc/label/dev_mkl adcc```; for testing purposes. Don't rely on it, though, it may disappear... :smile:; Make sure to install it in an existing `psi4` conda environment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-549809071
https://github.com/psi4/psi4/pull/1744#issuecomment-549809071:34,Deployability,deploy,deploy,34,"With @loriab's help, I managed to deploy `adcc` to conda.; There is a dev/temporary version available via; ```conda install -c adcc/label/dev_mkl adcc```; for testing purposes. Don't rely on it, though, it may disappear... :smile:; Make sure to install it in an existing `psi4` conda environment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-549809071
https://github.com/psi4/psi4/pull/1744#issuecomment-549809071:116,Deployability,install,install,116,"With @loriab's help, I managed to deploy `adcc` to conda.; There is a dev/temporary version available via; ```conda install -c adcc/label/dev_mkl adcc```; for testing purposes. Don't rely on it, though, it may disappear... :smile:; Make sure to install it in an existing `psi4` conda environment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-549809071
https://github.com/psi4/psi4/pull/1744#issuecomment-549809071:245,Deployability,install,install,245,"With @loriab's help, I managed to deploy `adcc` to conda.; There is a dev/temporary version available via; ```conda install -c adcc/label/dev_mkl adcc```; for testing purposes. Don't rely on it, though, it may disappear... :smile:; Make sure to install it in an existing `psi4` conda environment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-549809071
https://github.com/psi4/psi4/pull/1744#issuecomment-549809071:159,Testability,test,testing,159,"With @loriab's help, I managed to deploy `adcc` to conda.; There is a dev/temporary version available via; ```conda install -c adcc/label/dev_mkl adcc```; for testing purposes. Don't rely on it, though, it may disappear... :smile:; Make sure to install it in an existing `psi4` conda environment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-549809071
https://github.com/psi4/psi4/pull/1744#issuecomment-550089235:393,Modifiability,variab,variable,393,This pull request **introduces 22 alerts** and **fixes 1** when merging 9c6c5e6967f69d1cf17a07839a760690e1bff79a into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9e24558892c638b73f9f7c59570f9eb5b0a0d000). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused import; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-550089235
https://github.com/psi4/psi4/pull/1744#issuecomment-550089235:411,Modifiability,Variab,Variable,411,This pull request **introduces 22 alerts** and **fixes 1** when merging 9c6c5e6967f69d1cf17a07839a760690e1bff79a into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9e24558892c638b73f9f7c59570f9eb5b0a0d000). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused import; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-550089235
https://github.com/psi4/psi4/pull/1744#issuecomment-550268345:393,Modifiability,variab,variable,393,This pull request **introduces 22 alerts** and **fixes 1** when merging aaec62d7e05aaad883b18c2555f95e8404bf1b8a into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-195cf8d9dd510bb3ff8072cd0ae955f21a3aad9a). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused import; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-550268345
https://github.com/psi4/psi4/pull/1744#issuecomment-550268345:411,Modifiability,Variab,Variable,411,This pull request **introduces 22 alerts** and **fixes 1** when merging aaec62d7e05aaad883b18c2555f95e8404bf1b8a into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-195cf8d9dd510bb3ff8072cd0ae955f21a3aad9a). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused import; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-550268345
https://github.com/psi4/psi4/pull/1744#issuecomment-552046581:325,Modifiability,Variab,Variable,325,This pull request **introduces 4 alerts** when merging 5098d2ef8c93363494f4be32a573818e7ad0b73a into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-bb04ac9a3fb4ebb9247885570aea5cb8fe5442db). **new alerts:**. * 2 for Unused import; * 1 for Unnecessary pass; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552046581
https://github.com/psi4/psi4/pull/1744#issuecomment-552121356:325,Modifiability,Variab,Variable,325,This pull request **introduces 3 alerts** when merging a186991a7dc68db863a84bf759ff892565c72996 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2fd4ea9718d1feb9bc8608d90bca575a6cdf1b10). **new alerts:**. * 1 for Unnecessary pass; * 1 for Unused import; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552121356
https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:63,Availability,avail,available,63,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812
https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:6,Deployability,update,updates,6,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812
https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:511,Deployability,Install,Installation,511,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812
https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:268,Integrability,interface,interface,268,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812
https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:481,Integrability,interface,interface,481,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812
https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:330,Testability,test,tests,330,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812
https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:355,Testability,test,tests,355,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812
https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:409,Testability,test,testdata,409,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812
https://github.com/psi4/psi4/pull/1744#issuecomment-552262003:43,Deployability,integrat,integration,43,What is left for this PR and what level of integration are you shooting for in this first pass?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552262003
https://github.com/psi4/psi4/pull/1744#issuecomment-552262003:43,Integrability,integrat,integration,43,What is left for this PR and what level of integration are you shooting for in this first pass?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552262003
https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:981,Availability,error,error,981,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755
https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:45,Deployability,integrat,integration,45,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755
https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:1623,Deployability,release,release,1623,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755
https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:45,Integrability,integrat,integration,45,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755
https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:816,Testability,test,test,816,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755
https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:893,Testability,test,test,893,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755
https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:711,Usability,simpl,simple,711,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755
https://github.com/psi4/psi4/pull/1744#issuecomment-553134043:29,Deployability,install,installation,29,For note: I have enabled the installation of adcc (via pip) on Travis via `-DENABLE_adcc=ON` for testing purposes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-553134043
https://github.com/psi4/psi4/pull/1744#issuecomment-553134043:97,Testability,test,testing,97,For note: I have enabled the installation of adcc (via pip) on Travis via `-DENABLE_adcc=ON` for testing purposes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-553134043
https://github.com/psi4/psi4/pull/1744#issuecomment-553301889:182,Usability,simpl,simple,182,It would be nice for the users to have a memory estimate and check at some point.; Unless `adcc` does the checking itself. ----. > On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. You already mentioned #1033. I'd agree that psi4's `adc` should be disabled for the time being. Perhaps a point to discuss at the upcoming psicon @dgasmith ; Would't necessarily affect this PR though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-553301889
https://github.com/psi4/psi4/pull/1744#issuecomment-553307162:477,Security,expose,exposed,477,">It would be nice for the users to have a memory estimate and check at some point.; Unless adcc does the checking itself. I agree, but so far we do not have this feature in adcc and we don't check. If you run low on memory adcc will more or less just fail. It's a little tricky to estimate that beforehand in adcc due to the lazy import and computational nature of adcc, importing things only as needed. I could be very crude and come up with something rough for the workflows exposed to psi4, but I'd rather think about this more properly and do it at a later point, unless you think it's a major blocker.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-553307162
https://github.com/psi4/psi4/pull/1744#issuecomment-555941172:2,Deployability,Update,Update,2,**Update**: Tests now pass in Azure Linux builds including a few quicktests for adcc. I'll proceed to add documentation when I get round to it (I'm a bit busy at the moment).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-555941172
https://github.com/psi4/psi4/pull/1744#issuecomment-555941172:12,Testability,Test,Tests,12,**Update**: Tests now pass in Azure Linux builds including a few quicktests for adcc. I'll proceed to add documentation when I get round to it (I'm a bit busy at the moment).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-555941172
https://github.com/psi4/psi4/pull/1744#issuecomment-555977921:188,Deployability,release,release,188,"@hokru, respective the memory estimate: I did some experiments and came up with a very rough estimate for the lower bound of a computation. I'll add a check and a warning in the next adcc release if the estimate is a substantial fraction of the main memory. Thanks for your suggestion in the first place. The respective change in adcc will be transparent to the interface needed for this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-555977921
https://github.com/psi4/psi4/pull/1744#issuecomment-555977921:362,Integrability,interface,interface,362,"@hokru, respective the memory estimate: I did some experiments and came up with a very rough estimate for the lower bound of a computation. I'll add a check and a warning in the next adcc release if the estimate is a substantial fraction of the main memory. Thanks for your suggestion in the first place. The respective change in adcc will be transparent to the interface needed for this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-555977921
https://github.com/psi4/psi4/pull/1744#issuecomment-571963453:306,Availability,error,error,306,This pull request **introduces 2 alerts** when merging 47c3cc1af0158385df55f18aeb7b51bce90d2c34 into 51199f8b721b607e35bfae37de94dce9582b4f8b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-dd4848330cf26f526f6c00dfbd180989cd4eb579). **new alerts:**. * 1 for Unused import; * 1 for Syntax error,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-571963453
https://github.com/psi4/psi4/pull/1744#issuecomment-572037768:0,Availability,Ping,Pinging,0,Pinging @psi4/editors again. Please review!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-572037768
https://github.com/psi4/psi4/pull/1745#issuecomment-561305402:7,Deployability,update,update,7,"Status update for those who are watching this: my original attempt at the four-index TPDM elements using pre-existing `libdpd` capabilities proved slower than the existing `libiwl` algorithm, so I've had to write new `libdpd` algorithms. The new algorithm working on just the `VVVV` block is beating the `libiwl` algorithm for speed. I'll need to modify the algorithm to handle more general blocks, make sure the speed is still good, and then I can commit the next step. The current plan is to replace the libiwl and presorting steps, but leave the rest of the TPDM logic as-is. This may change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1745#issuecomment-561305402
https://github.com/psi4/psi4/pull/1745#issuecomment-561305402:566,Testability,log,logic,566,"Status update for those who are watching this: my original attempt at the four-index TPDM elements using pre-existing `libdpd` capabilities proved slower than the existing `libiwl` algorithm, so I've had to write new `libdpd` algorithms. The new algorithm working on just the `VVVV` block is beating the `libiwl` algorithm for speed. I'll need to modify the algorithm to handle more general blocks, make sure the speed is still good, and then I can commit the next step. The current plan is to replace the libiwl and presorting steps, but leave the rest of the TPDM logic as-is. This may change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1745#issuecomment-561305402
https://github.com/psi4/psi4/issues/1747#issuecomment-548850482:291,Availability,error,error,291,"Just to document this here as well, there's no convergence issue with any of the guesses with the default SCF options: SAD converges in 1+16 iterations, Huckel in 18. However, SAD lands on a saddle point, Huckel does not. The problem is the SCF after the stability analysis in SAD: the DIIS error starts out small at 8e-4, dips down, but soon comes back up and plateaus at 6e-4 all the while the energy converges. My first bet would be that something screws up orbital orthonormality in the stability code for UHF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-548850482
https://github.com/psi4/psi4/issues/1747#issuecomment-548850482:328,Availability,down,down,328,"Just to document this here as well, there's no convergence issue with any of the guesses with the default SCF options: SAD converges in 1+16 iterations, Huckel in 18. However, SAD lands on a saddle point, Huckel does not. The problem is the SCF after the stability analysis in SAD: the DIIS error starts out small at 8e-4, dips down, but soon comes back up and plateaus at 6e-4 all the while the energy converges. My first bet would be that something screws up orbital orthonormality in the stability code for UHF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-548850482
https://github.com/psi4/psi4/issues/1747#issuecomment-548850482:396,Energy Efficiency,energy,energy,396,"Just to document this here as well, there's no convergence issue with any of the guesses with the default SCF options: SAD converges in 1+16 iterations, Huckel in 18. However, SAD lands on a saddle point, Huckel does not. The problem is the SCF after the stability analysis in SAD: the DIIS error starts out small at 8e-4, dips down, but soon comes back up and plateaus at 6e-4 all the while the energy converges. My first bet would be that something screws up orbital orthonormality in the stability code for UHF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-548850482
https://github.com/psi4/psi4/issues/1747#issuecomment-549455459:49,Availability,Error,Error,49,"Even using **guess huckel**, I am getting _Fatal Error: Monomer B: A Matrix is not SPD_ while calculatin SAPT(0) energy with UHF reference.; Using Psi4 1.3.2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-549455459
https://github.com/psi4/psi4/issues/1747#issuecomment-549455459:113,Energy Efficiency,energy,energy,113,"Even using **guess huckel**, I am getting _Fatal Error: Monomer B: A Matrix is not SPD_ while calculatin SAPT(0) energy with UHF reference.; Using Psi4 1.3.2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-549455459
https://github.com/psi4/psi4/issues/1747#issuecomment-549478909:420,Integrability,depend,depending,420,"One thing I found before I decided to drop looking into this personally:; Psi rotates the orbitals [pairwise](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libscf_solver/stability.cc#L269). My experience with orbital optimization says the correct thing to do here is multiply the coefficient matrices by a matrix exponential of the unstable vector, and that the current approach will lead to different orbitals depending on what order you apply the pairwise rotations in. It's probably worth reexamining why this pairwise approach is justified, or confirming that it isn't. This calls to mind the Givens rotation approach from the old Sherrill-Krylov paper. And now back to other projects for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-549478909
https://github.com/psi4/psi4/issues/1747#issuecomment-549478909:226,Performance,optimiz,optimization,226,"One thing I found before I decided to drop looking into this personally:; Psi rotates the orbitals [pairwise](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libscf_solver/stability.cc#L269). My experience with orbital optimization says the correct thing to do here is multiply the coefficient matrices by a matrix exponential of the unstable vector, and that the current approach will lead to different orbitals depending on what order you apply the pairwise rotations in. It's probably worth reexamining why this pairwise approach is justified, or confirming that it isn't. This calls to mind the Givens rotation approach from the old Sherrill-Krylov paper. And now back to other projects for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-549478909
https://github.com/psi4/psi4/issues/1747#issuecomment-870076604:177,Availability,error,error,177,"This is... a complicated one. As far as I can tell, there are multiple issues here:. 1. Are there any other ways SAPT can detect non-SPD MO hessians? This would have caught the error with the SAP file.; 2. Why did the SAP_stability not detect an instability in the second case? If it's genuinely stable, there's not much we can do. This may be a failing in the Davidson solver.; 3. Instability following should be changed to use an exponentiation rather than Givens rotation.; 4. SAPT should detect disturbingly large delta HF energies and warn the user that the results are suspicious. The error message should also be clarified, but that's #1682.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604
https://github.com/psi4/psi4/issues/1747#issuecomment-870076604:591,Availability,error,error,591,"This is... a complicated one. As far as I can tell, there are multiple issues here:. 1. Are there any other ways SAPT can detect non-SPD MO hessians? This would have caught the error with the SAP file.; 2. Why did the SAP_stability not detect an instability in the second case? If it's genuinely stable, there's not much we can do. This may be a failing in the Davidson solver.; 3. Instability following should be changed to use an exponentiation rather than Givens rotation.; 4. SAPT should detect disturbingly large delta HF energies and warn the user that the results are suspicious. The error message should also be clarified, but that's #1682.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604
https://github.com/psi4/psi4/issues/1747#issuecomment-870076604:597,Integrability,message,message,597,"This is... a complicated one. As far as I can tell, there are multiple issues here:. 1. Are there any other ways SAPT can detect non-SPD MO hessians? This would have caught the error with the SAP file.; 2. Why did the SAP_stability not detect an instability in the second case? If it's genuinely stable, there's not much we can do. This may be a failing in the Davidson solver.; 3. Instability following should be changed to use an exponentiation rather than Givens rotation.; 4. SAPT should detect disturbingly large delta HF energies and warn the user that the results are suspicious. The error message should also be clarified, but that's #1682.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604
https://github.com/psi4/psi4/issues/1747#issuecomment-870076604:122,Safety,detect,detect,122,"This is... a complicated one. As far as I can tell, there are multiple issues here:. 1. Are there any other ways SAPT can detect non-SPD MO hessians? This would have caught the error with the SAP file.; 2. Why did the SAP_stability not detect an instability in the second case? If it's genuinely stable, there's not much we can do. This may be a failing in the Davidson solver.; 3. Instability following should be changed to use an exponentiation rather than Givens rotation.; 4. SAPT should detect disturbingly large delta HF energies and warn the user that the results are suspicious. The error message should also be clarified, but that's #1682.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604
https://github.com/psi4/psi4/issues/1747#issuecomment-870076604:236,Safety,detect,detect,236,"This is... a complicated one. As far as I can tell, there are multiple issues here:. 1. Are there any other ways SAPT can detect non-SPD MO hessians? This would have caught the error with the SAP file.; 2. Why did the SAP_stability not detect an instability in the second case? If it's genuinely stable, there's not much we can do. This may be a failing in the Davidson solver.; 3. Instability following should be changed to use an exponentiation rather than Givens rotation.; 4. SAPT should detect disturbingly large delta HF energies and warn the user that the results are suspicious. The error message should also be clarified, but that's #1682.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604
https://github.com/psi4/psi4/issues/1747#issuecomment-870076604:492,Safety,detect,detect,492,"This is... a complicated one. As far as I can tell, there are multiple issues here:. 1. Are there any other ways SAPT can detect non-SPD MO hessians? This would have caught the error with the SAP file.; 2. Why did the SAP_stability not detect an instability in the second case? If it's genuinely stable, there's not much we can do. This may be a failing in the Davidson solver.; 3. Instability following should be changed to use an exponentiation rather than Givens rotation.; 4. SAPT should detect disturbingly large delta HF energies and warn the user that the results are suspicious. The error message should also be clarified, but that's #1682.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604
https://github.com/psi4/psi4/pull/1748#issuecomment-549383231:173,Deployability,pipeline,pipeline,173,"Same situation, sadly. GCC builds are much slower than Clang builds, and uploading the cache (unrelated to Ninja or Makefiles) really hurts. We might want to move one Linux pipeline to Azure or Circle CI, at some point...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1748#issuecomment-549383231
https://github.com/psi4/psi4/pull/1748#issuecomment-549383231:87,Performance,cache,cache,87,"Same situation, sadly. GCC builds are much slower than Clang builds, and uploading the cache (unrelated to Ninja or Makefiles) really hurts. We might want to move one Linux pipeline to Azure or Circle CI, at some point...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1748#issuecomment-549383231
https://github.com/psi4/psi4/pull/1749#issuecomment-551189913:2,Deployability,update,updated,2,I updated the graph at the start of the pull request to reflect the `DGAS Victory` commit,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1749#issuecomment-551189913
https://github.com/psi4/psi4/pull/1749#issuecomment-554162946:54,Testability,test,test,54,"@obrien951 Looks good, please do try out that scaling test just to double check a few items.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1749#issuecomment-554162946
https://github.com/psi4/psi4/issues/1750#issuecomment-551770270:403,Availability,error,error,403,"Thanks for the report. I imagine the problem is that we (@zachglick) [changed the relevant constructor a few months back to have a default boolean argument](https://github.com/psi4/psi4/commit/85ce7af9c23d0280946e2040967e12bcd6ab3f01#diff-c513bb8f4c4e0c8ba6348974ebff6db2L182-R182). objdump tells me Psi exposes a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double, bool)` symbol, and your error message is looking for a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double)` symbol. I'm surprised that adding a default argument would force other programs to supply a value, but I'll leave this to somebody more experienced in the ways of plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270
https://github.com/psi4/psi4/issues/1750#issuecomment-551770270:409,Integrability,message,message,409,"Thanks for the report. I imagine the problem is that we (@zachglick) [changed the relevant constructor a few months back to have a default boolean argument](https://github.com/psi4/psi4/commit/85ce7af9c23d0280946e2040967e12bcd6ab3f01#diff-c513bb8f4c4e0c8ba6348974ebff6db2L182-R182). objdump tells me Psi exposes a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double, bool)` symbol, and your error message is looking for a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double)` symbol. I'm surprised that adding a default argument would force other programs to supply a value, but I'll leave this to somebody more experienced in the ways of plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270
https://github.com/psi4/psi4/issues/1750#issuecomment-551770270:663,Modifiability,plugin,plugins,663,"Thanks for the report. I imagine the problem is that we (@zachglick) [changed the relevant constructor a few months back to have a default boolean argument](https://github.com/psi4/psi4/commit/85ce7af9c23d0280946e2040967e12bcd6ab3f01#diff-c513bb8f4c4e0c8ba6348974ebff6db2L182-R182). objdump tells me Psi exposes a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double, bool)` symbol, and your error message is looking for a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double)` symbol. I'm surprised that adding a default argument would force other programs to supply a value, but I'll leave this to somebody more experienced in the ways of plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270
https://github.com/psi4/psi4/issues/1750#issuecomment-551770270:304,Security,expose,exposes,304,"Thanks for the report. I imagine the problem is that we (@zachglick) [changed the relevant constructor a few months back to have a default boolean argument](https://github.com/psi4/psi4/commit/85ce7af9c23d0280946e2040967e12bcd6ab3f01#diff-c513bb8f4c4e0c8ba6348974ebff6db2L182-R182). objdump tells me Psi exposes a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double, bool)` symbol, and your error message is looking for a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double)` symbol. I'm surprised that adding a default argument would force other programs to supply a value, but I'll leave this to somebody more experienced in the ways of plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270
https://github.com/psi4/psi4/issues/1751#issuecomment-551931052:276,Performance,optimiz,optimization,276,"[Spin-component scaling](https://pubs.acs.org/doi/pdf/10.1021/jp105647c) (eq. 5, 8, 9) and [spin-opposite-scaling](https://aip.scitation.org/doi/10.1063/1.2718952) (eq. 1, 5) seem to be defined such that the scaling _should_ be included in the Lagrangian and thus the orbital optimization. I can't speak to what behavior was intended when `occ` was coded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1751#issuecomment-551931052
https://github.com/psi4/psi4/pull/1753#issuecomment-554453362:305,Modifiability,variab,variable,305,This pull request **introduces 5 alerts** and **fixes 1** when merging 81f7c98a543690025cd912fc41faa15fcc5e13c1 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-11e88e66d853d73faecbc137d4cf4605b3437e15). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1753#issuecomment-554453362
https://github.com/psi4/psi4/pull/1753#issuecomment-554453362:346,Modifiability,Variab,Variable,346,This pull request **introduces 5 alerts** and **fixes 1** when merging 81f7c98a543690025cd912fc41faa15fcc5e13c1 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-11e88e66d853d73faecbc137d4cf4605b3437e15). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1753#issuecomment-554453362
https://github.com/psi4/psi4/pull/1753#issuecomment-554525628:305,Modifiability,variab,variable,305,This pull request **introduces 5 alerts** and **fixes 1** when merging 45869c0b40107b7055cfb5275da227dd06575d88 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c245d356f39c7bbcaf02271f9d0b0bbf55f11efd). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1753#issuecomment-554525628
https://github.com/psi4/psi4/pull/1753#issuecomment-554525628:346,Modifiability,Variab,Variable,346,This pull request **introduces 5 alerts** and **fixes 1** when merging 45869c0b40107b7055cfb5275da227dd06575d88 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c245d356f39c7bbcaf02271f9d0b0bbf55f11efd). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1753#issuecomment-554525628
https://github.com/psi4/psi4/pull/1755#issuecomment-557313549:288,Deployability,release,released,288,This pull request **fixes 24 alerts** when merging e5a14899eabffc69e4d5d6936e899c47d3481815 into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-45f5575234c16e273f606813c2184f52d81cfdff). **fixed alerts:**. * 24 for Resource not released in destructor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1755#issuecomment-557313549
https://github.com/psi4/psi4/pull/1756#issuecomment-557577957:141,Modifiability,plugin,plugins,141,"I mentioned this on Slack, but at present, only the Correlated procedure is used in Psi, and the others are legacy code. I have no idea what plugins are doing, but I assumed those all used Correlated as well. Let me know if you're going to change that. I imagine that you're using the SCF procedure for CASSCF purposes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-557577957
https://github.com/psi4/psi4/pull/1756#issuecomment-557580614:107,Availability,avail,available,107,"We need the correlated procedure to run CASSCF and may adapt the code to use DF once the new Deriv code is available. In putting together this PR, my intention was to make very limited changes and only improve the functionality of the current code. Since I am not sure what plugins do, I just reproduced the old functionality as it was before. I'd be happy to delete some of the legacy code if we are certain it is not used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614
https://github.com/psi4/psi4/pull/1756#issuecomment-557580614:55,Energy Efficiency,adapt,adapt,55,"We need the correlated procedure to run CASSCF and may adapt the code to use DF once the new Deriv code is available. In putting together this PR, my intention was to make very limited changes and only improve the functionality of the current code. Since I am not sure what plugins do, I just reproduced the old functionality as it was before. I'd be happy to delete some of the legacy code if we are certain it is not used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614
https://github.com/psi4/psi4/pull/1756#issuecomment-557580614:55,Modifiability,adapt,adapt,55,"We need the correlated procedure to run CASSCF and may adapt the code to use DF once the new Deriv code is available. In putting together this PR, my intention was to make very limited changes and only improve the functionality of the current code. Since I am not sure what plugins do, I just reproduced the old functionality as it was before. I'd be happy to delete some of the legacy code if we are certain it is not used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614
https://github.com/psi4/psi4/pull/1756#issuecomment-557580614:274,Modifiability,plugin,plugins,274,"We need the correlated procedure to run CASSCF and may adapt the code to use DF once the new Deriv code is available. In putting together this PR, my intention was to make very limited changes and only improve the functionality of the current code. Since I am not sure what plugins do, I just reproduced the old functionality as it was before. I'd be happy to delete some of the legacy code if we are certain it is not used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614
https://github.com/psi4/psi4/pull/1756#issuecomment-558253387:88,Testability,test,testing,88,@loriab: I indeed forgot to pass the default to python. Pushed a commit and waiting for testing. In the long run the default should disappear.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-558253387
https://github.com/psi4/psi4/issues/1757#issuecomment-557979152:8,Energy Efficiency,charge,charge,8,I think charge comes first among the arguments. https://github.com/psi4/psi4/blob/master/tests/extern1/input.dat#L24 Your input possibly interpreted as no charge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1757#issuecomment-557979152
https://github.com/psi4/psi4/issues/1757#issuecomment-557979152:155,Energy Efficiency,charge,charge,155,I think charge comes first among the arguments. https://github.com/psi4/psi4/blob/master/tests/extern1/input.dat#L24 Your input possibly interpreted as no charge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1757#issuecomment-557979152
https://github.com/psi4/psi4/issues/1757#issuecomment-557979152:89,Testability,test,tests,89,I think charge comes first among the arguments. https://github.com/psi4/psi4/blob/master/tests/extern1/input.dat#L24 Your input possibly interpreted as no charge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1757#issuecomment-557979152
https://github.com/psi4/psi4/issues/1758#issuecomment-558010826:4,Safety,hazard,hazard,4,"I'd hazard we need something like ; ``` } else if (options_.get_str(""RELATIVISTIC"") == ""X2C"") {; outfile->Printf("" OEINTS: Using relativistic (X2C) overlap, kinetic, and potential integrals.\n"");. if (!rel_basisset_) {; throw PSIEXCEPTION(""OEINTS: X2C requested, but relativistic basis was not set."");; } ; X2CInt x2cint;; SharedMatrix so_overlap_x2c = so_overlap();; SharedMatrix so_kinetic_x2c = so_kinetic();; SharedMatrix so_potential_x2c = so_potential();; x2cint.compute(basisset_, rel_basisset_, so_overlap_x2c, so_kinetic_x2c, so_potential_x2c);. potential_mat->add(so_potential_x2c);; } ; ```; about [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L1338) but that's not a literal fix. @fevangelista, is that on the right track?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558010826
https://github.com/psi4/psi4/issues/1758#issuecomment-558061727:167,Integrability,depend,depends,167,Relativity does add some further complications into the mix. IIRC the X2C transform would have to be computed differently. (Whether it's an electric or magnetic field depends on the frame!),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558061727
https://github.com/psi4/psi4/issues/1758#issuecomment-558485452:89,Energy Efficiency,charge,charges,89,"Thanks for the insightful comments. @fevangelista @loriab @susilehtola Would QM/MM point charges entering the Hamiltonian or other perturbations have similar issues? Also, when computing derivatives of the energy, e.g. forces on nuclei, these will also be affected by the relativistic corrections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558485452
https://github.com/psi4/psi4/issues/1758#issuecomment-558485452:206,Energy Efficiency,energy,energy,206,"Thanks for the insightful comments. @fevangelista @loriab @susilehtola Would QM/MM point charges entering the Hamiltonian or other perturbations have similar issues? Also, when computing derivatives of the energy, e.g. forces on nuclei, these will also be affected by the relativistic corrections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558485452
https://github.com/psi4/psi4/issues/1758#issuecomment-558530297:34,Availability,error,error,34,"The picture change transformation error should only be relevant in the nuclear region. If you have point charges in a QM/MM embedding fashion, these should be so far away from the QM regions that picture-change transforming that potential would have a negligible numerical effect. This is the approached used [here](https://pubs.acs.org/doi/10.1021/acs.jctc.7b00162) As far as I know, no one ever tested this assumption. The authors of this paper note:. > A note should be added regarding the use of X2C Hamiltonians. In this case, the one-electron part of the Fock matrix is transformed (see, e.g., ref 7 for details). Strictly, all external fields (including a field from a environment) should also be transformed. Currently, our PE-X2C-DFT implementation involves transformation only of the vacuum terms. Thus, the PE operator is left untransformed, and the untransformed operator is carried over to the linear response formalism described below (following the general implementation in the DIRAC program, all property operators are always transformed).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558530297
https://github.com/psi4/psi4/issues/1758#issuecomment-558530297:105,Energy Efficiency,charge,charges,105,"The picture change transformation error should only be relevant in the nuclear region. If you have point charges in a QM/MM embedding fashion, these should be so far away from the QM regions that picture-change transforming that potential would have a negligible numerical effect. This is the approached used [here](https://pubs.acs.org/doi/10.1021/acs.jctc.7b00162) As far as I know, no one ever tested this assumption. The authors of this paper note:. > A note should be added regarding the use of X2C Hamiltonians. In this case, the one-electron part of the Fock matrix is transformed (see, e.g., ref 7 for details). Strictly, all external fields (including a field from a environment) should also be transformed. Currently, our PE-X2C-DFT implementation involves transformation only of the vacuum terms. Thus, the PE operator is left untransformed, and the untransformed operator is carried over to the linear response formalism described below (following the general implementation in the DIRAC program, all property operators are always transformed).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558530297
https://github.com/psi4/psi4/issues/1758#issuecomment-558530297:397,Testability,test,tested,397,"The picture change transformation error should only be relevant in the nuclear region. If you have point charges in a QM/MM embedding fashion, these should be so far away from the QM regions that picture-change transforming that potential would have a negligible numerical effect. This is the approached used [here](https://pubs.acs.org/doi/10.1021/acs.jctc.7b00162) As far as I know, no one ever tested this assumption. The authors of this paper note:. > A note should be added regarding the use of X2C Hamiltonians. In this case, the one-electron part of the Fock matrix is transformed (see, e.g., ref 7 for details). Strictly, all external fields (including a field from a environment) should also be transformed. Currently, our PE-X2C-DFT implementation involves transformation only of the vacuum terms. Thus, the PE operator is left untransformed, and the untransformed operator is carried over to the linear response formalism described below (following the general implementation in the DIRAC program, all property operators are always transformed).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558530297
https://github.com/psi4/psi4/issues/1758#issuecomment-566550950:180,Energy Efficiency,Energy,Energy,180,I think I got it in the new PR I am working on right now (#1770). Here are the X2C energies w and w/o the field. I think the difference looks similar to DKH. ```; x2c_0.out: Total Energy = -2.8613053511779594; x2c_p.out: Total Energy = -2.8679759489083452; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-566550950
https://github.com/psi4/psi4/issues/1758#issuecomment-566550950:227,Energy Efficiency,Energy,Energy,227,I think I got it in the new PR I am working on right now (#1770). Here are the X2C energies w and w/o the field. I think the difference looks similar to DKH. ```; x2c_0.out: Total Energy = -2.8613053511779594; x2c_p.out: Total Energy = -2.8679759489083452; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-566550950
https://github.com/psi4/psi4/issues/1758#issuecomment-568437361:50,Testability,test,test,50,Thanks! That is good news. A student ran the same test with DIRAC and got the following outputs:. ```; x2c_0.out -2.8612839050684364; x2c_p.out (field=0.1) -2.8679305399790476; ```. SCF convergence and other settings might differ a little.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-568437361
https://github.com/psi4/psi4/pull/1759#issuecomment-558278222:122,Deployability,update,update,122,"@fevangelista yes that would be easy, but it would still be numerically unstable. Wait for a few hours for the next arXiv update to see the correct solution ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1759#issuecomment-558278222
https://github.com/psi4/psi4/pull/1760#issuecomment-562826868:133,Performance,optimiz,optimizing,133,> Interesting idea to drop the duplicate shells. We generally consider that the total drop is pretty small and haven't worried about optimizing for this case much. For example coronene aug-cc-pVTZ duplication is only about 15% which is a pretty extreme case. Do you have example where very large numbers of AO's are dropped?. See the paper on arXiv. I think the usual use case would be multiply augmented basis sets that are needed for special applications. But the current implementation will go a long way to make sure the program works even for these pathological cases.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-562826868
https://github.com/psi4/psi4/pull/1760#issuecomment-565606760:48,Availability,error,error,48,"if you'll rebase now, the Linux `using_mp2d` CI error should go away. there'll also be a Windows spot check section, https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-windows.yml#L191-L197 . If you add your failing Win test there, we should get better output for debugging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-565606760
https://github.com/psi4/psi4/pull/1760#issuecomment-565606760:165,Deployability,pipeline,pipelines,165,"if you'll rebase now, the Linux `using_mp2d` CI error should go away. there'll also be a Windows spot check section, https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-windows.yml#L191-L197 . If you add your failing Win test there, we should get better output for debugging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-565606760
https://github.com/psi4/psi4/pull/1760#issuecomment-565606760:181,Deployability,pipeline,pipelines-windows,181,"if you'll rebase now, the Linux `using_mp2d` CI error should go away. there'll also be a Windows spot check section, https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-windows.yml#L191-L197 . If you add your failing Win test there, we should get better output for debugging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-565606760
https://github.com/psi4/psi4/pull/1760#issuecomment-565606760:243,Testability,test,test,243,"if you'll rebase now, the Linux `using_mp2d` CI error should go away. there'll also be a Windows spot check section, https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-windows.yml#L191-L197 . If you add your failing Win test there, we should get better output for debugging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-565606760
https://github.com/psi4/psi4/pull/1760#issuecomment-565795100:21,Availability,failure,failure,21,"Looks like the azure failure was caused by something else in psi4, which has now been fixed by a rebase. Ready to merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-565795100
https://github.com/psi4/psi4/pull/1760#issuecomment-565980810:0,Availability,error,error,0,error is a Windows install of conda that chocolatey seems to be failing connection on today. It was passing CI earlier.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-565980810
https://github.com/psi4/psi4/pull/1760#issuecomment-565980810:19,Deployability,install,install,19,error is a Windows install of conda that chocolatey seems to be failing connection on today. It was passing CI earlier.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-565980810
