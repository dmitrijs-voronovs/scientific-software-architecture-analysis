id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:1513,Safety,redund,redundant,1513,"tice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://tools.ietf.org/html/rfc1951; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:1794,Testability,test,testing,1794,"tice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://tools.ietf.org/html/rfc1951; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:665,Usability,simpl,simple,665,"/* deflate.c -- compress data using the deflation algorithm; * Copyright (C) 1995-2013 Jean-loup Gailly and Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://tools.ietf.org/html/rfc1951; *; * A description of the Rabin and Karp algorithm is given i",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:45,Energy Efficiency,Power,PowerPC,45,"/* XLC or GCC-compatible compiler, targeting PowerPC with VMX/VSX */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:38,Energy Efficiency,Power,PowerPC,38,"/* GCC-compatible compiler, targeting PowerPC with SPE */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:15,Performance,perform,performed,15,/* block flush performed */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:11,Security,hash,hash,11,/* Tail of hash chains */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:63,Integrability,depend,depending,63,"/* Values for max_lazy_match, good_match and max_chain_length, depending on; * the desired pack level (0..9). The values given below have been tuned to; * exclude worst case performance for pathological files. Better values may be; * found for specific files.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:143,Performance,tune,tuned,143,"/* Values for max_lazy_match, good_match and max_chain_length, depending on; * the desired pack level (0..9). The values given below have been tuned to; * exclude worst case performance for pathological files. Better values may be; * found for specific files.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:174,Performance,perform,performance,174,"/* Values for max_lazy_match, good_match and max_chain_length, depending on; * the desired pack level (0..9). The values given below have been tuned to; * exclude worst case performance for pathological files. Better values may be; * found for specific files.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:3,Energy Efficiency,reduce,reduce,3,/* reduce lazy search above this match length */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:10,Performance,perform,perform,10,/* do not perform lazy search above this match length */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:331,Availability,down,download,331,"//// same algorithm as crc32_bitwise; //for (int i = 0; i <= 0xFF; i++); //{; // uint32_t crc = i;; // for (int j = 0; j < 8; j++); // crc = (crc >> 1) ^ ((crc & 1) * Polynomial);; // Crc32Lookup[0][i] = crc;; //}; //// ... and the following slicing-by-8 algorithm (from Intel):; //// http://www.intel.com/technology/comms/perfnet/download/CRC_generators.pdf; //// http://sourceforge.net/projects/slicing-by-8/; //for (int slice = 1; slice < MaxSlice; slice++); // Crc32Lookup[slice][i] = (Crc32Lookup[slice - 1][i] >> 8) ^ Crc32Lookup[0][Crc32Lookup[slice - 1][i] & 0xFF];",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:12,Performance,optimiz,optimization,12,"// enabling optimization (at least -O2) automatically unrolls the inner for-loop",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:12,Performance,optimiz,optimization,12,"// enabling optimization (at least -O2) automatically unrolls the inner for-loop",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:12,Performance,optimiz,optimization,12,"// enabling optimization (at least -O2) automatically unrolls the for-loop",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:157,Security,hash,hash,157,/* ===========================================================================; * Insert string str in the dictionary and return the previous head; * of the hash chain (the most recent string with same hash key).; * IN assertion: ACTUAL_MIN_MATCH bytes of str are valid; * (except for the last ACTUAL_MIN_MATCH-1 bytes of the input file).; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:202,Security,hash,hash,202,/* ===========================================================================; * Insert string str in the dictionary and return the previous head; * of the hash chain (the most recent string with same hash key).; * IN assertion: ACTUAL_MIN_MATCH bytes of str are valid; * (except for the last ACTUAL_MIN_MATCH-1 bytes of the input file).; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:219,Testability,assert,assertion,219,/* ===========================================================================; * Insert string str in the dictionary and return the previous head; * of the hash chain (the most recent string with same hash key).; * IN assertion: ACTUAL_MIN_MATCH bytes of str are valid; * (except for the last ACTUAL_MIN_MATCH-1 bytes of the input file).; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:97,Security,hash,hash,97,/* ===========================================================================; * Initialize the hash table prev[] will be initialized on the fly.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:17,Integrability,wrap,wrapper,17,/* suppress zlib wrapper */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:14,Integrability,wrap,wrapper,14,/* write gzip wrapper instead */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:19,Integrability,wrap,wrappers,19,"/* when using zlib wrappers, compute Adler-32 for provided dictionary */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:3,Safety,avoid,avoid,3,"/* avoid computing Adler-32 in read_buf */; /* if dictionary would fill window, just replace the history */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:37,Security,hash,hash,37,/* insert dictionary into window and hash */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:24,Energy Efficiency,allocate,allocate,24,/* use zfree if we ever allocate msg dynamically */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:64,Integrability,wrap,wrapper,64,"/* if can't get parameters, return conservative bound plus zlib wrapper */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:11,Integrability,wrap,wrapper,11,/* compute wrapper length */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:8,Integrability,wrap,wrapper,8,/* zlib wrapper */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:8,Integrability,wrap,wrapper,8,/* gzip wrapper */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:159,Testability,assert,assertion,159,/* =========================================================================; * Put a short in the pending buffer. The 16-bit value is put in MSB order.; * IN assertion: the stream state is correct and there is enough room in; * pending_buf.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:222,Safety,avoid,avoid,222,/* =========================================================================; * Flush as much pending output as possible. All deflate() output goes; * through this function so some applications may wish to modify it; * to avoid allocating a large strm->next_out buffer and copying into it.; * (See also read_buf()).; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:21,Deployability,update,update,21,/* start of bytes to update crc */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:21,Deployability,update,update,21,/* start of bytes to update crc */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:21,Deployability,update,update,21,/* start of bytes to update crc */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:196,Availability,error,error,196,"/* Since avail_out is 0, deflate will be called again with; * more output space, but possibly with both pending and; * avail_in equal to zero. There won't be anything to do,; * but this is not an error situation so make sure we; * return OK instead of BUF_ERROR at next call of deflate:; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:42,Safety,avoid,avoid,42,"/* Make sure there is something to do and avoid duplicate consecutive; * flushes. For repeated and useless calls with Z_FINISH, we keep; * returning Z_STREAM_END instead of Z_BUF_ERROR.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:3,Safety,avoid,avoid,3,"/* avoid BUF_ERROR next call, see above */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:3,Safety,avoid,avoid,3,"/* avoid BUF_ERROR at next call, see above */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:134,Usability,simpl,simplify,134,"/* =========================================================================; * Copy the source state to the destination state.; * To simplify the source, this is not supported for 16-bit MSDOS (which; * doesn't have enough memory anyway to duplicate compression states).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:131,Deployability,update,update,131,"/* ===========================================================================; * Read a new buffer from the current input stream, update the adler32; * and total number of bytes read. All deflate() input goes through; * this function so some applications may wish to modify it to avoid; * allocating a large strm->next_in buffer and copying from it.; * (See also flush_pending()).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:281,Safety,avoid,avoid,281,"/* ===========================================================================; * Read a new buffer from the current input stream, update the adler32; * and total number of bytes read. All deflate() input goes through; * this function so some applications may wish to modify it to avoid; * allocating a large strm->next_in buffer and copying from it.; * (See also flush_pending()).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:113,Integrability,rout,routines,113,"/* ===========================================================================; * Initialize the ""longest match"" routines for a new zlib stream; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:19,Deployability,configurat,configuration,19,/* Set the default configuration parameters:; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:19,Modifiability,config,configuration,19,/* Set the default configuration parameters:; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:48,Performance,perform,performance,48,"/* longest_match() with minor change to improve performance (in terms of; * execution time).; *; * The pristine longest_match() function is sketched bellow (strip the; * then-clause of the ""#ifdef UNALIGNED_OK""-directive); *; * ------------------------------------------------------------; * uInt longest_match(...) {; * ...; * do {; * match = s->window + cur_match; //s0; * if (*(ushf*)(match+best_len-1) != scan_end || //s1; * *(ushf*)match != scan_start) continue; //s2; * ...; *; * do {; * } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * scan < strend); //s3; *; * ...; * } while(cond); //s4; *; * -------------------------------------------------------------; *; * The change include:; *; * 1) The hottest statements of the function is: s0, s1 and s4. Pull them; * together to form a new loop. The benefit is two-fold:; *; * o. Ease the compiler to yield good code layout: the conditional-branch; * corresponding to s1 and its biased target s4 become very close (likely,; * fit in the same cache-line), hence improving instruction-fetching; * efficiency.; *; * o. Ease the compiler to promote ""s->window"" into register. ""s->window""; * is loop-invariant; it is supposed to be promoted into register and keep; * the value throughout the entire loop. However, there are many such; * loop-invariant, and x86-family has small register file; ""s->window"" is; * likely to be chosen as register-allocation victim such that its value; * is reloaded from memory in every single iteration. By forming a new loop,; * ""s->window"" is loop-invariant of that newly created tight loop. It is; * lot easier for compiler to promote this quantity to register and keep; * its value throughout the entire small loop.; *; * 2) Transfrom s3 such that it examines sizeof(long)-byte-match at a time.; * This is done by:; * ------------------------------------------------; * v1 ",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:1140,Performance,cache,cache-line,1140,").; *; * The pristine longest_match() function is sketched bellow (strip the; * then-clause of the ""#ifdef UNALIGNED_OK""-directive); *; * ------------------------------------------------------------; * uInt longest_match(...) {; * ...; * do {; * match = s->window + cur_match; //s0; * if (*(ushf*)(match+best_len-1) != scan_end || //s1; * *(ushf*)match != scan_start) continue; //s2; * ...; *; * do {; * } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * scan < strend); //s3; *; * ...; * } while(cond); //s4; *; * -------------------------------------------------------------; *; * The change include:; *; * 1) The hottest statements of the function is: s0, s1 and s4. Pull them; * together to form a new loop. The benefit is two-fold:; *; * o. Ease the compiler to yield good code layout: the conditional-branch; * corresponding to s1 and its biased target s4 become very close (likely,; * fit in the same cache-line), hence improving instruction-fetching; * efficiency.; *; * o. Ease the compiler to promote ""s->window"" into register. ""s->window""; * is loop-invariant; it is supposed to be promoted into register and keep; * the value throughout the entire loop. However, there are many such; * loop-invariant, and x86-family has small register file; ""s->window"" is; * likely to be chosen as register-allocation victim such that its value; * is reloaded from memory in every single iteration. By forming a new loop,; * ""s->window"" is loop-invariant of that newly created tight loop. It is; * lot easier for compiler to promote this quantity to register and keep; * its value throughout the entire small loop.; *; * 2) Transfrom s3 such that it examines sizeof(long)-byte-match at a time.; * This is done by:; * ------------------------------------------------; * v1 = load from ""scan"" by sizeof(long) bytes; * v2 = load from ""match"" by sizeof(lnog) bytes; ",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:2003,Performance,load,load,2003,"ndow + cur_match; //s0; * if (*(ushf*)(match+best_len-1) != scan_end || //s1; * *(ushf*)match != scan_start) continue; //s2; * ...; *; * do {; * } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * scan < strend); //s3; *; * ...; * } while(cond); //s4; *; * -------------------------------------------------------------; *; * The change include:; *; * 1) The hottest statements of the function is: s0, s1 and s4. Pull them; * together to form a new loop. The benefit is two-fold:; *; * o. Ease the compiler to yield good code layout: the conditional-branch; * corresponding to s1 and its biased target s4 become very close (likely,; * fit in the same cache-line), hence improving instruction-fetching; * efficiency.; *; * o. Ease the compiler to promote ""s->window"" into register. ""s->window""; * is loop-invariant; it is supposed to be promoted into register and keep; * the value throughout the entire loop. However, there are many such; * loop-invariant, and x86-family has small register file; ""s->window"" is; * likely to be chosen as register-allocation victim such that its value; * is reloaded from memory in every single iteration. By forming a new loop,; * ""s->window"" is loop-invariant of that newly created tight loop. It is; * lot easier for compiler to promote this quantity to register and keep; * its value throughout the entire small loop.; *; * 2) Transfrom s3 such that it examines sizeof(long)-byte-match at a time.; * This is done by:; * ------------------------------------------------; * v1 = load from ""scan"" by sizeof(long) bytes; * v2 = load from ""match"" by sizeof(lnog) bytes; * v3 = v1 xor v2; * match-bit = little-endian-machine(yes-for-x86) ?; * count-trailing-zero(v3) :; * count-leading-zero(v3);; *; * match-byte = match-bit/8; *; * ""scan"" and ""match"" advance if necessary; * -------------------------------------------------; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:2050,Performance,load,load,2050,"ndow + cur_match; //s0; * if (*(ushf*)(match+best_len-1) != scan_end || //s1; * *(ushf*)match != scan_start) continue; //s2; * ...; *; * do {; * } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&; * scan < strend); //s3; *; * ...; * } while(cond); //s4; *; * -------------------------------------------------------------; *; * The change include:; *; * 1) The hottest statements of the function is: s0, s1 and s4. Pull them; * together to form a new loop. The benefit is two-fold:; *; * o. Ease the compiler to yield good code layout: the conditional-branch; * corresponding to s1 and its biased target s4 become very close (likely,; * fit in the same cache-line), hence improving instruction-fetching; * efficiency.; *; * o. Ease the compiler to promote ""s->window"" into register. ""s->window""; * is loop-invariant; it is supposed to be promoted into register and keep; * the value throughout the entire loop. However, there are many such; * loop-invariant, and x86-family has small register file; ""s->window"" is; * likely to be chosen as register-allocation victim such that its value; * is reloaded from memory in every single iteration. By forming a new loop,; * ""s->window"" is loop-invariant of that newly created tight loop. It is; * lot easier for compiler to promote this quantity to register and keep; * its value throughout the entire small loop.; *; * 2) Transfrom s3 such that it examines sizeof(long)-byte-match at a time.; * This is done by:; * ------------------------------------------------; * v1 = load from ""scan"" by sizeof(long) bytes; * v2 = load from ""match"" by sizeof(lnog) bytes; * v3 = v1 xor v2; * match-bit = little-endian-machine(yes-for-x86) ?; * count-trailing-zero(v3) :; * count-leading-zero(v3);; *; * match-byte = match-bit/8; *; * ""scan"" and ""match"" advance if necessary; * -------------------------------------------------; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:7,Security,hash,hash,7,/* max hash chain length */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:44,Usability,simpl,simplify,44,"/* Stop when cur_match becomes <= limit. To simplify the code,; * we prevent matches with the string of window index 0.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:6,Performance,optimiz,optimize,6,/* We optimize for a minimal match of four bytes */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:15,Performance,optimiz,optimized,15,/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.; * It is easy to get rid of this optimization if necessary.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:109,Performance,optimiz,optimization,109,/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.; * It is easy to get rid of this optimization if necessary.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:301,Integrability,depend,depend,301,"/* Skip to next match if the match length cannot increase; * or if the match length is less than 2. Note that the checks below; * for insufficient lookahead only occur occasionally for performance; * reasons. Therefore uninitialized memory will be accessed, and; * conditional jumps will be made that depend on those values.; * However the length of the match is limited to the lookahead, so; * the output of deflate is not affected by the uninitialized values.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:185,Performance,perform,performance,185,"/* Skip to next match if the match length cannot increase; * or if the match length is less than 2. Note that the checks below; * for insufficient lookahead only occur occasionally for performance; * reasons. Therefore uninitialized memory will be accessed, and; * conditional jumps will be made that depend on those values.; * However the length of the match is limited to the lookahead, so; * the output of deflate is not affected by the uninitialized values.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:248,Security,access,accessed,248,"/* Skip to next match if the match length cannot increase; * or if the match length is less than 2. Note that the checks below; * for insufficient lookahead only occur occasionally for performance; * reasons. Therefore uninitialized memory will be accessed, and; * conditional jumps will be made that depend on those values.; * However the length of the match is limited to the lookahead, so; * the output of deflate is not affected by the uninitialized values.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:155,Deployability,Update,Updates,155,"/* DEBUG */; /* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:357,Performance,perform,performed,357,"/* DEBUG */; /* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:196,Testability,assert,assertion,196,"/* DEBUG */; /* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:240,Testability,assert,assertions,240,"/* DEBUG */; /* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:34,Safety,avoid,avoided,34,"/* Slide the hash table (could be avoided with 32 bit values; at the expense of memory usage). We slide even when level == 0; to keep the hash table consistent if we switch back to level > 0; later. (Using level 0 permanently is not an optimal usage of; zlib, so we don't care about this pathological case.); */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:13,Security,hash,hash,13,"/* Slide the hash table (could be avoided with 32 bit values; at the expense of memory usage). We slide even when level == 0; to keep the hash table consistent if we switch back to level > 0; later. (Using level 0 permanently is not an optimal usage of; zlib, so we don't care about this pathological case.); */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:138,Security,hash,hash,138,"/* Slide the hash table (could be avoided with 32 bit values; at the expense of memory usage). We slide even when level == 0; to keep the hash table consistent if we switch back to level > 0; later. (Using level 0 permanently is not an optimal usage of; zlib, so we don't care about this pathological case.); */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:22,Security,hash,hash,22,"/* If n is not on any hash chain, prev[n] is garbage but; * its value will never be used.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:18,Security,hash,hash,18,/* Initialize the hash value now that we have some input: */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:255,Deployability,Update,Update,255,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:245,Integrability,rout,routines,245,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:373,Integrability,rout,routines,373,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:121,Safety,avoid,avoid,121,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:142,Deployability,Update,Updates,142,"/* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:344,Performance,perform,performed,344,"/* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:183,Testability,assert,assertion,183,"/* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:227,Testability,assert,assertions,227,"/* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:18,Security,hash,hash,18,/* Initialize the hash value now that we have some input: */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:255,Deployability,Update,Update,255,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:245,Integrability,rout,routines,245,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:373,Integrability,rout,routines,373,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:121,Safety,avoid,avoid,121,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:18,Security,hash,hash,18,/* Initialize the hash value now that we have some input: */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:255,Deployability,Update,Update,255,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:245,Integrability,rout,routines,245,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:373,Integrability,rout,routines,373,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:121,Safety,avoid,avoid,121,"/* If the WIN_INIT bytes after the end of the current data have never been; * written, then zero those bytes in order to avoid memory check reports of; * the use of uninitialized (or uninitialised as Julian writes) bytes by; * the longest match routines. Update the high water mark for the next; * time through here. WIN_INIT is set to MAX_MATCH since the longest match; * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:142,Testability,assert,assertion,142,"/* ===========================================================================; * Flush the current block, with given end-of-file flag.; * IN assertion: strstart is set to the end of the current match.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:400,Performance,optimiz,optimized,400,"/* ===========================================================================; * Copy without compression as much as possible from the input stream, return; * the current block state.; * This function does not insert new strings in the dictionary since; * uncompressible data is probably not useful. This function is used; * only for the level=0 compression option.; * NOTE: this function should be optimized to avoid extra copying from; * window to pending_buf.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:413,Safety,avoid,avoid,413,"/* ===========================================================================; * Copy without compression as much as possible from the input stream, return; * the current block state.; * This function does not insert new strings in the dictionary since; * uncompressible data is probably not useful. This function is used; * only for the level=0 compression option.; * NOTE: this function should be optimized to avoid extra copying from; * window to pending_buf.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:34,Integrability,wrap,wraparound,34,/* strstart == 0 is possible when wraparound on 16-bit machine */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:195,Performance,perform,perform,195,"/* ===========================================================================; * Compress as much as possible from the input stream, return the current; * block state.; * This function does not perform lazy evaluation of matches and inserts; * new strings in the dictionary only for unmatched strings or for short; * matches. It is used only for the fast compression options.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:15,Security,hash,hash,15,/* head of the hash chain */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:111,Security,hash,hash,111,"/* Insert the string window[strstart .. strstart+2] in the; * dictionary, and set hash_head to the head of the hash chain:; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:107,Safety,avoid,avoid,107,"/* To simplify the code, we prevent matches with the string; * of window index 0 (in particular we have to avoid a match; * of the string with itself at the start of the input file).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:6,Usability,simpl,simplify,6,"/* To simplify the code, we prevent matches with the string; * of window index 0 (in particular we have to avoid a match; * of the string with itself at the start of the input file).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:29,Security,hash,hash,29,/* Insert new strings in the hash table only if the match length; * is not too large. This saves time but degrades compression.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:11,Security,hash,hash,11,/* head of hash chain */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:111,Security,hash,hash,111,"/* Insert the string window[strstart .. strstart+3] in the; * dictionary, and set hash_head to the head of the hash chain:; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:107,Safety,avoid,avoid,107,"/* To simplify the code, we prevent matches with the string; * of window index 0 (in particular we have to avoid a match; * of the string with itself at the start of the input file).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:6,Usability,simpl,simplify,6,"/* To simplify the code, we prevent matches with the string; * of window index 0 (in particular we have to avoid a match; * of the string with itself at the start of the input file).; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:28,Security,hash,hash,28,/* Do not insert strings in hash table beyond this. */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:13,Security,hash,hash,13,"/* Insert in hash table all strings up to the end of the match.; * strstart-1 and strstart are already inserted. If there is not; * enough lookahead, the last two strings are not inserted in; * the hash table.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:198,Security,hash,hash,198,"/* Insert in hash table all strings up to the end of the match.; * strstart-1 and strstart are already inserted. If there is not; * enough lookahead, the last two strings are not inserted in; * the hash table.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:184,Security,hash,hash,184,"/* ===========================================================================; * For Z_RLE, simply look for runs of bytes, generate matches only of distance; * one. Do not maintain a hash table. (It will be regenerated if this run of; * deflate switches away from Z_RLE.); */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:93,Usability,simpl,simply,93,"/* ===========================================================================; * For Z_RLE, simply look for runs of bytes, generate matches only of distance; * one. Do not maintain a hash table. (It will be regenerated if this run of; * deflate switches away from Z_RLE.); */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:145,Security,hash,hash,145,"/* ===========================================================================; * For Z_HUFFMAN_ONLY, do not look for matches. Do not maintain a hash table.; * (It will be regenerated if this run of deflate switches away from Huffman.); */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:286,Performance,perform,performed,286,"/* Sliding window. Input bytes are read into the second half of the window,; * and move to the first half later to keep a dictionary of at least wSize; * bytes. With this organization, matches are limited to a distance of; * wSize-MAX_MATCH bytes, but this ensures that IO is always; * performed with a length multiple of the block size. Also, it limits; * the window size to 64K, which is quite useful on MSDOS.; * To do: use the user input buffer as sliding window.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:34,Security,hash,hash,34,"/* Link to older string with same hash index. To limit the size of this; * array to 64K, this link is maintained only for the last 32K strings.; * An index in this array is thus a window index modulo 32K.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:16,Security,hash,hash,16,/* Heads of the hash chains or NIL. */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:3,Security,hash,hash,3,/* hash index of string to be inserted */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:25,Security,hash,hash,25,/* number of elements in hash table */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:163,Security,hash,hash,163,"/* Number of bits by which ins_h must be shifted at each input; * step. It must be such that after MIN_MATCH steps, the oldest; * byte no longer takes part in the hash key, that is:; * hash_shift * MIN_MATCH >= hash_bits; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:26,Security,hash,hash,26,"/* To speed up deflation, hash chains are never searched beyond this; * length. A higher limit improves compression ratio but degrades the; * speed.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:29,Security,hash,hash,29,/* Insert new strings in the hash table only if the match length is not; * greater than this length. This saves time but degrades compression.; * max_insert_length is used only for compression levels <= 3.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:686,Energy Efficiency,adapt,adaptation,686,"/* Size of match buffer for literals/lengths. There are 4 reasons for; * limiting lit_bufsize to 64K:; * - frequencies can be kept in 16 bit counters; * - if compression is not successful for the first block, all input; * data is still in the window so we can still emit a stored block even; * when input comes from standard input. (This can also be done for; * all blocks if lit_bufsize is not greater than 32K.); * - if compression is not successful for a file smaller than 64K, we can; * even emit a stored file instead of a stored block (saving 5 bytes).; * This is applicable only for zip (not gzip or zlib).; * - creating new Huffman trees less frequently may not provide fast; * adaptation to changes in the input data statistics. (Take for; * example a binary file with poorly compressible code followed by; * a highly compressible string table.) Smaller buffer sizes give; * fast adaptation but have of course the overhead of transmitting; * trees more frequently.; * - I can't count above 4; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:889,Energy Efficiency,adapt,adaptation,889,"/* Size of match buffer for literals/lengths. There are 4 reasons for; * limiting lit_bufsize to 64K:; * - frequencies can be kept in 16 bit counters; * - if compression is not successful for the first block, all input; * data is still in the window so we can still emit a stored block even; * when input comes from standard input. (This can also be done for; * all blocks if lit_bufsize is not greater than 32K.); * - if compression is not successful for a file smaller than 64K, we can; * even emit a stored file instead of a stored block (saving 5 bytes).; * This is applicable only for zip (not gzip or zlib).; * - creating new Huffman trees less frequently may not provide fast; * adaptation to changes in the input data statistics. (Take for; * example a binary file with poorly compressible code followed by; * a highly compressible string table.) Smaller buffer sizes give; * fast adaptation but have of course the overhead of transmitting; * trees more frequently.; * - I can't count above 4; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:686,Modifiability,adapt,adaptation,686,"/* Size of match buffer for literals/lengths. There are 4 reasons for; * limiting lit_bufsize to 64K:; * - frequencies can be kept in 16 bit counters; * - if compression is not successful for the first block, all input; * data is still in the window so we can still emit a stored block even; * when input comes from standard input. (This can also be done for; * all blocks if lit_bufsize is not greater than 32K.); * - if compression is not successful for a file smaller than 64K, we can; * even emit a stored file instead of a stored block (saving 5 bytes).; * This is applicable only for zip (not gzip or zlib).; * - creating new Huffman trees less frequently may not provide fast; * adaptation to changes in the input data statistics. (Take for; * example a binary file with poorly compressible code followed by; * a highly compressible string table.) Smaller buffer sizes give; * fast adaptation but have of course the overhead of transmitting; * trees more frequently.; * - I can't count above 4; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:889,Modifiability,adapt,adaptation,889,"/* Size of match buffer for literals/lengths. There are 4 reasons for; * limiting lit_bufsize to 64K:; * - frequencies can be kept in 16 bit counters; * - if compression is not successful for the first block, all input; * data is still in the window so we can still emit a stored block even; * when input comes from standard input. (This can also be done for; * all blocks if lit_bufsize is not greater than 32K.); * - if compression is not successful for a file smaller than 64K, we can; * even emit a stored file instead of a stored block (saving 5 bytes).; * This is applicable only for zip (not gzip or zlib).; * - creating new Huffman trees less frequently may not provide fast; * adaptation to changes in the input data statistics. (Take for; * example a binary file with poorly compressible code followed by; * a highly compressible string table.) Smaller buffer sizes give; * fast adaptation but have of course the overhead of transmitting; * trees more frequently.; * - I can't count above 4; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:28,Usability,simpl,simplify,28,"/* Buffer for distances. To simplify the code, d_buf and l_buf have; * the same number of elements. To use different lengths, an extra flag; * array would be necessary.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:213,Deployability,update,updated,213,/* High water mark offset in window for initialized bytes -- bytes above; * this are set to zero in order to avoid memory check warnings when; * longest match routines access bytes past the input. This is then; * updated to the new high water mark.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:159,Integrability,rout,routines,159,/* High water mark offset in window for initialized bytes -- bytes above; * this are set to zero in order to avoid memory check warnings when; * longest match routines access bytes past the input. This is then; * updated to the new high water mark.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:109,Safety,avoid,avoid,109,/* High water mark offset in window for initialized bytes -- bytes above; * this are set to zero in order to avoid memory check warnings when; * longest match routines access bytes past the input. This is then; * updated to the new high water mark.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:168,Security,access,access,168,/* High water mark offset in window for initialized bytes -- bytes above; * this are set to zero in order to avoid memory check warnings when; * longest match routines access bytes past the input. This is then; * updated to the new high water mark.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:38,Testability,assert,assertion,38,/* Output a byte on the stream.; * IN assertion: there is enough room in pending_buf.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:128,Testability,assert,assertion,128,/* ===========================================================================; * Output a short LSB first on the stream.; * IN assertion: there is enough room in pendingBuf.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:15,Usability,simpl,simplify,15,"/* In order to simplify the code, particularly on 16 bit machines, match; * distances are limited to MAX_DIST instead of WSIZE.; */",MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:95,Availability,error,errors,95,/* Number of bytes after end of data in window to initialize in order to avoid; memory checker errors from longest match routines */; /* in trees.c */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:121,Integrability,rout,routines,121,/* Number of bytes after end of data in window to initialize in order to avoid; memory checker errors from longest match routines */; /* in trees.c */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:73,Safety,avoid,avoid,73,/* Number of bytes after end of data in window to initialize in order to avoid; memory checker errors from longest match routines */; /* in trees.c */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:89,Performance,optimiz,optimizes,89,/* MSC doesn't have __builtin_expect. Just ignore likely/unlikely and; hope the compiler optimizes for the best.; */,MatchSource.CODE_COMMENT,builtins/zlib/deflate_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzclose.c:196,Integrability,rout,routines,196,/* gzclose() is in a separate file so that it is linked in only if it is used.; That way the other gzclose functions can be used instead to avoid linking in; unneeded compression or decompression routines. */,MatchSource.CODE_COMMENT,builtins/zlib/gzclose.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzclose.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzclose.c:140,Safety,avoid,avoid,140,/* gzclose() is in a separate file so that it is linked in only if it is used.; That way the other gzclose functions can be used instead to avoid linking in; unneeded compression or decompression routines. */,MatchSource.CODE_COMMENT,builtins/zlib/gzclose.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzclose.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:26,Availability,avail,available,26,"/* In Win32, vsnprintf is available as the ""non-ANSI"" _vsnprintf. */",MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:37,Security,integrity,integrity,37,"/* gzip modes, also provide a little integrity check on the passed structure */",MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:3,Security,expose,exposed,3,/* exposed contents for gzgetc() macro */,MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:50,Availability,avail,available,50,"/* ""x"" for exposed */; /* x.have: number of bytes available at x.next */; /* x.next: next output data to deliver or write */; /* x.pos: current position in uncompressed data */; /* used for both reading and writing */",MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:11,Security,expose,exposed,11,"/* ""x"" for exposed */; /* x.have: number of bytes available at x.next */; /* x.next: next output data to deliver or write */; /* x.pos: current position in uncompressed data */; /* used for both reading and writing */",MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:18,Availability,error,error,18,/* path or fd for error messages */,MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:24,Integrability,message,messages,24,/* path or fd for error messages */,MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:28,Energy Efficiency,allocate,allocated,28,"/* buffer size, zero if not allocated yet */",MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:39,Availability,error,error,39,/* true if seek request pending */; /* error information */,MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:3,Availability,error,error,3,/* error code */,MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:3,Availability,error,error,3,/* error message */; /* zlib inflate or deflate stream */,MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:9,Integrability,message,message,9,/* error message */; /* zlib inflate or deflate stream */,MatchSource.CODE_COMMENT,builtins/zlib/gzguts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:19,Availability,error,error,19,"/* Map the Windows error number in ERROR to a locale-dependent error message; string and return a pointer to it. Typically, the values for ERROR come; from GetLastError. The string pointed to shall not be modified by the application, but may be; overwritten by a subsequent call to gz_strwinerror. The gz_strwinerror function does not change the current setting of; GetLastError. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:35,Availability,ERROR,ERROR,35,"/* Map the Windows error number in ERROR to a locale-dependent error message; string and return a pointer to it. Typically, the values for ERROR come; from GetLastError. The string pointed to shall not be modified by the application, but may be; overwritten by a subsequent call to gz_strwinerror. The gz_strwinerror function does not change the current setting of; GetLastError. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:63,Availability,error,error,63,"/* Map the Windows error number in ERROR to a locale-dependent error message; string and return a pointer to it. Typically, the values for ERROR come; from GetLastError. The string pointed to shall not be modified by the application, but may be; overwritten by a subsequent call to gz_strwinerror. The gz_strwinerror function does not change the current setting of; GetLastError. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:139,Availability,ERROR,ERROR,139,"/* Map the Windows error number in ERROR to a locale-dependent error message; string and return a pointer to it. Typically, the values for ERROR come; from GetLastError. The string pointed to shall not be modified by the application, but may be; overwritten by a subsequent call to gz_strwinerror. The gz_strwinerror function does not change the current setting of; GetLastError. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:53,Integrability,depend,dependent,53,"/* Map the Windows error number in ERROR to a locale-dependent error message; string and return a pointer to it. Typically, the values for ERROR come; from GetLastError. The string pointed to shall not be modified by the application, but may be; overwritten by a subsequent call to gz_strwinerror. The gz_strwinerror function does not change the current setting of; GetLastError. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:69,Integrability,message,message,69,"/* Map the Windows error number in ERROR to a locale-dependent error message; string and return a pointer to it. Typically, the values for ERROR come; from GetLastError. The string pointed to shall not be modified by the application, but may be; overwritten by a subsequent call to gz_strwinerror. The gz_strwinerror function does not change the current setting of; GetLastError. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:18,Availability,avail,available,18,/* no output data available */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:9,Availability,error,error,9,/* clear error */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:3,Usability,clear,clear,3,/* clear error */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:3,Energy Efficiency,allocate,allocate,3,/* allocate gzFile structure to return */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:14,Energy Efficiency,allocate,allocated,14,/* no buffers allocated yet */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:6,Availability,error,error,6,/* no error message yet */; /* interpret mode */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:12,Integrability,message,message,12,/* no error message yet */; /* interpret mode */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:24,Availability,error,error,24,"/* could consider as an error, but just ignore */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:26,Availability,error,error,26,/* save the path name for error messages */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:32,Integrability,message,messages,32,/* save the path name for error messages */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:3,Usability,simpl,simplify,3,/* simplify later checks */; /* save the current position for rewinding (only if reading) */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:18,Availability,error,error,18,/* identifier for error messages */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:24,Integrability,message,messages,24,/* identifier for error messages */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:36,Security,integrity,integrity,36,/* get internal structure and check integrity */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:32,Energy Efficiency,allocate,allocated,32,/* make sure we haven't already allocated memory */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:48,Availability,error,error,48,/* check that we're reading and that there's no error */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:36,Security,integrity,integrity,36,/* get internal structure and check integrity */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:25,Availability,error,error,25,/* check that there's no error */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:36,Security,integrity,integrity,36,/* get internal structure and check integrity */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:36,Security,integrity,integrity,36,/* get internal structure and check integrity */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:36,Security,integrity,integrity,36,/* get internal structure and check integrity */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:36,Security,integrity,integrity,36,/* get internal structure and check integrity */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:10,Availability,error,error,10,/* return error information */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:36,Security,integrity,integrity,36,/* get internal structure and check integrity */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:9,Availability,error,error,9,/* clear error and end-of-file */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:3,Usability,clear,clear,3,/* clear error and end-of-file */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:13,Availability,error,error,13,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:113,Availability,error,error,113,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:187,Availability,error,error,187,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:242,Availability,error,error,242,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:303,Availability,failure,failure,303,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:328,Availability,error,error,328,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:360,Availability,error,error,360,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:30,Energy Efficiency,allocate,allocated,30,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:165,Energy Efficiency,allocate,allocate,165,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:19,Integrability,message,message,19,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:119,Integrability,message,message,119,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:248,Integrability,message,message,248,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:334,Integrability,message,message,334,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:226,Usability,Simpl,Simply,226,"/* Create an error message in allocated memory and set state->err and; state->msg accordingly. Free any previous error message already there. Do; not try to free or allocate space if the error is Z_MEM_ERROR (out of; memory). Simply save the error message as a static string. If there is an; allocation failure constructing the error message, then convert the error to; out of memory. */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:19,Energy Efficiency,allocate,allocated,19,/* free previously allocated message and clear */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:29,Integrability,message,message,29,/* free previously allocated message and clear */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:41,Usability,clear,clear,41,/* free previously allocated message and clear */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:7,Availability,error,error,7,"/* set error code, and if no message, then done */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:29,Integrability,message,message,29,"/* set error code, and if no message, then done */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:24,Availability,error,error,24,"/* for an out of memory error, return literal string when requested */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:13,Availability,error,error,13,/* construct error message with path */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:19,Integrability,message,message,19,/* construct error message with path */,MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:73,Availability,avail,available,73,"/* portably return maximum value for an int (when limits.h presumed not; available) -- we need to do this to cover cases where 2's complement not; used, since C standard permits 1's complement and sign-bit representations,; otherwise we could just use ((unsigned)-1) >> 1 */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:3,Modifiability,portab,portably,3,"/* portably return maximum value for an int (when limits.h presumed not; available) -- we need to do this to cover cases where 2's complement not; used, since C standard permits 1's complement and sign-bit representations,; otherwise we could just use ((unsigned)-1) >> 1 */",MatchSource.CODE_COMMENT,builtins/zlib/gzlib.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:47,Availability,error,error,47,"/* Use read() to load a buffer -- return -1 on error, otherwise 0. Read from; state->fd, and update state->eof, state->err, and state->msg as appropriate.; This function needs to loop on read(), since read() is not guaranteed to; read the number of bytes requested, depending on the type of descriptor. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:93,Deployability,update,update,93,"/* Use read() to load a buffer -- return -1 on error, otherwise 0. Read from; state->fd, and update state->eof, state->err, and state->msg as appropriate.; This function needs to loop on read(), since read() is not guaranteed to; read the number of bytes requested, depending on the type of descriptor. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:266,Integrability,depend,depending,266,"/* Use read() to load a buffer -- return -1 on error, otherwise 0. Read from; state->fd, and update state->eof, state->err, and state->msg as appropriate.; This function needs to loop on read(), since read() is not guaranteed to; read the number of bytes requested, depending on the type of descriptor. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:17,Performance,load,load,17,"/* Use read() to load a buffer -- return -1 on error, otherwise 0. Read from; state->fd, and update state->eof, state->err, and state->msg as appropriate.; This function needs to loop on read(), since read() is not guaranteed to; read the number of bytes requested, depending on the type of descriptor. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:78,Availability,error,error,78,"/* Load up input buffer and set eof flag if last data loaded -- return -1 on; error, 0 otherwise. Note that the eof flag is set when the end of the input; file is reached, even though there may be unused data in the buffer. Once; that data has been used, no more attempts will be made to read the file.; If strm->avail_in != 0, then the current data is moved to the beginning of; the input buffer, and then the remainder of the buffer is loaded with the; available data from the input file. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:455,Availability,avail,available,455,"/* Load up input buffer and set eof flag if last data loaded -- return -1 on; error, 0 otherwise. Note that the eof flag is set when the end of the input; file is reached, even though there may be unused data in the buffer. Once; that data has been used, no more attempts will be made to read the file.; If strm->avail_in != 0, then the current data is moved to the beginning of; the input buffer, and then the remainder of the buffer is loaded with the; available data from the input file. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:3,Performance,Load,Load,3,"/* Load up input buffer and set eof flag if last data loaded -- return -1 on; error, 0 otherwise. Note that the eof flag is set when the end of the input; file is reached, even though there may be unused data in the buffer. Once; that data has been used, no more attempts will be made to read the file.; If strm->avail_in != 0, then the current data is moved to the beginning of; the input buffer, and then the remainder of the buffer is loaded with the; available data from the input file. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:54,Performance,load,loaded,54,"/* Load up input buffer and set eof flag if last data loaded -- return -1 on; error, 0 otherwise. Note that the eof flag is set when the end of the input; file is reached, even though there may be unused data in the buffer. Once; that data has been used, no more attempts will be made to read the file.; If strm->avail_in != 0, then the current data is moved to the beginning of; the input buffer, and then the remainder of the buffer is loaded with the; available data from the input file. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:438,Performance,load,loaded,438,"/* Load up input buffer and set eof flag if last data loaded -- return -1 on; error, 0 otherwise. Note that the eof flag is set when the end of the input; file is reached, even though there may be unused data in the buffer. Once; that data has been used, no more attempts will be made to read the file.; If strm->avail_in != 0, then the current data is moved to the beginning of; the input buffer, and then the remainder of the buffer is loaded with the; available data from the input file. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:201,Availability,avail,available,201,"/* Look for gzip header, set up for inflate or copy. state->x.have must be 0.; If this is the first time in, allocate required memory. state->how will be; left unchanged if there is no more input data available, will be set to COPY; if there is no gzip header and direct copying will be performed, or it will; be set to GZIP for decompression. If direct copying, then leftover input; data from the input buffer will be copied to the output buffer. In that; case, all further file reads will be directly to either the output buffer or; a user buffer. If decompressing, the inflate state will be initialized.; gz_look() will return 0 on success or -1 on failure. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:652,Availability,failure,failure,652,"/* Look for gzip header, set up for inflate or copy. state->x.have must be 0.; If this is the first time in, allocate required memory. state->how will be; left unchanged if there is no more input data available, will be set to COPY; if there is no gzip header and direct copying will be performed, or it will; be set to GZIP for decompression. If direct copying, then leftover input; data from the input buffer will be copied to the output buffer. In that; case, all further file reads will be directly to either the output buffer or; a user buffer. If decompressing, the inflate state will be initialized.; gz_look() will return 0 on success or -1 on failure. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:109,Energy Efficiency,allocate,allocate,109,"/* Look for gzip header, set up for inflate or copy. state->x.have must be 0.; If this is the first time in, allocate required memory. state->how will be; left unchanged if there is no more input data available, will be set to COPY; if there is no gzip header and direct copying will be performed, or it will; be set to GZIP for decompression. If direct copying, then leftover input; data from the input buffer will be copied to the output buffer. In that; case, all further file reads will be directly to either the output buffer or; a user buffer. If decompressing, the inflate state will be initialized.; gz_look() will return 0 on success or -1 on failure. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:287,Performance,perform,performed,287,"/* Look for gzip header, set up for inflate or copy. state->x.have must be 0.; If this is the first time in, allocate required memory. state->how will be; left unchanged if there is no more input data available, will be set to COPY; if there is no gzip header and direct copying will be performed, or it will; be set to GZIP for decompression. If direct copying, then leftover input; data from the input buffer will be copied to the output buffer. In that; case, all further file reads will be directly to either the output buffer or; a user buffer. If decompressing, the inflate state will be initialized.; gz_look() will return 0 on success or -1 on failure. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:3,Energy Efficiency,allocate,allocate,3,/* allocate read buffers and inflate memory */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:3,Energy Efficiency,allocate,allocate,3,/* allocate buffers */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:3,Energy Efficiency,allocate,allocate,3,/* allocate inflate memory */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:78,Testability,log,logical,78,"/* look for gzip magic bytes -- if there, do gzip decoding (note: there is; a logical dilemma here when considering the case of a partially written; gzip file, to wit, if a single 31 byte is written, then we cannot tell; whether this is a single-byte file, or just a partially written gzip; file -- for here we assume that if a gzip file is being written, then; the header will be written in a single operation, so that reading a; single byte is sufficient indication that it is not a gzip file) */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:326,Availability,failure,failure,326,"/* Decompress from input to the provided next_out and avail_out in the state.; On return, state->x.have and state->x.next point to the just decompressed; data. If the gzip stream completes, state->how is reset to LOOK to look for; the next gzip stream or raw data, once state->x.have is depleted. Returns 0; on success, -1 on failure. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:25,Availability,error,errors,25,/* decompress and handle errors */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:10,Availability,avail,available,10,/* update available output */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:3,Deployability,update,update,3,/* update available output */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:295,Availability,error,error,295,"/* Fetch data and put it in the output buffer. Assumes state->x.have is 0.; Data is either copied from the input file or decompressed from the input; file depending on state->how. If state->how is LOOK, then a gzip header is; looked for to determine whether to copy or decompress. Returns -1 on error,; otherwise 0. gz_fetch() will leave state->how as COPY or GZIP unless the; end of the input file has been reached and all data has been processed. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:155,Integrability,depend,depending,155,"/* Fetch data and put it in the output buffer. Assumes state->x.have is 0.; Data is either copied from the input file or decompressed from the input; file depending on state->how. If state->how is LOOK, then a gzip header is; looked for to determine whether to copy or decompress. Returns -1 on error,; otherwise 0. gz_fetch() will leave state->how as COPY or GZIP unless the; end of the input file has been reached and all data has been processed. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:55,Availability,error,error,55,"/* Skip len uncompressed bytes of output. Return -1 on error, 0 on success. */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:29,Performance,load,load,29,/* need more data to skip -- load up output buffer */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:58,Availability,error,error,58,/* check that we're reading and that there's no (serious) error */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:82,Availability,error,error,82,"/* since an int is returned, make sure len fits in one, otherwise return; with an error (this avoids the flaw in the interface) */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:117,Integrability,interface,interface,117,"/* since an int is returned, make sure len fits in one, otherwise return; with an error (this avoids the flaw in the interface) */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:94,Safety,avoid,avoids,94,"/* since an int is returned, make sure len fits in one, otherwise return; with an error (this avoids the flaw in the interface) */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:19,Safety,avoid,avoid,19,"/* if len is zero, avoid unnecessary operations */",MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:51,Performance,load,load,51,/* need output data -- for small len or new stream load up our output; buffer */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:3,Deployability,update,update,3,/* update progress */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:58,Availability,error,error,58,/* check that we're reading and that there's no (serious) error */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:58,Availability,error,error,58,/* check that we're reading and that there's no (serious) error */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:58,Availability,error,error,58,/* check that we're reading and that there's no (serious) error */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:3,Availability,error,error,3,/* error */,MatchSource.CODE_COMMENT,builtins/zlib/gzread.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:115,Availability,failure,failure,115,/* Initialize state for writing a gzip file. Mark initialization by setting; state->size to non-zero. Return -1 on failure or 0 on success. */,MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:3,Energy Efficiency,allocate,allocate,3,/* allocate input buffer */,MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:3,Energy Efficiency,allocate,allocate,3,/* allocate output buffer */,MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:3,Energy Efficiency,allocate,allocate,3,"/* allocate deflate memory, set up for gzip compression */",MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:104,Availability,error,error,104,"/* Compress whatever is at avail_in and next_in and write to the output file.; Return -1 if there is an error writing to the output file, otherwise 0.; flush is assumed to be a valid deflate() flush value. If flush is Z_FINISH,; then the deflate() state is reset to start a new gzip stream. If gz->direct; is true, then simply write to the output file without compressing, and; ignore flush. */",MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:320,Usability,simpl,simply,320,"/* Compress whatever is at avail_in and next_in and write to the output file.; Return -1 if there is an error writing to the output file, otherwise 0.; flush is assumed to be a valid deflate() flush value. If flush is Z_FINISH,; then the deflate() state is reset to start a new gzip stream. If gz->direct; is true, then simply write to the output file without compressing, and; ignore flush. */",MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:3,Energy Efficiency,allocate,allocate,3,/* allocate memory if this is the first time through */,MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:16,Availability,error,errors,16,"/* all done, no errors */",MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:46,Availability,error,error,46,"/* Compress len zeros to output. Return -1 on error, 0 on success. */",MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:48,Availability,error,error,48,/* check that we're writing and that there's no error */,MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:82,Availability,error,error,82,"/* since an int is returned, make sure len fits in one, otherwise return; with an error (this avoids the flaw in the interface) */",MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:117,Integrability,interface,interface,117,"/* since an int is returned, make sure len fits in one, otherwise return; with an error (this avoids the flaw in the interface) */",MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:94,Safety,avoid,avoids,94,"/* since an int is returned, make sure len fits in one, otherwise return; with an error (this avoids the flaw in the interface) */",MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:19,Safety,avoid,avoid,19,"/* if len is zero, avoid unnecessary operations */",MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:3,Energy Efficiency,allocate,allocate,3,/* allocate memory if this is the first time through */,MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:48,Availability,error,error,48,/* check that we're writing and that there's no error */,MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:48,Availability,error,error,48,/* check that we're writing and that there's no error */,MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:3,Deployability,update,update,3,"/* update buffer and position, defer compression until needed */",MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:48,Availability,error,error,48,/* check that we're writing and that there's no error */,MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:3,Deployability,update,update,3,"/* update buffer and position, defer compression until needed */",MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:48,Availability,error,error,48,/* check that we're writing and that there's no error */,MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c:48,Availability,error,error,48,/* check that we're writing and that there's no error */,MatchSource.CODE_COMMENT,builtins/zlib/gzwrite.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzwrite.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:42,Integrability,interface,interface,42,"/* infback.c -- inflate using a call-back interface; * Copyright (C) 1995-2011 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; This code is largely copied from inflate.c. Normally either infback.o or; inflate.o would be linked into an application--not both. The interface; with inffast.c is retained so that optimized assembler-coded versions of; inflate_fast() can be used with either inflate.c or infback.c.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:308,Integrability,interface,interface,308,"/* infback.c -- inflate using a call-back interface; * Copyright (C) 1995-2011 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; This code is largely copied from inflate.c. Normally either infback.o or; inflate.o would be linked into an application--not both. The interface; with inffast.c is retained so that optimized assembler-coded versions of; inflate_fast() can be used with either inflate.c or infback.c.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:354,Performance,optimiz,optimized,354,"/* infback.c -- inflate using a call-back interface; * Copyright (C) 1995-2011 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; This code is largely copied from inflate.c. Normally either infback.o or; inflate.o would be linked into an application--not both. The interface; with inffast.c is retained so that optimized assembler-coded versions of; inflate_fast() can be used with either inflate.c or infback.c.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:24,Availability,error,error,24,/* in case we return an error */,MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:317,Energy Efficiency,reduce,reduces,317,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:200,Integrability,rout,routine,200,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:538,Safety,safe,safe,538,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:63,Safety,safe,safe,63,/* build fixed huffman tables if first call (may not be thread safe) */,MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:36,Performance,Load,Load,36,/* Macros for inflateBack(): */; /* Load returned state from inflate_fast() */,MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:3,Usability,Clear,Clear,3,/* Clear the input bit accumulator */,MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:29,Availability,avail,available,29,"/* Assure that some input is available. If input is requested, but denied,; then return a Z_BUF_ERROR from inflateBack(). */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:87,Availability,error,error,87,"/* Get a byte of input into the bit accumulator, or return from inflateBack(); with an error if there is no input available. */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:114,Availability,avail,available,114,"/* Get a byte of input into the bit accumulator, or return from inflateBack(); with an error if there is no input available. */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:89,Availability,avail,available,89,"/* Assure that there are at least n bits in the bit accumulator. If there is; not enough available input to do that, then return from inflateBack() with; an error. */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:157,Availability,error,error,157,"/* Assure that there are at least n bits in the bit accumulator. If there is; not enough available input to do that, then return from inflateBack() with; an error. */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:36,Availability,avail,available,36,"/* Assure that some output space is available, by writing out the window; if it's full. If the write fails, return from inflateBack() with a; Z_BUF_ERROR. */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:188,Availability,error,error,188,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:960,Availability,failure,failure,960,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:1002,Availability,failure,failure,1002,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:1181,Availability,error,error,1181,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:1283,Availability,error,error,1283,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:1321,Energy Efficiency,allocate,allocate,1321,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:194,Integrability,message,message,194,"/*; strm provides the memory allocation functions and window buffer on input,; and provides information on the unused input on return. For Z_DATA_ERROR; returns, strm will also provide an error message. in() and out() are the call-back input and output functions. When; inflateBack() needs more input, it calls in(). When inflateBack() has; filled the window with output, or when it completes with data in the; window, it calls out() to write out the data. The application must not; change the provided input until in() is called again or inflateBack(); returns. The application must not change the window/output buffer until; inflateBack() returns. in() and out() are called with a descriptor parameter provided in the; inflateBack() call. This parameter can be a structure that provides the; information required to do the read or write, as well as accumulated; information on the input and output such as totals and check values. in() should return zero on failure. out() should return non-zero on; failure. If either in() or out() fails, than inflateBack() returns a; Z_BUF_ERROR. strm->next_in can be checked for Z_NULL to see whether it; was in() or out() that caused in the error. Otherwise, inflateBack(); returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format; error, or Z_MEM_ERROR if it could not allocate memory for the state.; inflateBack() can also return Z_STREAM_ERROR if the input parameters; are not correct, i.e. strm is Z_NULL or the state was not initialized.; */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:3,Availability,avail,available,3,/* available input and output */,MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:10,Availability,error,error,10,/* handle error breaks in while */,MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c:174,Integrability,depend,depend,174,"/* build code tables -- note: do not change the lenbits or distbits; values here (9 and 6) without reading the comments in inftrees.h; concerning the ENOUGH constants, which depend on those values */",MatchSource.CODE_COMMENT,builtins/zlib/infback.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/infback.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:137,Energy Efficiency,Power,PowerPC,137,"/* Allow machine dependent optimization for post-increment or pre-increment.; Based on testing to date,; Pre-increment preferred for:; - PowerPC G3 (Adler); - MIPS R5000 (Randers-Pehrson); Post-increment preferred for:; - none; No measurable difference:; - Pentium III (Anderson); - M68060 (Nikl); */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:17,Integrability,depend,dependent,17,"/* Allow machine dependent optimization for post-increment or pre-increment.; Based on testing to date,; Pre-increment preferred for:; - PowerPC G3 (Adler); - MIPS R5000 (Randers-Pehrson); Post-increment preferred for:; - none; No measurable difference:; - Pentium III (Anderson); - M68060 (Nikl); */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:27,Performance,optimiz,optimization,27,"/* Allow machine dependent optimization for post-increment or pre-increment.; Based on testing to date,; Pre-increment preferred for:; - PowerPC G3 (Adler); - MIPS R5000 (Randers-Pehrson); Post-increment preferred for:; - none; No measurable difference:; - Pentium III (Anderson); - M68060 (Nikl); */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:87,Testability,test,testing,87,"/* Allow machine dependent optimization for post-increment or pre-increment.; Based on testing to date,; Pre-increment preferred for:; - PowerPC G3 (Adler); - MIPS R5000 (Randers-Pehrson); Post-increment preferred for:; - none; No measurable difference:; - Pentium III (Anderson); - M68060 (Nikl); */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:144,Availability,avail,available,144,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:197,Availability,error,error,197,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:630,Availability,avail,available,630,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:724,Availability,error,error,724,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:1059,Availability,avail,available,1059,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:410,Integrability,rout,routine,410,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:1039,Safety,avoid,avoid,1039,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:1284,Safety,avoid,avoid,1284,"/*; Decode literal, length, and distance codes and write out the resulting; literal and match bytes until either not enough input or output is; available, an end-of-block is encountered, or a data error is encountered.; When large enough input and output buffers are supplied to inflate(), for; example, a 16K input buffer and a 64K output buffer, more than 95% of the; inflate execution time is spent in this routine. Entry assumptions:. state->mode == LEN; strm->avail_in >= 6; strm->avail_out >= 258; start >= strm->avail_out; state->bits < 8. On return, state->mode is one of:. LEN -- ran out of enough output space or enough available input; TYPE -- reached end of block code, inflate() to interpret next block; BAD -- error in block data. Notes:. - The maximum input bits used by a length/distance pair is 15 bits for the; length code, 5 bits for the length extra, 15 bits for the distance code,; and 13 bits for the distance extra. This totals 48 bits, or six bytes.; Therefore if strm->avail_in >= 6, then there is enough input to avoid; checking for available input while decoding. - The maximum bytes that a single length/distance pair can output is 258; bytes, which is the maximum length that can be coded. inflate_fast(); requires strm->avail_out >= 258 for each loop to avoid checking for; output space.; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:33,Availability,avail,available,33,"/* while out < end, enough space available */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:3,Energy Efficiency,allocate,allocated,3,"/* allocated sliding window, if wsize != 0 */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:3,Availability,mask,mask,3,/* mask for first level of length codes */,MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:3,Availability,mask,mask,3,/* mask for first level of distance codes */,MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:55,Modifiability,variab,variables,55,/* where to copy match from */; /* copy state to local variables */,MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:3,Integrability,wrap,wrap,3,/* wrap around window */,MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:3,Deployability,update,update,3,/* update state and return */,MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:57,Energy Efficiency,Power,PowerPC,57,"/*; inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):; - Using bit fields for code structure; - Different op definition to avoid & for extra bits (do & for table bits); - Three separate decoding do-loops for direct, window, and wnext == 0; - Special case for distance > 1 copies to do overlapped load and store copy; - Explicit branch predictions (based on measured branch probabilities); - Deferring match copy and interspersed it with decoding subsequent codes; - Swapping literal/length else; - Swapping window/direct else; - Larger unrolled copy loops (three is about right); - Moving len -= 3 statement into middle of loop; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:319,Performance,load,load,319,"/*; inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):; - Using bit fields for code structure; - Different op definition to avoid & for extra bits (do & for table bits); - Three separate decoding do-loops for direct, window, and wnext == 0; - Special case for distance > 1 copies to do overlapped load and store copy; - Explicit branch predictions (based on measured branch probabilities); - Deferring match copy and interspersed it with decoding subsequent codes; - Swapping literal/length else; - Swapping window/direct else; - Larger unrolled copy loops (three is about right); - Moving len -= 3 statement into middle of loop; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:146,Safety,avoid,avoid,146,"/*; inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):; - Using bit fields for code structure; - Different op definition to avoid & for extra bits (do & for table bits); - Three separate decoding do-loops for direct, window, and wnext == 0; - Special case for distance > 1 copies to do overlapped load and store copy; - Explicit branch predictions (based on measured branch probabilities); - Deferring match copy and interspersed it with decoding subsequent codes; - Swapping literal/length else; - Swapping window/direct else; - Larger unrolled copy loops (three is about right); - Moving len -= 3 statement into middle of loop; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:358,Safety,predict,predictions,358,"/*; inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):; - Using bit fields for code structure; - Different op definition to avoid & for extra bits (do & for table bits); - Three separate decoding do-loops for direct, window, and wnext == 0; - Special case for distance > 1 copies to do overlapped load and store copy; - Explicit branch predictions (based on measured branch probabilities); - Deferring match copy and interspersed it with decoding subsequent codes; - Swapping literal/length else; - Swapping window/direct else; - Larger unrolled copy loops (three is about right); - Moving len -= 3 statement into middle of loop; */",MatchSource.CODE_COMMENT,builtins/zlib/inffast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:544,Availability,avail,available,544,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2012 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:1813,Availability,avail,avail,1813,"inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inf",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:907,Energy Efficiency,reduce,reduce,907,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2012 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:1362,Energy Efficiency,allocate,allocated,1362,"inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inf",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:3144,Energy Efficiency,reduce,reduce,3144," speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry to inflate(); *; * The history for versions after 1.2.0 are in ChangeLog in zlib distribution.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:890,Integrability,rout,routine,890,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2012 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2164,Integrability,rout,routine,2164,"-back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to av",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2741,Integrability,interface,interface,2741,"ies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry ",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2912,Integrability,interface,interface,2912," speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry to inflate(); *; * The history for versions after 1.2.0 are in ChangeLog in zlib distribution.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:3520,Integrability,interface,interface,3520," speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry to inflate(); *; * The history for versions after 1.2.0 are in ChangeLog in zlib distribution.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:233,Modifiability,rewrite,rewrite,233,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2012 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2337,Modifiability,variab,variables,2337,"-back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to av",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:270,Safety,avoid,avoid,270,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2012 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:1154,Safety,avoid,avoid,1154," in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to in",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2006,Safety,avoid,avoid,2006,"hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in ",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2833,Safety,avoid,avoid,2833,"ies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry ",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:3421,Safety,avoid,avoid,3421," speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry to inflate(); *; * The history for versions after 1.2.0 are in ChangeLog in zlib distribution.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:1270,Testability,assert,assertion,1270,"simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Un",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:255,Usability,simpl,simplify,255,"/* inflate.c -- zlib decompression; * Copyright (C) 1995-2012 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * Change history:; *; * 1.2.beta0 24 Nov 2002; * - First version -- complete rewrite of inflate to simplify code, avoid; * creation of window when not needed, minimize use of window when it is; * needed, make inffast.c even faster, implement gzip decoding, and to; * improve code readability and style over the previous zlib inflate code; *; * 1.2.beta1 25 Nov 2002; * - Use pointers for available input and output checking in inffast.c; * - Remove input and output counters in inffast.c; * - Change inffast.c entry and loop from avail_in >= 7 to >= 6; * - Remove unnecessary second byte pull from length extra in inffast.c; * - Unroll direct copy to three copies per loop in inffast.c; *; * 1.2.beta2 4 Dec 2002; * - Change external routine names to reduce potential conflicts; * - Correct filename to inffixed.h for fixed tables in inflate.c; * - Make hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table(",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2233,Usability,simpl,simplification,2233,"-back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to av",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2572,Usability,Simpl,Simplified,2572,"-back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to av",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:33,Testability,test,test,33,/* to support ill-conceived Java test suite */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:11,Integrability,wrap,wrap,11,/* extract wrap request from windowBits parameter */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:3,Deployability,update,update,3,/* update state and reset the rest of it */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:24,Availability,error,error,24,/* in case we return an error */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:317,Energy Efficiency,reduce,reduces,317,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:200,Integrability,rout,routine,200,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:538,Safety,safe,safe,538,"/*; Return state with length and distance decoding tables and index sizes set to; fixed code decoding. Normally this returns fixed tables from inffixed.h.; If BUILDFIXED is defined, then instead this routine builds the tables the; first time it's called, and returns those tables the first time and; thereafter. This reduces the size of the code by about 2K bytes, in; exchange for a little execution time. However, BUILDFIXED should not be; used for threaded applications, since the rewriting of the tables and virgin; may not be thread-safe.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:63,Safety,safe,safe,63,/* build fixed huffman tables if first call (may not be thread safe) */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:237,Usability,simpl,simply,237,"/*; Write out the inffixed.h that is #include'd above. Defining MAKEFIXED also; defines BUILDFIXED, so the tables are built on the fly. makefixed() writes; those tables to stdout, which would be piped to inffixed.h. A small program; can simply call makefixed to do this:. void makefixed(void);. int main(void); {; makefixed();; return 0;; }. Then that can be linked with zlib built with MAKEFIXED defined and run:. a.out > inffixed.h; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:21,Deployability,Update,Update,21,"/* MAKEFIXED */; /*; Update the window with the last wsize (normally 32K) bytes written before; returning. If window does not exist yet, create it. This is only called; when a window is already in use, or when output has been written during this; inflate call, but the end of the deflate stream has not been reached yet.; It is also called to create a window for dictionary data when a dictionary; is loaded. Providing output buffers larger than 32K to inflate() should provide a speed; advantage, since only the last 32K of output is copied to the sliding window; upon return from inflate(), and since all distances after the first 32K of; output will fall in the output data, making match copies simpler and faster.; The advantage may be dependent on the size of the processor's data caches.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:740,Integrability,depend,dependent,740,"/* MAKEFIXED */; /*; Update the window with the last wsize (normally 32K) bytes written before; returning. If window does not exist yet, create it. This is only called; when a window is already in use, or when output has been written during this; inflate call, but the end of the deflate stream has not been reached yet.; It is also called to create a window for dictionary data when a dictionary; is loaded. Providing output buffers larger than 32K to inflate() should provide a speed; advantage, since only the last 32K of output is copied to the sliding window; upon return from inflate(), and since all distances after the first 32K of; output will fall in the output data, making match copies simpler and faster.; The advantage may be dependent on the size of the processor's data caches.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:401,Performance,load,loaded,401,"/* MAKEFIXED */; /*; Update the window with the last wsize (normally 32K) bytes written before; returning. If window does not exist yet, create it. This is only called; when a window is already in use, or when output has been written during this; inflate call, but the end of the deflate stream has not been reached yet.; It is also called to create a window for dictionary data when a dictionary; is loaded. Providing output buffers larger than 32K to inflate() should provide a speed; advantage, since only the last 32K of output is copied to the sliding window; upon return from inflate(), and since all distances after the first 32K of; output will fall in the output data, making match copies simpler and faster.; The advantage may be dependent on the size of the processor's data caches.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:786,Performance,cache,caches,786,"/* MAKEFIXED */; /*; Update the window with the last wsize (normally 32K) bytes written before; returning. If window does not exist yet, create it. This is only called; when a window is already in use, or when output has been written during this; inflate call, but the end of the deflate stream has not been reached yet.; It is also called to create a window for dictionary data when a dictionary; is loaded. Providing output buffers larger than 32K to inflate() should provide a speed; advantage, since only the last 32K of output is copied to the sliding window; upon return from inflate(), and since all distances after the first 32K of; output will fall in the output data, making match copies simpler and faster.; The advantage may be dependent on the size of the processor's data caches.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:698,Usability,simpl,simpler,698,"/* MAKEFIXED */; /*; Update the window with the last wsize (normally 32K) bytes written before; returning. If window does not exist yet, create it. This is only called; when a window is already in use, or when output has been written during this; inflate call, but the end of the deflate stream has not been reached yet.; It is also called to create a window for dictionary data when a dictionary; is loaded. Providing output buffers larger than 32K to inflate() should provide a speed; advantage, since only the last 32K of output is copied to the sliding window; upon return from inflate(), and since all distances after the first 32K of; output will fall in the output data, making match copies simpler and faster.; The advantage may be dependent on the size of the processor's data caches.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:35,Energy Efficiency,allocate,allocate,35,"/* if it hasn't been done already, allocate space for the window */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:3,Performance,Load,Load,3,/* Load registers with state in inflate() for speed */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:3,Usability,Clear,Clear,3,/* Clear the input bit accumulator */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:96,Availability,avail,available,96,"/* Get a byte of input into the bit accumulator, or return from inflate(); if there is no input available. */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:89,Availability,avail,available,89,"/* Assure that there are at least n bits in the bit accumulator. If there is; not enough available input to do that, then return from inflate(). */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:673,Availability,avail,available,673,"/*; inflate() uses a state machine to process as much input data and generate as; much output data as possible before returning. The state machine is; structured roughly as follows:. for (;;) switch (state) {; ...; case STATEn:; if (not enough input data or output space to make progress); return;; ... make progress ...; state = STATEm;; break;; ...; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is a",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:1098,Availability,avail,available,1098,"; much output data as possible before returning. The state machine is; structured roughly as follows:. for (;;) switch (state) {; ...; case STATEn:; if (not enough input data or output space to make progress); return;; ... make progress ...; state = STATEm;; break;; ...; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:1333,Availability,avail,available,1333,"..; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine ",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:1393,Availability,avail,available,1393,"..; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine ",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2108,Availability,avail,available,2108," of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inf",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2995,Availability,avail,available,2995,"enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inflate() always defers; the allocation of and copying into a sliding window until necessary, which; provides the effect documented in zlib.h for Z_FINISH when the entire input; stream available. So the only thing the flush parameter actually does is:; when flush is set to Z_FINISH, inflate() cannot return Z_OK. Instead it; will return Z_BUF_ERROR if it has not reached the end of the stream.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:3277,Availability,avail,available,3277,"enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inflate() always defers; the allocation of and copying into a sliding window until necessary, which; provides the effect documented in zlib.h for Z_FINISH when the entire input; stream available. So the only thing the flush parameter actually does is:; when flush is set to Z_FINISH, inflate() cannot return Z_OK. Instead it; will return Z_BUF_ERROR if it has not reached the end of the stream.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2283,Deployability,update,update,2283,"te of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inflate() always defers; the allocation of and copying into a sliding window until necessary, which; provides the effect documented in zlib.h for Z_FINISH when the entire input; stream available. So the only thing the flush parameter actually does is:; ",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2311,Deployability,update,update,2311,"te of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inflate() always defers; the allocation of and copying into a sliding window until necessary, which; provides the effect documented in zlib.h for Z_FINISH when the entire input; stream available. So the only thing the flush parameter actually does is:; ",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2578,Deployability,update,update,2578,"enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defined as a change in either strm->avail_in or strm->avail_out.; When there is a window, goto inf_leave will update the window with the last; output written. If a goto inf_leave occurs in the middle of decompression; and there is no window currently, goto inf_leave will create one and copy; output to the window for the next call of inflate(). In this implementation, the flush parameter of inflate() only affects the; return code (per zlib.h). inflate() always writes as much as possible to; strm->next_out, given the space available and the provided input--the effect; documented in zlib.h of Z_SYNC_FLUSH. Furthermore, inflate() always defers; the allocation of and copying into a sliding window until necessary, which; provides the effect documented in zlib.h for Z_FINISH when the entire input; stream available. So the only thing the flush parameter actually does is:; when flush is set to Z_FINISH, inflate() cannot return Z_OK. Instead it; will return Z_BUF_ERROR if it has not reached the end of the stream.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:1420,Modifiability,variab,variable,1420,"the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there is not enough output space available to; complete that state. Those states are copying stored data, writing a; literal byte, and copying a matching string. When returning, a ""goto inf_leave"" is used to update the total counters,; update the check value, and determine whether any progress has been made; during that inflate() call in order to return the proper return code.; Progress is defi",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:873,Performance,load,load,873,"/*; inflate() uses a state machine to process as much input data and generate as; much output data as possible before returning. The state machine is; structured roughly as follows:. for (;;) switch (state) {; ...; case STATEn:; if (not enough input data or output space to make progress); return;; ... make progress ...; state = STATEm;; break;; ...; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is a",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:1051,Usability,clear,clears,1051,"; much output data as possible before returning. The state machine is; structured roughly as follows:. for (;;) switch (state) {; ...; case STATEn:; if (not enough input data or output space to make progress); return;; ... make progress ...; state = STATEm;; break;; ...; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:3,Availability,avail,available,3,/* available input and output */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:17,Availability,avail,available,17,/* save starting available input and output */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:10,Availability,error,error,10,/* handle error breaks in while */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:174,Integrability,depend,depend,174,"/* build code tables -- note: do not change the lenbits or distbits; values here (9 and 6) without reading the comments in inftrees.h; concerning the ENOUGH constants, which depend on those values */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:144,Availability,error,error,144,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:229,Availability,error,error,229,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:257,Availability,recover,recoverable,257,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:156,Deployability,update,updatewindow,156,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:188,Deployability,update,update,188,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:257,Safety,recover,recoverable,257,"/*; Return from inflate(), updating the total counts and the check value.; If there was no progress during the inflate() call, return a buffer; error. Call updatewindow() to create and/or update the window state.; Note: a memory error from inflate() is non-recoverable.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:35,Deployability,update,updatewindow,35,"/* copy dictionary to window using updatewindow(), which will amend the; existing dictionary if appropriate */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:203,Deployability,update,updated,203,"/*; Search buf[0..len-1] for the pattern: 0, 0, 0xff, 0xff. Return when found; or when out of input. When called, *have is the number of pattern bytes; found in order so far, in 0..3. On return *have is updated to the new; state. If on return *have equals four, then the pattern was found and the; return value is how many bytes were read including the last byte of the; pattern. If *have is less than four, then the pattern has not been found; yet and the return value is len. In the latter case, syncsearch() can be; called again with more data and the *have state. *have is initialized to; zero for the first call.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:10,Availability,avail,available,10,/* search available input */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:181,Safety,safe,safety,181,"/*; Returns true if inflate is currently at the end of a block generated by; Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP; implementation to provide an additional safety check. PPP uses; Z_SYNC_FLUSH but removes the length bytes of the resulting empty stored; block. When decompressing, PPP checks that at the end of input packet,; inflate is waiting for these length bytes.; */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:3,Energy Efficiency,allocate,allocate,3,/* allocate space */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h:486,Safety,avoid,avoid,486,"/* inflate.h -- internal inflate state definition; * Copyright (C) 1995-2009 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* WARNING: this file should *not* be used by applications. It is; part of the implementation of the compression library and is; subject to change. Applications should only use zlib.h.; */; /* define NO_GZIP when compiling if you want to disable gzip header and; trailer decoding by inflate(). NO_GZIP would be used to avoid linking in; the crc code when it is not needed. For shared libraries, gzip decoding; should be left enabled. */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h:14,Availability,error,error,14,/* got a data error -- remain here until reset */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h:27,Availability,error,error,27,/* got an inflate() memory error -- remain here until reset */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h:15,Integrability,synchroniz,synchronization,15,/* looking for synchronization bytes to restart inflate() */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h:81,Availability,error,error,81,/*; State transitions between above modes -. (most modes can go to BAD or MEM on error -- not shown for clarity). Process header:; HEAD -> (gzip) or (zlib) or (raw); (gzip) -> FLAGS -> TIME -> OS -> EXLEN -> EXTRA -> NAME -> COMMENT ->; HCRC -> TYPE; (zlib) -> DICTID or TYPE; DICTID -> DICT -> TYPE; (raw) -> TYPEDO; Read deflate blocks:; TYPE -> TYPEDO -> STORED or TABLE or LEN_ or CHECK; STORED -> COPY_ -> COPY -> TYPE; TABLE -> LENLENS -> CODELENS -> LEN_; LEN_ -> LEN; Read deflate codes in fixed or dynamic block:; LEN -> LENEXT or LIT or TYPE; LENEXT -> DIST -> DISTEXT -> MATCH -> LEN; LIT -> LEN; Process trailer:; CHECK -> LENGTH -> DONE; */; /* state maintained between inflate() calls. Approximately 10K bytes. */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h:3,Testability,log,log,3,/* log base 2 of requested window size */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h:3,Energy Efficiency,allocate,allocated,3,"/* allocated sliding window, if needed */; /* bit accumulator */",MatchSource.CODE_COMMENT,builtins/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h:8,Availability,avail,available,8,/* next available space in codes[] */,MatchSource.CODE_COMMENT,builtins/zlib/inflate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:44,Energy Efficiency,efficient,efficient,44,"/* inftrees.c -- generate Huffman trees for efficient decoding; * Copyright (C) 1995-2013 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */",MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:721,Availability,avail,available,721,"/*; If you use the zlib library in a product, an acknowledgment is welcome; in the documentation of your product. If for some reason you cannot; include such an acknowledgment, I would appreciate that you keep this; copyright string in the executable of your product.; */; /*; Build a set of tables to decode the provided canonical Huffman code.; The code lengths are lens[0..codes-1]. The result starts at *table,; whose indices are 0..2^bits-1. work is a writable array of at least; lens shorts, which is used as a work area. type is the type of code; to be generated, CODES, LENS, or DISTS. On return, zero is success,; -1 is an invalid code, and +1 means that ENOUGH isn't enough. table; on return points to the next available entry's address. bits is the; requested root table index bits, and on return it is the actual root; table index bits. It will differ if the request is greater than the; longest code or if it is less than the shortest code.; */",MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:26,Availability,avail,available,26,/* number of prefix codes available */,MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:3,Availability,mask,mask,3,/* mask for low root bits */,MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:8,Availability,avail,available,8,/* next available space in table */,MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:734,Integrability,rout,routine,734,"/*; Process a set of code lengths to create a canonical Huffman code. The; code lengths are lens[0..codes-1]. Each length corresponds to the; symbols 0..codes-1. The Huffman code is generated by first sorting the; symbols by length from short to long, and retaining the symbol order; for codes with equal lengths. Then the code starts with all zero bits; for the first code of the shortest length, and the codes are integer; increments for the same length, and zeros are appended as the length; increases. For the deflate format, these bits are stored backwards; from their more natural integer increment ordering, and so when the; decoding tables are built in the large loop below, the integer codes; are incremented backwards. This routine assumes, but does not check, that all of the entries in; lens[] are in the range 0..MAXBITS. The caller must assure this.; 1..MAXBITS is interpreted as that code length. zero means that that; symbol does not occur in this code. The codes are sorted by computing a count of codes for each length,; creating from that a table of starting indices for each length in the; sorted table, and then entering the symbols in order in the sorted; table. The sorted table is work[], with that space being provided by; the caller. The length counts are used for other purposes as well, i.e. finding; the minimum and maximum length codes, determining if there are any; codes at all, checking for a valid set of lengths, and looking ahead; at length counts to determine sub-table sizes when building the; decoding tables.; */; /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */",MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:28,Availability,error,error,28,/* make a table to force an error */,MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:47,Availability,error,error,47,"/* no symbols, but wait for decoding to report error */",MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:1032,Energy Efficiency,allocate,allocated,1032,"/*; Create and fill in decoding tables. In this loop, the table being; filled is at next and has curr index bits. The code being used is huff; with length len. That code is converted to an index by dropping drop; bits off of the bottom. For codes where len is less than drop + curr,; those top drop + curr - len bits are incremented through all values to; fill the table with replicated entries. root is the number of index bits for the root table. When len exceeds; root, sub-tables are created pointed to by the root entry with an index; of the low root bits of huff. This is saved in low to check for when a; new sub-table should be started. drop is zero when the root table is; being filled, and drop is root when sub-tables are being filled. When a new sub-table is needed, it is necessary to look ahead in the; code lengths to determine what size sub-table is needed. The length; counts are used for this, and so count[] is decremented as codes are; entered in the tables. used keeps track of how many table entries have been allocated from the; provided *table space. It is checked for LENS and DIST tables against; the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in; the initial root table size constants. See the comments in inftrees.h; for more information. sym increments through all symbols, and the loop terminates when; all codes of length max, i.e. all codes, have been processed. This; routine permits incomplete codes, so another loop after this one fills; in the rest of the decoding tables with invalid code markers.; */; /* set up for code type */",MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:1422,Integrability,rout,routine,1422,"/*; Create and fill in decoding tables. In this loop, the table being; filled is at next and has curr index bits. The code being used is huff; with length len. That code is converted to an index by dropping drop; bits off of the bottom. For codes where len is less than drop + curr,; those top drop + curr - len bits are incremented through all values to; fill the table with replicated entries. root is the number of index bits for the root table. When len exceeds; root, sub-tables are created pointed to by the root entry with an index; of the low root bits of huff. This is saved in low to check for when a; new sub-table should be started. drop is zero when the root table is; being filled, and drop is root when sub-tables are being filled. When a new sub-table is needed, it is necessary to look ahead in the; code lengths to determine what size sub-table is needed. The length; counts are used for this, and so count[] is decremented as codes are; entered in the tables. used keeps track of how many table entries have been allocated from the; provided *table space. It is checked for LENS and DIST tables against; the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in; the initial root table size constants. See the comments in inftrees.h; for more information. sym increments through all symbols, and the loop terminates when; all codes of length max, i.e. all codes, have been processed. This; routine permits incomplete codes, so another loop after this one fills; in the rest of the decoding tables with invalid code markers.; */; /* set up for code type */",MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:3,Availability,mask,mask,3,/* mask for comparing low */; /* check available table space */,MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:39,Availability,avail,available,39,/* mask for comparing low */; /* check available table space */,MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c:22,Deployability,update,update,22,"/* go to next symbol, update count, len */",MatchSource.CODE_COMMENT,builtins/zlib/inftrees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.h:999,Deployability,update,updated,999,"/* op values as set by inflate_table():; 00000000 - literal; 0000tttt - table link, tttt != 0 is the number of table index bits; 0001eeee - length or distance, eeee is the number of extra bits; 01100000 - end of block; 01000000 - invalid code; */; /* Maximum size of the dynamic table. The maximum number of code structures is; 1444, which is the sum of 852 for literal/length codes and 592 for distance; codes. These values were found by exhaustive searches using the program; examples/enough.c found in the zlib distribtution. The arguments to that; program are the number of symbols, the initial root table size, and the; maximum bit length of a code. ""enough 286 9 15"" for literal/length codes; returns returns 852, and ""enough 30 6 15"" for distance codes returns 592.; The initial root table size (9 or 6) is found in the fifth argument of the; inflate_table() calls in inflate.c and infback.c. If the root table size is; changed, then these maximum sizes would be need to be recalculated and; updated. */",MatchSource.CODE_COMMENT,builtins/zlib/inftrees.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inftrees.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:790,Availability,Avail,Available,790,"/* trees.c -- output deflated data using Huffman coding; * Copyright (C) 1995-2012 Jean-loup Gailly; * detect_data_type() function provided freely by Cosmin Truta, 2006; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process uses several Huffman trees. The more; * common source values are represented by shorter bit sequences.; *; * Each code tree is stored in a compressed form which is itself; * a Huffman encoding of the lengths of all the code strings (in; * ascending order by source values). The actual code strings are; * reconstructed from the lengths in the inflate process, as described; * in the deflate specification.; *; * REFERENCES; *; * Deutsch, L.P.,""'Deflate' Compressed Data Format Specification"".; * Available in ftp.uu.net:/pub/archiving/zip/doc/deflate-1.1.doc; *; * Storer, James A.; * Data Compression: Methods and Theory, pp. 49-50.; * Computer Science Press, 1988. ISBN 0-7167-8156-5.; *; * Sedgewick, R.; * Algorithms, p290.; * Addison-Wesley, 1983. ISBN 0-201-06672-6.; */; /* @(#) $Id$ */; /* #define GEN_TREES_H */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:90,Safety,avoid,avoid,90,"/* The lengths of the bit length codes are sent in order of decreasing; * probability, to avoid transmitting the lengths for unused bit length codes.; */; /* ===========================================================================; * Local data. These are initialized only once.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:97,Integrability,rout,routines,97,/* ===========================================================================; * Local (static) routines in this file.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:128,Testability,assert,assertion,128,/* ===========================================================================; * Output a short LSB first on the stream.; * IN assertion: there is enough room in pendingBuf.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:128,Testability,assert,assertion,128,/* ===========================================================================; * Send a value on a given number of bits.; * IN assertion: length <= 16 and value fits in length bits.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:37,Modifiability,variab,variables,37,"/* For some embedded targets, global variables are not initialized: */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:250,Deployability,Update,Updates,250,/* Index within the heap array of least frequent node in the Huffman tree */; /* ===========================================================================; * Remove the smallest element from the heap and recreate the heap with; * one less element. Updates heap and heap_len.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:118,Availability,down,down,118,"/* ===========================================================================; * Restore the heap property by moving down the tree starting at node k,; * exchanging a node with the smallest of its two sons if necessary, stopping; * when the heap property is re-established (each father smaller than its; * two sons).; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:16,Availability,down,down,16,/* node to move down */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:16,Availability,down,down,16,"/* And continue down the tree, setting j to the left son of k */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:129,Deployability,update,update,129,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:472,Deployability,update,updated,472,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:500,Deployability,update,updated,500,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:189,Testability,assert,assertion,189,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:319,Testability,assert,assertions,319,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:17,Availability,down,down,17,/* move one leaf down the tree */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:109,Usability,simpl,simpler,109,"/* Now recompute all bit lengths, scanning in increasing frequency.; * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all; * lengths instead of fixing only the wrong ones. This idea is taken; * from 'ar' written by Haruhiko Okumura.); */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:171,Testability,assert,assertion,171,/* ===========================================================================; * Generate the codes for a given tree and bit counts (which need not be; * optimal).; * IN assertion: the array bl_count contains the bit length statistics for; * the given tree and the field len is set for all tree elements.; * OUT assertion: the field code is set for all tree elements of non; * zero code length.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:313,Testability,assert,assertion,313,/* ===========================================================================; * Generate the codes for a given tree and bit counts (which need not be; * optimal).; * IN assertion: the array bl_count contains the bit length statistics for; * the given tree and the field len is set for all tree elements.; * OUT assertion: the field code is set for all tree elements of non; * zero code length.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:158,Deployability,Update,Update,158,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:397,Deployability,update,updated,397,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:428,Deployability,update,updated,428,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:215,Testability,assert,assertion,215,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:278,Testability,assert,assertions,278,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:163,Safety,avoid,avoid,163,"/* The pkzip format requires that at least one distance code exists,; * and that at least one bit should be sent even if there is only one; * possible code. So to avoid special checks later on we force at least; * two codes of non zero frequency.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:3,Deployability,Update,Update,3,/* Update opt_len to include the bit length tree and counts */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:237,Testability,assert,assertion,237,"/* ===========================================================================; * Send the header for a block using dynamic Huffman trees: the counts, the; * lengths of the bit length codes, the literal tree and the distance tree.; * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:7,Testability,test,test,7,"/* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.; * Otherwise we can't have processed more than WSIZE input bytes since; * the last block flush, because compression would have been; * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to; * transform a block into a stored block.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:49,Integrability,wrap,wraparound,49,/* We avoid equality with lit_bufsize because of wraparound at 64K; * on 16 bit machines and because stored blocks are restricted to; * 64K-1 bytes.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:6,Safety,avoid,avoid,6,/* We avoid equality with lit_bufsize because of wraparound at 64K; * on 16 bit machines and because stored blocks are restricted to; * 64K-1 bytes.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:25,Availability,mask,mask,25,"/* black_mask is the bit mask of black-listed bytes; * set bits 0..6, 14..25, and 28..31; * 0xf3ffc07f = binary 11110011111111111100000001111111; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:94,Availability,toler,tolerated,94,"/* There are no ""black-listed"" or ""white-listed"" bytes:; * this stream either is empty or has tolerated (""gray-listed"") bytes only.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:790,Availability,Avail,Available,790,"/* trees.c -- output deflated data using Huffman coding; * Copyright (C) 1995-2012 Jean-loup Gailly; * detect_data_type() function provided freely by Cosmin Truta, 2006; * For conditions of distribution and use, see copyright notice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process uses several Huffman trees. The more; * common source values are represented by shorter bit sequences.; *; * Each code tree is stored in a compressed form which is itself; * a Huffman encoding of the lengths of all the code strings (in; * ascending order by source values). The actual code strings are; * reconstructed from the lengths in the inflate process, as described; * in the deflate specification.; *; * REFERENCES; *; * Deutsch, L.P.,""'Deflate' Compressed Data Format Specification"".; * Available in ftp.uu.net:/pub/archiving/zip/doc/deflate-1.1.doc; *; * Storer, James A.; * Data Compression: Methods and Theory, pp. 49-50.; * Computer Science Press, 1988. ISBN 0-7167-8156-5.; *; * Sedgewick, R.; * Algorithms, p290.; * Addison-Wesley, 1983. ISBN 0-201-06672-6.; */; /* @(#) $Id$ */; /* #define GEN_TREES_H */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:90,Safety,avoid,avoid,90,"/* The lengths of the bit length codes are sent in order of decreasing; * probability, to avoid transmitting the lengths for unused bit length codes.; */; /* ===========================================================================; * Local data. These are initialized only once.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:97,Integrability,rout,routines,97,/* ===========================================================================; * Local (static) routines in this file.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:128,Testability,assert,assertion,128,/* ===========================================================================; * Send a value on a given number of bits.; * IN assertion: length <= 64 and value fits in length bits.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:37,Modifiability,variab,variables,37,"/* For some embedded targets, global variables are not initialized: */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:250,Deployability,Update,Updates,250,/* Index within the heap array of least frequent node in the Huffman tree */; /* ===========================================================================; * Remove the smallest element from the heap and recreate the heap with; * one less element. Updates heap and heap_len.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:118,Availability,down,down,118,"/* ===========================================================================; * Restore the heap property by moving down the tree starting at node k,; * exchanging a node with the smallest of its two sons if necessary, stopping; * when the heap property is re-established (each father smaller than its; * two sons).; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:16,Availability,down,down,16,/* node to move down */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:16,Availability,down,down,16,"/* And continue down the tree, setting j to the left son of k */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:129,Deployability,update,update,129,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:472,Deployability,update,updated,472,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:500,Deployability,update,updated,500,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:189,Testability,assert,assertion,189,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:319,Testability,assert,assertions,319,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:17,Availability,down,down,17,/* move one leaf down the tree */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:109,Usability,simpl,simpler,109,"/* Now recompute all bit lengths, scanning in increasing frequency.; * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all; * lengths instead of fixing only the wrong ones. This idea is taken; * from 'ar' written by Haruhiko Okumura.); */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:171,Testability,assert,assertion,171,/* ===========================================================================; * Generate the codes for a given tree and bit counts (which need not be; * optimal).; * IN assertion: the array bl_count contains the bit length statistics for; * the given tree and the field len is set for all tree elements.; * OUT assertion: the field code is set for all tree elements of non; * zero code length.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:313,Testability,assert,assertion,313,/* ===========================================================================; * Generate the codes for a given tree and bit counts (which need not be; * optimal).; * IN assertion: the array bl_count contains the bit length statistics for; * the given tree and the field len is set for all tree elements.; * OUT assertion: the field code is set for all tree elements of non; * zero code length.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:158,Deployability,Update,Update,158,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:397,Deployability,update,updated,397,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:428,Deployability,update,updated,428,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:215,Testability,assert,assertion,215,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:278,Testability,assert,assertions,278,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:163,Safety,avoid,avoid,163,"/* The pkzip format requires that at least one distance code exists,; * and that at least one bit should be sent even if there is only one; * possible code. So to avoid special checks later on we force at least; * two codes of non zero frequency.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:3,Deployability,Update,Update,3,/* Update opt_len to include the bit length tree and counts */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:237,Testability,assert,assertion,237,"/* ===========================================================================; * Send the header for a block using dynamic Huffman trees: the counts, the; * lengths of the bit length codes, the literal tree and the distance tree.; * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:7,Testability,test,test,7,"/* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.; * Otherwise we can't have processed more than WSIZE input bytes since; * the last block flush, because compression would have been; * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to; * transform a block into a stored block.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:49,Integrability,wrap,wraparound,49,/* We avoid equality with lit_bufsize because of wraparound at 64K; * on 16 bit machines and because stored blocks are restricted to; * 64K-1 bytes.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:6,Safety,avoid,avoid,6,/* We avoid equality with lit_bufsize because of wraparound at 64K; * on 16 bit machines and because stored blocks are restricted to; * 64K-1 bytes.; */,MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:25,Availability,mask,mask,25,"/* black_mask is the bit mask of black-listed bytes; * set bits 0..6, 14..25, and 28..31; * 0xf3ffc07f = binary 11110011111111111100000001111111; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:94,Availability,toler,tolerated,94,"/* There are no ""black-listed"" or ""white-listed"" bytes:; * this stream either is empty or has tolerated (""gray-listed"") bytes only.; */",MatchSource.CODE_COMMENT,builtins/zlib/trees_cf.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:14,Deployability,configurat,configuration,14,"/* zconf.h -- configuration of the zlib compression library; * Copyright (C) 1995-2013 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,builtins/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:14,Modifiability,config,configuration,14,"/* zconf.h -- configuration of the zlib compression library; * Copyright (C) 1995-2013 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,builtins/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:221,Modifiability,config,configure,221,"/*; * If you *really* need a unique prefix for all types and library functions,; * compile with -DZ_PREFIX. The ""standard"" zlib should be compiled without it.; * Even better than compiling with -DZ_PREFIX would be to use configure to set; * this permanently in zconf.h using ""./configure --zprefix"".; */",MatchSource.CODE_COMMENT,builtins/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:278,Modifiability,config,configure,278,"/*; * If you *really* need a unique prefix for all types and library functions,; * compile with -DZ_PREFIX. The ""standard"" zlib should be compiled without it.; * Even better than compiling with -DZ_PREFIX would be to use configure to set; * this permanently in zconf.h using ""./configure --zprefix"".; */",MatchSource.CODE_COMMENT,builtins/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:28,Modifiability,config,configure,28,/* may be set to #if 1 by ./configure */,MatchSource.CODE_COMMENT,builtins/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:61,Energy Efficiency,allocate,allocate,61,/*; * Compile with -DMAXSEG_64K if the alloc function cannot allocate more; * than 64k bytes at a time (needed on systems with 16-bit int).; */,MatchSource.CODE_COMMENT,builtins/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:243,Energy Efficiency,reduce,reduce,243,"/* The memory requirements for deflate are (in bytes):; (1 << (windowBits+2)) + (1 << (memLevel+9)); that is: 128K for windowBits=15 + 128K for memLevel = 8 (default values); plus a few kilobytes for small objects. For example, if you want to reduce; the default memory requirements from 256K to 128K, compile with; make CFLAGS=""-O -DMAX_WBITS=14 -DMAX_MEM_LEVEL=7""; Of course this will generally degrade compression (there's no free lunch). The memory requirements for inflate are (in bytes) 1 << windowBits; that is, 32K for windowBits=15 (default value) plus a few kilobytes; for small objects.; */; /* Type declarations */",MatchSource.CODE_COMMENT,builtins/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:153,Testability,test,tested,153,"/* The following definitions for FAR are needed only for MSDOS mixed; * model programming (small or medium model with some far allocations).; * This was tested only with MSC; for other MSDOS compilers you may have; * to define NO_MEMCPY in zutil.h. If you don't need the mixed model,; * just define FAR to be empty.; */",MatchSource.CODE_COMMENT,builtins/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:105,Performance,perform,performance,105,"/* If building or using zlib as a DLL, define ZLIB_DLL.; * This is not mandatory, but it offers a little performance increase.; */",MatchSource.CODE_COMMENT,builtins/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:28,Modifiability,config,configure,28,/* may be set to #if 1 by ./configure */,MatchSource.CODE_COMMENT,builtins/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:28,Modifiability,config,configure,28,/* may be set to #if 1 by ./configure */,MatchSource.CODE_COMMENT,builtins/zlib/zconf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h:14,Deployability,configurat,configuration,14,"/* zconf.h -- configuration of the zlib compression library; * Copyright (C) 1995-2013 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,builtins/zlib/zconf_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h:14,Modifiability,config,configuration,14,"/* zconf.h -- configuration of the zlib compression library; * Copyright (C) 1995-2013 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,builtins/zlib/zconf_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h:221,Modifiability,config,configure,221,"/*; * If you *really* need a unique prefix for all types and library functions,; * compile with -DZ_PREFIX. The ""standard"" zlib should be compiled without it.; * Even better than compiling with -DZ_PREFIX would be to use configure to set; * this permanently in zconf.h using ""./configure --zprefix"".; */",MatchSource.CODE_COMMENT,builtins/zlib/zconf_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h:278,Modifiability,config,configure,278,"/*; * If you *really* need a unique prefix for all types and library functions,; * compile with -DZ_PREFIX. The ""standard"" zlib should be compiled without it.; * Even better than compiling with -DZ_PREFIX would be to use configure to set; * this permanently in zconf.h using ""./configure --zprefix"".; */",MatchSource.CODE_COMMENT,builtins/zlib/zconf_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h:28,Modifiability,config,configure,28,/* may be set to #if 1 by ./configure */,MatchSource.CODE_COMMENT,builtins/zlib/zconf_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h:61,Energy Efficiency,allocate,allocate,61,/*; * Compile with -DMAXSEG_64K if the alloc function cannot allocate more; * than 64k bytes at a time (needed on systems with 16-bit int).; */,MatchSource.CODE_COMMENT,builtins/zlib/zconf_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h:243,Energy Efficiency,reduce,reduce,243,"/* The memory requirements for deflate are (in bytes):; (1 << (windowBits+2)) + (1 << (memLevel+9)); that is: 128K for windowBits=15 + 128K for memLevel = 8 (default values); plus a few kilobytes for small objects. For example, if you want to reduce; the default memory requirements from 256K to 128K, compile with; make CFLAGS=""-O -DMAX_WBITS=14 -DMAX_MEM_LEVEL=7""; Of course this will generally degrade compression (there's no free lunch). The memory requirements for inflate are (in bytes) 1 << windowBits; that is, 32K for windowBits=15 (default value) plus a few kilobytes; for small objects.; */; /* Type declarations */",MatchSource.CODE_COMMENT,builtins/zlib/zconf_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h:153,Testability,test,tested,153,"/* The following definitions for FAR are needed only for MSDOS mixed; * model programming (small or medium model with some far allocations).; * This was tested only with MSC; for other MSDOS compilers you may have; * to define NO_MEMCPY in zutil.h. If you don't need the mixed model,; * just define FAR to be empty.; */",MatchSource.CODE_COMMENT,builtins/zlib/zconf_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h:105,Performance,perform,performance,105,"/* If building or using zlib as a DLL, define ZLIB_DLL.; * This is not mandatory, but it offers a little performance increase.; */",MatchSource.CODE_COMMENT,builtins/zlib/zconf_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h:25,Modifiability,config,configure,25,/* was set to #if 1 by ./configure */,MatchSource.CODE_COMMENT,builtins/zlib/zconf_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h:25,Modifiability,config,configure,25,/* was set to #if 1 by ./configure */,MatchSource.CODE_COMMENT,builtins/zlib/zconf_cf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf_cf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:13,Integrability,interface,interface,13,"/* zlib.h -- interface of the 'zlib' general purpose compression library; version 1.2.8, April 28th, 2013. Copyright (C) 1995-2013 Jean-loup Gailly and Mark Adler. This software is provided 'as-is', without any express or implied; warranty. In no event will the authors be held liable for any damages; arising from the use of this software. Permission is granted to anyone to use this software for any purpose,; including commercial applications, and to alter it and redistribute it; freely, subject to the following restrictions:. 1. The origin of this software must not be misrepresented; you must not; claim that you wrote the original software. If you use this software; in a product, an acknowledgment in the product documentation would be; appreciated but is not required.; 2. Altered source versions must be plainly marked as such, and must not be; misrepresented as being the original software.; 3. This notice may not be removed or altered from any source distribution. Jean-loup Gailly Mark Adler; jloup@gzip.org madler@alumni.caltech.edu. The data format used by the zlib library is described by RFCs (Request for; Comments) 1950 to 1952 in the files http://tools.ietf.org/html/rfc1950; (zlib format), rfc1951 (deflate format) and rfc1952 (gzip format).; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1484,Deployability,install,install,1484,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed data.; This version of the library supports only one compression method (deflation); but other algorithms will be added later and will have the same stream; interface. Compression can be done in a single step if the buffers are large enough,; or can be done by repeated calls of the compression function. In the latter; case, the application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never crash; even in case of corrupted input.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:300,Integrability,interface,interface,300,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed data.; This version of the library supports only one compression method (deflation); but other algorithms will be added later and will have the same stream; interface. Compression can be done in a single step if the buffers are large enough,; or can be done by repeated calls of the compression function. In the latter; case, the application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never crash; even in case of corrupted input.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:691,Integrability,wrap,wrapper,691,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed data.; This version of the library supports only one compression method (deflation); but other algorithms will be added later and will have the same stream; interface. Compression can be done in a single step if the buffers are large enough,; or can be done by repeated calls of the compression function. In the latter; case, the application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never crash; even in case of corrupted input.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:723,Integrability,wrap,wrapped,723,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed data.; This version of the library supports only one compression method (deflation); but other algorithms will be added later and will have the same stream; interface. Compression can be done in a single step if the buffers are large enough,; or can be done by repeated calls of the compression function. In the latter; case, the application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never crash; even in case of corrupted input.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:879,Integrability,interface,interface,879,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed data.; This version of the library supports only one compression method (deflation); but other algorithms will be added later and will have the same stream; interface. Compression can be done in a single step if the buffers are large enough,; or can be done by repeated calls of the compression function. In the latter; case, the application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never crash; even in case of corrupted input.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1024,Integrability,wrap,wrapper,1024,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed data.; This version of the library supports only one compression method (deflation); but other algorithms will be added later and will have the same stream; interface. Compression can be done in a single step if the buffers are large enough,; or can be done by repeated calls of the compression function. In the latter; case, the application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never crash; even in case of corrupted input.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1057,Integrability,wrap,wrapped,1057,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed data.; This version of the library supports only one compression method (deflation); but other algorithms will be added later and will have the same stream; interface. Compression can be done in a single step if the buffers are large enough,; or can be done by repeated calls of the compression function. In the latter; case, the application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never crash; even in case of corrupted input.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:106,Security,integrity,integrity,106,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed data.; This version of the library supports only one compression method (deflation); but other algorithms will be added later and will have the same stream; interface. Compression can be done in a single step if the buffers are large enough,; or can be done by repeated calls of the compression function. In the latter; case, the application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never crash; even in case of corrupted input.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:19,Availability,avail,available,19,/* number of bytes available at next_in */,MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:8,Availability,error,error,8,"/* last error message, NULL if no error */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:34,Availability,error,error,34,"/* last error message, NULL if no error */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:14,Integrability,message,message,14,"/* last error message, NULL if no error */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:11,Energy Efficiency,allocate,allocate,11,/* used to allocate the internal state */,MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:52,Integrability,rout,routines,52,/*; gzip header information passed to and from zlib routines. See RFC 1952; for more details on the meanings of these fields.; */,MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:25,Deployability,update,update,25,"/*; The application must update next_in and avail_in when avail_in has dropped; to zero. It must update next_out and avail_out when avail_out has dropped; to zero. The application must initialize zalloc, zfree and opaque before; calling the init function. All other fields are set by the compression; library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this if; the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS, pointers; returned by zalloc for objects of exactly 65536 bytes *must* have their; offset normalized to zero. The default allocation function provided by this; library ensures this (see zutil.c). To reduce memory requirements and avoid; any allocation of 64K objects, at the expense of compression ratio, compile; the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or progress; reports. After compression, total_in holds the total size of the; uncompressed data and may be saved for use in the decompressor (particularly; if the decompressor wants to decompress everything in a single step).; */; /* constants */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:97,Deployability,update,update,97,"/*; The application must update next_in and avail_in when avail_in has dropped; to zero. It must update next_out and avail_out when avail_out has dropped; to zero. The application must initialize zalloc, zfree and opaque before; calling the init function. All other fields are set by the compression; library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this if; the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS, pointers; returned by zalloc for objects of exactly 65536 bytes *must* have their; offset normalized to zero. The default allocation function provided by this; library ensures this (see zutil.c). To reduce memory requirements and avoid; any allocation of 64K objects, at the expense of compression ratio, compile; the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or progress; reports. After compression, total_in holds the total size of the; uncompressed data and may be saved for use in the decompressor (particularly; if the decompressor wants to decompress everything in a single step).; */; /* constants */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:325,Deployability,update,updated,325,"/*; The application must update next_in and avail_in when avail_in has dropped; to zero. It must update next_out and avail_out when avail_out has dropped; to zero. The application must initialize zalloc, zfree and opaque before; calling the init function. All other fields are set by the compression; library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this if; the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS, pointers; returned by zalloc for objects of exactly 65536 bytes *must* have their; offset normalized to zero. The default allocation function provided by this; library ensures this (see zutil.c). To reduce memory requirements and avoid; any allocation of 64K objects, at the expense of compression ratio, compile; the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or progress; reports. After compression, total_in holds the total size of the; uncompressed data and may be saved for use in the decompressor (particularly; if the decompressor wants to decompress everything in a single step).; */; /* constants */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:811,Energy Efficiency,allocate,allocate,811,"/*; The application must update next_in and avail_in when avail_in has dropped; to zero. It must update next_out and avail_out when avail_out has dropped; to zero. The application must initialize zalloc, zfree and opaque before; calling the init function. All other fields are set by the compression; library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this if; the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS, pointers; returned by zalloc for objects of exactly 65536 bytes *must* have their; offset normalized to zero. The default allocation function provided by this; library ensures this (see zutil.c). To reduce memory requirements and avoid; any allocation of 64K objects, at the expense of compression ratio, compile; the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or progress; reports. After compression, total_in holds the total size of the; uncompressed data and may be saved for use in the decompressor (particularly; if the decompressor wants to decompress everything in a single step).; */; /* constants */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:870,Energy Efficiency,allocate,allocate,870,"/*; The application must update next_in and avail_in when avail_in has dropped; to zero. It must update next_out and avail_out when avail_out has dropped; to zero. The application must initialize zalloc, zfree and opaque before; calling the init function. All other fields are set by the compression; library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this if; the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS, pointers; returned by zalloc for objects of exactly 65536 bytes *must* have their; offset normalized to zero. The default allocation function provided by this; library ensures this (see zutil.c). To reduce memory requirements and avoid; any allocation of 64K objects, at the expense of compression ratio, compile; the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or progress; reports. After compression, total_in holds the total size of the; uncompressed data and may be saved for use in the decompressor (particularly; if the decompressor wants to decompress everything in a single step).; */; /* constants */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1164,Energy Efficiency,reduce,reduce,1164,"/*; The application must update next_in and avail_in when avail_in has dropped; to zero. It must update next_out and avail_out when avail_out has dropped; to zero. The application must initialize zalloc, zfree and opaque before; calling the init function. All other fields are set by the compression; library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this if; the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS, pointers; returned by zalloc for objects of exactly 65536 bytes *must* have their; offset normalized to zero. The default allocation function provided by this; library ensures this (see zutil.c). To reduce memory requirements and avoid; any allocation of 64K objects, at the expense of compression ratio, compile; the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or progress; reports. After compression, total_in holds the total size of the; uncompressed data and may be saved for use in the decompressor (particularly; if the decompressor wants to decompress everything in a single step).; */; /* constants */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:678,Performance,multi-thread,multi-threaded,678,"/*; The application must update next_in and avail_in when avail_in has dropped; to zero. It must update next_out and avail_out when avail_out has dropped; to zero. The application must initialize zalloc, zfree and opaque before; calling the init function. All other fields are set by the compression; library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this if; the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS, pointers; returned by zalloc for objects of exactly 65536 bytes *must* have their; offset normalized to zero. The default allocation function provided by this; library ensures this (see zutil.c). To reduce memory requirements and avoid; any allocation of 64K objects, at the expense of compression ratio, compile; the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or progress; reports. After compression, total_in holds the total size of the; uncompressed data and may be saved for use in the decompressor (particularly; if the decompressor wants to decompress everything in a single step).; */; /* constants */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:739,Safety,safe,safe,739,"/*; The application must update next_in and avail_in when avail_in has dropped; to zero. It must update next_out and avail_out when avail_out has dropped; to zero. The application must initialize zalloc, zfree and opaque before; calling the init function. All other fields are set by the compression; library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this if; the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS, pointers; returned by zalloc for objects of exactly 65536 bytes *must* have their; offset normalized to zero. The default allocation function provided by this; library ensures this (see zutil.c). To reduce memory requirements and avoid; any allocation of 64K objects, at the expense of compression ratio, compile; the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or progress; reports. After compression, total_in holds the total size of the; uncompressed data and may be saved for use in the decompressor (particularly; if the decompressor wants to decompress everything in a single step).; */; /* constants */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1195,Safety,avoid,avoid,1195,"/*; The application must update next_in and avail_in when avail_in has dropped; to zero. It must update next_out and avail_out when avail_out has dropped; to zero. The application must initialize zalloc, zfree and opaque before; calling the init function. All other fields are set by the compression; library and must not be updated by the application. The opaque value provided by the application will be passed as the first; parameter for calls of zalloc and zfree. This can be useful for custom; memory management. The compression library attaches no meaning to the; opaque value. zalloc must return Z_NULL if there is not enough memory for the object.; If zlib is used in a multi-threaded application, zalloc and zfree must be; thread safe. On 16-bit systems, the functions zalloc and zfree must be able to allocate; exactly 65536 bytes, but will not be required to allocate more than this if; the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS, pointers; returned by zalloc for objects of exactly 65536 bytes *must* have their; offset normalized to zero. The default allocation function provided by this; library ensures this (see zutil.c). To reduce memory requirements and avoid; any allocation of 64K objects, at the expense of compression ratio, compile; the library with -DMAX_WBITS=14 (see zconf.h). The fields total_in and total_out can be used for statistics or progress; reports. After compression, total_in holds the total size of the; uncompressed data and may be saved for use in the decompressor (particularly; if the decompressor wants to decompress everything in a single step).; */; /* constants */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:84,Availability,error,errors,84,"/* Return codes for the compression/decompression functions. Negative values; * are errors, positive values are used for special but normal events.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1224,Availability,error,error,1224,"/* The application can compare zlibVersion and ZLIB_VERSION for consistency.; If the first character differs, the library code actually used is not; compatible with the zlib.h header file used by the application. This check; is automatically made by deflateInit and inflateInit.; */; /*; ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));. Initializes the internal stream state for compression. The fields; zalloc, zfree and opaque must be initialized before by the caller. If; zalloc and zfree are set to Z_NULL, deflateInit updates them to use default; allocation functions. The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:; 1 gives best speed, 9 gives best compression, 0 gives no compression at all; (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION; requests a default compromise between speed and compression (currently; equivalent to level 6). deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if level is not a valid compression level, or; Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible; with the version assumed by the caller (ZLIB_VERSION). msg is set to null; if there is no error message. deflateInit does not perform any compression:; this will be done by deflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:540,Deployability,update,updates,540,"/* The application can compare zlibVersion and ZLIB_VERSION for consistency.; If the first character differs, the library code actually used is not; compatible with the zlib.h header file used by the application. This check; is automatically made by deflateInit and inflateInit.; */; /*; ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));. Initializes the internal stream state for compression. The fields; zalloc, zfree and opaque must be initialized before by the caller. If; zalloc and zfree are set to Z_NULL, deflateInit updates them to use default; allocation functions. The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:; 1 gives best speed, 9 gives best compression, 0 gives no compression at all; (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION; requests a default compromise between speed and compression (currently; equivalent to level 6). deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if level is not a valid compression level, or; Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible; with the version assumed by the caller (ZLIB_VERSION). msg is set to null; if there is no error message. deflateInit does not perform any compression:; this will be done by deflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1230,Integrability,message,message,1230,"/* The application can compare zlibVersion and ZLIB_VERSION for consistency.; If the first character differs, the library code actually used is not; compatible with the zlib.h header file used by the application. This check; is automatically made by deflateInit and inflateInit.; */; /*; ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));. Initializes the internal stream state for compression. The fields; zalloc, zfree and opaque must be initialized before by the caller. If; zalloc and zfree are set to Z_NULL, deflateInit updates them to use default; allocation functions. The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:; 1 gives best speed, 9 gives best compression, 0 gives no compression at all; (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION; requests a default compromise between speed and compression (currently; equivalent to level 6). deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if level is not a valid compression level, or; Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible; with the version assumed by the caller (ZLIB_VERSION). msg is set to null; if there is no error message. deflateInit does not perform any compression:; this will be done by deflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1260,Performance,perform,perform,1260,"/* The application can compare zlibVersion and ZLIB_VERSION for consistency.; If the first character differs, the library code actually used is not; compatible with the zlib.h header file used by the application. This check; is automatically made by deflateInit and inflateInit.; */; /*; ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));. Initializes the internal stream state for compression. The fields; zalloc, zfree and opaque must be initialized before by the caller. If; zalloc and zfree are set to Z_NULL, deflateInit updates them to use default; allocation functions. The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:; 1 gives best speed, 9 gives best compression, 0 gives no compression at all; (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION; requests a default compromise between speed and compression (currently; equivalent to level 6). deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if level is not a valid compression level, or; Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible; with the version assumed by the caller (ZLIB_VERSION). msg is set to null; if there is no error message. deflateInit does not perform any compression:; this will be done by deflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:761,Usability,simpl,simply,761,"/* The application can compare zlibVersion and ZLIB_VERSION for consistency.; If the first character differs, the library code actually used is not; compatible with the zlib.h header file used by the application. This check; is automatically made by deflateInit and inflateInit.; */; /*; ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));. Initializes the internal stream state for compression. The fields; zalloc, zfree and opaque must be initialized before by the caller. If; zalloc and zfree are set to Z_NULL, deflateInit updates them to use default; allocation functions. The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:; 1 gives best speed, 9 gives best compression, 0 gives no compression at all; (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION; requests a default compromise between speed and compression (currently; equivalent to level 6). deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if level is not a valid compression level, or; Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible; with the version assumed by the caller (ZLIB_VERSION). msg is set to null; if there is no error message. deflateInit does not perform any compression:; this will be done by deflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1916,Availability,avail,available,1916,"ratio, so this parameter; should be set only when necessary (in interactive applications). Some; output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating avail_in or avail_out accordingly; avail_out should; never be zero before the call. The application can consume the compressed; output when it wants, for example when the output buffer is full (avail_out; == 0), or after each call of deflate(). If deflate returns Z_OK and with; zero avail_out, it must be called again after making room in the output; buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumulate before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In; particular avail_in is zero after the call if enough output space has been; provided before the call.) Flushing may degrade compression for some; compression algorithms and so it should be used only when necessary. This; completes the current deflate block and follows it with an empty stored block; that is three bits plus filler bits to the next byte, followed by four bytes; (00 00 ff ff). If flush is set to Z_PARTIAL_FLUSH, all pending output is flushed to the; output buffer, but the output is not aligned to a byte boundary. All of the; input data so far will be available to the decompressor, as for Z_SYNC_FLUSH.; This completes the current deflate block and follows it with an empty fixed; codes block that is 10 bits long. This assures that enough bytes are output; in order for the decompressor to finish the block before the empty fixed code; block. If flush is set to Z_BLOC",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:2509,Availability,avail,available,2509,"there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumulate before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In; particular avail_in is zero after the call if enough output space has been; provided before the call.) Flushing may degrade compression for some; compression algorithms and so it should be used only when necessary. This; completes the current deflate block and follows it with an empty stored block; that is three bits plus filler bits to the next byte, followed by four bytes; (00 00 ff ff). If flush is set to Z_PARTIAL_FLUSH, all pending output is flushed to the; output buffer, but the output is not aligned to a byte boundary. All of the; input data so far will be available to the decompressor, as for Z_SYNC_FLUSH.; This completes the current deflate block and follows it with an empty fixed; codes block that is 10 bits long. This assures that enough bytes are output; in order for the decompressor to finish the block before the empty fixed code; block. If flush is set to Z_BLOCK, a deflate block is completed and emitted, as; for Z_SYNC_FLUSH, but the output is not aligned on a byte boundary, and up to; seven bits of the current block are held to be written as the next byte after; the next deflate block is completed. In this case, the decompressor may not; be provided enough bits at this point in order to complete decompression of; the data provided so far to the compressor. It may need to wait for the next; block to be emitted. This is for advanced applications that need to control; the emission of deflate blocks. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; ",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4435,Availability,error,error,4435,"e next; block to be emitted. This is for advanced applications that need to control; the emission of deflate blocks. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there was; enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the stream; are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least the; value returned by deflateBound (see below). Then deflate is guaranteed to; return Z_STREAM_END. If not enough output space is provided, deflate will; not return Z_STREAM_END, and it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it can make a good guess about; the input data type (Z_BINARY or Z_TEXT). In doubt, the data is considered; binary. This field is only for information purposes and does not affec",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:386,Deployability,update,update,386,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications). Some; output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating avail_in or avail_out accordingly; avail_out should; never be zero before the call. The application can consume the compressed; output when it wants, for example when the output buffer is full (avail_out; == 0), or after each call of deflate(). If deflate returns Z_OK and with; zero avail_out, it must be called again after making room in the output; buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumulate before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In; particular avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:545,Deployability,update,updated,545,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications). Some; output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating avail_in or avail_out accordingly; avail_out should; never be zero before the call. The application can consume the compressed; output when it wants, for example when the output buffer is full (avail_out; == 0), or after each call of deflate(). If deflate returns Z_OK and with; zero avail_out, it must be called again after making room in the output; buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumulate before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In; particular avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:674,Deployability,update,update,674,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications). Some; output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating avail_in or avail_out accordingly; avail_out should; never be zero before the call. The application can consume the compressed; output when it wants, for example when the output buffer is full (avail_out; == 0), or after each call of deflate(). If deflate returns Z_OK and with; zero avail_out, it must be called again after making room in the output; buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumulate before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In; particular avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3824,Deployability,update,updated,3824,"ck. If flush is set to Z_BLOCK, a deflate block is completed and emitted, as; for Z_SYNC_FLUSH, but the output is not aligned on a byte boundary, and up to; seven bits of the current block are held to be written as the next byte after; the next deflate block is completed. In this case, the decompressor may not; be provided enough bits at this point in order to complete decompression of; the data provided so far to the compressor. It may need to wait for the next; block to be emitted. This is for advanced applications that need to control; the emission of deflate blocks. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there was; enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the stream; are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least the; value returned by deflateBound (see below). Then deflate is guaranteed to; return Z_ST",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4350,Deployability,update,updated,4350,"e next; block to be emitted. This is for advanced applications that need to control; the emission of deflate blocks. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there was; enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the stream; are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least the; value returned by deflateBound (see below). Then deflate is guaranteed to; return Z_STREAM_END. If not enough output space is provided, deflate will; not return Z_STREAM_END, and it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it can make a good guess about; the input data type (Z_BINARY or Z_TEXT). In doubt, the data is considered; binary. This field is only for information purposes and does not affec",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5054,Deployability,update,update,5054,"il the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there was; enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the stream; are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least the; value returned by deflateBound (see below). Then deflate is guaranteed to; return Z_STREAM_END. If not enough output space is provided, deflate will; not return Z_STREAM_END, and it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it can make a good guess about; the input data type (Z_BINARY or Z_TEXT). In doubt, the data is considered; binary. This field is only for information purposes and does not affect the; compression algorithm in any manner. deflate() returns Z_OK if some progress has been made (more input; processed or more output produced), Z_STREAM_END if all input has been; consumed and all output has been produced (only when flush is set to; Z_FINISH), Z_STREAM_ERROR if the stream state was inconsistent (for example; if next_in or next_out was Z_NULL), Z_BUF_ERROR if no progress is possible; (for example avail_in or avail_out was zero). Note that Z_BUF_ERROR is not; fatal, and deflate() can be called again with more input and more output; space to continue compressing.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:161,Performance,latency,latency,161,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications). Some; output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating avail_in or avail_out accordingly; avail_out should; never be zero before the call. The application can consume the compressed; output when it wants, for example when the output buffer is full (avail_out; == 0), or after each call of deflate(). If deflate returns Z_OK and with; zero avail_out, it must be called again after making room in the output; buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumulate before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In; particular avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:291,Performance,perform,performs,291,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications). Some; output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating avail_in or avail_out accordingly; avail_out should; never be zero before the call. The application can consume the compressed; output when it wants, for example when the output buffer is full (avail_out; == 0), or after each call of deflate(). If deflate returns Z_OK and with; zero avail_out, it must be called again after making room in the output; buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumulate before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In; particular avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4013,Safety,avoid,avoid,4013," to be written as the next byte after; the next deflate block is completed. In this case, the decompressor may not; be provided enough bits at this point in order to complete decompression of; the data provided so far to the compressor. It may need to wait for the next; block to be emitted. This is for advanced applications that need to control; the emission of deflate blocks. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there was; enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the stream; are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least the; value returned by deflateBound (see below). Then deflate is guaranteed to; return Z_STREAM_END. If not enough output space is provided, deflate will; not return Z_STREAM_END, and it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all in",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3598,Security,access,access,3598,"o far will be available to the decompressor, as for Z_SYNC_FLUSH.; This completes the current deflate block and follows it with an empty fixed; codes block that is 10 bits long. This assures that enough bytes are output; in order for the decompressor to finish the block before the empty fixed code; block. If flush is set to Z_BLOCK, a deflate block is completed and emitted, as; for Z_SYNC_FLUSH, but the output is not aligned on a byte boundary, and up to; seven bits of the current block are held to be written as the next byte after; the next deflate block is completed. In this case, the decompressor may not; be provided enough bits at this point in order to complete decompression of; the data provided so far to the compressor. It may need to wait for the next; block to be emitted. This is for advanced applications that need to control; the emission of deflate blocks. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there was; enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only po",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4978,Security,checksum,checksum,4978,"il the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there was; enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the stream; are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least the; value returned by deflateBound (see below). Then deflate is guaranteed to; return Z_STREAM_END. If not enough output space is provided, deflate will; not return Z_STREAM_END, and it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it can make a good guess about; the input data type (Z_BINARY or Z_TEXT). In doubt, the data is considered; binary. This field is only for information purposes and does not affect the; compression algorithm in any manner. deflate() returns Z_OK if some progress has been made (more input; processed or more output produced), Z_STREAM_END if all input has been; consumed and all output has been produced (only when flush is set to; Z_FINISH), Z_STREAM_ERROR if the stream state was inconsistent (for example; if next_in or next_out was Z_NULL), Z_BUF_ERROR if no progress is possible; (for example avail_in or avail_out was zero). Note that Z_BUF_ERROR is not; fatal, and deflate() can be called again with more input and more output; space to continue compressing.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:574,Usability,resume,resume,574,"/*; deflate compresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. deflate performs one or both of the; following actions:. - Compress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in and avail_in are updated and; processing will resume at this point for the next call of deflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. This action is forced if the parameter flush is non zero.; Forcing flush frequently degrades the compression ratio, so this parameter; should be set only when necessary (in interactive applications). Some; output may be provided even if flush is not set. Before the call of deflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating avail_in or avail_out accordingly; avail_out should; never be zero before the call. The application can consume the compressed; output when it wants, for example when the output buffer is full (avail_out; == 0), or after each call of deflate(). If deflate returns Z_OK and with; zero avail_out, it must be called again after making room in the output; buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumulate before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In; particular avail_in is zero after the call if enough output sp",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:344,Availability,error,error,344,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case, msg; may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the; exact value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit() does not process any header information -- that is deferred; until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1369,Availability,error,error,1369,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case, msg; may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the; exact value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit() does not process any header information -- that is deferred; until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1009,Deployability,update,updates,1009,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case, msg; may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the; exact value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit() does not process any header information -- that is deferred; until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:20,Energy Efficiency,allocate,allocated,20,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case, msg; may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the; exact value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit() does not process any header information -- that is deferred; until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:841,Energy Efficiency,allocate,allocates,841,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case, msg; may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the; exact value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit() does not process any header information -- that is deferred; until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:733,Integrability,depend,depends,733,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case, msg; may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the; exact value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit() does not process any header information -- that is deferred; until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1375,Integrability,message,message,1375,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case, msg; may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the; exact value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit() does not process any header information -- that is deferred; until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1405,Performance,perform,perform,1405,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the; stream state was inconsistent, Z_DATA_ERROR if the stream was freed; prematurely (some input or output was discarded). In the error case, msg; may be set but then points to a static string (which must not be; deallocated).; */; /*; ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));. Initializes the internal stream state for decompression. The fields; next_in, avail_in, zalloc, zfree and opaque must be initialized before by; the caller. If next_in is not Z_NULL and avail_in is large enough (the; exact value depends on the compression method), inflateInit determines the; compression method from the zlib header and allocates all data structures; accordingly; otherwise the allocation will be deferred to the first call of; inflate. If zalloc and zfree are set to Z_NULL, inflateInit updates them to; use default allocation functions. inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit() does not process any header information -- that is deferred; until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3430,Availability,error,error,3430,"header up to just before the first byte of the deflate; stream. The end-of-block will not be indicated until all of the uncompressed; data from that block has been written to strm->next_out. The number of; unused bits may in general be greater than seven, except when bit 7 of; data_type is set, in which case the number of unused bits will be less than; eight. data_type is set as noted here every time inflate() returns for all; flush options, and so can be used to determine the amount of currently; consumed input in bits. The Z_TREES option behaves as Z_BLOCK does, but it also returns when the; end of each deflate block header is reached, before any actual data in that; block is decoded. This allows the caller to determine the length of the; deflate block header for later use in random access within a deflate block.; 256 is added to the value of strm->data_type when inflate() returns; immediately after reaching the end of the deflate block header. inflate() should normally be called until it returns Z_STREAM_END or an; error. However if all decompression is to be performed in a single step (a; single call of inflate), the parameter flush should be set to Z_FINISH. In; this case all pending input is processed and all pending output is flushed;; avail_out must be large enough to hold all of the uncompressed data for the; operation to complete. (The size of the uncompressed data may have been; saved by the compressor for this purpose.) The use of Z_FINISH is not; required to perform an inflation in one step. However it may be used to; inform inflate that a faster approach can be used for the single inflate(); call. Z_FINISH also informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory footprint. If the stream; does not complete, either because not all of the stream is provided or not; enough output space is provided, then a sliding window will be allocated and; inflate() can be called again to continue the operation as if",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5207,Availability,error,error,5207,"lso informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory footprint. If the stream; does not complete, either because not all of the stream is provided or not; enough output space is provided, then a sliding window will be allocated and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progre",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:6932,Availability,recover,recovery,6932," Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; next_in or next_out was Z_NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. Note that Z_BUF_ERROR is not fatal, and; inflate() can be called again with more input and more output space to; continue decompressing. If Z_DATA_ERROR is returned, the application may; then call inflateSync() to look for a good compression block if a partial; recovery of the data is desired.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:390,Deployability,update,update,390,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing will; resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there is; no more input data or no more space in the output buffer (see below about; the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating the next_* and avail_* values accordingly. The; application can consume the uncompressed output when it wants, for example; when the output buffer is full (avail_out == 0), or after each call of; inflate(). If inflate returns Z_OK and with zero avail_out, it must be; called again after making room in the output buffer because there might be; more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FINISH,; Z_BLOCK, or Z_TREES. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate(); stop if and when it gets to the next deflate block boundary. When decoding; the zlib or gzip format, this will cause inflate() to return immediately; after the header and before the first block. When doing a raw inflate,; inflate() will go ahead and process the first block, and will return when it; gets to the end of that block, or when it runs out of data. The Z_BLO",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:535,Deployability,update,updated,535,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing will; resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there is; no more input data or no more space in the output buffer (see below about; the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating the next_* and avail_* values accordingly. The; application can consume the uncompressed output when it wants, for example; when the output buffer is full (avail_out == 0), or after each call of; inflate(). If inflate returns Z_OK and with zero avail_out, it must be; called again after making room in the output buffer because there might be; more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FINISH,; Z_BLOCK, or Z_TREES. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate(); stop if and when it gets to the next deflate block boundary. When decoding; the zlib or gzip format, this will cause inflate() to return immediately; after the header and before the first block. When doing a raw inflate,; inflate() will go ahead and process the first block, and will return when it; gets to the end of that block, or when it runs out of data. The Z_BLO",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:664,Deployability,update,update,664,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing will; resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there is; no more input data or no more space in the output buffer (see below about; the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating the next_* and avail_* values accordingly. The; application can consume the uncompressed output when it wants, for example; when the output buffer is full (avail_out == 0), or after each call of; inflate(). If inflate returns Z_OK and with zero avail_out, it must be; called again after making room in the output buffer because there might be; more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FINISH,; Z_BLOCK, or Z_TREES. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate(); stop if and when it gets to the next deflate block boundary. When decoding; the zlib or gzip format, this will cause inflate() to return immediately; after the header and before the first block. When doing a raw inflate,; inflate() will go ahead and process the first block, and will return when it; gets to the end of that block, or when it runs out of data. The Z_BLO",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4130,Energy Efficiency,reduce,reduces,4130,"lows the caller to determine the length of the; deflate block header for later use in random access within a deflate block.; 256 is added to the value of strm->data_type when inflate() returns; immediately after reaching the end of the deflate block header. inflate() should normally be called until it returns Z_STREAM_END or an; error. However if all decompression is to be performed in a single step (a; single call of inflate), the parameter flush should be set to Z_FINISH. In; this case all pending input is processed and all pending output is flushed;; avail_out must be large enough to hold all of the uncompressed data for the; operation to complete. (The size of the uncompressed data may have been; saved by the compressor for this purpose.) The use of Z_FINISH is not; required to perform an inflation in one step. However it may be used to; inform inflate that a faster approach can be used for the single inflate(); call. Z_FINISH also informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory footprint. If the stream; does not complete, either because not all of the stream is provided or not; enough output space is provided, then a sliding window will be allocated and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4320,Energy Efficiency,allocate,allocated,4320,"mmediately after reaching the end of the deflate block header. inflate() should normally be called until it returns Z_STREAM_END or an; error. However if all decompression is to be performed in a single step (a; single call of inflate), the parameter flush should be set to Z_FINISH. In; this case all pending input is processed and all pending output is flushed;; avail_out must be large enough to hold all of the uncompressed data for the; operation to complete. (The size of the uncompressed data may have been; saved by the compressor for this purpose.) The use of Z_FINISH is not; required to perform an inflation in one step. However it may be used to; inform inflate that a faster approach can be used for the single inflate(); call. Z_FINISH also informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory footprint. If the stream; does not complete, either because not all of the stream is provided or not; enough output space is provided, then a sliding window will be allocated and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its com",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5465,Integrability,wrap,wrapped,5465,"ways flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsisten",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5481,Integrability,wrap,wrapped,5481,"ways flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsisten",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5870,Integrability,wrap,wrapped,5870,"see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; next_in or next_out was Z_NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. Note that Z_BUF_ERROR is not fatal, and; inflate() can be called again with more input and more output space to; continue decompressing. If Z_DATA_ERROR is returned, the application may; then call inflateSync() to look for a good com",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:163,Performance,latency,latency,163,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing will; resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there is; no more input data or no more space in the output buffer (see below about; the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating the next_* and avail_* values accordingly. The; application can consume the uncompressed output when it wants, for example; when the output buffer is full (avail_out == 0), or after each call of; inflate(). If inflate returns Z_OK and with zero avail_out, it must be; called again after making room in the output buffer because there might be; more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FINISH,; Z_BLOCK, or Z_TREES. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate(); stop if and when it gets to the next deflate block boundary. When decoding; the zlib or gzip format, this will cause inflate() to return immediately; after the header and before the first block. When doing a raw inflate,; inflate() will go ahead and process the first block, and will return when it; gets to the end of that block, or when it runs out of data. The Z_BLO",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:293,Performance,perform,performs,293,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing will; resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there is; no more input data or no more space in the output buffer (see below about; the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating the next_* and avail_* values accordingly. The; application can consume the uncompressed output when it wants, for example; when the output buffer is full (avail_out == 0), or after each call of; inflate(). If inflate returns Z_OK and with zero avail_out, it must be; called again after making room in the output buffer because there might be; more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FINISH,; Z_BLOCK, or Z_TREES. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate(); stop if and when it gets to the next deflate block boundary. When decoding; the zlib or gzip format, this will cause inflate() to return immediately; after the header and before the first block. When doing a raw inflate,; inflate() will go ahead and process the first block, and will return when it; gets to the end of that block, or when it runs out of data. The Z_BLO",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3475,Performance,perform,performed,3475,"ll of the uncompressed; data from that block has been written to strm->next_out. The number of; unused bits may in general be greater than seven, except when bit 7 of; data_type is set, in which case the number of unused bits will be less than; eight. data_type is set as noted here every time inflate() returns for all; flush options, and so can be used to determine the amount of currently; consumed input in bits. The Z_TREES option behaves as Z_BLOCK does, but it also returns when the; end of each deflate block header is reached, before any actual data in that; block is decoded. This allows the caller to determine the length of the; deflate block header for later use in random access within a deflate block.; 256 is added to the value of strm->data_type when inflate() returns; immediately after reaching the end of the deflate block header. inflate() should normally be called until it returns Z_STREAM_END or an; error. However if all decompression is to be performed in a single step (a; single call of inflate), the parameter flush should be set to Z_FINISH. In; this case all pending input is processed and all pending output is flushed;; avail_out must be large enough to hold all of the uncompressed data for the; operation to complete. (The size of the uncompressed data may have been; saved by the compressor for this purpose.) The use of Z_FINISH is not; required to perform an inflation in one step. However it may be used to; inform inflate that a faster approach can be used for the single inflate(); call. Z_FINISH also informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory footprint. If the stream; does not complete, either because not all of the stream is provided or not; enough output space is provided, then a sliding window will be allocated and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3892,Performance,perform,perform,3892," currently; consumed input in bits. The Z_TREES option behaves as Z_BLOCK does, but it also returns when the; end of each deflate block header is reached, before any actual data in that; block is decoded. This allows the caller to determine the length of the; deflate block header for later use in random access within a deflate block.; 256 is added to the value of strm->data_type when inflate() returns; immediately after reaching the end of the deflate block header. inflate() should normally be called until it returns Z_STREAM_END or an; error. However if all decompression is to be performed in a single step (a; single call of inflate), the parameter flush should be set to Z_FINISH. In; this case all pending input is processed and all pending output is flushed;; avail_out must be large enough to hold all of the uncompressed data for the; operation to complete. (The size of the uncompressed data may have been; saved by the compressor for this purpose.) The use of Z_FINISH is not; required to perform an inflation in one step. However it may be used to; inform inflate that a faster approach can be used for the single inflate(); call. Z_FINISH also informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory footprint. If the stream; does not complete, either because not all of the stream is provided or not; enough output space is provided, then a sliding window will be allocated and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed af",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5787,Performance,perform,perform,5787," when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; next_in or next_out was Z_NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. Note that Z_BUF_ERROR is not fatal, and; inflate() ca",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4776,Safety,avoid,avoids,4776,"ressed data for the; operation to complete. (The size of the uncompressed data may have been; saved by the compressor for this purpose.) The use of Z_FINISH is not; required to perform an inflation in one step. However it may be used to; inform inflate that a faster approach can be used for the single inflate(); call. Z_FINISH also informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory footprint. If the stream; does not complete, either because not all of the stream is provided or not; enough output space is provided, then a sliding window will be allocated and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; i",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5523,Safety,detect,detected,5523,"pproach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; next_in or next_out was Z_NULL), Z_MEM_ERROR if there was not enough memory",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:6932,Safety,recover,recovery,6932," Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; next_in or next_out was Z_NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. Note that Z_BUF_ERROR is not fatal, and; inflate() can be called again with more input and more output space to; continue decompressing. If Z_DATA_ERROR is returned, the application may; then call inflateSync() to look for a good compression block if a partial; recovery of the data is desired.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3192,Security,access,access,3192,"sed bits in the last byte taken from strm->next_in, plus 64 if; inflate() is currently decoding the last block in the deflate stream, plus; 128 if inflate() returned immediately after decoding an end-of-block code or; decoding the complete header up to just before the first byte of the deflate; stream. The end-of-block will not be indicated until all of the uncompressed; data from that block has been written to strm->next_out. The number of; unused bits may in general be greater than seven, except when bit 7 of; data_type is set, in which case the number of unused bits will be less than; eight. data_type is set as noted here every time inflate() returns for all; flush options, and so can be used to determine the amount of currently; consumed input in bits. The Z_TREES option behaves as Z_BLOCK does, but it also returns when the; end of each deflate block header is reached, before any actual data in that; block is decoded. This allows the caller to determine the length of the; deflate block header for later use in random access within a deflate block.; 256 is added to the value of strm->data_type when inflate() returns; immediately after reaching the end of the deflate block header. inflate() should normally be called until it returns Z_STREAM_END or an; error. However if all decompression is to be performed in a single step (a; single call of inflate), the parameter flush should be set to Z_FINISH. In; this case all pending input is processed and all pending output is flushed;; avail_out must be large enough to hold all of the uncompressed data for the; operation to complete. (The size of the uncompressed data may have been; saved by the compressor for this purpose.) The use of Z_FINISH is not; required to perform an inflation in one step. However it may be used to; inform inflate that a faster approach can be used for the single inflate(); call. Z_FINISH also informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory fo",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4978,Security,checksum,checksum,4978,"lso informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory footprint. If the stream; does not complete, either because not all of the stream is provided or not; enough output space is provided, then a sliding window will be allocated and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progre",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5103,Security,checksum,checksum,5103,"lso informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory footprint. If the stream; does not complete, either because not all of the stream is provided or not; enough output space is provided, then a sliding window will be allocated and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progre",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5309,Security,checksum,checksum,5309,"ed and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupte",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5397,Security,checksum,checksum,5397,"ed and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupte",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:564,Usability,resume,resume,564,"/*; inflate decompresses as much data as possible, and stops when the input; buffer becomes empty or the output buffer becomes full. It may introduce; some output latency (reading input without producing any output) except when; forced to flush. The detailed semantics are as follows. inflate performs one or both of the; following actions:. - Decompress more input starting at next_in and update next_in and avail_in; accordingly. If not all input can be processed (because there is not; enough room in the output buffer), next_in is updated and processing will; resume at this point for the next call of inflate(). - Provide more output starting at next_out and update next_out and avail_out; accordingly. inflate() provides as much output as possible, until there is; no more input data or no more space in the output buffer (see below about; the flush parameter). Before the call of inflate(), the application should ensure that at least; one of the actions is possible, by providing more input and/or consuming more; output, and updating the next_* and avail_* values accordingly. The; application can consume the uncompressed output when it wants, for example; when the output buffer is full (avail_out == 0), or after each call of; inflate(). If inflate returns Z_OK and with zero avail_out, it must be; called again after making room in the output buffer because there might be; more output pending. The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FINISH,; Z_BLOCK, or Z_TREES. Z_SYNC_FLUSH requests that inflate() flush as much; output as possible to the output buffer. Z_BLOCK requests that inflate(); stop if and when it gets to the next deflate block boundary. When decoding; the zlib or gzip format, this will cause inflate() to return immediately; after the header and before the first block. When doing a raw inflate,; inflate() will go ahead and process the first block, and will return when it; gets to the end of that block, or when it runs out of data. The Z_BLO",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:256,Availability,error,error,256,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. inflateEnd returns Z_OK if success, Z_STREAM_ERROR if the stream state; was inconsistent. In the error case, msg may be set but then points to a; static string (which must not be deallocated).; */; /* Advanced functions */; /*; The following functions are needed only in some special applications.; */; /*; ZEXTERN int ZEXPORT deflateInit2 OF((z_streamp strm,; int level,; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by the; caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3495,Availability,error,error,3495,"e gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as; fast as Z_HUFFMAN_ONLY, but give better compression for PNG image data. The; strategy parameter only affects the compression ratio but not the; correctness of the compressed output even if it is not set appropriately.; Z_FIXED prevents the use of dynamic Huffman codes, allowing for a simpler; decoder for special applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if any parameter is invalid (such as an invalid; method), or Z_VERSION_ERROR if the zlib library version (zlib_version) is; incompatible with the version assumed by the caller (ZLIB_VERSION). msg is; set to null if there is no error message. deflateInit2 does not perform any; compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:20,Energy Efficiency,allocate,allocated,20,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. inflateEnd returns Z_OK if success, Z_STREAM_ERROR if the stream state; was inconsistent. In the error case, msg may be set but then points to a; static string (which must not be deallocated).; */; /* Advanced functions */; /*; The following functions are needed only in some special applications.; */; /*; ZEXTERN int ZEXPORT deflateInit2 OF((z_streamp strm,; int level,; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by the; caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1907,Energy Efficiency,allocate,allocated,1907,"arithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as; fast as Z_HUFFMAN_ONLY, but give better compression for PN",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:2002,Energy Efficiency,reduce,reduces,2002,"e library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as; fast as Z_HUFFMAN_ONLY, but give better compression for PNG image data. The; strategy parameter only affects the compression ratio but not the; correctness of the compressed ",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1582,Integrability,wrap,wrapper,1582,"; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by the; caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small valu",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3501,Integrability,message,message,3501,"e gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as; fast as Z_HUFFMAN_ONLY, but give better compression for PNG image data. The; strategy parameter only affects the compression ratio but not the; correctness of the compressed output even if it is not set appropriately.; Z_FIXED prevents the use of dynamic Huffman codes, allowing for a simpler; decoder for special applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if any parameter is invalid (such as an invalid; method), or Z_VERSION_ERROR if the zlib library version (zlib_version) is; incompatible with the version assumed by the caller (ZLIB_VERSION). msg is; set to null if there is no error message. deflateInit2 does not perform any; compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:2216,Performance,tune,tune,2216,"aw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as; fast as Z_HUFFMAN_ONLY, but give better compression for PNG image data. The; strategy parameter only affects the compression ratio but not the; correctness of the compressed output even if it is not set appropriately.; Z_FIXED prevents the use of dynamic Huffman codes, allowing for a simpler; decoder for special applications. deflateInit2 returns Z_OK if success, Z_MEM_",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:2615,Performance,tune,tuned,2615,"e gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as; fast as Z_HUFFMAN_ONLY, but give better compression for PNG image data. The; strategy parameter only affects the compression ratio but not the; correctness of the compressed output even if it is not set appropriately.; Z_FIXED prevents the use of dynamic Huffman codes, allowing for a simpler; decoder for special applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if any parameter is invalid (such as an invalid; method), or Z_VERSION_ERROR if the zlib library version (zlib_version) is; incompatible with the version assumed by the caller (ZLIB_VERSION). msg is; set to null if there is no error message. deflateInit2 does not perform any; compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3532,Performance,perform,perform,3532,"e gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as; fast as Z_HUFFMAN_ONLY, but give better compression for PNG image data. The; strategy parameter only affects the compression ratio but not the; correctness of the compressed output even if it is not set appropriately.; Z_FIXED prevents the use of dynamic Huffman codes, allowing for a simpler; decoder for special applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if any parameter is invalid (such as an invalid; method), or Z_VERSION_ERROR if the zlib library version (zlib_version) is; incompatible with the version assumed by the caller (ZLIB_VERSION). msg is; set to null if there is no error message. deflateInit2 does not perform any; compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:2345,Safety,predict,predictor,2345,"l not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as; fast as Z_HUFFMAN_ONLY, but give better compression for PNG image data. The; strategy parameter only affects the compression ratio but not the; correctness of the compressed output even if it is not set appropriately.; Z_FIXED prevents the use of dynamic Huffman codes, allowing for a simpler; decoder for special applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if any parameter is invalid (such as an invalid; method), or Z_VERSION_ERROR if the zlib library ve",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:897,Testability,log,logarithm,897,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. inflateEnd returns Z_OK if success, Z_STREAM_ERROR if the stream state; was inconsistent. In the error case, msg may be set but then points to a; static string (which must not be deallocated).; */; /* Advanced functions */; /*; The following functions are needed only in some special applications.; */; /*; ZEXTERN int ZEXPORT deflateInit2 OF((z_streamp strm,; int level,; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by the; caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1505,Usability,simpl,simple,1505,"; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by the; caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small valu",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3127,Usability,simpl,simpler,3127,"e gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as; fast as Z_HUFFMAN_ONLY, but give better compression for PNG image data. The; strategy parameter only affects the compression ratio but not the; correctness of the compressed output even if it is not set appropriately.; Z_FIXED prevents the use of dynamic Huffman codes, allowing for a simpler; decoder for special applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if any parameter is invalid (such as an invalid; method), or Z_VERSION_ERROR if the zlib library version (zlib_version) is; incompatible with the version assumed by the caller (ZLIB_VERSION). msg is; set to null if there is no error message. deflateInit2 does not perform any; compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1092,Integrability,Depend,Depending,1092," deflateReset, and before any call of deflate. When doing raw deflate, this; function must be called either before any call of deflate, or immediately; after the completion of a deflate block, i.e. after all input has been; consumed and all output has been delivered when using any of the flush; options Z_BLOCK, Z_PARTIAL_FLUSH, Z_SYNC_FLUSH, or Z_FULL_FLUSH. The; compressor and decompressor must use exactly the same dictionary (see; inflateSetDictionary). The dictionary should consist of strings (byte sequences) that are likely; to be encountered later in the data to be compressed, with the most commonly; used strings preferably put towards the end of the dictionary. Using a; dictionary is most useful when the data to be compressed is short and can be; predicted with good accuracy; the data can then be compressed better than; with the default empty dictionary. Depending on the size of the compression data structures selected by; deflateInit or deflateInit2, a part of the dictionary may in effect be; discarded, for example if the dictionary is larger than the window size; provided in deflateInit or deflateInit2. Thus the strings most likely to be; useful should be put at the end of the dictionary, not at the front. In; addition, the current implementation of deflate will use at most the window; size minus 262 bytes of the provided dictionary. Upon return of this function, strm->adler is set to the adler32 value; of the dictionary; the decompressor may later use this value to determine; which dictionary has been used by the compressor. (The adler32 value; applies to the whole dictionary even if only a subset of the dictionary is; actually used by the compressor.) If a raw deflate was requested, then the; adler32 value is not computed and strm->adler is not set. deflateSetDictionary returns Z_OK if success, or Z_STREAM_ERROR if a; parameter is invalid (e.g. dictionary being Z_NULL) or the stream state is; inconsistent (for example if deflate has already been called for",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:2312,Performance,perform,perform,2312,"fter the completion of a deflate block, i.e. after all input has been; consumed and all output has been delivered when using any of the flush; options Z_BLOCK, Z_PARTIAL_FLUSH, Z_SYNC_FLUSH, or Z_FULL_FLUSH. The; compressor and decompressor must use exactly the same dictionary (see; inflateSetDictionary). The dictionary should consist of strings (byte sequences) that are likely; to be encountered later in the data to be compressed, with the most commonly; used strings preferably put towards the end of the dictionary. Using a; dictionary is most useful when the data to be compressed is short and can be; predicted with good accuracy; the data can then be compressed better than; with the default empty dictionary. Depending on the size of the compression data structures selected by; deflateInit or deflateInit2, a part of the dictionary may in effect be; discarded, for example if the dictionary is larger than the window size; provided in deflateInit or deflateInit2. Thus the strings most likely to be; useful should be put at the end of the dictionary, not at the front. In; addition, the current implementation of deflate will use at most the window; size minus 262 bytes of the provided dictionary. Upon return of this function, strm->adler is set to the adler32 value; of the dictionary; the decompressor may later use this value to determine; which dictionary has been used by the compressor. (The adler32 value; applies to the whole dictionary even if only a subset of the dictionary is; actually used by the compressor.) If a raw deflate was requested, then the; adler32 value is not computed and strm->adler is not set. deflateSetDictionary returns Z_OK if success, or Z_STREAM_ERROR if a; parameter is invalid (e.g. dictionary being Z_NULL) or the stream state is; inconsistent (for example if deflate has already been called for this stream; or if not at a block boundary for raw deflate). deflateSetDictionary does; not perform any compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:982,Safety,predict,predicted,982,"/*; Initializes the compression dictionary from the given byte sequence; without producing any compressed output. When using the zlib format, this; function must be called immediately after deflateInit, deflateInit2 or; deflateReset, and before any call of deflate. When doing raw deflate, this; function must be called either before any call of deflate, or immediately; after the completion of a deflate block, i.e. after all input has been; consumed and all output has been delivered when using any of the flush; options Z_BLOCK, Z_PARTIAL_FLUSH, Z_SYNC_FLUSH, or Z_FULL_FLUSH. The; compressor and decompressor must use exactly the same dictionary (see; inflateSetDictionary). The dictionary should consist of strings (byte sequences) that are likely; to be encountered later in the data to be compressed, with the most commonly; used strings preferably put towards the end of the dictionary. Using a; dictionary is most useful when the data to be compressed is short and can be; predicted with good accuracy; the data can then be compressed better than; with the default empty dictionary. Depending on the size of the compression data structures selected by; deflateInit or deflateInit2, a part of the dictionary may in effect be; discarded, for example if the dictionary is larger than the window size; provided in deflateInit or deflateInit2. Thus the strings most likely to be; useful should be put at the end of the dictionary, not at the front. In; addition, the current implementation of deflate will use at most the window; size minus 262 bytes of the provided dictionary. Upon return of this function, strm->adler is set to the adler32 value; of the dictionary; the decompressor may later use this value to determine; which dictionary has been used by the compressor. (The adler32 value; applies to the whole dictionary even if only a subset of the dictionary is; actually used by the compressor.) If a raw deflate was requested, then the; adler32 value is not computed and strm->adler is n",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:349,Availability,avail,available,349,"/*; Dynamically update the compression level and compression strategy. The; interpretation of level and strategy is as in deflateInit2. This can be; used to switch between compression and straight copy of the input data, or; to switch to a different kind of input data requiring a different strategy.; If the compression level is changed, the input available so far is; compressed with the old level (and may be flushed); the new level will take; effect only at the next call of deflate(). Before the call of deflateParams, the stream state must be set as for; a call of deflate(), since the currently available input may have to be; compressed and flushed. In particular, strm->avail_out must be non-zero. deflateParams returns Z_OK if success, Z_STREAM_ERROR if the source; stream state was inconsistent or if a parameter was invalid, Z_BUF_ERROR if; strm->avail_out was zero.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:602,Availability,avail,available,602,"/*; Dynamically update the compression level and compression strategy. The; interpretation of level and strategy is as in deflateInit2. This can be; used to switch between compression and straight copy of the input data, or; to switch to a different kind of input data requiring a different strategy.; If the compression level is changed, the input available so far is; compressed with the old level (and may be flushed); the new level will take; effect only at the next call of deflate(). Before the call of deflateParams, the stream state must be set as for; a call of deflate(), since the currently available input may have to be; compressed and flushed. In particular, strm->avail_out must be non-zero. deflateParams returns Z_OK if success, Z_STREAM_ERROR if the source; stream state was inconsistent or if a parameter was invalid, Z_BUF_ERROR if; strm->avail_out was zero.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:16,Deployability,update,update,16,"/*; Dynamically update the compression level and compression strategy. The; interpretation of level and strategy is as in deflateInit2. This can be; used to switch between compression and straight copy of the input data, or; to switch to a different kind of input data requiring a different strategy.; If the compression level is changed, the input available so far is; compressed with the old level (and may be flushed); the new level will take; effect only at the next call of deflate(). Before the call of deflateParams, the stream state must be set as for; a call of deflate(), since the currently available input may have to be; compressed and flushed. In particular, strm->avail_out must be non-zero. deflateParams returns Z_OK if success, Z_STREAM_ERROR if the source; stream state was inconsistent or if a parameter was invalid, Z_BUF_ERROR if; strm->avail_out was zero.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:9,Performance,tune,tune,9,"/*; Fine tune deflate's internal compression parameters. This should only be; used by someone who understands the algorithm used by zlib's deflate for; searching for the best matching string, and even then only by the most; fanatic optimizer trying to squeeze out the last compressed bit for their; specific input data. Read the deflate.c source code for the meaning of the; max_lazy, good_length, nice_length, and max_chain parameters. deflateTune() can be called after deflateInit() or deflateInit2(), and; returns Z_OK on success, or Z_STREAM_ERROR for an invalid deflate stream.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:232,Performance,optimiz,optimizer,232,"/*; Fine tune deflate's internal compression parameters. This should only be; used by someone who understands the algorithm used by zlib's deflate for; searching for the best matching string, and even then only by the most; fanatic optimizer trying to squeeze out the last compressed bit for their; specific input data. Read the deflate.c source code for the meaning of the; max_lazy, good_length, nice_length, and max_chain parameters. deflateTune() can be called after deflateInit() or deflateInit2(), and; returns Z_OK on success, or Z_STREAM_ERROR for an invalid deflate stream.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:222,Energy Efficiency,allocate,allocate,222,"/*; deflateBound() returns an upper bound on the compressed size after; deflation of sourceLen bytes. It must be called after deflateInit() or; deflateInit2(), and after deflateSetHeader(), if used. This would be used; to allocate an output buffer for deflation in a single pass, and so would be; called before deflate(). If that first deflate() call is provided the; sourceLen input bytes, an output buffer allocated to the size returned by; deflateBound(), and the flush value Z_FINISH, then deflate() is guaranteed; to return Z_STREAM_END. Note that it is possible for the compressed size to; be larger than the value returned by deflateBound() if flush options other; than Z_FINISH or Z_NO_FLUSH are used.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:408,Energy Efficiency,allocate,allocated,408,"/*; deflateBound() returns an upper bound on the compressed size after; deflation of sourceLen bytes. It must be called after deflateInit() or; deflateInit2(), and after deflateSetHeader(), if used. This would be used; to allocate an output buffer for deflation in a single pass, and so would be; called before deflate(). If that first deflate() call is provided the; sourceLen input bytes, an output buffer allocated to the size returned by; deflateBound(), and the flush value Z_FINISH, then deflate() is guaranteed; to return Z_STREAM_END. Note that it is possible for the compressed size to; be larger than the value returned by deflateBound() if flush options other; than Z_FINISH or Z_NO_FLUSH are used.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:123,Availability,avail,available,123,"/*; deflatePending() returns the number of bytes and bits of output that have; been generated, but not yet provided in the available output. The bytes not; provided would be due to the available output space having being consumed.; The number of bits of output not provided are between 0 and 7, where they; await more bits to join them in order to fill out a full byte. If pending; or bits are Z_NULL, then those values are not set. deflatePending returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:185,Availability,avail,available,185,"/*; deflatePending() returns the number of bytes and bits of output that have; been generated, but not yet provided in the available output. The bytes not; provided would be due to the available output space having being consumed.; The number of bits of output not provided are between 0 and 7, where they; await more bits to join them in order to fill out a full byte. If pending; or bits are Z_NULL, then those values are not set. deflatePending returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:595,Availability,avail,available,595,"/*; deflateSetHeader() provides gzip header information for when a gzip; stream is requested by deflateInit2(). deflateSetHeader() may be called; after deflateInit2() or deflateReset() and before the first call of; deflate(). The text, time, os, extra field, name, and comment information; in the provided gz_header structure are written to the gzip header (xflag is; ignored -- the extra flags are set according to the compression level). The; caller must assure that, if not Z_NULL, name and comment are terminated with; a zero byte, and that if extra is not Z_NULL, that extra_len bytes are; available there. If hcrc is true, a gzip header crc is included. Note that; the current versions of the command-line version of gzip (up through version; 1.3.x) do not support header crc's, and will report that it is a ""multi-part; gzip file"" and give up. If deflateSetHeader is not used, the default gzip header has text false,; the time set to zero, and os set to 255, with no extra, name, or comment; fields. The gzip header is returned to the default state by deflateReset(). deflateSetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateInit2 OF((z_streamp strm,; int windowBits));. This is another version of inflateInit with an extra parameter. The; fields next_in, avail_in, zalloc, zfree and opaque must be initialized; before by the caller. The windowBits parameter is the base two logarithm of the maximum window; size (the size of the history buffer). It should be in the range 8..15 for; this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger wind",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1933,Availability,error,error,1933,"alse,; the time set to zero, and os set to 255, with no extra, name, or comment; fields. The gzip header is returned to the default state by deflateReset(). deflateSetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateInit2 OF((z_streamp strm,; int windowBits));. This is another version of inflateInit with an extra parameter. The; fields next_in, avail_in, zalloc, zfree and opaque must be initialized; before by the caller. The windowBits parameter is the base two logarithm of the maximum window; size (the size of the history buffer). It should be in the range 8..15 for; this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger window. windowBits can also be zero to request that inflate use the window size in; the zlib header of the compressed stream. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() appli",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3589,Availability,error,error,3589,"rger window. windowBits can also be zero to request that inflate use the window size in; the zlib header of the compressed stream. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windowBits to enable zlib and gzip decoding with automatic header; detection, or add 16 to decode only the gzip format (the zlib format will; return a Z_DATA_ERROR). If a gzip stream is being decoded, strm->adler is a; crc32 instead of an adler32. inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit2 does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit2() does not process any header information -- that is; deferred until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1979,Energy Efficiency,allocate,allocate,1979,"alse,; the time set to zero, and os set to 255, with no extra, name, or comment; fields. The gzip header is returned to the default state by deflateReset(). deflateSetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateInit2 OF((z_streamp strm,; int windowBits));. This is another version of inflateInit with an extra parameter. The; fields next_in, avail_in, zalloc, zfree and opaque must be initialized; before by the caller. The windowBits parameter is the base two logarithm of the maximum window; size (the size of the history buffer). It should be in the range 8..15 for; this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger window. windowBits can also be zero to request that inflate use the window size in; the zlib header of the compressed stream. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() appli",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3595,Integrability,message,message,3595,"rger window. windowBits can also be zero to request that inflate use the window size in; the zlib header of the compressed stream. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windowBits to enable zlib and gzip decoding with automatic header; detection, or add 16 to decode only the gzip format (the zlib format will; return a Z_DATA_ERROR). If a gzip stream is being decoded, strm->adler is a; crc32 instead of an adler32. inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit2 does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit2() does not process any header information -- that is; deferred until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3626,Performance,perform,perform,3626,"rger window. windowBits can also be zero to request that inflate use the window size in; the zlib header of the compressed stream. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windowBits to enable zlib and gzip decoding with automatic header; detection, or add 16 to decode only the gzip format (the zlib format will; return a Z_DATA_ERROR). If a gzip stream is being decoded, strm->adler is a; crc32 instead of an adler32. inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit2 does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit2() does not process any header information -- that is; deferred until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3098,Safety,detect,detection,3098,"rger window. windowBits can also be zero to request that inflate use the window size in; the zlib header of the compressed stream. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windowBits to enable zlib and gzip decoding with automatic header; detection, or add 16 to decode only the gzip format (the zlib format will; return a Z_DATA_ERROR). If a gzip stream is being decoded, strm->adler is a; crc32 instead of an adler32. inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit2 does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit2() does not process any header information -- that is; deferred until inflate() is called.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1467,Testability,log,logarithm,1467,"LL, name and comment are terminated with; a zero byte, and that if extra is not Z_NULL, that extra_len bytes are; available there. If hcrc is true, a gzip header crc is included. Note that; the current versions of the command-line version of gzip (up through version; 1.3.x) do not support header crc's, and will report that it is a ""multi-part; gzip file"" and give up. If deflateSetHeader is not used, the default gzip header has text false,; the time set to zero, and os set to 255, with no extra, name, or comment; fields. The gzip header is returned to the default state by deflateReset(). deflateSetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateInit2 OF((z_streamp strm,; int windowBits));. This is another version of inflateInit with an extra parameter. The; fields next_in, avail_in, zalloc, zfree and opaque must be initialized; before by the caller. The windowBits parameter is the base two logarithm of the maximum window; size (the size of the history buffer). It should be in the range 8..15 for; this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger window. windowBits can also be zero to request that inflate use the window size in; the zlib header of the compressed stream. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate comp",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1014,Performance,perform,perform,1014,"/*; Initializes the decompression dictionary from the given uncompressed byte; sequence. This function must be called immediately after a call of inflate,; if that call returned Z_NEED_DICT. The dictionary chosen by the compressor; can be determined from the adler32 value returned by that call of inflate.; The compressor and decompressor must use exactly the same dictionary (see; deflateSetDictionary). For raw inflate, this function can be called at any; time to set the dictionary. If the provided dictionary is smaller than the; window and there is already data in the window, then the provided dictionary; will amend what's there. The application must insure that the dictionary; that was used for compression is provided. inflateSetDictionary returns Z_OK if success, Z_STREAM_ERROR if a; parameter is invalid (e.g. dictionary being Z_NULL) or the stream state is; inconsistent, Z_DATA_ERROR if the given dictionary doesn't match the; expected one (incorrect adler32 value). inflateSetDictionary does not; perform any decompression: this will be done by subsequent calls of; inflate().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:158,Availability,avail,available,158,"/*; Skips invalid compressed data until a possible full flush point (see above; for the description of deflate with Z_FULL_FLUSH) can be found, or until all; available input is skipped. No output is provided. inflateSync searches for a 00 00 FF FF pattern in the compressed data.; All full flush points have this pattern, but not all occurrences of this; pattern are full flush points. inflateSync returns Z_OK if a possible full flush point has been found,; Z_BUF_ERROR if no more input was provided, Z_DATA_ERROR if no flush point; has been found, or Z_STREAM_ERROR if the stream structure was inconsistent.; In the success case, the application may save the current current value of; total_in which indicates where valid compressed data was found. In the; error case, the application may repeatedly call inflateSync, providing more; input each time, until success or end of the input data.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:759,Availability,error,error,759,"/*; Skips invalid compressed data until a possible full flush point (see above; for the description of deflate with Z_FULL_FLUSH) can be found, or until all; available input is skipped. No output is provided. inflateSync searches for a 00 00 FF FF pattern in the compressed data.; All full flush points have this pattern, but not all occurrences of this; pattern are full flush points. inflateSync returns Z_OK if a possible full flush point has been found,; Z_BUF_ERROR if no more input was provided, Z_DATA_ERROR if no flush point; has been found, or Z_STREAM_ERROR if the stream structure was inconsistent.; In the success case, the application may save the current current value of; total_in which indicates where valid compressed data was found. In the; error case, the application may repeatedly call inflateSync, providing more; input each time, until success or end of the input data.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:115,Security,access,accessing,115,"/*; Sets the destination stream as a complete copy of the source stream. This function can be useful when randomly accessing a large stream. The; first pass through the stream can periodically record the inflate state,; allowing restarting inflate at those points when randomly accessing the; stream. inflateCopy returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_STREAM_ERROR if the source stream state was inconsistent; (such as zalloc being Z_NULL). msg is left unchanged in both source and; destination.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:278,Security,access,accessing,278,"/*; Sets the destination stream as a complete copy of the source stream. This function can be useful when randomly accessing a large stream. The; first pass through the stream can periodically record the inflate state,; allowing restarting inflate at those points when randomly accessing the; stream. inflateCopy returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_STREAM_ERROR if the source stream state was inconsistent; (such as zalloc being Z_NULL). msg is left unchanged in both source and; destination.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:81,Integrability,wrap,wrap,81,"/*; This function is the same as inflateReset, but it also permits changing; the wrap and window size requests. The windowBits parameter is interpreted; the same as it is for inflateInit2. inflateReset2 returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent (such as zalloc or state being Z_NULL), or if; the windowBits parameter is invalid.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:657,Usability,clear,clear,657,"/*; This function inserts bits in the inflate input stream. The intent is; that this function is used to start inflating at a bit position in the; middle of a byte. The provided bits will be used before any bytes are used; from next_in. This function should only be used with raw inflate, and; should be used before the first inflate() call after inflateInit2() or; inflateReset(). bits must be less than or equal to 16, and that many of the; least significant bits of value will be inserted in the input. If bits is negative, then the input stream bit buffer is emptied. Then; inflatePrime() can be called again to put bits in the buffer. This is used; to clear out bits leftover after feeding inflate a block description prior; to feeding inflate codes. inflatePrime returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:167,Availability,down,down,167,"/*; This function returns two values, one in the lower 16 bits of the return; value, and the other in the remaining upper bits, obtained by shifting the; return value down 16 bits. If the upper value is -1 and the lower value is; zero, then inflate() is currently decoding information outside of a block.; If the upper value is -1 and the lower value is non-zero, then inflate is in; the middle of a stored block, with the lower value equaling the number of; bytes from the input remaining to copy. If the upper value is not -1, then; it is the number of bits back from the current bit position in the input of; the code (literal or length/distance pair) currently being processed. In; that case the lower value is the number of bytes already emitted for that; code. A code is being processed if inflate is waiting for more input to complete; decoding of the code, or if it has completed decoding but is waiting for; more output space to write the literal or match data. inflateMark() is used to mark locations in the input data for random; access, which may be at bit positions, and to note those cases where the; output of a code may span boundaries of random access blocks. The current; location in the input stream can be determined from avail_in and data_type; as noted in the description for the Z_BLOCK flush parameter for inflate. inflateMark returns the value noted above or -1 << 16 if the provided; source stream state was inconsistent.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1041,Security,access,access,1041,"/*; This function returns two values, one in the lower 16 bits of the return; value, and the other in the remaining upper bits, obtained by shifting the; return value down 16 bits. If the upper value is -1 and the lower value is; zero, then inflate() is currently decoding information outside of a block.; If the upper value is -1 and the lower value is non-zero, then inflate is in; the middle of a stored block, with the lower value equaling the number of; bytes from the input remaining to copy. If the upper value is not -1, then; it is the number of bits back from the current bit position in the input of; the code (literal or length/distance pair) currently being processed. In; that case the lower value is the number of bytes already emitted for that; code. A code is being processed if inflate is waiting for more input to complete; decoding of the code, or if it has completed decoding but is waiting for; more output space to write the literal or match data. inflateMark() is used to mark locations in the input data for random; access, which may be at bit positions, and to note those cases where the; output of a code may span boundaries of random access blocks. The current; location in the input stream can be determined from avail_in and data_type; as noted in the description for the Z_BLOCK flush parameter for inflate. inflateMark returns the value noted above or -1 << 16 if the provided; source stream state was inconsistent.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1162,Security,access,access,1162,"/*; This function returns two values, one in the lower 16 bits of the return; value, and the other in the remaining upper bits, obtained by shifting the; return value down 16 bits. If the upper value is -1 and the lower value is; zero, then inflate() is currently decoding information outside of a block.; If the upper value is -1 and the lower value is non-zero, then inflate is in; the middle of a stored block, with the lower value equaling the number of; bytes from the input remaining to copy. If the upper value is not -1, then; it is the number of bits back from the current bit position in the input of; the code (literal or length/distance pair) currently being processed. In; that case the lower value is the number of bytes already emitted for that; code. A code is being processed if inflate is waiting for more input to complete; decoding of the code, or if it has completed decoding but is waiting for; more output space to write the literal or match data. inflateMark() is used to mark locations in the input data for random; access, which may be at bit positions, and to note those cases where the; output of a code may span boundaries of random access blocks. The current; location in the input stream can be determined from avail_in and data_type; as noted in the description for the Z_BLOCK flush parameter for inflate. inflateMark returns the value noted above or -1 << 16 if the provided; source stream state was inconsistent.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1685,Energy Efficiency,allocate,allocated,1685,"er; contents. hcrc is set to true if there is a header CRC. (The header CRC; was valid if done is set to one.) If extra is not Z_NULL, then extra_max; contains the maximum number of bytes to write to extra. Once done is true,; extra_len contains the actual extra field length, and extra contains the; extra field, or that field truncated if extra_max is less than extra_len.; If name is not Z_NULL, then up to name_max characters are written there,; terminated with a zero unless the length is greater than name_max. If; comment is not Z_NULL, then up to comm_max characters are written there,; terminated with a zero unless the length is greater than comm_max. When any; of extra, name, or comment are not Z_NULL and the respective field is not; present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window ",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3181,Energy Efficiency,allocate,allocated,3181,"aracters are written there,; terminated with a zero unless the length is greater than comm_max. When any; of extra, name, or comment are not Z_NULL and the respective field is not; present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used with small window sizes, windowBits must be 15; and a 32K byte window must be supplied to be able to decompress general; deflate streams. See inflateBack() for the usage of these routines. inflateBackInit will return Z_OK on success, Z_STREAM_ERROR if any of; the parameters are invalid, Z_MEM_ERROR if the internal state could not be; allocated, or Z_VERSION_ERROR if the version of the library does not match; the version of the header file.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:2623,Integrability,rout,routines,2623,"aracters are written there,; terminated with a zero unless the length is greater than comm_max. When any; of extra, name, or comment are not Z_NULL and the respective field is not; present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used with small window sizes, windowBits must be 15; and a 32K byte window must be supplied to be able to decompress general; deflate streams. See inflateBack() for the usage of these routines. inflateBackInit will return Z_OK on success, Z_STREAM_ERROR if any of; the parameters are invalid, Z_MEM_ERROR if the internal state could not be; allocated, or Z_VERSION_ERROR if the version of the library does not match; the version of the header file.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3024,Integrability,rout,routines,3024,"aracters are written there,; terminated with a zero unless the length is greater than comm_max. When any; of extra, name, or comment are not Z_NULL and the respective field is not; present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used with small window sizes, windowBits must be 15; and a 32K byte window must be supplied to be able to decompress general; deflate streams. See inflateBack() for the usage of these routines. inflateBackInit will return Z_OK on success, Z_STREAM_ERROR if any of; the parameters are invalid, Z_MEM_ERROR if the internal state could not be; allocated, or Z_VERSION_ERROR if the version of the library does not match; the version of the header file.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:2670,Testability,log,logarithm,2670,"aracters are written there,; terminated with a zero unless the length is greater than comm_max. When any; of extra, name, or comment are not Z_NULL and the respective field is not; present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used with small window sizes, windowBits must be 15; and a 32K byte window must be supplied to be able to decompress general; deflate streams. See inflateBack() for the usage of these routines. inflateBackInit will return Z_OK on success, Z_STREAM_ERROR if any of; the parameters are invalid, Z_MEM_ERROR if the internal state could not be; allocated, or Z_VERSION_ERROR if the version of the library does not match; the version of the header file.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1870,Usability,simpl,simply,1870,"is not Z_NULL, then extra_max; contains the maximum number of bytes to write to extra. Once done is true,; extra_len contains the actual extra field length, and extra contains the; extra field, or that field truncated if extra_max is less than extra_len.; If name is not Z_NULL, then up to name_max characters are written there,; terminated with a zero unless the length is greater than name_max. If; comment is not Z_NULL, then up to comm_max characters are written there,; terminated with a zero unless the length is greater than comm_max. When any; of extra, name, or comment are not Z_NULL and the respective field is not; present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used wi",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1559,Availability,error,error,1559,"t until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free the; allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provid",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1827,Availability,avail,available,1827,"p header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1930,Availability,error,error,1930,"p header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:2085,Availability,failure,failure,2085,"iler on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and o",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:2156,Availability,error,error,2156," stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be ",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3491,Availability,error,error,3491,"out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be optionally used to pass any information that the caller-; supplied in() and out() functions need to do their job. On return, inflateBack() will set strm->next_in and strm->avail_in to; pass back any unused input that was provided by the last in() call. The; return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR; if in() or out() returned an error, Z_DATA_ERROR if there was a format error; in the deflate stream (in which case strm->msg is set to indicate the nature; of the error), or Z_STREAM_ERROR if the stream was not properly initialized.; In the case of Z_BUF_ERROR, an input or output error can be distinguished; using strm->next_in which will be Z_NULL only if in() returned an error. If; strm->next_in is not Z_NULL, then the Z_BUF_ERROR was due to out() returning; non-zero. (in() will always be called before out(), so strm->next_in is; assured to be defined if out() returns non-zero.) Note that inflateBack(); cannot return Z_OK.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3533,Availability,error,error,3533,"out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be optionally used to pass any information that the caller-; supplied in() and out() functions need to do their job. On return, inflateBack() will set strm->next_in and strm->avail_in to; pass back any unused input that was provided by the last in() call. The; return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR; if in() or out() returned an error, Z_DATA_ERROR if there was a format error; in the deflate stream (in which case strm->msg is set to indicate the nature; of the error), or Z_STREAM_ERROR if the stream was not properly initialized.; In the case of Z_BUF_ERROR, an input or output error can be distinguished; using strm->next_in which will be Z_NULL only if in() returned an error. If; strm->next_in is not Z_NULL, then the Z_BUF_ERROR was due to out() returning; non-zero. (in() will always be called before out(), so strm->next_in is; assured to be defined if out() returns non-zero.) Note that inflateBack(); cannot return Z_OK.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3625,Availability,error,error,3625,"out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be optionally used to pass any information that the caller-; supplied in() and out() functions need to do their job. On return, inflateBack() will set strm->next_in and strm->avail_in to; pass back any unused input that was provided by the last in() call. The; return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR; if in() or out() returned an error, Z_DATA_ERROR if there was a format error; in the deflate stream (in which case strm->msg is set to indicate the nature; of the error), or Z_STREAM_ERROR if the stream was not properly initialized.; In the case of Z_BUF_ERROR, an input or output error can be distinguished; using strm->next_in which will be Z_NULL only if in() returned an error. If; strm->next_in is not Z_NULL, then the Z_BUF_ERROR was due to out() returning; non-zero. (in() will always be called before out(), so strm->next_in is; assured to be defined if out() returns non-zero.) Note that inflateBack(); cannot return Z_OK.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3743,Availability,error,error,3743,"out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be optionally used to pass any information that the caller-; supplied in() and out() functions need to do their job. On return, inflateBack() will set strm->next_in and strm->avail_in to; pass back any unused input that was provided by the last in() call. The; return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR; if in() or out() returned an error, Z_DATA_ERROR if there was a format error; in the deflate stream (in which case strm->msg is set to indicate the nature; of the error), or Z_STREAM_ERROR if the stream was not properly initialized.; In the case of Z_BUF_ERROR, an input or output error can be distinguished; using strm->next_in which will be Z_NULL only if in() returned an error. If; strm->next_in is not Z_NULL, then the Z_BUF_ERROR was due to out() returning; non-zero. (in() will always be called before out(), so strm->next_in is; assured to be defined if out() returns non-zero.) Note that inflateBack(); cannot return Z_OK.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3837,Availability,error,error,3837,"out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provided input on the first call by; setting strm->next_in and strm->avail_in. If that input is exhausted, then; in() will be called. Therefore strm->next_in must be initialized before; calling inflateBack(). If strm->next_in is Z_NULL, then in() will be called; immediately for input. If strm->next_in is not Z_NULL, then strm->avail_in; must also be initialized, and then if strm->avail_in is not zero, input will; initially be taken from strm->next_in[0 .. strm->avail_in - 1]. The in_desc and out_desc parameters of inflateBack() is passed as the; first parameter of in() and out() respectively when they are called. These; descriptors can be optionally used to pass any information that the caller-; supplied in() and out() functions need to do their job. On return, inflateBack() will set strm->next_in and strm->avail_in to; pass back any unused input that was provided by the last in() call. The; return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR; if in() or out() returned an error, Z_DATA_ERROR if there was a format error; in the deflate stream (in which case strm->msg is set to indicate the nature; of the error), or Z_STREAM_ERROR if the stream was not properly initialized.; In the case of Z_BUF_ERROR, an input or output error can be distinguished; using strm->next_in which will be Z_NULL only if in() returned an error. If; strm->next_in is not Z_NULL, then the Z_BUF_ERROR was due to out() returning; non-zero. (in() will always be called before out(), so strm->next_in is; assured to be defined if out() returns non-zero.) Note that inflateBack(); cannot return Z_OK.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:132,Energy Efficiency,efficient,efficient,132,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is potentially more efficient than; inflate() for file i/o applications, in that it avoids copying between the; output and the sliding window by simply making the window itself the output; buffer. inflate() can be faster on modern CPUs when used with large; buffers. inflateBack() trusts the application to not change the output; buffer passed by the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free the; allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the un",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:560,Energy Efficiency,allocate,allocate,560,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is potentially more efficient than; inflate() for file i/o applications, in that it avoids copying between the; output and the sliding window by simply making the window itself the output; buffer. inflate() can be faster on modern CPUs when used with large; buffers. inflateBack() trusts the application to not change the output; buffer passed by the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free the; allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the un",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:806,Energy Efficiency,allocate,allocated,806,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is potentially more efficient than; inflate() for file i/o applications, in that it avoids copying between the; output and the sliding window by simply making the window itself the output; buffer. inflate() can be faster on modern CPUs when used with large; buffers. inflateBack() trusts the application to not change the output; buffer passed by the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free the; allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the un",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:75,Integrability,interface,interface,75,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is potentially more efficient than; inflate() for file i/o applications, in that it avoids copying between the; output and the sliding window by simply making the window itself the output; buffer. inflate() can be faster on modern CPUs when used with large; buffers. inflateBack() trusts the application to not change the output; buffer passed by the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free the; allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the un",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:897,Integrability,rout,routine,897,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is potentially more efficient than; inflate() for file i/o applications, in that it avoids copying between the; output and the sliding window by simply making the window itself the output; buffer. inflate() can be faster on modern CPUs when used with large; buffers. inflateBack() trusts the application to not change the output; buffer passed by the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free the; allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the un",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1090,Integrability,rout,routine,1090,"terface for input and output. This is potentially more efficient than; inflate() for file i/o applications, in that it avoids copying between the; output and the sliding window by simply making the window itself the output; buffer. inflate() can be faster on modern CPUs when used with large; buffers. inflateBack() trusts the application to not change the output; buffer passed by the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free the; allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1437,Integrability,rout,routines,1437,"t until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free the; allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the uncompressed data buf[0..len-1]. out(); should return zero on success, or non-zero on failure. If out() returns; non-zero, inflateBack() will return with an error. Neither in() nor out(); are permitted to change the contents of the window provided to; inflateBackInit(), which is also the buffer that out() uses to write from.; The length written by out() will be at most the window size. Any non-zero; amount of input may be provided by in(). For convenience, inflateBack() can be provid",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:196,Safety,avoid,avoids,196,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is potentially more efficient than; inflate() for file i/o applications, in that it avoids copying between the; output and the sliding window by simply making the window itself the output; buffer. inflate() can be faster on modern CPUs when used with large; buffers. inflateBack() trusts the application to not change the output; buffer passed by the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free the; allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the un",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:257,Usability,simpl,simply,257,"/*; inflateBack() does a raw inflate with a single call using a call-back; interface for input and output. This is potentially more efficient than; inflate() for file i/o applications, in that it avoids copying between the; output and the sliding window by simply making the window itself the output; buffer. inflate() can be faster on modern CPUs when used with large; buffers. inflateBack() trusts the application to not change the output; buffer passed by the output function, at least until inflateBack() returns. inflateBackInit() must be called first to allocate the internal state; and to initialize the state with the user-provided window buffer.; inflateBack() may then be used multiple times to inflate a complete, raw; deflate stream with each call. inflateBackEnd() is then called to free the; allocated state. A raw deflate stream is one with no zlib or gzip header or trailer.; This routine would normally be used in a utility that reads zip or gzip; files and writes out uncompressed files. The utility would decode the; header and process the trailer on its own, hence this routine expects only; the raw deflate stream to decompress. This is different from the normal; behavior of inflate(), which expects either a zlib or gzip header and; trailer around the deflate stream. inflateBack() uses two subroutines supplied by the caller that are then; called by inflateBack() for input and output. inflateBack() calls those; routines until it reads a complete deflate stream and writes out all of the; uncompressed data, or until it encounters an error. The function's; parameters and return types are defined above in the in_func and out_func; typedefs. inflateBack() will call in(in_desc, &buf) which should return the; number of bytes of provided input, and a pointer to that input in buf. If; there is no input available, in() must return zero--buf is ignored in that; case--and inflateBack() will return a buffer error. inflateBack() will call; out(out_desc, buf, len) to write the un",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:15,Energy Efficiency,allocate,allocated,15,"/*; All memory allocated by inflateBackInit() is freed. inflateBackEnd() returns Z_OK on success, or Z_STREAM_ERROR if the stream; state was inconsistent.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:444,Safety,safe,safe,444,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:721,Safety,avoid,avoid,721,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:834,Safety,detect,detect,834,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:870,Safety,avoid,avoid,870,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1314,Security,secur,secure,1314,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:141,Integrability,interface,interface,141,"/* utility functions */; /*; The following utility functions are implemented on top of the basic; stream-oriented functions. To simplify the interface, some default options; are assumed (compression level and memory usage, standard memory allocation; functions). The source code of these utility functions can be modified if; you need special options.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:128,Usability,simpl,simplify,128,"/* utility functions */; /*; The following utility functions are implemented on top of the basic; stream-oriented functions. To simplify the interface, some default options; are assumed (compression level and memory usage, standard memory allocation; functions). The source code of these utility functions can be modified if; you need special options.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:180,Energy Efficiency,allocate,allocate,180,/*; compressBound() returns an upper bound on the compressed size after; compress() or compress2() on sourceLen bytes. It would be used before a; compress() or compress2() call to allocate the destination buffer.; */,MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:965,Integrability,interface,interface,965,"/*; Decompresses the source buffer into the destination buffer. sourceLen is; the byte length of the source buffer. Upon entry, destLen is the total size; of the destination buffer, which must be large enough to hold the entire; uncompressed data. (The size of the uncompressed data must have been saved; previously by the compressor and transmitted to the decompressor by some; mechanism outside the scope of this compression library.) Upon exit, destLen; is the actual size of the uncompressed buffer. uncompress returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_BUF_ERROR if there was not enough room in the output; buffer, or Z_DATA_ERROR if the input data was corrupted or incomplete. In; the case where there is not enough room, uncompress() will fill the output; buffer with the uncompressed data up to that point.; */; /* gzip file access functions */; /*; This library supports reading and writing files in gzip (.gz) format with; an interface similar to that of stdio, using the functions that start with; ""gz"". The gzip format is different from the zlib format. gzip is a gzip; wrapper, documented in RFC 1952, wrapped around a deflate stream.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1111,Integrability,wrap,wrapper,1111,"/*; Decompresses the source buffer into the destination buffer. sourceLen is; the byte length of the source buffer. Upon entry, destLen is the total size; of the destination buffer, which must be large enough to hold the entire; uncompressed data. (The size of the uncompressed data must have been saved; previously by the compressor and transmitted to the decompressor by some; mechanism outside the scope of this compression library.) Upon exit, destLen; is the actual size of the uncompressed buffer. uncompress returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_BUF_ERROR if there was not enough room in the output; buffer, or Z_DATA_ERROR if the input data was corrupted or incomplete. In; the case where there is not enough room, uncompress() will fill the output; buffer with the uncompressed data up to that point.; */; /* gzip file access functions */; /*; This library supports reading and writing files in gzip (.gz) format with; an interface similar to that of stdio, using the functions that start with; ""gz"". The gzip format is different from the zlib format. gzip is a gzip; wrapper, documented in RFC 1952, wrapped around a deflate stream.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1144,Integrability,wrap,wrapped,1144,"/*; Decompresses the source buffer into the destination buffer. sourceLen is; the byte length of the source buffer. Upon entry, destLen is the total size; of the destination buffer, which must be large enough to hold the entire; uncompressed data. (The size of the uncompressed data must have been saved; previously by the compressor and transmitted to the decompressor by some; mechanism outside the scope of this compression library.) Upon exit, destLen; is the actual size of the uncompressed buffer. uncompress returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_BUF_ERROR if there was not enough room in the output; buffer, or Z_DATA_ERROR if the input data was corrupted or incomplete. In; the case where there is not enough room, uncompress() will fill the output; buffer with the uncompressed data up to that point.; */; /* gzip file access functions */; /*; This library supports reading and writing files in gzip (.gz) format with; an interface similar to that of stdio, using the functions that start with; ""gz"". The gzip format is different from the zlib format. gzip is a gzip; wrapper, documented in RFC 1952, wrapped around a deflate stream.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:862,Security,access,access,862,"/*; Decompresses the source buffer into the destination buffer. sourceLen is; the byte length of the source buffer. Upon entry, destLen is the total size; of the destination buffer, which must be large enough to hold the entire; uncompressed data. (The size of the uncompressed data must have been saved; previously by the compressor and transmitted to the decompressor by some; mechanism outside the scope of this compression library.) Upon exit, destLen; is the actual size of the uncompressed buffer. uncompress returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_BUF_ERROR if there was not enough room in the output; buffer, or Z_DATA_ERROR if the input data was corrupted or incomplete. In; the case where there is not enough room, uncompress() will fill the output; buffer with the uncompressed data up to that point.; */; /* gzip file access functions */; /*; This library supports reading and writing files in gzip (.gz) format with; an interface similar to that of stdio, using the functions that start with; ""gz"". The gzip format is different from the zlib format. gzip is a gzip; wrapper, documented in RFC 1952, wrapped around a deflate stream.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:780,Availability,error,error,780,"/* semi-opaque gzip file descriptor */; /*; ZEXTERN gzFile ZEXPORT gzopen OF((const char *path, const char *mode));. Opens a gzip (.gz) file for reading or writing. The mode parameter is as; in fopen (""rb"" or ""wb"") but can also include a compression level (""wb9"") or; a strategy: 'f' for filtered data as in ""wb6f"", 'h' for Huffman-only; compression as in ""wb1h"", 'R' for run-length encoding as in ""wb1R"", or 'F'; for fixed code compression as in ""wb9F"". (See the description of; deflateInit2 for more information about the strategy parameter.) 'T' will; request transparent writing or appending with no compression and not using; the gzip format. ""a"" can be used instead of ""w"" to request that the gzip stream that will; be written be appended to the file. ""+"" will result in an error, since; reading and writing to the same gzip file is not supported. The addition of; ""x"" when writing will create the file exclusively, which fails if the file; already exists. On systems that support it, the addition of ""e"" when; reading or writing will set the flag to close the file on an execve() call. These functions, as well as gzip, will read and decode a sequence of gzip; streams in a file. The append function of gzopen() can be used to create; such a file. (Also see gzflush() for another way to do this.) When; appending, gzopen does not test whether the file begins with a gzip stream,; nor does it look for the end of the gzip streams to begin appending. gzopen; will simply append a gzip stream to the existing file. gzopen can be used to read a file which is not in gzip format; in this; case gzread will directly read from the file without decompression. When; reading, this will be detected automatically by looking for the magic two-; byte gzip header. gzopen returns NULL if the file could not be opened, if there was; insufficient memory to allocate the gzFile state, or if an invalid mode was; specified (an 'r', 'w', or 'a' was not provided, or '+' was provided).; errno can be checked to de",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1849,Energy Efficiency,allocate,allocate,1849,"nst char *path, const char *mode));. Opens a gzip (.gz) file for reading or writing. The mode parameter is as; in fopen (""rb"" or ""wb"") but can also include a compression level (""wb9"") or; a strategy: 'f' for filtered data as in ""wb6f"", 'h' for Huffman-only; compression as in ""wb1h"", 'R' for run-length encoding as in ""wb1R"", or 'F'; for fixed code compression as in ""wb9F"". (See the description of; deflateInit2 for more information about the strategy parameter.) 'T' will; request transparent writing or appending with no compression and not using; the gzip format. ""a"" can be used instead of ""w"" to request that the gzip stream that will; be written be appended to the file. ""+"" will result in an error, since; reading and writing to the same gzip file is not supported. The addition of; ""x"" when writing will create the file exclusively, which fails if the file; already exists. On systems that support it, the addition of ""e"" when; reading or writing will set the flag to close the file on an execve() call. These functions, as well as gzip, will read and decode a sequence of gzip; streams in a file. The append function of gzopen() can be used to create; such a file. (Also see gzflush() for another way to do this.) When; appending, gzopen does not test whether the file begins with a gzip stream,; nor does it look for the end of the gzip streams to begin appending. gzopen; will simply append a gzip stream to the existing file. gzopen can be used to read a file which is not in gzip format; in this; case gzread will directly read from the file without decompression. When; reading, this will be detected automatically by looking for the magic two-; byte gzip header. gzopen returns NULL if the file could not be opened, if there was; insufficient memory to allocate the gzFile state, or if an invalid mode was; specified (an 'r', 'w', or 'a' was not provided, or '+' was provided).; errno can be checked to determine if the reason gzopen failed was that the; file could not be opened.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1687,Safety,detect,detected,1687,"nst char *path, const char *mode));. Opens a gzip (.gz) file for reading or writing. The mode parameter is as; in fopen (""rb"" or ""wb"") but can also include a compression level (""wb9"") or; a strategy: 'f' for filtered data as in ""wb6f"", 'h' for Huffman-only; compression as in ""wb1h"", 'R' for run-length encoding as in ""wb1R"", or 'F'; for fixed code compression as in ""wb9F"". (See the description of; deflateInit2 for more information about the strategy parameter.) 'T' will; request transparent writing or appending with no compression and not using; the gzip format. ""a"" can be used instead of ""w"" to request that the gzip stream that will; be written be appended to the file. ""+"" will result in an error, since; reading and writing to the same gzip file is not supported. The addition of; ""x"" when writing will create the file exclusively, which fails if the file; already exists. On systems that support it, the addition of ""e"" when; reading or writing will set the flag to close the file on an execve() call. These functions, as well as gzip, will read and decode a sequence of gzip; streams in a file. The append function of gzopen() can be used to create; such a file. (Also see gzflush() for another way to do this.) When; appending, gzopen does not test whether the file begins with a gzip stream,; nor does it look for the end of the gzip streams to begin appending. gzopen; will simply append a gzip stream to the existing file. gzopen can be used to read a file which is not in gzip format; in this; case gzread will directly read from the file without decompression. When; reading, this will be detected automatically by looking for the magic two-; byte gzip header. gzopen returns NULL if the file could not be opened, if there was; insufficient memory to allocate the gzFile state, or if an invalid mode was; specified (an 'r', 'w', or 'a' was not provided, or '+' was provided).; errno can be checked to determine if the reason gzopen failed was that the; file could not be opened.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1337,Testability,test,test,1337,"nst char *path, const char *mode));. Opens a gzip (.gz) file for reading or writing. The mode parameter is as; in fopen (""rb"" or ""wb"") but can also include a compression level (""wb9"") or; a strategy: 'f' for filtered data as in ""wb6f"", 'h' for Huffman-only; compression as in ""wb1h"", 'R' for run-length encoding as in ""wb1R"", or 'F'; for fixed code compression as in ""wb9F"". (See the description of; deflateInit2 for more information about the strategy parameter.) 'T' will; request transparent writing or appending with no compression and not using; the gzip format. ""a"" can be used instead of ""w"" to request that the gzip stream that will; be written be appended to the file. ""+"" will result in an error, since; reading and writing to the same gzip file is not supported. The addition of; ""x"" when writing will create the file exclusively, which fails if the file; already exists. On systems that support it, the addition of ""e"" when; reading or writing will set the flag to close the file on an execve() call. These functions, as well as gzip, will read and decode a sequence of gzip; streams in a file. The append function of gzopen() can be used to create; such a file. (Also see gzflush() for another way to do this.) When; appending, gzopen does not test whether the file begins with a gzip stream,; nor does it look for the end of the gzip streams to begin appending. gzopen; will simply append a gzip stream to the existing file. gzopen can be used to read a file which is not in gzip format; in this; case gzread will directly read from the file without decompression. When; reading, this will be detected automatically by looking for the magic two-; byte gzip header. gzopen returns NULL if the file could not be opened, if there was; insufficient memory to allocate the gzFile state, or if an invalid mode was; specified (an 'r', 'w', or 'a' was not provided, or '+' was provided).; errno can be checked to determine if the reason gzopen failed was that the; file could not be opened.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1469,Usability,simpl,simply,1469,"nst char *path, const char *mode));. Opens a gzip (.gz) file for reading or writing. The mode parameter is as; in fopen (""rb"" or ""wb"") but can also include a compression level (""wb9"") or; a strategy: 'f' for filtered data as in ""wb6f"", 'h' for Huffman-only; compression as in ""wb1h"", 'R' for run-length encoding as in ""wb1R"", or 'F'; for fixed code compression as in ""wb9F"". (See the description of; deflateInit2 for more information about the strategy parameter.) 'T' will; request transparent writing or appending with no compression and not using; the gzip format. ""a"" can be used instead of ""w"" to request that the gzip stream that will; be written be appended to the file. ""+"" will result in an error, since; reading and writing to the same gzip file is not supported. The addition of; ""x"" when writing will create the file exclusively, which fails if the file; already exists. On systems that support it, the addition of ""e"" when; reading or writing will set the flag to close the file on an execve() call. These functions, as well as gzip, will read and decode a sequence of gzip; streams in a file. The append function of gzopen() can be used to create; such a file. (Also see gzflush() for another way to do this.) When; appending, gzopen does not test whether the file begins with a gzip stream,; nor does it look for the end of the gzip streams to begin appending. gzopen; will simply append a gzip stream to the existing file. gzopen can be used to read a file which is not in gzip format; in this; case gzread will directly read from the file without decompression. When; reading, this will be detected automatically by looking for the magic two-; byte gzip header. gzopen returns NULL if the file could not be opened, if there was; insufficient memory to allocate the gzFile state, or if an invalid mode was; specified (an 'r', 'w', or 'a' was not provided, or '+' was provided).; errno can be checked to determine if the reason gzopen failed was that the; file could not be opened.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:899,Energy Efficiency,allocate,allocate,899,"/*; gzdopen associates a gzFile with the file descriptor fd. File descriptors; are obtained from calls like open, dup, creat, pipe or fileno (if the file; has been previously opened with fopen). The mode parameter is as in gzopen. The next call of gzclose on the returned gzFile will also close the file; descriptor fd, just like fclose(fdopen(fd, mode)) closes the file descriptor; fd. If you want to keep fd open, use fd = dup(fd_keep); gz = gzdopen(fd,; mode);. The duplicated descriptor should be saved to avoid a leak, since; gzdopen does not close fd if it fails. If you are using fileno() to get the; file descriptor from a FILE *, then you will have to use dup() to avoid; double-close()ing the file descriptor. Both gzclose() and fclose() will; close the associated file descriptor, so they need to have different file; descriptors. gzdopen returns NULL if there was insufficient memory to allocate the; gzFile state, if an invalid mode was specified (an 'r', 'w', or 'a' was not; provided, or '+' was provided), or if fd is -1. The file descriptor is not; used until the next gz* read, write, seek, or close operation, so gzdopen; will not detect if fd is invalid (unless fd is -1).; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:510,Safety,avoid,avoid,510,"/*; gzdopen associates a gzFile with the file descriptor fd. File descriptors; are obtained from calls like open, dup, creat, pipe or fileno (if the file; has been previously opened with fopen). The mode parameter is as in gzopen. The next call of gzclose on the returned gzFile will also close the file; descriptor fd, just like fclose(fdopen(fd, mode)) closes the file descriptor; fd. If you want to keep fd open, use fd = dup(fd_keep); gz = gzdopen(fd,; mode);. The duplicated descriptor should be saved to avoid a leak, since; gzdopen does not close fd if it fails. If you are using fileno() to get the; file descriptor from a FILE *, then you will have to use dup() to avoid; double-close()ing the file descriptor. Both gzclose() and fclose() will; close the associated file descriptor, so they need to have different file; descriptors. gzdopen returns NULL if there was insufficient memory to allocate the; gzFile state, if an invalid mode was specified (an 'r', 'w', or 'a' was not; provided, or '+' was provided), or if fd is -1. The file descriptor is not; used until the next gz* read, write, seek, or close operation, so gzdopen; will not detect if fd is invalid (unless fd is -1).; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:674,Safety,avoid,avoid,674,"/*; gzdopen associates a gzFile with the file descriptor fd. File descriptors; are obtained from calls like open, dup, creat, pipe or fileno (if the file; has been previously opened with fopen). The mode parameter is as in gzopen. The next call of gzclose on the returned gzFile will also close the file; descriptor fd, just like fclose(fdopen(fd, mode)) closes the file descriptor; fd. If you want to keep fd open, use fd = dup(fd_keep); gz = gzdopen(fd,; mode);. The duplicated descriptor should be saved to avoid a leak, since; gzdopen does not close fd if it fails. If you are using fileno() to get the; file descriptor from a FILE *, then you will have to use dup() to avoid; double-close()ing the file descriptor. Both gzclose() and fclose() will; close the associated file descriptor, so they need to have different file; descriptors. gzdopen returns NULL if there was insufficient memory to allocate the; gzFile state, if an invalid mode was specified (an 'r', 'w', or 'a' was not; provided, or '+' was provided), or if fd is -1. The file descriptor is not; used until the next gz* read, write, seek, or close operation, so gzdopen; will not detect if fd is invalid (unless fd is -1).; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1150,Safety,detect,detect,1150,"/*; gzdopen associates a gzFile with the file descriptor fd. File descriptors; are obtained from calls like open, dup, creat, pipe or fileno (if the file; has been previously opened with fopen). The mode parameter is as in gzopen. The next call of gzclose on the returned gzFile will also close the file; descriptor fd, just like fclose(fdopen(fd, mode)) closes the file descriptor; fd. If you want to keep fd open, use fd = dup(fd_keep); gz = gzdopen(fd,; mode);. The duplicated descriptor should be saved to avoid a leak, since; gzdopen does not close fd if it fails. If you are using fileno() to get the; file descriptor from a FILE *, then you will have to use dup() to avoid; double-close()ing the file descriptor. Both gzclose() and fclose() will; close the associated file descriptor, so they need to have different file; descriptors. gzdopen returns NULL if there was insufficient memory to allocate the; gzFile state, if an invalid mode was specified (an 'r', 'w', or 'a' was not; provided, or '+' was provided), or if fd is -1. The file descriptor is not; used until the next gz* read, write, seek, or close operation, so gzdopen; will not detect if fd is invalid (unless fd is -1).; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:680,Availability,failure,failure,680,"/*; Set the internal buffer size used by this library's functions. The; default buffer size is 8192 bytes. This function must be called after; gzopen() or gzdopen(), and before any other calls that read or write the; file. The buffer memory allocation is always deferred to the first read or; write. Two buffers are allocated, either both of the specified size when; writing, or one of the specified size and the other twice that size when; reading. A larger buffer size of, for example, 64K or 128K bytes will; noticeably increase the speed of decompression (reading). The new buffer size also affects the maximum length for gzprintf(). gzbuffer() returns 0 on success, or -1 on failure, such as being called; too late.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:316,Energy Efficiency,allocate,allocated,316,"/*; Set the internal buffer size used by this library's functions. The; default buffer size is 8192 bytes. This function must be called after; gzopen() or gzdopen(), and before any other calls that read or write the; file. The buffer memory allocation is always deferred to the first read or; write. Two buffers are allocated, either both of the specified size when; writing, or one of the specified size and the other twice that size when; reading. A larger buffer size of, for example, 64K or 128K bytes will; noticeably increase the speed of decompression (reading). The new buffer size also affects the maximum length for gzprintf(). gzbuffer() returns 0 on success, or -1 on failure, such as being called; too late.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:16,Deployability,update,update,16,"/*; Dynamically update the compression level or strategy. See the description; of deflateInit2 for the meaning of these parameters. gzsetparams returns Z_OK if success, or Z_STREAM_ERROR if the file was not; opened for writing.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:552,Availability,error,error,552,"/*; Reads the given number of uncompressed bytes from the compressed file. If; the input file is not in gzip format, gzread copies the given number of; bytes into the buffer directly from the file. After reaching the end of a gzip stream in the input, gzread will continue; to read, looking for another gzip stream. Any number of gzip streams may be; concatenated in the input file, and will all be decompressed by gzread().; If something other than a gzip stream is encountered after a gzip stream,; that remaining trailing garbage is ignored (and no error is returned). gzread can be used to read a gzip file that is being concurrently written.; Upon reaching the end of the input, gzread will return with the available; data. If the error code returned by gzerror is Z_OK or Z_BUF_ERROR, then; gzclearerr can be used to clear the end of file indicator in order to permit; gzread to be tried again. Z_OK indicates that a gzip stream was completed; on the last gzread. Z_BUF_ERROR indicates that the input file ended in the; middle of a gzip stream. Note that gzread does not return -1 in the event; of an incomplete gzip stream. This error is deferred until gzclose(), which; will return Z_BUF_ERROR if the last gzread ended in the middle of a gzip; stream. Alternatively, gzerror can be used before gzclose to detect this; case. gzread returns the number of uncompressed bytes actually read, less than; len for end of file, or -1 for error.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:712,Availability,avail,available,712,"/*; Reads the given number of uncompressed bytes from the compressed file. If; the input file is not in gzip format, gzread copies the given number of; bytes into the buffer directly from the file. After reaching the end of a gzip stream in the input, gzread will continue; to read, looking for another gzip stream. Any number of gzip streams may be; concatenated in the input file, and will all be decompressed by gzread().; If something other than a gzip stream is encountered after a gzip stream,; that remaining trailing garbage is ignored (and no error is returned). gzread can be used to read a gzip file that is being concurrently written.; Upon reaching the end of the input, gzread will return with the available; data. If the error code returned by gzerror is Z_OK or Z_BUF_ERROR, then; gzclearerr can be used to clear the end of file indicator in order to permit; gzread to be tried again. Z_OK indicates that a gzip stream was completed; on the last gzread. Z_BUF_ERROR indicates that the input file ended in the; middle of a gzip stream. Note that gzread does not return -1 in the event; of an incomplete gzip stream. This error is deferred until gzclose(), which; will return Z_BUF_ERROR if the last gzread ended in the middle of a gzip; stream. Alternatively, gzerror can be used before gzclose to detect this; case. gzread returns the number of uncompressed bytes actually read, less than; len for end of file, or -1 for error.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:736,Availability,error,error,736,"/*; Reads the given number of uncompressed bytes from the compressed file. If; the input file is not in gzip format, gzread copies the given number of; bytes into the buffer directly from the file. After reaching the end of a gzip stream in the input, gzread will continue; to read, looking for another gzip stream. Any number of gzip streams may be; concatenated in the input file, and will all be decompressed by gzread().; If something other than a gzip stream is encountered after a gzip stream,; that remaining trailing garbage is ignored (and no error is returned). gzread can be used to read a gzip file that is being concurrently written.; Upon reaching the end of the input, gzread will return with the available; data. If the error code returned by gzerror is Z_OK or Z_BUF_ERROR, then; gzclearerr can be used to clear the end of file indicator in order to permit; gzread to be tried again. Z_OK indicates that a gzip stream was completed; on the last gzread. Z_BUF_ERROR indicates that the input file ended in the; middle of a gzip stream. Note that gzread does not return -1 in the event; of an incomplete gzip stream. This error is deferred until gzclose(), which; will return Z_BUF_ERROR if the last gzread ended in the middle of a gzip; stream. Alternatively, gzerror can be used before gzclose to detect this; case. gzread returns the number of uncompressed bytes actually read, less than; len for end of file, or -1 for error.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1136,Availability,error,error,1136,"/*; Reads the given number of uncompressed bytes from the compressed file. If; the input file is not in gzip format, gzread copies the given number of; bytes into the buffer directly from the file. After reaching the end of a gzip stream in the input, gzread will continue; to read, looking for another gzip stream. Any number of gzip streams may be; concatenated in the input file, and will all be decompressed by gzread().; If something other than a gzip stream is encountered after a gzip stream,; that remaining trailing garbage is ignored (and no error is returned). gzread can be used to read a gzip file that is being concurrently written.; Upon reaching the end of the input, gzread will return with the available; data. If the error code returned by gzerror is Z_OK or Z_BUF_ERROR, then; gzclearerr can be used to clear the end of file indicator in order to permit; gzread to be tried again. Z_OK indicates that a gzip stream was completed; on the last gzread. Z_BUF_ERROR indicates that the input file ended in the; middle of a gzip stream. Note that gzread does not return -1 in the event; of an incomplete gzip stream. This error is deferred until gzclose(), which; will return Z_BUF_ERROR if the last gzread ended in the middle of a gzip; stream. Alternatively, gzerror can be used before gzclose to detect this; case. gzread returns the number of uncompressed bytes actually read, less than; len for end of file, or -1 for error.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1437,Availability,error,error,1437,"/*; Reads the given number of uncompressed bytes from the compressed file. If; the input file is not in gzip format, gzread copies the given number of; bytes into the buffer directly from the file. After reaching the end of a gzip stream in the input, gzread will continue; to read, looking for another gzip stream. Any number of gzip streams may be; concatenated in the input file, and will all be decompressed by gzread().; If something other than a gzip stream is encountered after a gzip stream,; that remaining trailing garbage is ignored (and no error is returned). gzread can be used to read a gzip file that is being concurrently written.; Upon reaching the end of the input, gzread will return with the available; data. If the error code returned by gzerror is Z_OK or Z_BUF_ERROR, then; gzclearerr can be used to clear the end of file indicator in order to permit; gzread to be tried again. Z_OK indicates that a gzip stream was completed; on the last gzread. Z_BUF_ERROR indicates that the input file ended in the; middle of a gzip stream. Note that gzread does not return -1 in the event; of an incomplete gzip stream. This error is deferred until gzclose(), which; will return Z_BUF_ERROR if the last gzread ended in the middle of a gzip; stream. Alternatively, gzerror can be used before gzclose to detect this; case. gzread returns the number of uncompressed bytes actually read, less than; len for end of file, or -1 for error.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:625,Performance,concurren,concurrently,625,"/*; Reads the given number of uncompressed bytes from the compressed file. If; the input file is not in gzip format, gzread copies the given number of; bytes into the buffer directly from the file. After reaching the end of a gzip stream in the input, gzread will continue; to read, looking for another gzip stream. Any number of gzip streams may be; concatenated in the input file, and will all be decompressed by gzread().; If something other than a gzip stream is encountered after a gzip stream,; that remaining trailing garbage is ignored (and no error is returned). gzread can be used to read a gzip file that is being concurrently written.; Upon reaching the end of the input, gzread will return with the available; data. If the error code returned by gzerror is Z_OK or Z_BUF_ERROR, then; gzclearerr can be used to clear the end of file indicator in order to permit; gzread to be tried again. Z_OK indicates that a gzip stream was completed; on the last gzread. Z_BUF_ERROR indicates that the input file ended in the; middle of a gzip stream. Note that gzread does not return -1 in the event; of an incomplete gzip stream. This error is deferred until gzclose(), which; will return Z_BUF_ERROR if the last gzread ended in the middle of a gzip; stream. Alternatively, gzerror can be used before gzclose to detect this; case. gzread returns the number of uncompressed bytes actually read, less than; len for end of file, or -1 for error.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1313,Safety,detect,detect,1313,"/*; Reads the given number of uncompressed bytes from the compressed file. If; the input file is not in gzip format, gzread copies the given number of; bytes into the buffer directly from the file. After reaching the end of a gzip stream in the input, gzread will continue; to read, looking for another gzip stream. Any number of gzip streams may be; concatenated in the input file, and will all be decompressed by gzread().; If something other than a gzip stream is encountered after a gzip stream,; that remaining trailing garbage is ignored (and no error is returned). gzread can be used to read a gzip file that is being concurrently written.; Upon reaching the end of the input, gzread will return with the available; data. If the error code returned by gzerror is Z_OK or Z_BUF_ERROR, then; gzclearerr can be used to clear the end of file indicator in order to permit; gzread to be tried again. Z_OK indicates that a gzip stream was completed; on the last gzread. Z_BUF_ERROR indicates that the input file ended in the; middle of a gzip stream. Note that gzread does not return -1 in the event; of an incomplete gzip stream. This error is deferred until gzclose(), which; will return Z_BUF_ERROR if the last gzread ended in the middle of a gzip; stream. Alternatively, gzerror can be used before gzclose to detect this; case. gzread returns the number of uncompressed bytes actually read, less than; len for end of file, or -1 for error.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:823,Usability,clear,clear,823,"/*; Reads the given number of uncompressed bytes from the compressed file. If; the input file is not in gzip format, gzread copies the given number of; bytes into the buffer directly from the file. After reaching the end of a gzip stream in the input, gzread will continue; to read, looking for another gzip stream. Any number of gzip streams may be; concatenated in the input file, and will all be decompressed by gzread().; If something other than a gzip stream is encountered after a gzip stream,; that remaining trailing garbage is ignored (and no error is returned). gzread can be used to read a gzip file that is being concurrently written.; Upon reaching the end of the input, gzread will return with the available; data. If the error code returned by gzerror is Z_OK or Z_BUF_ERROR, then; gzclearerr can be used to clear the end of file indicator in order to permit; gzread to be tried again. Z_OK indicates that a gzip stream was completed; on the last gzread. Z_BUF_ERROR indicates that the input file ended in the; middle of a gzip stream. Note that gzread does not return -1 in the event; of an incomplete gzip stream. This error is deferred until gzclose(), which; will return Z_BUF_ERROR if the last gzread ended in the middle of a gzip; stream. Alternatively, gzerror can be used before gzclose to detect this; case. gzread returns the number of uncompressed bytes actually read, less than; len for end of file, or -1 for error.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:151,Availability,error,error,151,/*; Writes the given number of uncompressed bytes into the compressed file.; gzwrite returns the number of uncompressed bytes written or 0 in case of; error.; */,MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:208,Availability,error,error,208,"/*; Converts, formats, and writes the arguments to the compressed file under; control of the format string, as in fprintf. gzprintf returns the number of; uncompressed bytes actually written, or 0 in case of error. The number of; uncompressed bytes written is limited to 8191, or one less than the buffer; size given to gzbuffer(). The caller should assure that this limit is not; exceeded. If it is exceeded, then gzprintf() will return an error (0) with; nothing written. In this case, there may also be a buffer overflow with; unpredictable consequences, which is possible only if zlib was compiled with; the insecure functions sprintf() or vsprintf() because the secure snprintf(); or vsnprintf() functions were not available. This can be determined using; zlibCompileFlags().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:441,Availability,error,error,441,"/*; Converts, formats, and writes the arguments to the compressed file under; control of the format string, as in fprintf. gzprintf returns the number of; uncompressed bytes actually written, or 0 in case of error. The number of; uncompressed bytes written is limited to 8191, or one less than the buffer; size given to gzbuffer(). The caller should assure that this limit is not; exceeded. If it is exceeded, then gzprintf() will return an error (0) with; nothing written. In this case, there may also be a buffer overflow with; unpredictable consequences, which is possible only if zlib was compiled with; the insecure functions sprintf() or vsprintf() because the secure snprintf(); or vsnprintf() functions were not available. This can be determined using; zlibCompileFlags().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:720,Availability,avail,available,720,"/*; Converts, formats, and writes the arguments to the compressed file under; control of the format string, as in fprintf. gzprintf returns the number of; uncompressed bytes actually written, or 0 in case of error. The number of; uncompressed bytes written is limited to 8191, or one less than the buffer; size given to gzbuffer(). The caller should assure that this limit is not; exceeded. If it is exceeded, then gzprintf() will return an error (0) with; nothing written. In this case, there may also be a buffer overflow with; unpredictable consequences, which is possible only if zlib was compiled with; the insecure functions sprintf() or vsprintf() because the secure snprintf(); or vsnprintf() functions were not available. This can be determined using; zlibCompileFlags().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:667,Security,secur,secure,667,"/*; Converts, formats, and writes the arguments to the compressed file under; control of the format string, as in fprintf. gzprintf returns the number of; uncompressed bytes actually written, or 0 in case of error. The number of; uncompressed bytes written is limited to 8191, or one less than the buffer; size given to gzbuffer(). The caller should assure that this limit is not; exceeded. If it is exceeded, then gzprintf() will return an error (0) with; nothing written. In this case, there may also be a buffer overflow with; unpredictable consequences, which is possible only if zlib was compiled with; the insecure functions sprintf() or vsprintf() because the secure snprintf(); or vsnprintf() functions were not available. This can be determined using; zlibCompileFlags().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:177,Availability,error,error,177,"/*; Writes the given null-terminated string to the compressed file, excluding; the terminating null character. gzputs returns the number of characters written, or -1 in case of error.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:467,Availability,error,error,467,"/*; Reads bytes from the compressed file until len-1 characters are read, or a; newline character is read and transferred to buf, or an end-of-file; condition is encountered. If any characters are read or if len == 1, the; string is terminated with a null character. If no characters are read due; to an end-of-file or len < 1, then the buffer is left untouched. gzgets returns buf which is a null-terminated string, or it returns NULL; for end-of-file or in case of error. If there was an error, the contents at; buf are indeterminate.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:490,Availability,error,error,490,"/*; Reads bytes from the compressed file until len-1 characters are read, or a; newline character is read and transferred to buf, or an end-of-file; condition is encountered. If any characters are read or if len == 1, the; string is terminated with a null character. If no characters are read due; to an end-of-file or len < 1, then the buffer is left untouched. gzgets returns buf which is a null-terminated string, or it returns NULL; for end-of-file or in case of error. If there was an error, the contents at; buf are indeterminate.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:132,Availability,error,error,132,"/*; Writes c, converted to an unsigned char, into the compressed file. gzputc; returns the value that was written, or -1 in case of error.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:103,Availability,error,error,103,"/*; Reads one byte from the compressed file. gzgetc returns this byte or -1; in case of end of file or error. This is implemented as a macro for speed.; As such, it does not do all of the checking the other functions do. I.e.; it does not check to see if file is NULL, nor whether the structure file; points to has been clobbered or not.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:196,Availability,failure,failure,196,"/*; Push one character back onto the stream to be read as the first character; on the next read. At least one character of push-back is allowed.; gzungetc() returns the character pushed, or -1 on failure. gzungetc() will; fail if c is -1, and may fail if a character has been pushed but not read; yet. If gzungetc is used immediately after gzopen or gzdopen, at least the; output buffer size of pushed characters is allowed. (See gzbuffer above.); The pushed character will be discarded if the stream is repositioned with; gzseek() or gzrewind().; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:140,Availability,error,error,140,"/*; Flushes all pending output into the compressed file. The parameter flush; is as in the deflate() function. The return value is the zlib error number; (see function gzerror below). gzflush is only permitted when writing. If the flush parameter is Z_FINISH, the remaining data is written and the; gzip stream is completed in the output. If gzwrite() is called again, a new; gzip stream will be started in the output. gzread() is able to read such; concatented gzip streams. gzflush should be called only when strictly necessary because it will; degrade compression if called too often.; */; /*; ZEXTERN z_off_t ZEXPORT gzseek OF((gzFile file,; z_off_t offset, int whence));. Sets the starting position for the next gzread or gzwrite on the given; compressed file. The offset represents a number of bytes in the; uncompressed data stream. The whence parameter is defined as in lseek(2);; the value SEEK_END is not supported. If the file is opened for reading, this function is emulated but can be; extremely slow. If the file is opened for writing, only forward seeks are; supported; gzseek then compresses a sequence of zeroes up to the new; starting position. gzseek returns the resulting offset location as measured in bytes from; the beginning of the uncompressed stream, or -1 in case of error, in; particular if the file is opened for writing and the new starting position; would be before the current position.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1294,Availability,error,error,1294,"/*; Flushes all pending output into the compressed file. The parameter flush; is as in the deflate() function. The return value is the zlib error number; (see function gzerror below). gzflush is only permitted when writing. If the flush parameter is Z_FINISH, the remaining data is written and the; gzip stream is completed in the output. If gzwrite() is called again, a new; gzip stream will be started in the output. gzread() is able to read such; concatented gzip streams. gzflush should be called only when strictly necessary because it will; degrade compression if called too often.; */; /*; ZEXTERN z_off_t ZEXPORT gzseek OF((gzFile file,; z_off_t offset, int whence));. Sets the starting position for the next gzread or gzwrite on the given; compressed file. The offset represents a number of bytes in the; uncompressed data stream. The whence parameter is defined as in lseek(2);; the value SEEK_END is not supported. If the file is opened for reading, this function is emulated but can be; extremely slow. If the file is opened for writing, only forward seeks are; supported; gzseek then compresses a sequence of zeroes up to the new; starting position. gzseek returns the resulting offset location as measured in bytes from; the beginning of the uncompressed stream, or -1 in case of error, in; particular if the file is opened for writing and the new starting position; would be before the current position.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:929,Availability,error,error,929,"/*; Rewinds the given file. This function is supported only for reading. gzrewind(file) is equivalent to (int)gzseek(file, 0L, SEEK_SET); */; /*; ZEXTERN z_off_t ZEXPORT gztell OF((gzFile file));. Returns the starting position for the next gzread or gzwrite on the given; compressed file. This position represents a number of bytes in the; uncompressed data stream, and is zero when starting, even if appending or; reading a gzip stream from the middle of a file using gzdopen(). gztell(file) is equivalent to gzseek(file, 0L, SEEK_CUR); */; /*; ZEXTERN z_off_t ZEXPORT gzoffset OF((gzFile file));. Returns the current offset in the file being read or written. This offset; includes the count of bytes that precede the gzip stream, for example when; appending or when using gzdopen() for reading. When reading, the offset; does not include as yet unused buffered input. This information can be used; for a progress indicator. On error, gzoffset() returns -1.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:699,Safety,detect,detected,699,"/*; Returns true (1) if the end-of-file indicator has been set while reading,; false (0) otherwise. Note that the end-of-file indicator is set only if the; read tried to go past the end of the input, but came up short. Therefore,; just like feof(), gzeof() may return false even if there is no more data to; read, in the event that the last read request was for the exact number of; bytes remaining in the input file. This will happen if the input file size; is an exact multiple of the buffer size. If gzeof() returns true, then the read functions will return no more data,; unless the end-of-file indicator is reset by gzclearerr() and the input file; has grown since the previous end of file was detected.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:325,Energy Efficiency,allocate,allocated,325,"/*; Returns true (1) if file is being copied directly while reading, or false; (0) if file is a gzip stream being decompressed. If the input file is empty, gzdirect() will return true, since the input; does not contain a gzip stream. If gzdirect() is used immediately after gzopen() or gzdopen() it will; cause buffers to be allocated to allow reading the file to determine if it; is a gzip file. Therefore if gzbuffer() is used, it should be called before; gzdirect(). When writing, gzdirect() returns true (1) if transparent writing was; requested (""wT"" for the gzopen() mode), or false (0) otherwise. (Note:; gzdirect() is not needed when writing. Transparent writing must be; explicitly requested, so the application already knows the answer. When; linking statically, using gzdirect() will include all of the zlib code for; gzip file reading and decompression, which may not be desired.); */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:446,Availability,error,error,446,"/*; Flushes all pending output if necessary, closes the compressed file and; deallocates the (de)compression state. Note that once file is closed, you; cannot call gzerror with file, since its structures have been deallocated.; gzclose must not be called more than once on the same file, just as free; must not be called more than once on the same allocation. gzclose will return Z_STREAM_ERROR if file is not valid, Z_ERRNO on a; file operation error, Z_MEM_ERROR if out of memory, Z_BUF_ERROR if the; last read ended in the middle of a gzip stream, or Z_OK on success.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:193,Safety,avoid,avoid,193,"/*; Same as gzclose(), but gzclose_r() is only for use when reading, and; gzclose_w() is only for use when writing or appending. The advantage to; using these instead of gzclose() is that they avoid linking in zlib; compression or decompression code that is not used when only reading or only; writing respectively. If gzclose() is used, then both compression and; decompression code will be included the application when linking to a static; zlib library.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:16,Availability,error,error,16,"/*; Returns the error message for the last error which occurred on the given; compressed file. errnum is set to zlib error number. If an error occurred; in the file system and not in the compression library, errnum is set to; Z_ERRNO and the application may consult errno to get the exact error code. The application must not modify the returned string. Future calls to; this function may invalidate the previously returned string. If file is; closed, then the string previously returned by gzerror will no longer be; available. gzerror() should be used to distinguish errors from end-of-file for those; functions above that do not distinguish those cases in their return values.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:43,Availability,error,error,43,"/*; Returns the error message for the last error which occurred on the given; compressed file. errnum is set to zlib error number. If an error occurred; in the file system and not in the compression library, errnum is set to; Z_ERRNO and the application may consult errno to get the exact error code. The application must not modify the returned string. Future calls to; this function may invalidate the previously returned string. If file is; closed, then the string previously returned by gzerror will no longer be; available. gzerror() should be used to distinguish errors from end-of-file for those; functions above that do not distinguish those cases in their return values.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:117,Availability,error,error,117,"/*; Returns the error message for the last error which occurred on the given; compressed file. errnum is set to zlib error number. If an error occurred; in the file system and not in the compression library, errnum is set to; Z_ERRNO and the application may consult errno to get the exact error code. The application must not modify the returned string. Future calls to; this function may invalidate the previously returned string. If file is; closed, then the string previously returned by gzerror will no longer be; available. gzerror() should be used to distinguish errors from end-of-file for those; functions above that do not distinguish those cases in their return values.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:137,Availability,error,error,137,"/*; Returns the error message for the last error which occurred on the given; compressed file. errnum is set to zlib error number. If an error occurred; in the file system and not in the compression library, errnum is set to; Z_ERRNO and the application may consult errno to get the exact error code. The application must not modify the returned string. Future calls to; this function may invalidate the previously returned string. If file is; closed, then the string previously returned by gzerror will no longer be; available. gzerror() should be used to distinguish errors from end-of-file for those; functions above that do not distinguish those cases in their return values.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:289,Availability,error,error,289,"/*; Returns the error message for the last error which occurred on the given; compressed file. errnum is set to zlib error number. If an error occurred; in the file system and not in the compression library, errnum is set to; Z_ERRNO and the application may consult errno to get the exact error code. The application must not modify the returned string. Future calls to; this function may invalidate the previously returned string. If file is; closed, then the string previously returned by gzerror will no longer be; available. gzerror() should be used to distinguish errors from end-of-file for those; functions above that do not distinguish those cases in their return values.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:518,Availability,avail,available,518,"/*; Returns the error message for the last error which occurred on the given; compressed file. errnum is set to zlib error number. If an error occurred; in the file system and not in the compression library, errnum is set to; Z_ERRNO and the application may consult errno to get the exact error code. The application must not modify the returned string. Future calls to; this function may invalidate the previously returned string. If file is; closed, then the string previously returned by gzerror will no longer be; available. gzerror() should be used to distinguish errors from end-of-file for those; functions above that do not distinguish those cases in their return values.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:569,Availability,error,errors,569,"/*; Returns the error message for the last error which occurred on the given; compressed file. errnum is set to zlib error number. If an error occurred; in the file system and not in the compression library, errnum is set to; Z_ERRNO and the application may consult errno to get the exact error code. The application must not modify the returned string. Future calls to; this function may invalidate the previously returned string. If file is; closed, then the string previously returned by gzerror will no longer be; available. gzerror() should be used to distinguish errors from end-of-file for those; functions above that do not distinguish those cases in their return values.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:22,Integrability,message,message,22,"/*; Returns the error message for the last error which occurred on the given; compressed file. errnum is set to zlib error number. If an error occurred; in the file system and not in the compression library, errnum is set to; Z_ERRNO and the application may consult errno to get the exact error code. The application must not modify the returned string. Future calls to; this function may invalidate the previously returned string. If file is; closed, then the string previously returned by gzerror will no longer be; available. gzerror() should be used to distinguish errors from end-of-file for those; functions above that do not distinguish those cases in their return values.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:15,Availability,error,error,15,/*; Clears the error and end-of-file flags for file. This is analogous to the; clearerr() function in stdio. This is useful for continuing to read a gzip; file that is being written concurrently.; */,MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:182,Performance,concurren,concurrently,182,/*; Clears the error and end-of-file flags for file. This is analogous to the; clearerr() function in stdio. This is useful for continuing to read a gzip; file that is being written concurrently.; */,MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4,Usability,Clear,Clears,4,/*; Clears the error and end-of-file flags for file. This is analogous to the; clearerr() function in stdio. This is useful for continuing to read a gzip; file that is being written concurrently.; */,MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:79,Usability,clear,clearerr,79,/*; Clears the error and end-of-file flags for file. This is analogous to the; clearerr() function in stdio. This is useful for continuing to read a gzip; file that is being written concurrently.; */,MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:18,Security,checksum,checksum,18,/* !Z_SOLO */; /* checksum functions */; /*; These functions are not related to compression but are exported; anyway because they might be useful in applications using the compression; library.; */,MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:222,Availability,reliab,reliable,222,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:450,Availability,error,error,450,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4,Deployability,Update,Update,4,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:84,Deployability,update,updated,84,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:30,Security,checksum,checksum,30,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:92,Security,checksum,checksum,92,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:178,Security,checksum,checksum,178,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:200,Security,checksum,checksum,200,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:577,Security,checksum,checksums,577,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:677,Security,checksum,checksums,677,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:772,Security,checksum,checksum,772,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:455,Availability,error,error,455,"/*; Update a running CRC-32 with the bytes buf[0..len-1] and return the; updated CRC-32. If buf is Z_NULL, this function returns the required; initial value for the crc. Pre- and post-conditioning (one's complement) is; performed within this function so it shouldn't be done by the application. Usage example:. uLong crc = crc32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; crc = crc32(crc, buffer, length);; }; if (crc != original_crc) error();; */; /*; ZEXTERN uLong ZEXPORT crc32_combine OF((uLong crc1, uLong crc2, z_off_t len2));. Combine two CRC-32 check values into one. For two sequences of bytes,; seq1 and seq2 with lengths len1 and len2, CRC-32 check values were; calculated for each, crc1 and crc2. crc32_combine() returns the CRC-32; check value of seq1 and seq2 concatenated, requiring only crc1, crc2, and; len2.; */; /* various hacks, don't look :) */; /* deflateInit and inflateInit are macros to allow checking the zlib version; * and the compiler's view of z_stream:; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4,Deployability,Update,Update,4,"/*; Update a running CRC-32 with the bytes buf[0..len-1] and return the; updated CRC-32. If buf is Z_NULL, this function returns the required; initial value for the crc. Pre- and post-conditioning (one's complement) is; performed within this function so it shouldn't be done by the application. Usage example:. uLong crc = crc32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; crc = crc32(crc, buffer, length);; }; if (crc != original_crc) error();; */; /*; ZEXTERN uLong ZEXPORT crc32_combine OF((uLong crc1, uLong crc2, z_off_t len2));. Combine two CRC-32 check values into one. For two sequences of bytes,; seq1 and seq2 with lengths len1 and len2, CRC-32 check values were; calculated for each, crc1 and crc2. crc32_combine() returns the CRC-32; check value of seq1 and seq2 concatenated, requiring only crc1, crc2, and; len2.; */; /* various hacks, don't look :) */; /* deflateInit and inflateInit are macros to allow checking the zlib version; * and the compiler's view of z_stream:; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:73,Deployability,update,updated,73,"/*; Update a running CRC-32 with the bytes buf[0..len-1] and return the; updated CRC-32. If buf is Z_NULL, this function returns the required; initial value for the crc. Pre- and post-conditioning (one's complement) is; performed within this function so it shouldn't be done by the application. Usage example:. uLong crc = crc32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; crc = crc32(crc, buffer, length);; }; if (crc != original_crc) error();; */; /*; ZEXTERN uLong ZEXPORT crc32_combine OF((uLong crc1, uLong crc2, z_off_t len2));. Combine two CRC-32 check values into one. For two sequences of bytes,; seq1 and seq2 with lengths len1 and len2, CRC-32 check values were; calculated for each, crc1 and crc2. crc32_combine() returns the CRC-32; check value of seq1 and seq2 concatenated, requiring only crc1, crc2, and; len2.; */; /* various hacks, don't look :) */; /* deflateInit and inflateInit are macros to allow checking the zlib version; * and the compiler's view of z_stream:; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:220,Performance,perform,performed,220,"/*; Update a running CRC-32 with the bytes buf[0..len-1] and return the; updated CRC-32. If buf is Z_NULL, this function returns the required; initial value for the crc. Pre- and post-conditioning (one's complement) is; performed within this function so it shouldn't be done by the application. Usage example:. uLong crc = crc32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; crc = crc32(crc, buffer, length);; }; if (crc != original_crc) error();; */; /*; ZEXTERN uLong ZEXPORT crc32_combine OF((uLong crc1, uLong crc2, z_off_t len2));. Combine two CRC-32 check values into one. For two sequences of bytes,; seq1 and seq2 with lengths len1 and len2, CRC-32 check values were; calculated for each, crc1 and crc2. crc32_combine() returns the CRC-32; check value of seq1 and seq2 concatenated, requiring only crc1, crc2, and; len2.; */; /* various hacks, don't look :) */; /* deflateInit and inflateInit are macros to allow checking the zlib version; * and the compiler's view of z_stream:; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:50,Security,expose,exposed,50,"/* gzgetc() macro and its supporting function and exposed data structure. Note; * that the real internal state is much larger than the exposed structure.; * This abbreviated structure exposes just enough for the gzgetc() macro. The; * user should not mess with these exposed elements, since their names or; * behavior could change in the future, perhaps even capriciously. They can; * only be used by the gzgetc() macro. You have been warned.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:135,Security,expose,exposed,135,"/* gzgetc() macro and its supporting function and exposed data structure. Note; * that the real internal state is much larger than the exposed structure.; * This abbreviated structure exposes just enough for the gzgetc() macro. The; * user should not mess with these exposed elements, since their names or; * behavior could change in the future, perhaps even capriciously. They can; * only be used by the gzgetc() macro. You have been warned.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:184,Security,expose,exposes,184,"/* gzgetc() macro and its supporting function and exposed data structure. Note; * that the real internal state is much larger than the exposed structure.; * This abbreviated structure exposes just enough for the gzgetc() macro. The; * user should not mess with these exposed elements, since their names or; * behavior could change in the future, perhaps even capriciously. They can; * only be used by the gzgetc() macro. You have been warned.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:267,Security,expose,exposed,267,"/* gzgetc() macro and its supporting function and exposed data structure. Note; * that the real internal state is much larger than the exposed structure.; * This abbreviated structure exposes just enough for the gzgetc() macro. The; * user should not mess with these exposed elements, since their names or; * behavior could change in the future, perhaps even capriciously. They can; * only be used by the gzgetc() macro. You have been warned.; */",MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3,Usability,undo,undocumented,3,/* undocumented functions */,MatchSource.CODE_COMMENT,builtins/zlib/zlib.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c:21,Integrability,depend,dependent,21,"/* zutil.c -- target dependent utility functions for the compression library; * Copyright (C) 1995-2005, 2010, 2011, 2012 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,builtins/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c:35,Availability,error,error,35,/* exported to allow conversion of error code to string for compress() and; * uncompress(); */,MatchSource.CODE_COMMENT,builtins/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c:99,Modifiability,variab,variable,99,/* The Microsoft C Run-Time Library for Windows CE doesn't have; * errno. We define it as a global variable to simplify porting.; * Its value is always 0 and should not be used.; */,MatchSource.CODE_COMMENT,builtins/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c:111,Usability,simpl,simplify,111,/* The Microsoft C Run-Time Library for Windows CE doesn't have; * errno. We define it as a global variable to simplify porting.; * Its value is always 0 and should not be used.; */,MatchSource.CODE_COMMENT,builtins/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c:228,Performance,concurren,concurrent,228,"/* This table is used to remember the original form of pointers; * to large buffers (64K). Such pointers are normalized with a zero offset.; * Since MSDOS is not a preemptive multitasking OS, this table is not; * protected from concurrent access. This hack doesn't work anyway on; * a protected system like OS/2. Use Microsoft C instead.; */",MatchSource.CODE_COMMENT,builtins/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c:239,Security,access,access,239,"/* This table is used to remember the original form of pointers; * to large buffers (64K). Such pointers are normalized with a zero offset.; * Since MSDOS is not a preemptive multitasking OS, this table is not; * protected from concurrent access. This hack doesn't work anyway on; * a protected system like OS/2. Use Microsoft C instead.; */",MatchSource.CODE_COMMENT,builtins/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c:9,Energy Efficiency,allocate,allocate,9,"/* If we allocate less than 65520 bytes, we assume that farmalloc; * will return a usable pointer which doesn't have to be normalized.; */",MatchSource.CODE_COMMENT,builtins/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c:83,Usability,usab,usable,83,"/* If we allocate less than 65520 bytes, we assume that farmalloc; * will return a usable pointer which doesn't have to be normalized.; */",MatchSource.CODE_COMMENT,builtins/zlib/zutil.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.h:37,Deployability,configurat,configuration,37,"/* zutil.h -- internal interface and configuration of the compression library; * Copyright (C) 1995-2013 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* WARNING: this file should *not* be used by applications. It is; part of the implementation of the compression library and is; subject to change. Applications should only use zlib.h.; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,builtins/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.h:23,Integrability,interface,interface,23,"/* zutil.h -- internal interface and configuration of the compression library; * Copyright (C) 1995-2013 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* WARNING: this file should *not* be used by applications. It is; part of the implementation of the compression library and is; subject to change. Applications should only use zlib.h.; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,builtins/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.h:37,Modifiability,config,configuration,37,"/* zutil.h -- internal interface and configuration of the compression library; * Copyright (C) 1995-2013 Jean-loup Gailly.; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* WARNING: this file should *not* be used by applications. It is; part of the implementation of the compression library and is; subject to change. Applications should only use zlib.h.; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,builtins/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.h:49,Safety,avoid,avoid,49,/* indexed by 2-zlib_error */; /* (size given to avoid silly warnings with Visual C++) */,MatchSource.CODE_COMMENT,builtins/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.h:10,Integrability,depend,dependencies,10,/* target dependencies */,MatchSource.CODE_COMMENT,builtins/zlib/zutil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:9,Integrability,Depend,Dependencies,9,/*====== Dependencies ======*/,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:83,Performance,load,load,83,"/* It isn't required but allows to generate better code, saving a function pointer load from the IAT and an indirect jump.*/",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:525,Availability,error,error,525,"/*! ZDICT_trainFromBuffer():; * Train a dictionary from an array of samples.; * Redirect towards ZDICT_optimizeTrainFromBuffer_fastCover() single-threaded, with d=8, steps=4,; * f=20, and accel=1.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * The resulting dictionary will be saved into `dictBuffer`.; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * Note: Dictionary training will fail if there are not enough samples to construct a; * dictionary, or if most of the samples are too small (< 8 bytes being the lower limit).; * If dictionary training fails, you should use zstd without a dictionary, as the dictionary; * would've been ineffective anyways. If you believe your samples would benefit from a dictionary; * please open an issue with details, and we can look into it.; * Note: ZDICT_trainFromBuffer()'s memory usage is about 6 MB.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:550,Testability,test,tested,550,"/*! ZDICT_trainFromBuffer():; * Train a dictionary from an array of samples.; * Redirect towards ZDICT_optimizeTrainFromBuffer_fastCover() single-threaded, with d=8, steps=4,; * f=20, and accel=1.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * The resulting dictionary will be saved into `dictBuffer`.; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * Note: Dictionary training will fail if there are not enough samples to construct a; * dictionary, or if most of the samples are too small (< 8 bytes being the lower limit).; * If dictionary training fails, you should use zstd without a dictionary, as the dictionary; * would've been ineffective anyways. If you believe your samples would benefit from a dictionary; * please open an issue with details, and we can look into it.; * Note: ZDICT_trainFromBuffer()'s memory usage is about 6 MB.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:4,Performance,optimiz,optimize,4,/*< optimize for a specific zstd compression level; 0 means default */,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:49,Availability,error,errors,49,/*< Write log to stderr; 0 = none (default); 1 = errors; 2 = progression; 3 = details; 4 = debug; */,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:10,Testability,log,log,10,/*< Write log to stderr; 0 = none (default); 1 = errors; 2 = progression; 3 = details; 4 = debug; */,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:1519,Availability,error,error,1519,"/*! ZDICT_finalizeDictionary():; * Given a custom content as a basis for dictionary, and a set of samples,; * finalize dictionary by adding headers and statistics according to the zstd; * dictionary format.; *; * Samples must be stored concatenated in a flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each; * sample in order. The samples are used to construct the statistics, so they; * should be representative of what you will compress with this dictionary.; *; * The compression level can be set in `parameters`. You should pass the; * compression level you expect to use in production. The statistics for each; * compression level differ, so tuning the dictionary for the compression level; * can help quite a bit.; *; * You can set an explicit dictionary ID in `parameters`, or allow us to pick; * a random dictionary ID for you, but we can't guarantee no collisions.; *; * The dstDictBuffer and the dictContent may overlap, and the content will be; * appended to the end of the header. If the header + the content doesn't fit in; * maxDictSize the beginning of the content is truncated to make room, since it; * is presumed that the most profitable content is at the end of the dictionary,; * since that is the cheapest to reference.; *; * `dictContentSize` must be >= ZDICT_CONTENTSIZE_MIN bytes.; * `maxDictSize` must be >= max(dictContentSize, ZSTD_DICTSIZE_MIN).; *; * @return: size of dictionary stored into `dstDictBuffer` (<= `maxDictSize`),; * or an error code, which can be tested by ZDICT_isError().; * Note: ZDICT_finalizeDictionary() will push notifications into stderr if; * instructed to, using notificationLevel>0.; * NOTE: This function currently may fail in several edge cases including:; * * Not enough samples; * * Samples are uncompressible; * * Samples are all exactly the same; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:1544,Testability,test,tested,1544,"/*! ZDICT_finalizeDictionary():; * Given a custom content as a basis for dictionary, and a set of samples,; * finalize dictionary by adding headers and statistics according to the zstd; * dictionary format.; *; * Samples must be stored concatenated in a flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each; * sample in order. The samples are used to construct the statistics, so they; * should be representative of what you will compress with this dictionary.; *; * The compression level can be set in `parameters`. You should pass the; * compression level you expect to use in production. The statistics for each; * compression level differ, so tuning the dictionary for the compression level; * can help quite a bit.; *; * You can set an explicit dictionary ID in `parameters`, or allow us to pick; * a random dictionary ID for you, but we can't guarantee no collisions.; *; * The dstDictBuffer and the dictContent may overlap, and the content will be; * appended to the end of the header. If the header + the content doesn't fit in; * maxDictSize the beginning of the content is truncated to make room, since it; * is presumed that the most profitable content is at the end of the dictionary,; * since that is the cheapest to reference.; *; * `dictContentSize` must be >= ZDICT_CONTENTSIZE_MIN bytes.; * `maxDictSize` must be >= max(dictContentSize, ZSTD_DICTSIZE_MIN).; *; * @return: size of dictionary stored into `dstDictBuffer` (<= `maxDictSize`),; * or an error code, which can be tested by ZDICT_isError().; * Note: ZDICT_finalizeDictionary() will push notifications into stderr if; * instructed to, using notificationLevel>0.; * NOTE: This function currently may fail in several edge cases including:; * * Not enough samples; * * Samples are uncompressible; * * Samples are all exactly the same; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:38,Availability,error,error,38,/**< extracts dictID; @return zero if error (not a valid dictionary) */,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:44,Availability,error,error,44,/* returns dict header size; returns a ZSTD error code on failure */,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:58,Availability,failure,failure,58,/* returns dict header size; returns a ZSTD error code on failure */,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:35,Performance,optimiz,optimization,35,/* Number of steps : Only used for optimization : 0 means default (40) : Higher means more parameters checked */,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:91,Performance,optimiz,optimization,91,/* Number of threads : constraint: 0 < nbThreads : 1 means single-threaded : Only used for optimization : Ignored if ZSTD_MULTITHREAD is not defined */,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:58,Performance,optimiz,optimization,58,"/* Percentage of samples used for training: Only used for optimization : the first nbSamples * splitPoint samples will be used to training, the last nbSamples * (1 - splitPoint) samples will be used for testing, 0 means default (1.0), 1.0 when all samples are used for both training and testing */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:203,Testability,test,testing,203,"/* Percentage of samples used for training: Only used for optimization : the first nbSamples * splitPoint samples will be used to training, the last nbSamples * (1 - splitPoint) samples will be used for testing, 0 means default (1.0), 1.0 when all samples are used for both training and testing */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:287,Testability,test,testing,287,"/* Percentage of samples used for training: Only used for optimization : the first nbSamples * splitPoint samples will be used to training, the last nbSamples * (1 - splitPoint) samples will be used for testing, 0 means default (1.0), 1.0 when all samples are used for both training and testing */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:3,Testability,log,log,3,/* log of size of frequency array : constraint: 0 < f <= 31 : 1 means default(20)*/,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:35,Performance,optimiz,optimization,35,/* Number of steps : Only used for optimization : 0 means default (40) : Higher means more parameters checked */,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:91,Performance,optimiz,optimization,91,/* Number of threads : constraint: 0 < nbThreads : 1 means single-threaded : Only used for optimization : Ignored if ZSTD_MULTITHREAD is not defined */,MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:58,Performance,optimiz,optimization,58,"/* Percentage of samples used for training: Only used for optimization : the first nbSamples * splitPoint samples will be used to training, the last nbSamples * (1 - splitPoint) samples will be used for testing, 0 means default (0.75), 1.0 when all samples are used for both training and testing */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:203,Testability,test,testing,203,"/* Percentage of samples used for training: Only used for optimization : the first nbSamples * splitPoint samples will be used to training, the last nbSamples * (1 - splitPoint) samples will be used for testing, 0 means default (0.75), 1.0 when all samples are used for both training and testing */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:288,Testability,test,testing,288,"/* Percentage of samples used for training: Only used for optimization : the first nbSamples * splitPoint samples will be used to training, the last nbSamples * (1 - splitPoint) samples will be used for testing, 0 means default (0.75), 1.0 when all samples are used for both training and testing */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:437,Availability,error,error,437,"/*! ZDICT_trainFromBuffer_cover():; * Train a dictionary from an array of samples using the COVER algorithm.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * The resulting dictionary will be saved into `dictBuffer`.; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_trainFromBuffer_cover() requires about 9 bytes of memory for each input byte.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:537,Availability,failure,failure,537,"/*! ZDICT_trainFromBuffer_cover():; * Train a dictionary from an array of samples using the COVER algorithm.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * The resulting dictionary will be saved into `dictBuffer`.; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_trainFromBuffer_cover() requires about 9 bytes of memory for each input byte.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:462,Testability,test,tested,462,"/*! ZDICT_trainFromBuffer_cover():; * Train a dictionary from an array of samples using the COVER algorithm.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * The resulting dictionary will be saved into `dictBuffer`.; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_trainFromBuffer_cover() requires about 9 bytes of memory for each input byte.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:746,Availability,error,error,746,"/*! ZDICT_optimizeTrainFromBuffer_cover():; * The same requirements as above hold for all the parameters except `parameters`.; * This function tries many parameter combinations and picks the best parameters.; * `*parameters` is filled with the best parameters found,; * dictionary constructed with those parameters is stored in `dictBuffer`.; *; * All of the parameters d, k, steps are optional.; * If d is non-zero then we don't check multiple values of d, otherwise we check d = {6, 8}.; * if steps is zero it defaults to its default value.; * If k is non-zero then we don't check multiple values of k, otherwise we check steps values in [50, 2000].; *; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * On success `*parameters` contains the parameters selected.; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_optimizeTrainFromBuffer_cover() requires about 8 bytes of memory for each input byte and additionally another 5 bytes of memory for each byte of memory for each thread.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:908,Availability,failure,failure,908,"/*! ZDICT_optimizeTrainFromBuffer_cover():; * The same requirements as above hold for all the parameters except `parameters`.; * This function tries many parameter combinations and picks the best parameters.; * `*parameters` is filled with the best parameters found,; * dictionary constructed with those parameters is stored in `dictBuffer`.; *; * All of the parameters d, k, steps are optional.; * If d is non-zero then we don't check multiple values of d, otherwise we check d = {6, 8}.; * if steps is zero it defaults to its default value.; * If k is non-zero then we don't check multiple values of k, otherwise we check steps values in [50, 2000].; *; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * On success `*parameters` contains the parameters selected.; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_optimizeTrainFromBuffer_cover() requires about 8 bytes of memory for each input byte and additionally another 5 bytes of memory for each byte of memory for each thread.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:771,Testability,test,tested,771,"/*! ZDICT_optimizeTrainFromBuffer_cover():; * The same requirements as above hold for all the parameters except `parameters`.; * This function tries many parameter combinations and picks the best parameters.; * `*parameters` is filled with the best parameters found,; * dictionary constructed with those parameters is stored in `dictBuffer`.; *; * All of the parameters d, k, steps are optional.; * If d is non-zero then we don't check multiple values of d, otherwise we check d = {6, 8}.; * if steps is zero it defaults to its default value.; * If k is non-zero then we don't check multiple values of k, otherwise we check steps values in [50, 2000].; *; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * On success `*parameters` contains the parameters selected.; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_optimizeTrainFromBuffer_cover() requires about 8 bytes of memory for each input byte and additionally another 5 bytes of memory for each byte of memory for each thread.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:562,Availability,error,error,562,"/*! ZDICT_trainFromBuffer_fastCover():; * Train a dictionary from an array of samples using a modified version of COVER algorithm.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * d and k are required.; * All other parameters are optional, will use default values if not provided; * The resulting dictionary will be saved into `dictBuffer`.; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_trainFromBuffer_fastCover() requires 6 * 2^f bytes of memory.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:662,Availability,failure,failure,662,"/*! ZDICT_trainFromBuffer_fastCover():; * Train a dictionary from an array of samples using a modified version of COVER algorithm.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * d and k are required.; * All other parameters are optional, will use default values if not provided; * The resulting dictionary will be saved into `dictBuffer`.; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_trainFromBuffer_fastCover() requires 6 * 2^f bytes of memory.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:587,Testability,test,tested,587,"/*! ZDICT_trainFromBuffer_fastCover():; * Train a dictionary from an array of samples using a modified version of COVER algorithm.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * d and k are required.; * All other parameters are optional, will use default values if not provided; * The resulting dictionary will be saved into `dictBuffer`.; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_trainFromBuffer_fastCover() requires 6 * 2^f bytes of memory.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:893,Availability,error,error,893,"/*! ZDICT_optimizeTrainFromBuffer_fastCover():; * The same requirements as above hold for all the parameters except `parameters`.; * This function tries many parameter combinations (specifically, k and d combinations); * and picks the best parameters. `*parameters` is filled with the best parameters found,; * dictionary constructed with those parameters is stored in `dictBuffer`.; * All of the parameters d, k, steps, f, and accel are optional.; * If d is non-zero then we don't check multiple values of d, otherwise we check d = {6, 8}.; * if steps is zero it defaults to its default value.; * If k is non-zero then we don't check multiple values of k, otherwise we check steps values in [50, 2000].; * If f is zero, default value of 20 is used.; * If accel is zero, default value of 1 is used.; *; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * On success `*parameters` contains the parameters selected.; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_optimizeTrainFromBuffer_fastCover() requires about 6 * 2^f bytes of memory for each thread.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:1055,Availability,failure,failure,1055,"/*! ZDICT_optimizeTrainFromBuffer_fastCover():; * The same requirements as above hold for all the parameters except `parameters`.; * This function tries many parameter combinations (specifically, k and d combinations); * and picks the best parameters. `*parameters` is filled with the best parameters found,; * dictionary constructed with those parameters is stored in `dictBuffer`.; * All of the parameters d, k, steps, f, and accel are optional.; * If d is non-zero then we don't check multiple values of d, otherwise we check d = {6, 8}.; * if steps is zero it defaults to its default value.; * If k is non-zero then we don't check multiple values of k, otherwise we check steps values in [50, 2000].; * If f is zero, default value of 20 is used.; * If accel is zero, default value of 1 is used.; *; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * On success `*parameters` contains the parameters selected.; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_optimizeTrainFromBuffer_fastCover() requires about 6 * 2^f bytes of memory for each thread.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:918,Testability,test,tested,918,"/*! ZDICT_optimizeTrainFromBuffer_fastCover():; * The same requirements as above hold for all the parameters except `parameters`.; * This function tries many parameter combinations (specifically, k and d combinations); * and picks the best parameters. `*parameters` is filled with the best parameters found,; * dictionary constructed with those parameters is stored in `dictBuffer`.; * All of the parameters d, k, steps, f, and accel are optional.; * If d is non-zero then we don't check multiple values of d, otherwise we check d = {6, 8}.; * if steps is zero it defaults to its default value.; * If k is non-zero then we don't check multiple values of k, otherwise we check steps values in [50, 2000].; * If f is zero, default value of 20 is used.; * If accel is zero, default value of 1 is used.; *; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * On success `*parameters` contains the parameters selected.; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_optimizeTrainFromBuffer_fastCover() requires about 6 * 2^f bytes of memory for each thread.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:500,Availability,error,error,500,"/*! ZDICT_trainFromBuffer_legacy():; * Train a dictionary from an array of samples.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * The resulting dictionary will be saved into `dictBuffer`.; * `parameters` is optional and can be provided with values set to 0 to mean ""default"".; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; * Note: ZDICT_trainFromBuffer_legacy() will send notifications into stderr if instructed to, using notificationLevel>0.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:600,Availability,failure,failure,600,"/*! ZDICT_trainFromBuffer_legacy():; * Train a dictionary from an array of samples.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * The resulting dictionary will be saved into `dictBuffer`.; * `parameters` is optional and can be provided with values set to 0 to mean ""default"".; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; * Note: ZDICT_trainFromBuffer_legacy() will send notifications into stderr if instructed to, using notificationLevel>0.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:525,Testability,test,tested,525,"/*! ZDICT_trainFromBuffer_legacy():; * Train a dictionary from an array of samples.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * The resulting dictionary will be saved into `dictBuffer`.; * `parameters` is optional and can be provided with values set to 0 to mean ""default"".; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; * Note: ZDICT_trainFromBuffer_legacy() will send notifications into stderr if instructed to, using notificationLevel>0.; */",MatchSource.CODE_COMMENT,builtins/zstd/zdict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:10,Integrability,Depend,Dependency,10,/* ====== Dependency ======*/,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:83,Performance,load,load,83,"/* It isn't required but allows to generate better code, saving a function pointer load from the IAT and an indirect jump.*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:599,Modifiability,extend,extend,599,"/*******************************************************************************; Introduction. zstd, short for Zstandard, is a fast lossless compression algorithm, targeting; real-time compression scenarios at zlib-level and better compression ratios.; The zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed.; *******************************************************************************/; /*------ Version ------*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1047,Performance,perform,performed,1047,"/*******************************************************************************; Introduction. zstd, short for Zstandard, is a fast lossless compression algorithm, targeting; real-time compression scenarios at zlib-level and better compression ratios.; The zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed.; *******************************************************************************/; /*------ Version ------*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1241,Security,access,accessed,1241,"/*******************************************************************************; Introduction. zstd, short for Zstandard, is a fast lossless compression algorithm, targeting; real-time compression scenarios at zlib-level and better compression ratios.; The zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed.; *******************************************************************************/; /*------ Version ------*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:780,Usability,Simpl,Simple,780,"/*******************************************************************************; Introduction. zstd, short for Zstandard, is a fast lossless compression algorithm, targeting; real-time compression scenarios at zlib-level and better compression ratios.; The zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed.; *******************************************************************************/; /*------ Version ------*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1092,Usability,Simpl,Simple,1092,"/*******************************************************************************; Introduction. zstd, short for Zstandard, is a fast lossless compression algorithm, targeting; real-time compression scenarios at zlib-level and better compression ratios.; The zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed.; *******************************************************************************/; /*------ Version ------*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:104,Deployability,RELEASE,RELEASE,104,"/*! ZSTD_versionNumber() :; * Return runtime library version, the value is (MAJOR*100*100 + MINOR*100 + RELEASE). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:373,Availability,error,error,373,"/***************************************; * Simple API; ***************************************/; /*! ZSTD_compress() :; * Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:195,Energy Efficiency,allocate,allocated,195,"/***************************************; * Simple API; ***************************************/; /*! ZSTD_compress() :; * Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:410,Testability,test,tested,410,"/***************************************; * Simple API; ***************************************/; /*! ZSTD_compress() :; * Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:44,Usability,Simpl,Simple,44,"/***************************************; * Simple API; ***************************************/; /*! ZSTD_compress() :; * Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:378,Availability,error,errorCode,378,"/*! ZSTD_decompress() :; * `compressedSize` : must be the _exact_ size of some number of compressed and/or skippable frames.; * `dstCapacity` is an upper bound of originalSize to regenerate.; * If user cannot imply a maximum upper bound, it's better to use streaming mode to decompress data.; * @return : the number of bytes decompressed into `dst` (<= `dstCapacity`),; * or an errorCode if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:414,Testability,test,tested,414,"/*! ZSTD_decompress() :; * `compressedSize` : must be the _exact_ size of some number of compressed and/or skippable frames.; * `dstCapacity` is an upper bound of originalSize to regenerate.; * If user cannot imply a maximum upper bound, it's better to use streaming mode to decompress data.; * @return : the number of bytes decompressed into `dst` (<= `dstCapacity`),; * or an errorCode if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:399,Availability,error,error,399,"/*! ZSTD_getFrameContentSize() : requires v1.3.0+; * `src` should point to the start of a ZSTD encoded frame.; * `srcSize` must be at least as large as the frame header.; * hint : any size >= `ZSTD_frameHeaderSize_max` is large enough.; * @return : - decompressed size of `src` frame content, if known; * - ZSTD_CONTENTSIZE_UNKNOWN if the size cannot be determined; * - ZSTD_CONTENTSIZE_ERROR if an error occurred (e.g. invalid magic number, srcSize too small); * note 1 : a 0 return value means the frame is valid but ""empty"".; * note 2 : decompressed size is an optional field, it may not be present, typically in streaming mode.; * When `return==ZSTD_CONTENTSIZE_UNKNOWN`, data to decompress could be any size.; * In which case, it's necessary to use streaming mode to decompress data.; * Optionally, application can rely on some implicit limit,; * as ZSTD_decompress() only needs an upper bound of decompressed size.; * (For example, data could be necessarily cut into blocks <= 16 KB).; * note 3 : decompressed size is always present when compression is completed using single-pass functions,; * such as ZSTD_compress(), ZSTD_compressCCtx() ZSTD_compress_usingDict() or ZSTD_compress_usingCDict().; * note 4 : decompressed size can be very large (64-bits value),; * potentially larger than what local system can handle as a single memory segment.; * In which case, it's necessary to use streaming mode to decompress data.; * note 5 : If source is untrusted, decompressed size could be wrong or intentionally modified.; * Always ensure return value fits within application's authorized limits.; * Each application can set its own limits.; * note 6 : This function replaces ZSTD_getDecompressedSize() */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1579,Security,authoriz,authorized,1579,"/*! ZSTD_getFrameContentSize() : requires v1.3.0+; * `src` should point to the start of a ZSTD encoded frame.; * `srcSize` must be at least as large as the frame header.; * hint : any size >= `ZSTD_frameHeaderSize_max` is large enough.; * @return : - decompressed size of `src` frame content, if known; * - ZSTD_CONTENTSIZE_UNKNOWN if the size cannot be determined; * - ZSTD_CONTENTSIZE_ERROR if an error occurred (e.g. invalid magic number, srcSize too small); * note 1 : a 0 return value means the frame is valid but ""empty"".; * note 2 : decompressed size is an optional field, it may not be present, typically in streaming mode.; * When `return==ZSTD_CONTENTSIZE_UNKNOWN`, data to decompress could be any size.; * In which case, it's necessary to use streaming mode to decompress data.; * Optionally, application can rely on some implicit limit,; * as ZSTD_decompress() only needs an upper bound of decompressed size.; * (For example, data could be necessarily cut into blocks <= 16 KB).; * note 3 : decompressed size is always present when compression is completed using single-pass functions,; * such as ZSTD_compress(), ZSTD_compressCCtx() ZSTD_compress_usingDict() or ZSTD_compress_usingCDict().; * note 4 : decompressed size can be very large (64-bits value),; * potentially larger than what local system can handle as a single memory segment.; * In which case, it's necessary to use streaming mode to decompress data.; * note 5 : If source is untrusted, decompressed size could be wrong or intentionally modified.; * Always ensure return value fits within application's authorized limits.; * Each application can set its own limits.; * note 6 : This function replaces ZSTD_getDecompressedSize() */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:215,Availability,error,error,215,"/*! ZSTD_getDecompressedSize() :; * NOTE: This function is now obsolete, in favor of ZSTD_getFrameContentSize().; * Both functions work the same way, but ZSTD_getDecompressedSize() blends; * ""empty"", ""unknown"" and ""error"" results to the same return value (0),; * while ZSTD_getFrameContentSize() gives them separate return values.; * @return : decompressed size of `src` frame content _if known and not empty_, 0 otherwise. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:295,Availability,error,error,295,"/*! ZSTD_findFrameCompressedSize() :; * `src` should point to the start of a ZSTD frame or skippable frame.; * `srcSize` must be >= first frame size; * @return : the compressed size of the first frame starting at `src`,; * suitable to pass as `srcSize` to `ZSTD_decompress` or similar,; * or an error code if input is invalid */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:47,Availability,error,error,47,/*!< tells if a `size_t` function result is an error code */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:38,Availability,error,error,38,/*!< provides readable string from an error code */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:31,Availability,avail,available,31,"/*!< maximum compression level available */; /***************************************; * Explicit context; ***************************************/; /*= Compression context; * When compressing many times,; * it is recommended to allocate a context just once,; * and re-use it for each successive compression operation.; * This will make workload friendlier for system's memory.; * Note : re-using context is just a speed / resource optimization.; * It doesn't change the compression ratio, which remains identical.; * Note 2 : In multi-threaded environments,; * use one different context per thread for parallel execution.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:229,Energy Efficiency,allocate,allocate,229,"/*!< maximum compression level available */; /***************************************; * Explicit context; ***************************************/; /*= Compression context; * When compressing many times,; * it is recommended to allocate a context just once,; * and re-use it for each successive compression operation.; * This will make workload friendlier for system's memory.; * Note : re-using context is just a speed / resource optimization.; * It doesn't change the compression ratio, which remains identical.; * Note 2 : In multi-threaded environments,; * use one different context per thread for parallel execution.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:432,Performance,optimiz,optimization,432,"/*!< maximum compression level available */; /***************************************; * Explicit context; ***************************************/; /*= Compression context; * When compressing many times,; * it is recommended to allocate a context just once,; * and re-use it for each successive compression operation.; * This will make workload friendlier for system's memory.; * Note : re-using context is just a speed / resource optimization.; * It doesn't change the compression ratio, which remains identical.; * Note 2 : In multi-threaded environments,; * use one different context per thread for parallel execution.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:530,Performance,multi-thread,multi-threaded,530,"/*!< maximum compression level available */; /***************************************; * Explicit context; ***************************************/; /*= Compression context; * When compressing many times,; * it is recommended to allocate a context just once,; * and re-use it for each successive compression operation.; * This will make workload friendlier for system's memory.; * Note : re-using context is just a speed / resource optimization.; * It doesn't change the compression ratio, which remains identical.; * Note 2 : In multi-threaded environments,; * use one different context per thread for parallel execution.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:84,Energy Efficiency,allocate,allocate,84,"/*= Decompression context; * When decompressing many times,; * it is recommended to allocate a context only once,; * and re-use it for each successive compression operation.; * This will make workload friendlier for system's memory.; * Use one context per thread for parallel execution. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:73,Energy Efficiency,allocate,allocated,73,"/*! ZSTD_decompressDCtx() :; * Same as ZSTD_decompress(),; * requires an allocated ZSTD_DCtx.; * Compatible with sticky parameters.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:763,Availability,redundant,redundant,763,"/***************************************; * Advanced compression API; ***************************************/; /* API design :; * Parameters are pushed one by one into an existing context,; * using ZSTD_CCtx_set*() functions.; * Pushed parameters are sticky : they are valid for next compressed frame, and any subsequent frame.; * ""sticky"" parameters are applicable to `ZSTD_compress2()` and `ZSTD_compressStream*()` !; * __They do not apply to ""simple"" one-shot variants such as ZSTD_compressCCtx()__ .; *; * It's possible to reset all parameters to ""default"" using ZSTD_CCtx_reset().; *; * This API supercedes all other ""advanced"" API entry points in the experimental section.; * In the future, we expect to remove from experimental API entry points which are redundant with this API.; */; /* Compression strategies, listed from fastest to strongest */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:763,Safety,redund,redundant,763,"/***************************************; * Advanced compression API; ***************************************/; /* API design :; * Parameters are pushed one by one into an existing context,; * using ZSTD_CCtx_set*() functions.; * Pushed parameters are sticky : they are valid for next compressed frame, and any subsequent frame.; * ""sticky"" parameters are applicable to `ZSTD_compress2()` and `ZSTD_compressStream*()` !; * __They do not apply to ""simple"" one-shot variants such as ZSTD_compressCCtx()__ .; *; * It's possible to reset all parameters to ""default"" using ZSTD_CCtx_reset().; *; * This API supercedes all other ""advanced"" API entry points in the experimental section.; * In the future, we expect to remove from experimental API entry points which are redundant with this API.; */; /* Compression strategies, listed from fastest to strongest */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:447,Usability,simpl,simple,447,"/***************************************; * Advanced compression API; ***************************************/; /* API design :; * Parameters are pushed one by one into an existing context,; * using ZSTD_CCtx_set*() functions.; * Pushed parameters are sticky : they are valid for next compressed frame, and any subsequent frame.; * ""sticky"" parameters are applicable to `ZSTD_compress2()` and `ZSTD_compressStream*()` !; * __They do not apply to ""simple"" one-shot variants such as ZSTD_compressCCtx()__ .; *; * It's possible to reset all parameters to ""default"" using ZSTD_CCtx_reset().; *; * This API supercedes all other ""advanced"" API entry points in the experimental section.; * In the future, we expect to remove from experimental API entry points which are redundant with this API.; */; /* Compression strategies, listed from fastest to strongest */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:718,Availability,down,down,718,"/* Set compression parameters according to pre-defined cLevel table.; * Note that exact compression parameters are dynamically determined,; * depending on both compression level and srcSize (when known).; * Default level is ZSTD_CLEVEL_DEFAULT==3.; * Special: value 0 means default, which is controlled by ZSTD_CLEVEL_DEFAULT.; * Note 1 : it's possible to pass a negative compression level.; * Note 2 : setting a level does not automatically set all other compression parameters; * to default. Setting this will however eventually dynamically impact the compression; * parameters which have not been manually set. The manually set; * ones will 'stick'. */; /* Advanced compression parameters :; * It's possible to pin down compression parameters to some specific values.; * In which case, these values are no longer dynamically selected by the compressor */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:142,Integrability,depend,depending,142,"/* Set compression parameters according to pre-defined cLevel table.; * Note that exact compression parameters are dynamically determined,; * depending on both compression level and srcSize (when known).; * Default level is ZSTD_CLEVEL_DEFAULT==3.; * Special: value 0 means default, which is controlled by ZSTD_CLEVEL_DEFAULT.; * Note 1 : it's possible to pass a negative compression level.; * Note 2 : setting a level does not automatically set all other compression parameters; * to default. Setting this will however eventually dynamically impact the compression; * parameters which have not been manually set. The manually set; * ones will 'stick'. */; /* Advanced compression parameters :; * It's possible to pin down compression parameters to some specific values.; * In which case, these values are no longer dynamically selected by the compressor */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:57,Energy Efficiency,power,power,57,"/* Maximum allowed back-reference distance, expressed as power of 2.; * This will set a memory budget for streaming decompression,; * with larger values requiring more memory; * and typically compressing more.; * Must be clamped between ZSTD_WINDOWLOG_MIN and ZSTD_WINDOWLOG_MAX.; * Special: value 0 means ""use default windowLog"".; * Note: Using a windowLog greater than ZSTD_WINDOWLOG_LIMIT_DEFAULT; * requires explicitly allowing such size at streaming decompression stage. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:41,Energy Efficiency,power,power,41,"/* Size of the initial probe table, as a power of 2.; * Resulting memory usage is (1 << (hashLog+2)).; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX.; * Larger tables improve compression ratio of strategies <= dFast,; * and improve speed of strategies > dFast.; * Special: value 0 means ""use default hashLog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:89,Security,hash,hashLog,89,"/* Size of the initial probe table, as a power of 2.; * Resulting memory usage is (1 << (hashLog+2)).; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX.; * Larger tables improve compression ratio of strategies <= dFast,; * and improve speed of strategies > dFast.; * Special: value 0 means ""use default hashLog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:318,Security,hash,hashLog,318,"/* Size of the initial probe table, as a power of 2.; * Resulting memory usage is (1 << (hashLog+2)).; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX.; * Larger tables improve compression ratio of strategies <= dFast,; * and improve speed of strategies > dFast.; * Special: value 0 means ""use default hashLog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:46,Energy Efficiency,power,power,46,"/* Size of the multi-probe search table, as a power of 2.; * Resulting memory usage is (1 << (chainLog+2)).; * Must be clamped between ZSTD_CHAINLOG_MIN and ZSTD_CHAINLOG_MAX.; * Larger tables result in better and slower compression.; * This parameter is useless for ""fast"" strategy.; * It's still useful when using ""dfast"" strategy,; * in which case it defines a secondary probe table.; * Special: value 0 means ""use default chainLog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:35,Energy Efficiency,power,power,35,"/* Number of search attempts, as a power of 2.; * More attempts result in better and slower compression.; * This parameter is useless for ""fast"" and ""dFast"" strategies.; * Special: value 0 means ""use default searchLog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:24,Integrability,depend,depends,24,"/* Impact of this field depends on strategy.; * For strategies btopt, btultra & btultra2:; * Length of Match considered ""good enough"" to stop search.; * Larger values make compression stronger, and slower.; * For strategy fast:; * Distance between match sampling.; * Larger values make compression faster, and weaker.; * Special: value 0 means ""use default targetLength"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:54,Energy Efficiency,power,power,54,"/* Size of the table for long distance matching, as a power of 2.; * Larger values increase memory usage and compression ratio,; * but decrease compression speed.; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX; * default: windowlog - 7.; * Special: value 0 means ""automatically determine hashlog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:306,Security,hash,hashlog,306,"/* Size of the table for long distance matching, as a power of 2.; * Larger values increase memory usage and compression ratio,; * but decrease compression speed.; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX; * default: windowlog - 7.; * Special: value 0 means ""automatically determine hashlog"". */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:38,Security,hash,hash,38,"/* Log size of each bucket in the LDM hash table for collision resolution.; * Larger values improve collision resolution but decrease compression speed.; * The maximum value is ZSTD_LDM_BUCKETSIZELOG_MAX.; * Special: value 0 means ""use default value"" (default: 3). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3,Testability,Log,Log,3,"/* Log size of each bucket in the LDM hash table for collision resolution.; * Larger values improve collision resolution but decrease compression speed.; * The maximum value is ZSTD_LDM_BUCKETSIZELOG_MAX.; * Special: value 0 means ""use default value"" (default: 3). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:192,Performance,optimiz,optimizing,192,"/* Frequency of inserting/looking up entries into the LDM hash table.; * Must be clamped between 0 and (ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN).; * Default is MAX(0, (windowLog - ldmHashLog)), optimizing hash table usage.; * Larger values improve compression speed.; * Deviating far from default value will likely result in a compression ratio decrease.; * Special: value 0 means ""automatically determine hashRateLog"". */; /* frame parameters */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:58,Security,hash,hash,58,"/* Frequency of inserting/looking up entries into the LDM hash table.; * Must be clamped between 0 and (ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN).; * Default is MAX(0, (windowLog - ldmHashLog)), optimizing hash table usage.; * Larger values improve compression speed.; * Deviating far from default value will likely result in a compression ratio decrease.; * Special: value 0 means ""automatically determine hashRateLog"". */; /* frame parameters */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:203,Security,hash,hash,203,"/* Frequency of inserting/looking up entries into the LDM hash table.; * Must be clamped between 0 and (ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN).; * Default is MAX(0, (windowLog - ldmHashLog)), optimizing hash table usage.; * Larger values improve compression speed.; * Deviating far from default value will likely result in a compression ratio decrease.; * Special: value 0 means ""automatically determine hashRateLog"". */; /* frame parameters */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:404,Security,hash,hashRateLog,404,"/* Frequency of inserting/looking up entries into the LDM hash table.; * Must be clamped between 0 and (ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN).; * Default is MAX(0, (windowLog - ldmHashLog)), optimizing hash table usage.; * Larger values improve compression speed.; * Deviating far from default value will likely result in a compression ratio decrease.; * Special: value 0 means ""automatically determine hashRateLog"". */; /* frame parameters */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:13,Security,checksum,checksum,13,/* A 32-bits checksum of content is written at end of frame (default:0) */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:318,Availability,error,error,318,"/* When applicable, dictionary's ID is written into frame header (default:1) */; /* multi-threading parameters */; /* These parameters are only active if multi-threading is enabled (compiled with build macro ZSTD_MULTITHREAD).; * Otherwise, trying to set any other value than default (0) will be a no-op and return an error.; * In a situation where it's unknown if the linked library supports multi-threading or not,; * setting ZSTD_c_nbWorkers to any value >= 1 and consulting the return value provides a quick way to check this property.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:84,Performance,multi-thread,multi-threading,84,"/* When applicable, dictionary's ID is written into frame header (default:1) */; /* multi-threading parameters */; /* These parameters are only active if multi-threading is enabled (compiled with build macro ZSTD_MULTITHREAD).; * Otherwise, trying to set any other value than default (0) will be a no-op and return an error.; * In a situation where it's unknown if the linked library supports multi-threading or not,; * setting ZSTD_c_nbWorkers to any value >= 1 and consulting the return value provides a quick way to check this property.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:154,Performance,multi-thread,multi-threading,154,"/* When applicable, dictionary's ID is written into frame header (default:1) */; /* multi-threading parameters */; /* These parameters are only active if multi-threading is enabled (compiled with build macro ZSTD_MULTITHREAD).; * Otherwise, trying to set any other value than default (0) will be a no-op and return an error.; * In a situation where it's unknown if the linked library supports multi-threading or not,; * setting ZSTD_c_nbWorkers to any value >= 1 and consulting the return value provides a quick way to check this property.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:393,Performance,multi-thread,multi-threading,393,"/* When applicable, dictionary's ID is written into frame header (default:1) */; /* multi-threading parameters */; /* These parameters are only active if multi-threading is enabled (compiled with build macro ZSTD_MULTITHREAD).; * Otherwise, trying to set any other value than default (0) will be a no-op and return an error.; * In a situation where it's unknown if the linked library supports multi-threading or not,; * setting ZSTD_c_nbWorkers to any value >= 1 and consulting the return value provides a quick way to check this property.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:299,Performance,perform,performed,299,"/* Select how many threads will be spawned to compress in parallel.; * When nbWorkers >= 1, triggers asynchronous mode when invoking ZSTD_compressStream*() :; * ZSTD_compressStream*() consumes input and flush output if possible, but immediately gives back control to caller,; * while compression is performed in parallel, within worker thread(s).; * (note : a strong exception to this rule is when first invocation of ZSTD_compressStream2() sets ZSTD_e_end :; * in which case, ZSTD_compressStream2() delegates to ZSTD_compress2(), which is always a blocking call).; * More workers improve speed, but also increase memory usage.; * Default value is `0`, aka ""single-threaded mode"" : no worker is spawned,; * compression is performed inside Caller's thread, and all invocations are blocking */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:722,Performance,perform,performed,722,"/* Select how many threads will be spawned to compress in parallel.; * When nbWorkers >= 1, triggers asynchronous mode when invoking ZSTD_compressStream*() :; * ZSTD_compressStream*() consumes input and flush output if possible, but immediately gives back control to caller,; * while compression is performed in parallel, within worker thread(s).; * (note : a strong exception to this rule is when first invocation of ZSTD_compressStream2() sets ZSTD_e_end :; * in which case, ZSTD_compressStream2() delegates to ZSTD_compress2(), which is always a blocking call).; * More workers improve speed, but also increase memory usage.; * Default value is `0`, aka ""single-threaded mode"" : no worker is spawned,; * compression is performed inside Caller's thread, and all invocations are blocking */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:859,Availability,avail,available,859,"/* Control the overlap size, as a fraction of window size.; * The overlap size is an amount of data reloaded from previous job at the beginning of a new job.; * It helps preserve compression ratio, while each job is compressed in parallel.; * This value is enforced only when nbWorkers >= 1.; * Larger values increase compression ratio, but decrease speed.; * Possible values range from 0 to 9 :; * - 0 means ""default"" : value will be determined by the library, depending on strategy; * - 1 means ""no overlap""; * - 9 means ""full overlap"", using a full window size.; * Each intermediate rank increases/decreases load size by a factor 2 :; * 9: full window; 8: w/2; 7: w/4; 6: w/8; 5:w/16; 4: w/32; 3:w/64; 2:w/128; 1:no overlap; 0:default; * default value varies between 6 and 9, depending on strategy */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_c_rsyncable; * ZSTD_c_format; * ZSTD_c_forceMaxWindow; * ZSTD_c_forceAttachDict; * ZSTD_c_literalCompressionMode; * ZSTD_c_targetCBlockSize; * ZSTD_c_srcSizeHint; * ZSTD_c_enableDedicatedDictSearch; * ZSTD_c_stableInBuffer; * ZSTD_c_stableOutBuffer; * ZSTD_c_blockDelimiters; * ZSTD_c_validateSequences; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly;; * also, the enums values themselves are unstable and can still change.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:462,Integrability,depend,depending,462,"/* Control the overlap size, as a fraction of window size.; * The overlap size is an amount of data reloaded from previous job at the beginning of a new job.; * It helps preserve compression ratio, while each job is compressed in parallel.; * This value is enforced only when nbWorkers >= 1.; * Larger values increase compression ratio, but decrease speed.; * Possible values range from 0 to 9 :; * - 0 means ""default"" : value will be determined by the library, depending on strategy; * - 1 means ""no overlap""; * - 9 means ""full overlap"", using a full window size.; * Each intermediate rank increases/decreases load size by a factor 2 :; * 9: full window; 8: w/2; 7: w/4; 6: w/8; 5:w/16; 4: w/32; 3:w/64; 2:w/128; 1:no overlap; 0:default; * default value varies between 6 and 9, depending on strategy */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_c_rsyncable; * ZSTD_c_format; * ZSTD_c_forceMaxWindow; * ZSTD_c_forceAttachDict; * ZSTD_c_literalCompressionMode; * ZSTD_c_targetCBlockSize; * ZSTD_c_srcSizeHint; * ZSTD_c_enableDedicatedDictSearch; * ZSTD_c_stableInBuffer; * ZSTD_c_stableOutBuffer; * ZSTD_c_blockDelimiters; * ZSTD_c_validateSequences; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly;; * also, the enums values themselves are unstable and can still change.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:779,Integrability,depend,depending,779,"/* Control the overlap size, as a fraction of window size.; * The overlap size is an amount of data reloaded from previous job at the beginning of a new job.; * It helps preserve compression ratio, while each job is compressed in parallel.; * This value is enforced only when nbWorkers >= 1.; * Larger values increase compression ratio, but decrease speed.; * Possible values range from 0 to 9 :; * - 0 means ""default"" : value will be determined by the library, depending on strategy; * - 1 means ""no overlap""; * - 9 means ""full overlap"", using a full window size.; * Each intermediate rank increases/decreases load size by a factor 2 :; * 9: full window; 8: w/2; 7: w/4; 6: w/8; 5:w/16; 4: w/32; 3:w/64; 2:w/128; 1:no overlap; 0:default; * default value varies between 6 and 9, depending on strategy */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_c_rsyncable; * ZSTD_c_format; * ZSTD_c_forceMaxWindow; * ZSTD_c_forceAttachDict; * ZSTD_c_literalCompressionMode; * ZSTD_c_targetCBlockSize; * ZSTD_c_srcSizeHint; * ZSTD_c_enableDedicatedDictSearch; * ZSTD_c_stableInBuffer; * ZSTD_c_stableOutBuffer; * ZSTD_c_blockDelimiters; * ZSTD_c_validateSequences; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly;; * also, the enums values themselves are unstable and can still change.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:611,Performance,load,load,611,"/* Control the overlap size, as a fraction of window size.; * The overlap size is an amount of data reloaded from previous job at the beginning of a new job.; * It helps preserve compression ratio, while each job is compressed in parallel.; * This value is enforced only when nbWorkers >= 1.; * Larger values increase compression ratio, but decrease speed.; * Possible values range from 0 to 9 :; * - 0 means ""default"" : value will be determined by the library, depending on strategy; * - 1 means ""no overlap""; * - 9 means ""full overlap"", using a full window size.; * Each intermediate rank increases/decreases load size by a factor 2 :; * 9: full window; 8: w/2; 7: w/4; 6: w/8; 5:w/16; 4: w/32; 3:w/64; 2:w/128; 1:no overlap; 0:default; * default value varies between 6 and 9, depending on strategy */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_c_rsyncable; * ZSTD_c_format; * ZSTD_c_forceMaxWindow; * ZSTD_c_forceAttachDict; * ZSTD_c_literalCompressionMode; * ZSTD_c_targetCBlockSize; * ZSTD_c_srcSizeHint; * ZSTD_c_enableDedicatedDictSearch; * ZSTD_c_stableInBuffer; * ZSTD_c_stableOutBuffer; * ZSTD_c_blockDelimiters; * ZSTD_c_validateSequences; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly;; * also, the enums values themselves are unstable and can still change.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1359,Security,access,access,1359,"/* Control the overlap size, as a fraction of window size.; * The overlap size is an amount of data reloaded from previous job at the beginning of a new job.; * It helps preserve compression ratio, while each job is compressed in parallel.; * This value is enforced only when nbWorkers >= 1.; * Larger values increase compression ratio, but decrease speed.; * Possible values range from 0 to 9 :; * - 0 means ""default"" : value will be determined by the library, depending on strategy; * - 1 means ""no overlap""; * - 9 means ""full overlap"", using a full window size.; * Each intermediate rank increases/decreases load size by a factor 2 :; * 9: full window; 8: w/2; 7: w/4; 6: w/8; 5:w/16; 4: w/32; 3:w/64; 2:w/128; 1:no overlap; 0:default; * default value varies between 6 and 9, depending on strategy */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_c_rsyncable; * ZSTD_c_format; * ZSTD_c_forceMaxWindow; * ZSTD_c_forceAttachDict; * ZSTD_c_literalCompressionMode; * ZSTD_c_targetCBlockSize; * ZSTD_c_srcSizeHint; * ZSTD_c_enableDedicatedDictSearch; * ZSTD_c_stableInBuffer; * ZSTD_c_stableOutBuffer; * ZSTD_c_blockDelimiters; * ZSTD_c_validateSequences; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly;; * also, the enums values themselves are unstable and can still change.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:145,Availability,error,error,145,"/*! ZSTD_cParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - lower and upper bounds, both inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:242,Availability,error,error,242,"/*! ZSTD_cParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - lower and upper bounds, both inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:276,Testability,test,tested,276,"/*! ZSTD_cParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - lower and upper bounds, both inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:259,Availability,error,error,259,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:727,Availability,error,error,727,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:500,Deployability,update,updated,500,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:266,Integrability,depend,depending,266,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:426,Performance,multi-thread,multi-threading,426,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:574,Security,hash,hashLog,574,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:752,Testability,test,tested,752,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:270,Availability,error,error,270,"/*! ZSTD_CCtx_setPledgedSrcSize() :; * Total input data size to be compressed as a single frame.; * Value will be written in frame header, unless if explicitly forbidden using ZSTD_c_contentSizeFlag.; * This value will also be controlled at end of frame, and trigger an error if not respected.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : pledgedSrcSize==0 actually means zero, aka an empty frame.; * In order to mean ""unknown content size"", pass constant ZSTD_CONTENTSIZE_UNKNOWN.; * ZSTD_CONTENTSIZE_UNKNOWN is default value for any new frame.; * Note 2 : pledgedSrcSize is only valid once, for the next frame.; * It's discarded at the end of the frame, and replaced by ZSTD_CONTENTSIZE_UNKNOWN.; * Note 3 : Whenever all input data is provided and consumed in a single round,; * for example with ZSTD_compress2(),; * or invoking immediately ZSTD_compressStream2(,,,ZSTD_e_end),; * this value is automatically overridden by srcSize instead.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:316,Availability,error,error,316,"/*! ZSTD_CCtx_setPledgedSrcSize() :; * Total input data size to be compressed as a single frame.; * Value will be written in frame header, unless if explicitly forbidden using ZSTD_c_contentSizeFlag.; * This value will also be controlled at end of frame, and trigger an error if not respected.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : pledgedSrcSize==0 actually means zero, aka an empty frame.; * In order to mean ""unknown content size"", pass constant ZSTD_CONTENTSIZE_UNKNOWN.; * ZSTD_CONTENTSIZE_UNKNOWN is default value for any new frame.; * Note 2 : pledgedSrcSize is only valid once, for the next frame.; * It's discarded at the end of the frame, and replaced by ZSTD_CONTENTSIZE_UNKNOWN.; * Note 3 : Whenever all input data is provided and consumed in a single round,; * for example with ZSTD_compress2(),; * or invoking immediately ZSTD_compressStream2(,,,ZSTD_e_end),; * this value is automatically overridden by srcSize instead.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:341,Testability,test,tested,341,"/*! ZSTD_CCtx_setPledgedSrcSize() :; * Total input data size to be compressed as a single frame.; * Value will be written in frame header, unless if explicitly forbidden using ZSTD_c_contentSizeFlag.; * This value will also be controlled at end of frame, and trigger an error if not respected.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : pledgedSrcSize==0 actually means zero, aka an empty frame.; * In order to mean ""unknown content size"", pass constant ZSTD_CONTENTSIZE_UNKNOWN.; * ZSTD_CONTENTSIZE_UNKNOWN is default value for any new frame.; * Note 2 : pledgedSrcSize is only valid once, for the next frame.; * It's discarded at the end of the frame, and replaced by ZSTD_CONTENTSIZE_UNKNOWN.; * Note 3 : Whenever all input data is provided and consumed in a single round,; * for example with ZSTD_compress2(),; * or invoking immediately ZSTD_compressStream2(,,,ZSTD_e_end),; * this value is automatically overridden by srcSize instead.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:217,Availability,error,error,217,"/*! ZSTD_CCtx_reset() :; * There are 2 different things that can be reset, independently or jointly :; * - The session : will stop compressing current frame, and make CCtx ready to start a new one.; * Useful after an error, or to interrupt any ongoing compression.; * Any internal data not yet flushed is cancelled.; * Compression parameters and dictionary remain unchanged.; * They will be used to compress next frame.; * Resetting session never fails.; * - The parameters : changes all parameters back to ""default"".; * This removes any reference to any dictionary too.; * Parameters can only be changed between 2 sessions (i.e. no compression is currently ongoing); * otherwise the reset fails, and function returns an error value (which can be tested using ZSTD_isError()); * - Both : similar to resetting the session, followed by resetting parameters.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:721,Availability,error,error,721,"/*! ZSTD_CCtx_reset() :; * There are 2 different things that can be reset, independently or jointly :; * - The session : will stop compressing current frame, and make CCtx ready to start a new one.; * Useful after an error, or to interrupt any ongoing compression.; * Any internal data not yet flushed is cancelled.; * Compression parameters and dictionary remain unchanged.; * They will be used to compress next frame.; * Resetting session never fails.; * - The parameters : changes all parameters back to ""default"".; * This removes any reference to any dictionary too.; * Parameters can only be changed between 2 sessions (i.e. no compression is currently ongoing); * otherwise the reset fails, and function returns an error value (which can be tested using ZSTD_isError()); * - Both : similar to resetting the session, followed by resetting parameters.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:747,Testability,test,tested,747,"/*! ZSTD_CCtx_reset() :; * There are 2 different things that can be reset, independently or jointly :; * - The session : will stop compressing current frame, and make CCtx ready to start a new one.; * Useful after an error, or to interrupt any ongoing compression.; * Any internal data not yet flushed is cancelled.; * Compression parameters and dictionary remain unchanged.; * They will be used to compress next frame.; * Resetting session never fails.; * - The parameters : changes all parameters back to ""default"".; * This removes any reference to any dictionary too.; * Parameters can only be changed between 2 sessions (i.e. no compression is currently ongoing); * otherwise the reset fails, and function returns an error value (which can be tested using ZSTD_isError()); * - Both : similar to resetting the session, followed by resetting parameters.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:606,Availability,error,error,606,"/*! ZSTD_compress2() :; * Behave the same as ZSTD_compressCCtx(), but compression parameters are set using the advanced API.; * ZSTD_compress2() always starts a new frame.; * Should cctx hold data from a previously unfinished frame, everything about it is forgotten.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - The function is always blocking, returns when compression is completed.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:643,Testability,test,tested,643,"/*! ZSTD_compress2() :; * Behave the same as ZSTD_compressCCtx(), but compression parameters are set using the advanced API.; * ZSTD_compress2() always starts a new frame.; * Should cctx hold data from a previously unfinished frame, everything about it is forgotten.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - The function is always blocking, returns when compression is completed.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:510,Availability,avail,available,510,"/* Select a size limit (in power of 2) beyond which; * the streaming API will refuse to allocate memory buffer; * in order to protect the host from unreasonable memory requirements.; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).; * Special: value 0 means ""use default maximum windowLog"". */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_d_format; * ZSTD_d_stableOutBuffer; * ZSTD_d_forceIgnoreChecksum; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:27,Energy Efficiency,power,power,27,"/* Select a size limit (in power of 2) beyond which; * the streaming API will refuse to allocate memory buffer; * in order to protect the host from unreasonable memory requirements.; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).; * Special: value 0 means ""use default maximum windowLog"". */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_d_format; * ZSTD_d_stableOutBuffer; * ZSTD_d_forceIgnoreChecksum; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:88,Energy Efficiency,allocate,allocate,88,"/* Select a size limit (in power of 2) beyond which; * the streaming API will refuse to allocate memory buffer; * in order to protect the host from unreasonable memory requirements.; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).; * Special: value 0 means ""use default maximum windowLog"". */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_d_format; * ZSTD_d_stableOutBuffer; * ZSTD_d_forceIgnoreChecksum; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:262,Energy Efficiency,allocate,allocated,262,"/* Select a size limit (in power of 2) beyond which; * the streaming API will refuse to allocate memory buffer; * in order to protect the host from unreasonable memory requirements.; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).; * Special: value 0 means ""use default maximum windowLog"". */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_d_format; * ZSTD_d_stableOutBuffer; * ZSTD_d_forceIgnoreChecksum; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:772,Security,access,access,772,"/* Select a size limit (in power of 2) beyond which; * the streaming API will refuse to allocate memory buffer; * in order to protect the host from unreasonable memory requirements.; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).; * Special: value 0 means ""use default maximum windowLog"". */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_d_format; * ZSTD_d_stableOutBuffer; * ZSTD_d_forceIgnoreChecksum; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:145,Availability,error,error,145,"/*! ZSTD_dParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - both lower and upper bounds, inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:242,Availability,error,error,242,"/*! ZSTD_dParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - both lower and upper bounds, inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:276,Testability,test,tested,276,"/*! ZSTD_dParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - both lower and upper bounds, inclusive; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:259,Availability,error,error,259,"/*! ZSTD_DCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_dParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_dParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is only possible during frame initialization (before starting decompression).; * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:414,Availability,error,error,414,"/*! ZSTD_DCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_dParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_dParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is only possible during frame initialization (before starting decompression).; * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:266,Integrability,depend,depending,266,"/*! ZSTD_DCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_dParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_dParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is only possible during frame initialization (before starting decompression).; * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:439,Testability,test,tested,439,"/*! ZSTD_DCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_dParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_dParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is only possible during frame initialization (before starting decompression).; * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:217,Availability,error,error,217,"/*! ZSTD_DCtx_reset() :; * Return a DCtx to clean state.; * Session and parameters can be reset jointly or separately.; * Parameters can only be reset when no active frame is being decompressed.; * @return : 0, or an error code, which can be tested with ZSTD_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:242,Testability,test,tested,242,"/*! ZSTD_DCtx_reset() :; * Return a DCtx to clean state.; * Session and parameters can be reset jointly or separately.; * Parameters can only be reset when no active frame is being decompressed.; * @return : 0, or an error code, which can be tested with ZSTD_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:45,Deployability,update,updated,45,/**< position where reading stopped. Will be updated. Necessarily 0 <= pos <= size */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:45,Deployability,update,updated,45,/**< position where writing stopped. Will be updated. Necessarily 0 <= pos <= size */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2081,Availability,error,error,2081,"he pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * o",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3061,Availability,error,error,3061,"s a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider a frame completed.; * flush operation is the same, and follows same rules as calling ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_end until it returns 0, at which point you are free to; * start a new frame.; * note: ZSTD_e_end will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if frame fully completed and fully flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * **********",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3930,Availability,error,error,3930,"ernal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider a frame completed.; * flush operation is the same, and follows same rules as calling ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_end until it returns 0, at which point you are free to; * start a new frame.; * note: ZSTD_e_end will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if frame fully completed and fully flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * *******************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:239,Deployability,release,release,239,"/*-***********************************************************************; * Streaming compression - HowTo; *; * A ZSTD_CStream object is required to track streaming operation.; * Use ZSTD_createCStream() and ZSTD_freeCStream() to create/release resources.; * ZSTD_CStream objects can be reused multiple times on consecutive compression operations.; * It is recommended to re-use ZSTD_CStream since it will play nicer with system's memory, by re-using already allocated memory.; *; * For parallel execution, use one separate ZSTD_CStream per thread.; *; * note : since v1.3.0, ZSTD_CStream and ZSTD_CCtx are the same thing.; *; * Parameters are sticky : when starting a new compression on the same context,; * it will re-use the same sticky parameters as previous compression session.; * When in doubt, it's recommended to fully initialize the context before usage.; * Use ZSTD_CCtx_reset() to reset the context and ZSTD_CCtx_setParameter(),; * ZSTD_CCtx_setPledgedSrcSize(), or ZSTD_CCtx_loadDictionary() and friends to; * set more specific parameters, the pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides ",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1243,Deployability,update,update,1243,"es.; * ZSTD_CStream objects can be reused multiple times on consecutive compression operations.; * It is recommended to re-use ZSTD_CStream since it will play nicer with system's memory, by re-using already allocated memory.; *; * For parallel execution, use one separate ZSTD_CStream per thread.; *; * note : since v1.3.0, ZSTD_CStream and ZSTD_CCtx are the same thing.; *; * Parameters are sticky : when starting a new compression on the same context,; * it will re-use the same sticky parameters as previous compression session.; * When in doubt, it's recommended to fully initialize the context before usage.; * Use ZSTD_CCtx_reset() to reset the context and ZSTD_CCtx_setParameter(),; * ZSTD_CCtx_setPledgedSrcSize(), or ZSTD_CCtx_loadDictionary() and friends to; * set more specific parameters, the pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compr",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2309,Deployability,update,updated,2309,"* Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:461,Energy Efficiency,allocate,allocated,461,"/*-***********************************************************************; * Streaming compression - HowTo; *; * A ZSTD_CStream object is required to track streaming operation.; * Use ZSTD_createCStream() and ZSTD_freeCStream() to create/release resources.; * ZSTD_CStream objects can be reused multiple times on consecutive compression operations.; * It is recommended to re-use ZSTD_CStream since it will play nicer with system's memory, by re-using already allocated memory.; *; * For parallel execution, use one separate ZSTD_CStream per thread.; *; * note : since v1.3.0, ZSTD_CStream and ZSTD_CCtx are the same thing.; *; * Parameters are sticky : when starting a new compression on the same context,; * it will re-use the same sticky parameters as previous compression session.; * When in doubt, it's recommended to fully initialize the context before usage.; * Use ZSTD_CCtx_reset() to reset the context and ZSTD_CCtx_setParameter(),; * ZSTD_CCtx_setPledgedSrcSize(), or ZSTD_CCtx_loadDictionary() and friends to; * set more specific parameters, the pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides ",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1083,Performance,load,load,1083,"/*-***********************************************************************; * Streaming compression - HowTo; *; * A ZSTD_CStream object is required to track streaming operation.; * Use ZSTD_createCStream() and ZSTD_freeCStream() to create/release resources.; * ZSTD_CStream objects can be reused multiple times on consecutive compression operations.; * It is recommended to re-use ZSTD_CStream since it will play nicer with system's memory, by re-using already allocated memory.; *; * For parallel execution, use one separate ZSTD_CStream per thread.; *; * note : since v1.3.0, ZSTD_CStream and ZSTD_CCtx are the same thing.; *; * Parameters are sticky : when starting a new compression on the same context,; * it will re-use the same sticky parameters as previous compression session.; * When in doubt, it's recommended to fully initialize the context before usage.; * Use ZSTD_CCtx_reset() to reset the context and ZSTD_CCtx_setParameter(),; * ZSTD_CCtx_setPledgedSrcSize(), or ZSTD_CCtx_loadDictionary() and friends to; * set more specific parameters, the pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides ",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3208,Performance,perform,perform,3208,"ernal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider a frame completed.; * flush operation is the same, and follows same rules as calling ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_end until it returns 0, at which point you are free to; * start a new frame.; * note: ZSTD_e_end will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if frame fully completed and fully flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * *******************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2106,Testability,test,tested,2106,"he pledged source size, or load a dictionary.; *; * Use ZSTD_compressStream2() with ZSTD_e_continue as many times as necessary to; * consume input stream. The function will automatically update both `pos`; * fields within `input` and `output`.; * Note that the function may not consume the entire input, for example, because; * the output buffer is already full, in which case `input.pos < input.size`.; * The caller must check if input has been entirely consumed.; * If not, the caller must make some room to receive more compressed data,; * and then present again remaining input data.; * note: ZSTD_e_continue is guaranteed to make some forward progress when called,; * but doesn't guarantee maximal forward progress. This is especially relevant; * when compressing with multiple threads. The call won't block if it can; * consume some input, but if it can't it will wait for some, but not all,; * output to be flushed.; * @return : provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * o",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3086,Testability,test,tested,3086,"s a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider a frame completed.; * flush operation is the same, and follows same rules as calling ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_end until it returns 0, at which point you are free to; * start a new frame.; * note: ZSTD_e_end will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if frame fully completed and fully flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * **********",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3955,Testability,test,tested,3955,"ernal buffers; * or an error code, which can be tested using ZSTD_isError().; *; * At any moment, it's possible to flush whatever data might remain stuck within internal buffer,; * using ZSTD_compressStream2() with ZSTD_e_flush. `output->pos` will be updated.; * Note that, if `output->size` is too small, a single invocation with ZSTD_e_flush might not be enough (return code > 0).; * In which case, make some room to receive more compressed data, and call again ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_flush until it returns 0, at which point you can change the; * operation.; * note: ZSTD_e_flush will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if internal buffers are entirely flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * Calling ZSTD_compressStream2() with ZSTD_e_end instructs to finish a frame.; * It will perform a flush and write frame epilogue.; * The epilogue is required for decoders to consider a frame completed.; * flush operation is the same, and follows same rules as calling ZSTD_compressStream2() with ZSTD_e_flush.; * You must continue calling ZSTD_compressStream2() with ZSTD_e_end until it returns 0, at which point you are free to; * start a new frame.; * note: ZSTD_e_end will flush as much output as possible, meaning when compressing with multiple threads, it will; * block until the flush is complete or the output buffer is full.; * @return : 0 if frame fully completed and fully flushed,; * >0 if some data still present within internal buffer (the value is minimal estimation of remaining size),; * or an error code, which can be tested using ZSTD_isError().; *; * *******************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:825,Availability,avail,available,825,"/*! ZSTD_compressStream2() :; * Behaves about the same as ZSTD_compressStream, with additional control on end directive.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - Compression parameters cannot be changed once compression is started (save a list of exceptions in multi-threading mode); * - output->pos must be <= dstCapacity, input->pos must be <= srcSize; * - output->pos and input->pos will be updated. They are guaranteed to remain below their respective limit.; * - endOp must be a valid directive; * - When nbWorkers==0 (default), function is blocking : it completes its job before returning to caller.; * - When nbWorkers>=1, function is non-blocking : it copies a portion of input, distributes jobs to internal worker threads, flush to output whatever is available,; * and then immediately returns, just indicating that there is some data remaining to be flushed.; * The function nonetheless guarantees forward progress : it will return only after it reads or write at least 1+ byte.; * - Exception : if the first call requests a ZSTD_e_end directive and provides enough dstCapacity, the function delegates to ZSTD_compress2() which is always blocking.; * - @return provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; * if @return != 0, flush is not fully completed, there is still some data left within internal buffers.; * This is useful for ZSTD_e_flush, since in this case more flushes are necessary to empty all buffers.; * For ZSTD_e_end, @return == 0 when internal buffers are fully flushed and frame is completed.; * - after a ZSTD_e_end directive, if internal buffer is not fully flushed (@return != 0),; * only ZSTD_e_end or ZSTD_e_flush operations are allowed.; * Before starting a new compression job, or changing compression parameters,; * it is required to fully flush internal buffers.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1325,Availability,error,error,1325,"/*! ZSTD_compressStream2() :; * Behaves about the same as ZSTD_compressStream, with additional control on end directive.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - Compression parameters cannot be changed once compression is started (save a list of exceptions in multi-threading mode); * - output->pos must be <= dstCapacity, input->pos must be <= srcSize; * - output->pos and input->pos will be updated. They are guaranteed to remain below their respective limit.; * - endOp must be a valid directive; * - When nbWorkers==0 (default), function is blocking : it completes its job before returning to caller.; * - When nbWorkers>=1, function is non-blocking : it copies a portion of input, distributes jobs to internal worker threads, flush to output whatever is available,; * and then immediately returns, just indicating that there is some data remaining to be flushed.; * The function nonetheless guarantees forward progress : it will return only after it reads or write at least 1+ byte.; * - Exception : if the first call requests a ZSTD_e_end directive and provides enough dstCapacity, the function delegates to ZSTD_compress2() which is always blocking.; * - @return provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; * if @return != 0, flush is not fully completed, there is still some data left within internal buffers.; * This is useful for ZSTD_e_flush, since in this case more flushes are necessary to empty all buffers.; * For ZSTD_e_end, @return == 0 when internal buffers are fully flushed and frame is completed.; * - after a ZSTD_e_end directive, if internal buffer is not fully flushed (@return != 0),; * only ZSTD_e_end or ZSTD_e_flush operations are allowed.; * Before starting a new compression job, or changing compression parameters,; * it is required to fully flush internal buffers.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:459,Deployability,update,updated,459,"/*! ZSTD_compressStream2() :; * Behaves about the same as ZSTD_compressStream, with additional control on end directive.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - Compression parameters cannot be changed once compression is started (save a list of exceptions in multi-threading mode); * - output->pos must be <= dstCapacity, input->pos must be <= srcSize; * - output->pos and input->pos will be updated. They are guaranteed to remain below their respective limit.; * - endOp must be a valid directive; * - When nbWorkers==0 (default), function is blocking : it completes its job before returning to caller.; * - When nbWorkers>=1, function is non-blocking : it copies a portion of input, distributes jobs to internal worker threads, flush to output whatever is available,; * and then immediately returns, just indicating that there is some data remaining to be flushed.; * The function nonetheless guarantees forward progress : it will return only after it reads or write at least 1+ byte.; * - Exception : if the first call requests a ZSTD_e_end directive and provides enough dstCapacity, the function delegates to ZSTD_compress2() which is always blocking.; * - @return provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; * if @return != 0, flush is not fully completed, there is still some data left within internal buffers.; * This is useful for ZSTD_e_flush, since in this case more flushes are necessary to empty all buffers.; * For ZSTD_e_end, @return == 0 when internal buffers are fully flushed and frame is completed.; * - after a ZSTD_e_end directive, if internal buffer is not fully flushed (@return != 0),; * only ZSTD_e_end or ZSTD_e_flush operations are allowed.; * Before starting a new compression job, or changing compression parameters,; * it is required to fully flush internal buffers.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:326,Performance,multi-thread,multi-threading,326,"/*! ZSTD_compressStream2() :; * Behaves about the same as ZSTD_compressStream, with additional control on end directive.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - Compression parameters cannot be changed once compression is started (save a list of exceptions in multi-threading mode); * - output->pos must be <= dstCapacity, input->pos must be <= srcSize; * - output->pos and input->pos will be updated. They are guaranteed to remain below their respective limit.; * - endOp must be a valid directive; * - When nbWorkers==0 (default), function is blocking : it completes its job before returning to caller.; * - When nbWorkers>=1, function is non-blocking : it copies a portion of input, distributes jobs to internal worker threads, flush to output whatever is available,; * and then immediately returns, just indicating that there is some data remaining to be flushed.; * The function nonetheless guarantees forward progress : it will return only after it reads or write at least 1+ byte.; * - Exception : if the first call requests a ZSTD_e_end directive and provides enough dstCapacity, the function delegates to ZSTD_compress2() which is always blocking.; * - @return provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; * if @return != 0, flush is not fully completed, there is still some data left within internal buffers.; * This is useful for ZSTD_e_flush, since in this case more flushes are necessary to empty all buffers.; * For ZSTD_e_end, @return == 0 when internal buffers are fully flushed and frame is completed.; * - after a ZSTD_e_end directive, if internal buffer is not fully flushed (@return != 0),; * only ZSTD_e_end or ZSTD_e_flush operations are allowed.; * Before starting a new compression job, or changing compression parameters,; * it is required to fully flush internal buffers.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1350,Testability,test,tested,1350,"/*! ZSTD_compressStream2() :; * Behaves about the same as ZSTD_compressStream, with additional control on end directive.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - Compression parameters cannot be changed once compression is started (save a list of exceptions in multi-threading mode); * - output->pos must be <= dstCapacity, input->pos must be <= srcSize; * - output->pos and input->pos will be updated. They are guaranteed to remain below their respective limit.; * - endOp must be a valid directive; * - When nbWorkers==0 (default), function is blocking : it completes its job before returning to caller.; * - When nbWorkers>=1, function is non-blocking : it copies a portion of input, distributes jobs to internal worker threads, flush to output whatever is available,; * and then immediately returns, just indicating that there is some data remaining to be flushed.; * The function nonetheless guarantees forward progress : it will return only after it reads or write at least 1+ byte.; * - Exception : if the first call requests a ZSTD_e_end directive and provides enough dstCapacity, the function delegates to ZSTD_compress2() which is always blocking.; * - @return provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; * if @return != 0, flush is not fully completed, there is still some data left within internal buffers.; * This is useful for ZSTD_e_flush, since in this case more flushes are necessary to empty all buffers.; * For ZSTD_e_end, @return == 0 when internal buffers are fully flushed and frame is completed.; * - after a ZSTD_e_end directive, if internal buffer is not fully flushed (@return != 0),; * only ZSTD_e_end or ZSTD_e_flush operations are allowed.; * Before starting a new compression job, or changing compression parameters,; * it is required to fully flush internal buffers.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:644,Energy Efficiency,reduce,reduce,644,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:910,Energy Efficiency,reduce,reduce,910,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:459,Integrability,interface,interface,459,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:580,Integrability,interface,interface,580,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:665,Integrability,interface,interface,665,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:764,Integrability,interface,interface,764,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:323,Performance,perform,performance,323,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:621,Performance,perform,performance,621,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:721,Performance,perform,performance,721,"/* These buffer sizes are softly recommended.; * They are not required : ZSTD_compressStream*() happily accepts any buffer size, for both input and output.; * Respecting the recommended size just makes it a bit easier for ZSTD_compressStream*(),; * reducing the amount of memory shuffling and buffering, resulting in minor performance savings.; *; * However, note that these recommendations are from the perspective of a C caller program.; * If the streaming interface is invoked from some other language,; * especially managed ones such as Java or Go, through a foreign function interface such as jni or cgo,; * a major performance rule is to reduce crossing such interface to an absolute minimum.; * It's not rare that performance ends being spent more into the interface, rather than compression itself.; * In which cases, prefer using large buffers, as large as practical,; * for both input and output, to reduce the nb of roundtrips.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:323,Availability,redundant,redundant,323,"/**< recommended size for output buffer. Guarantee to successfully flush at least one complete compressed block. */; /* *****************************************************************************; * This following is a legacy streaming API.; * It can be replaced by ZSTD_CCtx_reset() and ZSTD_compressStream2().; * It is redundant, but remains fully supported.; * Advanced parameters and dictionary compression can only be used through the; * new API.; ******************************************************************************/; /*!; * Equivalent to:; *; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:323,Safety,redund,redundant,323,"/**< recommended size for output buffer. Guarantee to successfully flush at least one complete compressed block. */; /* *****************************************************************************; * This following is a legacy streaming API.; * It can be replaced by ZSTD_CCtx_reset() and ZSTD_compressStream2().; * It is redundant, but remains fully supported.; * Advanced parameters and dictionary compression can only be used through the; * new API.; ******************************************************************************/; /*!; * Equivalent to:; *; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:648,Usability,clear,clear,648,"/**< recommended size for output buffer. Guarantee to successfully flush at least one complete compressed block. */; /* *****************************************************************************; * This following is a legacy streaming API.; * It can be replaced by ZSTD_CCtx_reset() and ZSTD_compressStream2().; * It is redundant, but remains fully supported.; * Advanced parameters and dictionary compression can only be used through the; * new API.; ******************************************************************************/; /*!; * Equivalent to:; *; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:209,Availability,error,error,209,"/*!; * Alternative for ZSTD_compressStream2(zcs, output, input, ZSTD_e_continue).; * NOTE: The return value is different. ZSTD_compressStream() returns a hint for; * the next read size (if non-zero and not an error). ZSTD_compressStream2(); * returns the minimum nb of bytes left to flush (if non-zero and not an error).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:313,Availability,error,error,313,"/*!; * Alternative for ZSTD_compressStream2(zcs, output, input, ZSTD_e_continue).; * NOTE: The return value is different. ZSTD_compressStream() returns a hint for; * the next read size (if non-zero and not an error). ZSTD_compressStream2(); * returns the minimum nb of bytes left to flush (if non-zero and not an error).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1275,Availability,error,error,1275,"/*-***************************************************************************; * Streaming decompression - HowTo; *; * A ZSTD_DStream object is required to track streaming operations.; * Use ZSTD_createDStream() and ZSTD_freeDStream() to create/release resources.; * ZSTD_DStream objects can be re-used multiple times.; *; * Use ZSTD_initDStream() to start a new decompression operation.; * @return : recommended first input size; * Alternatively, use advanced API to set specific properties.; *; * Use ZSTD_decompressStream() repetitively to consume your input.; * The function will update both `pos` fields.; * If `input.pos < input.size`, some input has not been consumed.; * It's up to the caller to present again remaining data.; * The function tries to flush all data decoded immediately, respecting output buffer size.; * If `output.pos < output.size`, decoder has flushed everything it could.; * But if `output.pos == output.size`, there might be some data left within internal buffers.,; * In which case, call ZSTD_decompressStream() again to flush whatever remains in the buffer.; * Note : with no additional input provided, amount of data flushed is necessarily <= ZSTD_BLOCKSIZE_MAX.; * @return : 0 when a frame is completely decoded and fully flushed,; * or an error code, which can be tested using ZSTD_isError(),; * or any other value > 0, which means there is still some decoding or flushing to do to complete current frame :; * the return value is a suggested next input size (just a hint for better latency); * that will never request more than the remaining frame size.; * *******************************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:246,Deployability,release,release,246,"/*-***************************************************************************; * Streaming decompression - HowTo; *; * A ZSTD_DStream object is required to track streaming operations.; * Use ZSTD_createDStream() and ZSTD_freeDStream() to create/release resources.; * ZSTD_DStream objects can be re-used multiple times.; *; * Use ZSTD_initDStream() to start a new decompression operation.; * @return : recommended first input size; * Alternatively, use advanced API to set specific properties.; *; * Use ZSTD_decompressStream() repetitively to consume your input.; * The function will update both `pos` fields.; * If `input.pos < input.size`, some input has not been consumed.; * It's up to the caller to present again remaining data.; * The function tries to flush all data decoded immediately, respecting output buffer size.; * If `output.pos < output.size`, decoder has flushed everything it could.; * But if `output.pos == output.size`, there might be some data left within internal buffers.,; * In which case, call ZSTD_decompressStream() again to flush whatever remains in the buffer.; * Note : with no additional input provided, amount of data flushed is necessarily <= ZSTD_BLOCKSIZE_MAX.; * @return : 0 when a frame is completely decoded and fully flushed,; * or an error code, which can be tested using ZSTD_isError(),; * or any other value > 0, which means there is still some decoding or flushing to do to complete current frame :; * the return value is a suggested next input size (just a hint for better latency); * that will never request more than the remaining frame size.; * *******************************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:585,Deployability,update,update,585,"/*-***************************************************************************; * Streaming decompression - HowTo; *; * A ZSTD_DStream object is required to track streaming operations.; * Use ZSTD_createDStream() and ZSTD_freeDStream() to create/release resources.; * ZSTD_DStream objects can be re-used multiple times.; *; * Use ZSTD_initDStream() to start a new decompression operation.; * @return : recommended first input size; * Alternatively, use advanced API to set specific properties.; *; * Use ZSTD_decompressStream() repetitively to consume your input.; * The function will update both `pos` fields.; * If `input.pos < input.size`, some input has not been consumed.; * It's up to the caller to present again remaining data.; * The function tries to flush all data decoded immediately, respecting output buffer size.; * If `output.pos < output.size`, decoder has flushed everything it could.; * But if `output.pos == output.size`, there might be some data left within internal buffers.,; * In which case, call ZSTD_decompressStream() again to flush whatever remains in the buffer.; * Note : with no additional input provided, amount of data flushed is necessarily <= ZSTD_BLOCKSIZE_MAX.; * @return : 0 when a frame is completely decoded and fully flushed,; * or an error code, which can be tested using ZSTD_isError(),; * or any other value > 0, which means there is still some decoding or flushing to do to complete current frame :; * the return value is a suggested next input size (just a hint for better latency); * that will never request more than the remaining frame size.; * *******************************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1518,Performance,latency,latency,1518,"/*-***************************************************************************; * Streaming decompression - HowTo; *; * A ZSTD_DStream object is required to track streaming operations.; * Use ZSTD_createDStream() and ZSTD_freeDStream() to create/release resources.; * ZSTD_DStream objects can be re-used multiple times.; *; * Use ZSTD_initDStream() to start a new decompression operation.; * @return : recommended first input size; * Alternatively, use advanced API to set specific properties.; *; * Use ZSTD_decompressStream() repetitively to consume your input.; * The function will update both `pos` fields.; * If `input.pos < input.size`, some input has not been consumed.; * It's up to the caller to present again remaining data.; * The function tries to flush all data decoded immediately, respecting output buffer size.; * If `output.pos < output.size`, decoder has flushed everything it could.; * But if `output.pos == output.size`, there might be some data left within internal buffers.,; * In which case, call ZSTD_decompressStream() again to flush whatever remains in the buffer.; * Note : with no additional input provided, amount of data flushed is necessarily <= ZSTD_BLOCKSIZE_MAX.; * @return : 0 when a frame is completely decoded and fully flushed,; * or an error code, which can be tested using ZSTD_isError(),; * or any other value > 0, which means there is still some decoding or flushing to do to complete current frame :; * the return value is a suggested next input size (just a hint for better latency); * that will never request more than the remaining frame size.; * *******************************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1300,Testability,test,tested,1300,"/*-***************************************************************************; * Streaming decompression - HowTo; *; * A ZSTD_DStream object is required to track streaming operations.; * Use ZSTD_createDStream() and ZSTD_freeDStream() to create/release resources.; * ZSTD_DStream objects can be re-used multiple times.; *; * Use ZSTD_initDStream() to start a new decompression operation.; * @return : recommended first input size; * Alternatively, use advanced API to set specific properties.; *; * Use ZSTD_decompressStream() repetitively to consume your input.; * The function will update both `pos` fields.; * If `input.pos < input.size`, some input has not been consumed.; * It's up to the caller to present again remaining data.; * The function tries to flush all data decoded immediately, respecting output buffer size.; * If `output.pos < output.size`, decoder has flushed everything it could.; * But if `output.pos == output.size`, there might be some data left within internal buffers.,; * In which case, call ZSTD_decompressStream() again to flush whatever remains in the buffer.; * Note : with no additional input provided, amount of data flushed is necessarily <= ZSTD_BLOCKSIZE_MAX.; * @return : 0 when a frame is completely decoded and fully flushed,; * or an error code, which can be tested using ZSTD_isError(),; * or any other value > 0, which means there is still some decoding or flushing to do to complete current frame :; * the return value is a suggested next input size (just a hint for better latency); * that will never request more than the remaining frame size.; * *******************************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:71,Availability,redundant,redundant,71,"/*===== Streaming decompression functions =====*/; /* This function is redundant with the advanced API and equivalent to:; *; * ZSTD_DCtx_reset(zds, ZSTD_reset_session_only);; * ZSTD_DCtx_refDDict(zds, NULL);; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:71,Safety,redund,redundant,71,"/*===== Streaming decompression functions =====*/; /* This function is redundant with the advanced API and equivalent to:; *; * ZSTD_DCtx_reset(zds, ZSTD_reset_session_only);; * ZSTD_DCtx_refDDict(zds, NULL);; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:478,Performance,load,loads,478,"/*!< recommended size for output buffer. Guarantee to successfully flush at least one complete block in all circumstances. */; /**************************; * Simple dictionary API; ***************************/; /*! ZSTD_compress_usingDict() :; * Compression at an explicit compression level using a Dictionary.; * A dictionary can be any arbitrary data segment (also called a prefix),; * or a buffer with specified information (see dictBuilder/zdict.h).; * Note : This function loads the dictionary, resulting in significant startup delay.; * It's intended for a dictionary used only once.; * Note 2 : When `dict == NULL || dictSize < 8` no dictionary is used. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:158,Usability,Simpl,Simple,158,"/*!< recommended size for output buffer. Guarantee to successfully flush at least one complete block in all circumstances. */; /**************************; * Simple dictionary API; ***************************/; /*! ZSTD_compress_usingDict() :; * Compression at an explicit compression level using a Dictionary.; * A dictionary can be any arbitrary data segment (also called a prefix),; * or a buffer with specified information (see dictBuilder/zdict.h).; * Note : This function loads the dictionary, resulting in significant startup delay.; * It's intended for a dictionary used only once.; * Note 2 : When `dict == NULL || dictSize < 8` no dictionary is used. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:169,Performance,load,loads,169,"/*! ZSTD_decompress_usingDict() :; * Decompression using a known Dictionary.; * Dictionary must be identical to the one used during compression.; * Note : This function loads the dictionary, resulting in significant startup delay.; * It's intended for a dictionary used only once.; * Note : When `dict == NULL || dictSize < 8` no dictionary is used. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:490,Deployability,release,released,490,"/*! ZSTD_createCDict() :; * When compressing multiple messages or blocks using the same dictionary,; * it's recommended to digest the dictionary only once, since it's a costly operation.; * ZSTD_createCDict() will create a state from digesting a dictionary.; * The resulting state can be used for future compression operations with very limited startup cost.; * ZSTD_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.; * @dictBuffer can be released after ZSTD_CDict creation, because its content is copied within CDict.; * Note 1 : Consider experimental function `ZSTD_createCDict_byReference()` if you prefer to not duplicate @dictBuffer content.; * Note 2 : A ZSTD_CDict can be created from an empty @dictBuffer,; * in which case the only thing that it transports is the @compressionLevel.; * This can be useful in a pipeline featuring ZSTD_compress_usingCDict() exclusively,; * expecting a ZSTD_CDict parameter with any data, including those without a known dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:869,Deployability,pipeline,pipeline,869,"/*! ZSTD_createCDict() :; * When compressing multiple messages or blocks using the same dictionary,; * it's recommended to digest the dictionary only once, since it's a costly operation.; * ZSTD_createCDict() will create a state from digesting a dictionary.; * The resulting state can be used for future compression operations with very limited startup cost.; * ZSTD_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.; * @dictBuffer can be released after ZSTD_CDict creation, because its content is copied within CDict.; * Note 1 : Consider experimental function `ZSTD_createCDict_byReference()` if you prefer to not duplicate @dictBuffer content.; * Note 2 : A ZSTD_CDict can be created from an empty @dictBuffer,; * in which case the only thing that it transports is the @compressionLevel.; * This can be useful in a pipeline featuring ZSTD_compress_usingCDict() exclusively,; * expecting a ZSTD_CDict parameter with any data, including those without a known dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:54,Integrability,message,messages,54,"/*! ZSTD_createCDict() :; * When compressing multiple messages or blocks using the same dictionary,; * it's recommended to digest the dictionary only once, since it's a costly operation.; * ZSTD_createCDict() will create a state from digesting a dictionary.; * The resulting state can be used for future compression operations with very limited startup cost.; * ZSTD_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.; * @dictBuffer can be released after ZSTD_CDict creation, because its content is copied within CDict.; * Note 1 : Consider experimental function `ZSTD_createCDict_byReference()` if you prefer to not duplicate @dictBuffer content.; * Note 2 : A ZSTD_CDict can be created from an empty @dictBuffer,; * in which case the only thing that it transports is the @compressionLevel.; * This can be useful in a pipeline featuring ZSTD_compress_usingCDict() exclusively,; * expecting a ZSTD_CDict parameter with any data, including those without a known dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:424,Performance,concurren,concurrently,424,"/*! ZSTD_createCDict() :; * When compressing multiple messages or blocks using the same dictionary,; * it's recommended to digest the dictionary only once, since it's a costly operation.; * ZSTD_createCDict() will create a state from digesting a dictionary.; * The resulting state can be used for future compression operations with very limited startup cost.; * ZSTD_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.; * @dictBuffer can be released after ZSTD_CDict creation, because its content is copied within CDict.; * Note 1 : Consider experimental function `ZSTD_createCDict_byReference()` if you prefer to not duplicate @dictBuffer content.; * Note 2 : A ZSTD_CDict can be created from an empty @dictBuffer,; * in which case the only thing that it transports is the @compressionLevel.; * This can be useful in a pipeline featuring ZSTD_compress_usingCDict() exclusively,; * expecting a ZSTD_CDict parameter with any data, including those without a known dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:48,Energy Efficiency,allocate,allocated,48,/*! ZSTD_freeCDict() :; * Function frees memory allocated by ZSTD_createCDict(). */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:275,Security,checksum,checksum,275,"/*! ZSTD_compress_usingCDict() :; * Compression using a digested Dictionary.; * Recommended when same dictionary is used multiple times.; * Note : compression level is _decided at dictionary creation time_,; * and frame parameters are hardcoded (dictID=yes, contentSize=yes, checksum=no) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:141,Deployability,release,released,141,"/*! ZSTD_createDDict() :; * Create a digested dictionary, ready to start decompression operation without startup delay.; * dictBuffer can be released after DDict creation, as its content is copied inside DDict. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:48,Energy Efficiency,allocate,allocated,48,/*! ZSTD_freeDDict() :; * Function frees memory allocated with ZSTD_createDDict() */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:283,Performance,load,loaded,283,"/********************************; * Dictionary helper functions; *******************************/; /*! ZSTD_getDictID_fromDict() :; * Provides the dictID stored within dictionary.; * if @return == 0, the dictionary is not conformant with Zstandard specification.; * It can still be loaded, but as a content-only dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:74,Performance,load,loaded,74,"/*! ZSTD_getDictID_fromDDict() :; * Provides the dictID of the dictionary loaded into `ddict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:230,Performance,load,loaded,230,"/*! ZSTD_getDictID_fromDDict() :; * Provides the dictID of the dictionary loaded into `ddict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:695,Availability,failure,failure,695,"/*! ZSTD_getDictID_fromFrame() :; * Provides the dictID required to decompressed the frame stored within `src`.; * If @return == 0, the dictID could not be decoded.; * This could for one of the following reasons :; * - The frame does not require a dictionary to be decoded (most common case).; * - The frame was built with dictID intentionally removed. Whatever dictionary is necessary is a hidden information.; * Note : this use case also happens when using a non-conformant dictionary.; * - `srcSize` is too small, and as a result, the frame header could not be decoded (only possible if `srcSize < ZSTD_FRAMEHEADERSIZE_MAX`).; * - This is not a Zstandard frame.; * When identifying the exact failure cause, it's possible to use ZSTD_getFrameHeader(), which will provide a more precise error code. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:788,Availability,error,error,788,"/*! ZSTD_getDictID_fromFrame() :; * Provides the dictID required to decompressed the frame stored within `src`.; * If @return == 0, the dictID could not be decoded.; * This could for one of the following reasons :; * - The frame does not require a dictionary to be decoded (most common case).; * - The frame was built with dictID intentionally removed. Whatever dictionary is necessary is a hidden information.; * Note : this use case also happens when using a non-conformant dictionary.; * - `srcSize` is too small, and as a result, the frame header could not be decoded (only possible if `srcSize < ZSTD_FRAMEHEADERSIZE_MAX`).; * - This is not a Zstandard frame.; * When identifying the exact failure cause, it's possible to use ZSTD_getFrameHeader(), which will provide a more precise error code. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:636,Availability,error,error,636,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1141,Integrability,depend,dependent,1141,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:702,Performance,Load,Loading,702,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:943,Performance,load,load,943,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1001,Performance,Load,Loading,1001,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1118,Performance,latency,latency,1118,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1256,Performance,load,loading,1256,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:661,Testability,test,tested,661,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:537,Availability,error,error,537,"/*! ZSTD_CCtx_refCDict() :; * Reference a prepared dictionary, to be used for all next compressed frames.; * Note that compression parameters are enforced from within CDict,; * and supersede any compression parameter previously set within CCtx.; * The parameters ignored are labled as ""superseded-by-cdict"" in the ZSTD_cParameter enum docs.; * The ignored parameters will be used again if the CCtx is returned to no-dictionary mode.; * The dictionary will remain valid for future compressed frames using same CCtx.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Referencing a NULL CDict means ""return to no-dictionary mode"".; * Note 1 : Currently, only one dictionary can be managed.; * Referencing a new dictionary effectively ""discards"" any previous one.; * Note 2 : CDict is just referenced, its lifetime must outlive its usage within CCtx. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:562,Testability,test,tested,562,"/*! ZSTD_CCtx_refCDict() :; * Reference a prepared dictionary, to be used for all next compressed frames.; * Note that compression parameters are enforced from within CDict,; * and supersede any compression parameter previously set within CCtx.; * The parameters ignored are labled as ""superseded-by-cdict"" in the ZSTD_cParameter enum docs.; * The ignored parameters will be used again if the CCtx is returned to no-dictionary mode.; * The dictionary will remain valid for future compressed frames using same CCtx.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Referencing a NULL CDict means ""return to no-dictionary mode"".; * Note 1 : Currently, only one dictionary can be managed.; * Referencing a new dictionary effectively ""discards"" any previous one.; * Note 2 : CDict is just referenced, its lifetime must outlive its usage within CCtx. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:487,Availability,error,error,487,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1037,Integrability,depend,dependent,1037,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:311,Performance,perform,performing,311,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:356,Performance,perform,performs,356,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1139,Performance,latency,latency,1139,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1218,Performance,load,loadDictionary,1218,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:512,Testability,test,tested,512,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:227,Availability,error,error,227,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:676,Deployability,release,released,676,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:423,Performance,Load,Loading,423,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:524,Performance,latency,latency,524,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:557,Performance,load,load,557,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:691,Performance,load,loading,691,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:887,Performance,load,loaded,887,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:252,Testability,test,tested,252,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:208,Availability,error,error,208,"/*! ZSTD_DCtx_refDDict() :; * Reference a prepared dictionary, to be used to decompress next frames.; * The dictionary remains active for decompression of future frames using same DCtx.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : Currently, only one dictionary can be managed.; * Referencing a new dictionary effectively ""discards"" any previous one.; * Special: referencing a NULL DDict means ""return to no-dictionary mode"".; * Note 2 : DDict is just referenced, its lifetime must outlive its usage from DCtx.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:233,Testability,test,tested,233,"/*! ZSTD_DCtx_refDDict() :; * Reference a prepared dictionary, to be used to decompress next frames.; * The dictionary remains active for decompression of future frames using same DCtx.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : Currently, only one dictionary can be managed.; * Referencing a new dictionary effectively ""discards"" any previous one.; * Special: referencing a NULL DDict means ""return to no-dictionary mode"".; * Note 2 : DDict is just referenced, its lifetime must outlive its usage from DCtx.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:391,Availability,error,error,391,"/*! ZSTD_DCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) to decompress next frame.; * This is the reverse operation of ZSTD_CCtx_refPrefix(),; * and must use the same prefix as the one used during compression.; * Prefix is **only used once**. Reference is discarded at end of frame.; * End of frame is reached when ZSTD_decompressStream() returns 0.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : Adding any prefix (including NULL) invalidates any previously set prefix or dictionary; * Note 2 : Prefix buffer is referenced. It **must** outlive decompression.; * Prefix buffer must remain unmodified up to the end of frame,; * reached when ZSTD_decompressStream() returns 0.; * Note 3 : By default, the prefix is treated as raw content (ZSTD_dct_rawContent).; * Use ZSTD_CCtx_refPrefix_advanced() to alter dictMode (Experimental section); * Note 4 : Referencing a raw content prefix has almost no cpu nor memory cost.; * A full dictionary is more costly, as it requires building tables.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:416,Testability,test,tested,416,"/*! ZSTD_DCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) to decompress next frame.; * This is the reverse operation of ZSTD_CCtx_refPrefix(),; * and must use the same prefix as the one used during compression.; * Prefix is **only used once**. Reference is discarded at end of frame.; * End of frame is reached when ZSTD_decompressStream() returns 0.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : Adding any prefix (including NULL) invalidates any previously set prefix or dictionary; * Note 2 : Prefix buffer is referenced. It **must** outlive decompression.; * Prefix buffer must remain unmodified up to the end of frame,; * reached when ZSTD_decompressStream() returns 0.; * Note 3 : By default, the prefix is treated as raw content (ZSTD_dct_rawContent).; * Use ZSTD_CCtx_refPrefix_advanced() to alter dictMode (Experimental section); * Note 4 : Referencing a raw content prefix has almost no cpu nor memory cost.; * A full dictionary is more costly, as it requires building tables.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:163,Modifiability,evolve,evolve,163,/* === Memory management === */; /*! ZSTD_sizeof_*() :; * These functions give the _current_ memory usage of selected object.; * Note that object memory usage can evolve (increase or decrease) over time. */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:75,Testability,test,test,75,/* note : comparing this constant to an unsigned results in a tautological test */,MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:386,Energy Efficiency,allocate,allocated,386,"/* by default, the streaming decoder will refuse any frame; * requiring larger than (1<<ZSTD_WINDOWLOG_LIMIT_DEFAULT) window size,; * to preserve host's memory from unreasonable requirements.; * This limit can be overridden using ZSTD_DCtx_setParameter(,ZSTD_d_windowLogMax,).; * The limit does not apply for one-pass decoders (such as ZSTD_decompress()), since no additional memory is allocated */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:79,Availability,error,error,79,"/**< 1: generate a 32-bits checksum using XXH64 algorithm at end of frame, for error detection */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:85,Safety,detect,detection,85,"/**< 1: generate a 32-bits checksum using XXH64 algorithm at end of frame, for error detection */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:27,Security,checksum,checksum,27,"/**< 1: generate a 32-bits checksum using XXH64 algorithm at end of frame, for error detection */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:32,Performance,load,loaded,32,"/* ensures dictionary is always loaded as rawContent, even if it starts with ZSTD_MAGIC_DICTIONARY */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:14,Performance,load,load,14,"/* refuses to load a dictionary if it does not respect Zstandard's specification, starting with ZSTD_MAGIC_DICTIONARY */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:154,Modifiability,evolve,evolve,154,"/* Note: this enum and the behavior it controls are effectively internal; * implementation details of the compressor. They are expected to continue; * to evolve and should be considered only in the context of extremely; * advanced performance tuning.; *; * Zstd currently supports the use of a CDict in three ways:; *; * - The contents of the CDict can be copied into the working context. This; * means that the compression can search both the dictionary and input; * while operating on a single set of internal tables. This makes; * the compression faster per-byte of input. However, the initial copy of; * the CDict's tables incurs a fixed cost at the beginning of the; * compression. For small compressions (< 8 KB), that copy can dominate; * the cost of the compression.; *; * - The CDict's tables can be used in-place. In this model, compression is; * slower per input byte, because the compressor has to search two sets of; * tables. However, this model incurs no start-up cost (as long as the; * working context's tables can be reused). For small inputs, this can be; * faster than copying the CDict's tables.; *; * - The CDict's tables are not used at all, and instead we use the working; * context alone to reload the dictionary and use params based on the source; * size. See ZSTD_compress_insertDictionary() and ZSTD_compress_usingDict().; * This method is effective when the dictionary sizes are very small relative; * to the input size, and the input size is fairly large to begin with.; *; * Zstd has a simple internal heuristic that selects which strategy to use; * at the beginning of a compression. However, if experimentation shows that; * Zstd is making poor choices, it is possible to override that choice with; * this enum.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:231,Performance,perform,performance,231,"/* Note: this enum and the behavior it controls are effectively internal; * implementation details of the compressor. They are expected to continue; * to evolve and should be considered only in the context of extremely; * advanced performance tuning.; *; * Zstd currently supports the use of a CDict in three ways:; *; * - The contents of the CDict can be copied into the working context. This; * means that the compression can search both the dictionary and input; * while operating on a single set of internal tables. This makes; * the compression faster per-byte of input. However, the initial copy of; * the CDict's tables incurs a fixed cost at the beginning of the; * compression. For small compressions (< 8 KB), that copy can dominate; * the cost of the compression.; *; * - The CDict's tables can be used in-place. In this model, compression is; * slower per input byte, because the compressor has to search two sets of; * tables. However, this model incurs no start-up cost (as long as the; * working context's tables can be reused). For small inputs, this can be; * faster than copying the CDict's tables.; *; * - The CDict's tables are not used at all, and instead we use the working; * context alone to reload the dictionary and use params based on the source; * size. See ZSTD_compress_insertDictionary() and ZSTD_compress_usingDict().; * This method is effective when the dictionary sizes are very small relative; * to the input size, and the input size is fairly large to begin with.; *; * Zstd has a simple internal heuristic that selects which strategy to use; * at the beginning of a compression. However, if experimentation shows that; * Zstd is making poor choices, it is possible to override that choice with; * this enum.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1517,Usability,simpl,simple,1517,"/* Note: this enum and the behavior it controls are effectively internal; * implementation details of the compressor. They are expected to continue; * to evolve and should be considered only in the context of extremely; * advanced performance tuning.; *; * Zstd currently supports the use of a CDict in three ways:; *; * - The contents of the CDict can be copied into the working context. This; * means that the compression can search both the dictionary and input; * while operating on a single set of internal tables. This makes; * the compression faster per-byte of input. However, the initial copy of; * the CDict's tables incurs a fixed cost at the beginning of the; * compression. For small compressions (< 8 KB), that copy can dominate; * the cost of the compression.; *; * - The CDict's tables can be used in-place. In this model, compression is; * slower per input byte, because the compressor has to search two sets of; * tables. However, this model incurs no start-up cost (as long as the; * working context's tables can be reused). For small inputs, this can be; * faster than copying the CDict's tables.; *; * - The CDict's tables are not used at all, and instead we use the working; * context alone to reload the dictionary and use params based on the source; * size. See ZSTD_compress_insertDictionary() and ZSTD_compress_usingDict().; * This method is effective when the dictionary sizes are very small relative; * to the input size, and the input size is fairly large to begin with.; *; * Zstd has a simple internal heuristic that selects which strategy to use; * at the beginning of a compression. However, if experimentation shows that; * Zstd is making poor choices, it is possible to override that choice with; * this enum.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:74,Performance,load,loaded,74,"/*! ZSTD_getDictID_fromCDict() :; * Provides the dictID of the dictionary loaded into `cdict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:230,Performance,load,loaded,230,"/*! ZSTD_getDictID_fromCDict() :; * Provides the dictID of the dictionary loaded into `cdict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:228,Security,checksum,checksum,228,"/*! ZSTD_getParams() :; * same as ZSTD_getCParams(), but @return a full `ZSTD_parameters` object instead of sub-component `ZSTD_compressionParameters`.; * All fields of `ZSTD_frameParameters` are set to default : contentSize=1, checksum=0, noDictID=0 */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:112,Availability,error,error,112,"/*! ZSTD_checkCParams() :; * Ensure param values remain within authorized range.; * @return 0 on success, or an error code (can be checked with ZSTD_isError()) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:63,Security,authoriz,authorized,63,"/*! ZSTD_checkCParams() :; * Ensure param values remain within authorized range.; * @return 0 on success, or an error code (can be checked with ZSTD_isError()) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:345,Integrability,contract,contract,345,"/*! ZSTD_adjustCParams() :; * optimize params for a given `srcSize` and `dictSize`.; * `srcSize` can be unknown, in which case use ZSTD_CONTENTSIZE_UNKNOWN.; * `dictSize` must be `0` when there is no dictionary.; * cPar can be invalid : all parameters will be clamped within valid range in the @return struct.; * This function never fails (wide contract) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:30,Performance,optimiz,optimize,30,"/*! ZSTD_adjustCParams() :; * optimize params for a given `srcSize` and `dictSize`.; * `srcSize` can be unknown, in which case use ZSTD_CONTENTSIZE_UNKNOWN.; * `dictSize` must be `0` when there is no dictionary.; * cPar can be invalid : all parameters will be clamped within valid range in the @return struct.; * This function never fails (wide contract) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:73,Availability,REDUNDANT,REDUNDANT,73,"/*! ZSTD_compress_usingCDict_advanced() :; * Note : this function is now REDUNDANT.; * It can be replaced by ZSTD_compress2(), in combination with ZSTD_CCtx_loadDictionary() and other parameter setters.; * This prototype will be marked as deprecated and generate compilation warning in some future version */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:73,Safety,REDUND,REDUNDANT,73,"/*! ZSTD_compress_usingCDict_advanced() :; * Note : this function is now REDUNDANT.; * It can be replaced by ZSTD_compress2(), in combination with ZSTD_CCtx_loadDictionary() and other parameter setters.; * This prototype will be marked as deprecated and generate compilation warning in some future version */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:120,Performance,load,load,120,"/*! ZSTD_CCtx_loadDictionary_advanced() :; * Same as ZSTD_CCtx_loadDictionary(), but gives finer control over; * how to load the dictionary (by copy ? by reference ?); * and how to interpret it (automatic ? force raw mode ? full mode only ?) */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:262,Integrability,synchroniz,synchronization,262,"/* === experimental parameters === */; /* these parameters can be used with ZSTD_setParameter(); * they are not guaranteed to remain supported in the future */; /* Enables rsyncable mode,; * which makes compressed files more rsync friendly; * by adding periodic synchronization points to the compressed data.; * The target average block size is ZSTD_c_jobSize / 2.; * It's possible to modify the job size to increase or decrease; * the granularity of the synchronization point.; * Once the jobSize is smaller than the window size,; * it will result in compression ratio degradation.; * NOTE 1: rsyncable mode only works when multithreading is enabled.; * NOTE 2: rsyncable performs poorly in combination with long range mode,; * since it will decrease the effectiveness of synchronization points,; * though mileage may vary.; * NOTE 3: Rsyncable mode limits maximum compression speed to ~400 MB/s.; * If the selected compression level is already running significantly slower,; * the overall speed won't be significantly impacted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:455,Integrability,synchroniz,synchronization,455,"/* === experimental parameters === */; /* these parameters can be used with ZSTD_setParameter(); * they are not guaranteed to remain supported in the future */; /* Enables rsyncable mode,; * which makes compressed files more rsync friendly; * by adding periodic synchronization points to the compressed data.; * The target average block size is ZSTD_c_jobSize / 2.; * It's possible to modify the job size to increase or decrease; * the granularity of the synchronization point.; * Once the jobSize is smaller than the window size,; * it will result in compression ratio degradation.; * NOTE 1: rsyncable mode only works when multithreading is enabled.; * NOTE 2: rsyncable performs poorly in combination with long range mode,; * since it will decrease the effectiveness of synchronization points,; * though mileage may vary.; * NOTE 3: Rsyncable mode limits maximum compression speed to ~400 MB/s.; * If the selected compression level is already running significantly slower,; * the overall speed won't be significantly impacted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:773,Integrability,synchroniz,synchronization,773,"/* === experimental parameters === */; /* these parameters can be used with ZSTD_setParameter(); * they are not guaranteed to remain supported in the future */; /* Enables rsyncable mode,; * which makes compressed files more rsync friendly; * by adding periodic synchronization points to the compressed data.; * The target average block size is ZSTD_c_jobSize / 2.; * It's possible to modify the job size to increase or decrease; * the granularity of the synchronization point.; * Once the jobSize is smaller than the window size,; * it will result in compression ratio degradation.; * NOTE 1: rsyncable mode only works when multithreading is enabled.; * NOTE 2: rsyncable performs poorly in combination with long range mode,; * since it will decrease the effectiveness of synchronization points,; * though mileage may vary.; * NOTE 3: Rsyncable mode limits maximum compression speed to ~400 MB/s.; * If the selected compression level is already running significantly slower,; * the overall speed won't be significantly impacted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:673,Performance,perform,performs,673,"/* === experimental parameters === */; /* these parameters can be used with ZSTD_setParameter(); * they are not guaranteed to remain supported in the future */; /* Enables rsyncable mode,; * which makes compressed files more rsync friendly; * by adding periodic synchronization points to the compressed data.; * The target average block size is ZSTD_c_jobSize / 2.; * It's possible to modify the job size to increase or decrease; * the granularity of the synchronization point.; * Once the jobSize is smaller than the window size,; * it will result in compression ratio degradation.; * NOTE 1: rsyncable mode only works when multithreading is enabled.; * NOTE 2: rsyncable performs poorly in combination with long range mode,; * since it will decrease the effectiveness of synchronization points,; * though mileage may vary.; * NOTE 3: Rsyncable mode limits maximum compression speed to ~400 MB/s.; * If the selected compression level is already running significantly slower,; * the overall speed won't be significantly impacted.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1650,Performance,optimiz,optimized,1650,"sed into a CCtx, such as via; * ZSTD_CCtx_loadDictionary(), this param can be set on the CCtx to control; * whether the CDict that is created internally can use the feature or not.; *; * What it does:; *; * Normally, the internal data structures of the CDict are analogous to what; * would be stored in a CCtx after compressing the contents of a dictionary.; * To an approximation, a compression using a dictionary can then use those; * data structures to simply continue what is effectively a streaming; * compression where the simulated compression of the dictionary left off.; * Which is to say, the search structures in the CDict are normally the same; * format as in the CCtx.; *; * It is possible to do better, since the CDict is not like a CCtx: the search; * structures are written once during CDict creation, and then are only read; * after that, while the search structures in the CCtx are both read and; * written as the compression goes along. This means we can choose a search; * structure for the dictionary that is read-optimized.; *; * This feature enables the use of that different structure.; *; * Note that some of the members of the ZSTD_compressionParameters struct have; * different semantics and constraints in the dedicated search structure. It is; * highly recommended that you simply set a compression level in the CCtxParams; * you pass into the CDict creation call, and avoid messing with the cParams; * directly.; *; * Effects:; *; * This will only have any effect when the selected ZSTD_strategy; * implementation supports this feature. Currently, that's limited to; * ZSTD_greedy, ZSTD_lazy, and ZSTD_lazy2.; *; * Note that this means that the CDict tables can no longer be copied into the; * CCtx, so the dict attachment mode ZSTD_dictForceCopy will no longer be; * useable. The dictionary can only be attached or reloaded.; *; * In general, you should expect compression to be faster--sometimes very much; * so--and CDict creation to be slightly slower. Eventually, w",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2013,Safety,avoid,avoid,2013,"ionary(), this param can be set on the CCtx to control; * whether the CDict that is created internally can use the feature or not.; *; * What it does:; *; * Normally, the internal data structures of the CDict are analogous to what; * would be stored in a CCtx after compressing the contents of a dictionary.; * To an approximation, a compression using a dictionary can then use those; * data structures to simply continue what is effectively a streaming; * compression where the simulated compression of the dictionary left off.; * Which is to say, the search structures in the CDict are normally the same; * format as in the CCtx.; *; * It is possible to do better, since the CDict is not like a CCtx: the search; * structures are written once during CDict creation, and then are only read; * after that, while the search structures in the CCtx are both read and; * written as the compression goes along. This means we can choose a search; * structure for the dictionary that is read-optimized.; *; * This feature enables the use of that different structure.; *; * Note that some of the members of the ZSTD_compressionParameters struct have; * different semantics and constraints in the dedicated search structure. It is; * highly recommended that you simply set a compression level in the CCtxParams; * you pass into the CDict creation call, and avoid messing with the cParams; * directly.; *; * Effects:; *; * This will only have any effect when the selected ZSTD_strategy; * implementation supports this feature. Currently, that's limited to; * ZSTD_greedy, ZSTD_lazy, and ZSTD_lazy2.; *; * Note that this means that the CDict tables can no longer be copied into the; * CCtx, so the dict attachment mode ZSTD_dictForceCopy will no longer be; * useable. The dictionary can only be attached or reloaded.; *; * In general, you should expect compression to be faster--sometimes very much; * so--and CDict creation to be slightly slower. Eventually, we will probably; * make this mode the default.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1071,Usability,simpl,simply,1071,"ture"" can be used. This feature is still rough around the edges, be; * prepared for surprising behavior!; *; * How to use it:; *; * When using a CDict, whether to use this feature or not is controlled at; * CDict creation, and it must be set in a CCtxParams set passed into that; * construction (via ZSTD_createCDict_advanced2()). A compression will then; * use the feature or not based on how the CDict was constructed; the value of; * this param, set in the CCtx, will have no effect.; *; * However, when a dictionary buffer is passed into a CCtx, such as via; * ZSTD_CCtx_loadDictionary(), this param can be set on the CCtx to control; * whether the CDict that is created internally can use the feature or not.; *; * What it does:; *; * Normally, the internal data structures of the CDict are analogous to what; * would be stored in a CCtx after compressing the contents of a dictionary.; * To an approximation, a compression using a dictionary can then use those; * data structures to simply continue what is effectively a streaming; * compression where the simulated compression of the dictionary left off.; * Which is to say, the search structures in the CDict are normally the same; * format as in the CCtx.; *; * It is possible to do better, since the CDict is not like a CCtx: the search; * structures are written once during CDict creation, and then are only read; * after that, while the search structures in the CCtx are both read and; * written as the compression goes along. This means we can choose a search; * structure for the dictionary that is read-optimized.; *; * This feature enables the use of that different structure.; *; * Note that some of the members of the ZSTD_compressionParameters struct have; * different semantics and constraints in the dedicated search structure. It is; * highly recommended that you simply set a compression level in the CCtxParams; * you pass into the CDict creation call, and avoid messing with the cParams; * directly.; *; * Effects:; *; * This ",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1918,Usability,simpl,simply,1918,"ionary(), this param can be set on the CCtx to control; * whether the CDict that is created internally can use the feature or not.; *; * What it does:; *; * Normally, the internal data structures of the CDict are analogous to what; * would be stored in a CCtx after compressing the contents of a dictionary.; * To an approximation, a compression using a dictionary can then use those; * data structures to simply continue what is effectively a streaming; * compression where the simulated compression of the dictionary left off.; * Which is to say, the search structures in the CDict are normally the same; * format as in the CCtx.; *; * It is possible to do better, since the CDict is not like a CCtx: the search; * structures are written once during CDict creation, and then are only read; * after that, while the search structures in the CCtx are both read and; * written as the compression goes along. This means we can choose a search; * structure for the dictionary that is read-optimized.; *; * This feature enables the use of that different structure.; *; * Note that some of the members of the ZSTD_compressionParameters struct have; * different semantics and constraints in the dedicated search structure. It is; * highly recommended that you simply set a compression level in the CCtxParams; * you pass into the CDict creation call, and avoid messing with the cParams; * directly.; *; * Effects:; *; * This will only have any effect when the selected ZSTD_strategy; * implementation supports this feature. Currently, that's limited to; * ZSTD_greedy, ZSTD_lazy, and ZSTD_lazy2.; *; * Note that this means that the CDict tables can no longer be copied into the; * CCtx, so the dict attachment mode ZSTD_dictForceCopy will no longer be; * useable. The dictionary can only be attached or reloaded.; *; * In general, you should expect compression to be faster--sometimes very much; * so--and CDict creation to be slightly slower. Eventually, we will probably; * make this mode the default.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:445,Availability,error,error,445,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1024,Availability,error,error,1024,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:660,Energy Efficiency,allocate,allocate,660,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:810,Energy Efficiency,allocate,allocate,810,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:915,Safety,avoid,avoid,915,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1232,Safety,safe,safe,1232,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1253,Security,access,access,1253,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:827,Availability,error,error,827,"/* ZSTD_c_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells he compressor that the ZSTD_outBuffer will not be resized between; * calls. Specifically: (out.size - out.pos) will never grow. This gives the; * compressor the freedom to say: If the compressed data doesn't fit in the; * output buffer then return ZSTD_error_dstSizeTooSmall. This allows us to; * always decompress directly into the output buffer, instead of decompressing; * into an internal buffer and copying to the output buffer.; *; * When this flag is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer. It will still allocate the; * input window buffer (see ZSTD_c_stableInBuffer).; *; * Zstd will check that (out.size - out.pos) never grows and return an error; * if it does. While not strictly necessary, this should prevent surprises.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:591,Energy Efficiency,allocate,allocate,591,"/* ZSTD_c_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells he compressor that the ZSTD_outBuffer will not be resized between; * calls. Specifically: (out.size - out.pos) will never grow. This gives the; * compressor the freedom to say: If the compressed data doesn't fit in the; * output buffer then return ZSTD_error_dstSizeTooSmall. This allows us to; * always decompress directly into the output buffer, instead of decompressing; * into an internal buffer and copying to the output buffer.; *; * When this flag is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer. It will still allocate the; * input window buffer (see ZSTD_c_stableInBuffer).; *; * Zstd will check that (out.size - out.pos) never grows and return an error; * if it does. While not strictly necessary, this should prevent surprises.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:688,Energy Efficiency,allocate,allocate,688,"/* ZSTD_c_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells he compressor that the ZSTD_outBuffer will not be resized between; * calls. Specifically: (out.size - out.pos) will never grow. This gives the; * compressor the freedom to say: If the compressed data doesn't fit in the; * output buffer then return ZSTD_error_dstSizeTooSmall. This allows us to; * always decompress directly into the output buffer, instead of decompressing; * into an internal buffer and copying to the output buffer.; *; * When this flag is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer. It will still allocate the; * input window buffer (see ZSTD_c_stableInBuffer).; *; * Zstd will check that (out.size - out.pos) never grows and return an error; * if it does. While not strictly necessary, this should prevent surprises.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:642,Availability,error,error,642,"/* ZSTD_c_validateSequences; * Default is 0 == disabled. Set to 1 to enable sequence validation.; *; * For use with sequence compression API: ZSTD_compressSequences().; * Designates whether or not we validate sequences provided to ZSTD_compressSequences(); * during function execution.; *; * Without validation, providing a sequence that does not conform to the zstd spec will cause; * undefined behavior, and may produce a corrupted block.; *; * With validation enabled, a if sequence is invalid (see doc/zstd_compression_format.md for; * specifics regarding offset/matchlength requirements) then the function will bail out and; * return an error.; *; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:85,Security,validat,validation,85,"/* ZSTD_c_validateSequences; * Default is 0 == disabled. Set to 1 to enable sequence validation.; *; * For use with sequence compression API: ZSTD_compressSequences().; * Designates whether or not we validate sequences provided to ZSTD_compressSequences(); * during function execution.; *; * Without validation, providing a sequence that does not conform to the zstd spec will cause; * undefined behavior, and may produce a corrupted block.; *; * With validation enabled, a if sequence is invalid (see doc/zstd_compression_format.md for; * specifics regarding offset/matchlength requirements) then the function will bail out and; * return an error.; *; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:200,Security,validat,validate,200,"/* ZSTD_c_validateSequences; * Default is 0 == disabled. Set to 1 to enable sequence validation.; *; * For use with sequence compression API: ZSTD_compressSequences().; * Designates whether or not we validate sequences provided to ZSTD_compressSequences(); * during function execution.; *; * Without validation, providing a sequence that does not conform to the zstd spec will cause; * undefined behavior, and may produce a corrupted block.; *; * With validation enabled, a if sequence is invalid (see doc/zstd_compression_format.md for; * specifics regarding offset/matchlength requirements) then the function will bail out and; * return an error.; *; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:300,Security,validat,validation,300,"/* ZSTD_c_validateSequences; * Default is 0 == disabled. Set to 1 to enable sequence validation.; *; * For use with sequence compression API: ZSTD_compressSequences().; * Designates whether or not we validate sequences provided to ZSTD_compressSequences(); * during function execution.; *; * Without validation, providing a sequence that does not conform to the zstd spec will cause; * undefined behavior, and may produce a corrupted block.; *; * With validation enabled, a if sequence is invalid (see doc/zstd_compression_format.md for; * specifics regarding offset/matchlength requirements) then the function will bail out and; * return an error.; *; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:452,Security,validat,validation,452,"/* ZSTD_c_validateSequences; * Default is 0 == disabled. Set to 1 to enable sequence validation.; *; * For use with sequence compression API: ZSTD_compressSequences().; * Designates whether or not we validate sequences provided to ZSTD_compressSequences(); * during function execution.; *; * Without validation, providing a sequence that does not conform to the zstd spec will cause; * undefined behavior, and may produce a corrupted block.; *; * With validation enabled, a if sequence is invalid (see doc/zstd_compression_format.md for; * specifics regarding offset/matchlength requirements) then the function will bail out and; * return an error.; *; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:170,Availability,error,error,170,"/*! ZSTD_CCtx_getParameter() :; * Get the requested compression parameter value, selected by enum ZSTD_cParameter,; * and store it into int* value.; * @return : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:195,Testability,test,tested,195,"/*! ZSTD_CCtx_getParameter() :; * Get the requested compression parameter value, selected by enum ZSTD_cParameter,; * and store it into int* value.; * @return : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:283,Availability,failure,failure,283,"/*! ZSTD_CCtxParams_setParameter() :; * Similar to ZSTD_CCtx_setParameter.; * Set one compression parameter, selected by enum ZSTD_cParameter.; * Parameters must be applied to a ZSTD_CCtx using; * ZSTD_CCtx_setParametersUsingCCtxParams().; * @result : a code representing success or failure (which can be tested with; * ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:305,Testability,test,tested,305,"/*! ZSTD_CCtxParams_setParameter() :; * Similar to ZSTD_CCtx_setParameter.; * Set one compression parameter, selected by enum ZSTD_cParameter.; * Parameters must be applied to a ZSTD_CCtx using; * ZSTD_CCtx_setParametersUsingCCtxParams().; * @result : a code representing success or failure (which can be tested with; * ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:188,Availability,error,error,188,"/*! ZSTD_CCtxParams_getParameter() :; * Similar to ZSTD_CCtx_getParameter.; * Get the requested value of one compression parameter, selected by enum ZSTD_cParameter.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:213,Testability,test,tested,213,"/*! ZSTD_CCtxParams_getParameter() :; * Similar to ZSTD_CCtx_getParameter.; * Get the requested value of one compression parameter, selected by enum ZSTD_cParameter.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:410,Deployability,update,updated,410,"/*! ZSTD_CCtx_setParametersUsingCCtxParams() :; * Apply a set of ZSTD_CCtx_params to the compression context.; * This can be done even after compression is started,; * if nbWorkers==0, this will have no impact until a new compression is started.; * if nbWorkers>=1, new parameters will be picked up at next job,; * with a few restrictions (windowLog, pledgedSrcSize, nbWorkers, jobSize, and overlapLog are not updated).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:278,Security,access,accessible,278,"/*! ZSTD_createDDict_byReference() :; * Create a digested dictionary, ready to start decompression operation without startup delay.; * Dictionary content is referenced, and therefore stays in dictBuffer.; * It is important that dictBuffer outlives DDict,; * it must remain read accessible throughout the lifetime of DDict */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:248,Security,access,accessible,248,"/*! ZSTD_DCtx_loadDictionary_byReference() :; * Same as ZSTD_DCtx_loadDictionary(),; * but references `dict` content instead of copying it into `dctx`.; * This saves memory if `dict` remains around.,; * However, it's imperative that `dict` remains accessible (and unmodified) while being used, so it must outlive decompression. */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:124,Performance,load,load,124,"/*! ZSTD_DCtx_loadDictionary_advanced() :; * Same as ZSTD_DCtx_loadDictionary(),; * but gives direct control over; * how to load the dictionary (by copy ? by reference ?); * and how to interpret it (automatic ? force raw mode ? full mode only ?). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:479,Availability,error,error,479,"/*! ZSTD_DCtx_setMaxWindowSize() :; * Refuses allocating internal buffers for frames requiring a window size larger than provided limit.; * This protects a decoder context from reserving too much memory for itself (potential attack scenario).; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts all window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT); * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:323,Energy Efficiency,allocate,allocated,323,"/*! ZSTD_DCtx_setMaxWindowSize() :; * Refuses allocating internal buffers for frames requiring a window size larger than provided limit.; * This protects a decoder context from reserving too much memory for itself (potential attack scenario).; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts all window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT); * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:225,Security,attack,attack,225,"/*! ZSTD_DCtx_setMaxWindowSize() :; * Refuses allocating internal buffers for frames requiring a window size larger than provided limit.; * This protects a decoder context from reserving too much memory for itself (potential attack scenario).; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts all window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT); * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:504,Testability,test,tested,504,"/*! ZSTD_DCtx_setMaxWindowSize() :; * Refuses allocating internal buffers for frames requiring a window size larger than provided limit.; * This protects a decoder context from reserving too much memory for itself (potential attack scenario).; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts all window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT); * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:172,Availability,error,error,172,"/*! ZSTD_DCtx_getParameter() :; * Get the requested decompression parameter value, selected by enum ZSTD_dParameter,; * and store it into int* value.; * @return : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:197,Testability,test,tested,197,"/*! ZSTD_DCtx_getParameter() :; * Get the requested decompression parameter value, selected by enum ZSTD_dParameter,; * and store it into int* value.; * @return : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:713,Energy Efficiency,allocate,allocate,713,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:814,Energy Efficiency,allocate,allocate,814,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:902,Safety,avoid,avoid,902,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:994,Safety,avoid,avoid,994,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1175,Safety,safe,safe,1175,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1196,Security,access,access,1196,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:283,Performance,perform,performance,283,"/* ZSTD_d_forceIgnoreChecksum; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable; *; * Tells the decompressor to skip checksum validation during decompression, regardless; * of whether checksumming was specified during compression. This offers some; * slight performance benefits, and may be useful for debugging.; * Param has values of type ZSTD_forceIgnoreChecksum_e; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:142,Security,checksum,checksum,142,"/* ZSTD_d_forceIgnoreChecksum; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable; *; * Tells the decompressor to skip checksum validation during decompression, regardless; * of whether checksumming was specified during compression. This offers some; * slight performance benefits, and may be useful for debugging.; * Param has values of type ZSTD_forceIgnoreChecksum_e; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:151,Security,validat,validation,151,"/* ZSTD_d_forceIgnoreChecksum; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable; *; * Tells the decompressor to skip checksum validation during decompression, regardless; * of whether checksumming was specified during compression. This offers some; * slight performance benefits, and may be useful for debugging.; * Param has values of type ZSTD_forceIgnoreChecksum_e; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:209,Security,checksum,checksumming,209,"/* ZSTD_d_forceIgnoreChecksum; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable; *; * Tells the decompressor to skip checksum validation during decompression, regardless; * of whether checksumming was specified during compression. This offers some; * slight performance benefits, and may be useful for debugging.; * Param has values of type ZSTD_forceIgnoreChecksum_e; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:245,Availability,error,error,245,"/*! ZSTD_DCtx_setFormat() :; * Instruct the decoder context about what kind of data to decode next.; * This instruction is mandatory to decode data without a fully-formed header,; * such ZSTD_f_zstd1_magicless for example.; * @return : 0, or an error code (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:270,Testability,test,tested,270,"/*! ZSTD_DCtx_setFormat() :; * Instruct the decoder context about what kind of data to decode next.; * This instruction is mandatory to decode data without a fully-formed header,; * such ZSTD_f_zstd1_magicless for example.; * @return : 0, or an error code (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:147,Availability,redundant,redundant,147,"/********************************************************************; * Advanced streaming functions; * Warning : most of these functions are now redundant with the Advanced API.; * Once Advanced API reaches ""stable"" status,; * redundant functions will be deprecated, and then at some point removed.; ********************************************************************/; /*===== Advanced Streaming compression functions =====*/; /*! ZSTD_initCStream_srcSize() :; * This function is deprecated, and equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * pledgedSrcSize must be correct. If it is not known at init time, use; * ZSTD_CONTENTSIZE_UNKNOWN. Note that, for compatibility with older programs,; * ""0"" also disables frame content size field. It may be enabled in the future.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:229,Availability,redundant,redundant,229,"/********************************************************************; * Advanced streaming functions; * Warning : most of these functions are now redundant with the Advanced API.; * Once Advanced API reaches ""stable"" status,; * redundant functions will be deprecated, and then at some point removed.; ********************************************************************/; /*===== Advanced Streaming compression functions =====*/; /*! ZSTD_initCStream_srcSize() :; * This function is deprecated, and equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * pledgedSrcSize must be correct. If it is not known at init time, use; * ZSTD_CONTENTSIZE_UNKNOWN. Note that, for compatibility with older programs,; * ""0"" also disables frame content size field. It may be enabled in the future.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:147,Safety,redund,redundant,147,"/********************************************************************; * Advanced streaming functions; * Warning : most of these functions are now redundant with the Advanced API.; * Once Advanced API reaches ""stable"" status,; * redundant functions will be deprecated, and then at some point removed.; ********************************************************************/; /*===== Advanced Streaming compression functions =====*/; /*! ZSTD_initCStream_srcSize() :; * This function is deprecated, and equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * pledgedSrcSize must be correct. If it is not known at init time, use; * ZSTD_CONTENTSIZE_UNKNOWN. Note that, for compatibility with older programs,; * ""0"" also disables frame content size field. It may be enabled in the future.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:229,Safety,redund,redundant,229,"/********************************************************************; * Advanced streaming functions; * Warning : most of these functions are now redundant with the Advanced API.; * Once Advanced API reaches ""stable"" status,; * redundant functions will be deprecated, and then at some point removed.; ********************************************************************/; /*===== Advanced Streaming compression functions =====*/; /*! ZSTD_initCStream_srcSize() :; * This function is deprecated, and equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * pledgedSrcSize must be correct. If it is not known at init time, use; * ZSTD_CONTENTSIZE_UNKNOWN. Note that, for compatibility with older programs,; * ""0"" also disables frame content size field. It may be enabled in the future.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:602,Usability,clear,clear,602,"/********************************************************************; * Advanced streaming functions; * Warning : most of these functions are now redundant with the Advanced API.; * Once Advanced API reaches ""stable"" status,; * redundant functions will be deprecated, and then at some point removed.; ********************************************************************/; /*===== Advanced Streaming compression functions =====*/; /*! ZSTD_initCStream_srcSize() :; * This function is deprecated, and equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_refCDict(zcs, NULL); // clear the dictionary (if any); * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * pledgedSrcSize must be correct. If it is not known at init time, use; * ZSTD_CONTENTSIZE_UNKNOWN. Note that, for compatibility with older programs,; * ""0"" also disables frame content size field. It may be enabled in the future.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:423,Performance,load,loaded,423,"/*! ZSTD_initCStream_usingDict() :; * This function is deprecated, and is equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_setParameter(zcs, ZSTD_c_compressionLevel, compressionLevel);; * ZSTD_CCtx_loadDictionary(zcs, dict, dictSize);; *; * Creates of an internal CDict (incompatible with static CCtx), except if; * dict == NULL or dictSize < 8, in which case no dict is used.; * Note: dict is loaded with ZSTD_dct_auto (treated as a full zstd dictionary if; * it begins with ZSTD_MAGIC_DICTIONARY, else as raw content) and ZSTD_dlm_byCopy.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:423,Performance,load,loaded,423,"/*! ZSTD_initCStream_advanced() :; * This function is deprecated, and is approximately equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * // Pseudocode: Set each zstd parameter and leave the rest as-is.; * for ((param, value) : params) {; * ZSTD_CCtx_setParameter(zcs, param, value);; * }; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; * ZSTD_CCtx_loadDictionary(zcs, dict, dictSize);; *; * dict is loaded with ZSTD_dct_auto and ZSTD_dlm_byCopy.; * pledgedSrcSize must be correct.; * If srcSize is not known at init time, use value ZSTD_CONTENTSIZE_UNKNOWN.; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:865,Availability,error,error,865,"/*! ZSTD_resetCStream() :; * This function is deprecated, and is equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * start a new frame, using same parameters from previous frame.; * This is typically useful to skip dictionary loading stage, since it will re-use it in-place.; * Note that zcs must be init at least once before using ZSTD_resetCStream().; * If pledgedSrcSize is not known at reset time, use macro ZSTD_CONTENTSIZE_UNKNOWN.; * If pledgedSrcSize > 0, its value must be correct, as it will be written in header, and controlled at the end.; * For the time being, pledgedSrcSize==0 is interpreted as ""srcSize unknown"" for compatibility with older programs,; * but it will change to mean ""empty"" in future version, so use macro ZSTD_CONTENTSIZE_UNKNOWN instead.; * @return : 0, or an error code (which can be tested using ZSTD_isError()); * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:298,Performance,load,loading,298,"/*! ZSTD_resetCStream() :; * This function is deprecated, and is equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * start a new frame, using same parameters from previous frame.; * This is typically useful to skip dictionary loading stage, since it will re-use it in-place.; * Note that zcs must be init at least once before using ZSTD_resetCStream().; * If pledgedSrcSize is not known at reset time, use macro ZSTD_CONTENTSIZE_UNKNOWN.; * If pledgedSrcSize > 0, its value must be correct, as it will be written in header, and controlled at the end.; * For the time being, pledgedSrcSize==0 is interpreted as ""srcSize unknown"" for compatibility with older programs,; * but it will change to mean ""empty"" in future version, so use macro ZSTD_CONTENTSIZE_UNKNOWN instead.; * @return : 0, or an error code (which can be tested using ZSTD_isError()); * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:890,Testability,test,tested,890,"/*! ZSTD_resetCStream() :; * This function is deprecated, and is equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * start a new frame, using same parameters from previous frame.; * This is typically useful to skip dictionary loading stage, since it will re-use it in-place.; * Note that zcs must be init at least once before using ZSTD_resetCStream().; * If pledgedSrcSize is not known at reset time, use macro ZSTD_CONTENTSIZE_UNKNOWN.; * If pledgedSrcSize > 0, its value must be correct, as it will be written in header, and controlled at the end.; * For the time being, pledgedSrcSize==0 is interpreted as ""srcSize unknown"" for compatibility with older programs,; * but it will change to mean ""empty"" in future version, so use macro ZSTD_CONTENTSIZE_UNKNOWN instead.; * @return : 0, or an error code (which can be tested using ZSTD_isError()); * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:675,Performance,concurren,concurrent,675,"/*! ZSTD_toFlushNow() :; * Tell how many bytes are ready to be flushed immediately.; * Useful for multithreading scenarios (nbWorkers >= 1).; * Probe the oldest active job, defined as oldest job not yet entirely flushed,; * and check its output buffer.; * @return : amount of data stored in oldest job and ready to be flushed immediately.; * if @return == 0, it means either :; * + there is no active job (could be checked with ZSTD_frameProgression()), or; * + oldest job is still actively compressing data,; * but everything it has produced has also been flushed so far,; * therefore flush speed is limited by production speed of oldest job; * irrespective of the speed of concurrent (and newer) jobs.; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:186,Performance,load,loading,186,"/*!; * This function is deprecated, and is equivalent to:; *; * ZSTD_DCtx_reset(zds, ZSTD_reset_session_only);; *; * re-use decompression parameters from previous init; saves dictionary loading; * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1573,Availability,recover,recover,1573,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1276,Integrability,Interface,Interface,1276,"ted below.; * Prefer normal streaming API for an easier experience.; ********************************************************************* */; /**; Buffer-less streaming compression (synchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinish",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1573,Safety,recover,recover,1573,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1909,Safety,detect,detects,1909,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1669,Security,access,accessible,1669,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2151,Security,checksum,checksum,2151,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:751,Availability,error,errorCode,751,"/**; Buffer-less streaming decompression (synchronous mode). A ZSTD_DCtx object is required to track streaming operations.; Use ZSTD_createDCtx() / ZSTD_freeDCtx() to manage it.; A ZSTD_DCtx object can be re-used multiple times. First typical operation is to retrieve frame parameters, using ZSTD_getFrameHeader().; Frame header is extracted from the beginning of compressed frame, so providing only the frame's beginning is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determin",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2069,Availability,error,error,2069,"uption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding another full block,; which maximum size is provided in `ZSTD_frameHeader` structure, field `blockSizeMax`.; At which point, decoding can resume from the beginning of the buffer.; Note that already decoded data stored in the buffer should be flushed before being overwritten. There are alternatives possible, for example using two or more buffers of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decom",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3666,Availability,error,error,3666," of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() is the number of bytes regenerated within 'dst' (necessarily <= dstCapacity).; It can be zero : it just means ZSTD_decompressContinue() has decoded some metadata item.; It can also be an error code, which can be tested with ZSTD_isError(). A frame is fully decoded when ZSTD_nextSrcSizeToDecompress() returns zero.; Context can then be reset to start a new decompression. Note : it's possible to know if next input to present is a header or a block, using ZSTD_nextInputType().; This information is not required to properly decode a frame. == Special case : skippable frames ==. Skippable frames allow integration of user-defined data into a flow of concatenated frames.; Skippable frames will be ignored (skipped) by decompressor.; The format of skippable frames is as follows :; a) Skippable frame ID - 4 Bytes, Little endian format, any value from 0x184D2A50 to 0x184D2A5F; b) Frame Size - 4 Bytes, Little endian format, unsigned 32-bits; c) Frame Content - any content (User Data) of length equal to Frame Size; For skippable frames ZSTD_getFrameHeader() returns zfhPtr->frameType==ZSTD_skippableFrame.; For skippable frames ZSTD_decompressContinue() always returns 0 : it only skips the content.; *",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:4081,Deployability,integrat,integration,4081,"ally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() is the number of bytes regenerated within 'dst' (necessarily <= dstCapacity).; It can be zero : it just means ZSTD_decompressContinue() has decoded some metadata item.; It can also be an error code, which can be tested with ZSTD_isError(). A frame is fully decoded when ZSTD_nextSrcSizeToDecompress() returns zero.; Context can then be reset to start a new decompression. Note : it's possible to know if next input to present is a header or a block, using ZSTD_nextInputType().; This information is not required to properly decode a frame. == Special case : skippable frames ==. Skippable frames allow integration of user-defined data into a flow of concatenated frames.; Skippable frames will be ignored (skipped) by decompressor.; The format of skippable frames is as follows :; a) Skippable frame ID - 4 Bytes, Little endian format, any value from 0x184D2A50 to 0x184D2A5F; b) Frame Size - 4 Bytes, Little endian format, unsigned 32-bits; c) Frame Content - any content (User Data) of length equal to Frame Size; For skippable frames ZSTD_getFrameHeader() returns zfhPtr->frameType==ZSTD_skippableFrame.; For skippable frames ZSTD_decompressContinue() always returns 0 : it only skips the content.; */; /*===== Buffer-less streaming decompression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1227,Energy Efficiency,allocate,allocate,1227,"n is to retrieve frame parameters, using ZSTD_getFrameHeader().; Frame header is extracted from the beginning of compressed frame, so providing only the frame's beginning is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1914,Energy Efficiency,efficient,efficient,1914,"t size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding another full block,; which maximum size is provided in `ZSTD_frameHeader` structure, field `blockSizeMax`.; At which point, decoding can resume from the beginning of the buffer.; Note that already decoded data stored in the buffer should be flushed before being overwritten. There are alternatives possible, for example using two or more buffers of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes,",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1341,Integrability,depend,depending,1341,"racted from the beginning of compressed frame, so providing only the frame's beginning is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1388,Integrability,interoperab,interoperability,1388,"ng is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding another full block,; which maximum size is provided in `ZSTD_frameHeader` structur",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:4081,Integrability,integrat,integration,4081,"ally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() is the number of bytes regenerated within 'dst' (necessarily <= dstCapacity).; It can be zero : it just means ZSTD_decompressContinue() has decoded some metadata item.; It can also be an error code, which can be tested with ZSTD_isError(). A frame is fully decoded when ZSTD_nextSrcSizeToDecompress() returns zero.; Context can then be reset to start a new decompression. Note : it's possible to know if next input to present is a header or a block, using ZSTD_nextInputType().; This information is not required to properly decode a frame. == Special case : skippable frames ==. Skippable frames allow integration of user-defined data into a flow of concatenated frames.; Skippable frames will be ignored (skipped) by decompressor.; The format of skippable frames is as follows :; a) Skippable frame ID - 4 Bytes, Little endian format, any value from 0x184D2A50 to 0x184D2A5F; b) Frame Size - 4 Bytes, Little endian format, unsigned 32-bits; c) Frame Content - any content (User Data) of length equal to Frame Size; For skippable frames ZSTD_getFrameHeader() returns zfhPtr->frameType==ZSTD_skippableFrame.; For skippable frames ZSTD_decompressContinue() always returns 0 : it only skips the content.; */; /*===== Buffer-less streaming decompression functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1379,Modifiability,extend,extended,1379,"ng is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding another full block,; which maximum size is provided in `ZSTD_frameHeader` structur",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:775,Testability,test,tested,775,"/**; Buffer-less streaming decompression (synchronous mode). A ZSTD_DCtx object is required to track streaming operations.; Use ZSTD_createDCtx() / ZSTD_freeDCtx() to manage it.; A ZSTD_DCtx object can be re-used multiple times. First typical operation is to retrieve frame parameters, using ZSTD_getFrameHeader().; Frame header is extracted from the beginning of compressed frame, so providing only the frame's beginning is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determin",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3691,Testability,test,tested,3691," of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() is the number of bytes regenerated within 'dst' (necessarily <= dstCapacity).; It can be zero : it just means ZSTD_decompressContinue() has decoded some metadata item.; It can also be an error code, which can be tested with ZSTD_isError(). A frame is fully decoded when ZSTD_nextSrcSizeToDecompress() returns zero.; Context can then be reset to start a new decompression. Note : it's possible to know if next input to present is a header or a block, using ZSTD_nextInputType().; This information is not required to properly decode a frame. == Special case : skippable frames ==. Skippable frames allow integration of user-defined data into a flow of concatenated frames.; Skippable frames will be ignored (skipped) by decompressor.; The format of skippable frames is as follows :; a) Skippable frame ID - 4 Bytes, Little endian format, any value from 0x184D2A50 to 0x184D2A5F; b) Frame Size - 4 Bytes, Little endian format, unsigned 32-bits; c) Frame Content - any content (User Data) of length equal to Frame Size; For skippable frames ZSTD_getFrameHeader() returns zfhPtr->frameType==ZSTD_skippableFrame.; For skippable frames ZSTD_decompressContinue() always returns 0 : it only skips the content.; *",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2474,Usability,resume,resume,2474,"essContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding another full block,; which maximum size is provided in `ZSTD_frameHeader` structure, field `blockSizeMax`.; At which point, decoding can resume from the beginning of the buffer.; Note that already decoded data stored in the buffer should be flushed before being overwritten. There are alternatives possible, for example using two or more buffers of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() ",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:62,Availability,avail,available,62,"/* if == ZSTD_CONTENTSIZE_UNKNOWN, it means this field is not available. 0 means ""empty"" */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:202,Availability,error,error,202,"/*! ZSTD_getFrameHeader() :; * decode Frame Header, or requires larger `srcSize`.; * @return : 0, `zfhPtr` is correctly filled,; * >0, `srcSize` is too small, value is wanted `srcSize` amount,; * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:227,Testability,test,tested,227,"/*! ZSTD_getFrameHeader() :; * decode Frame Header, or requires larger `srcSize`.; * @return : 0, `zfhPtr` is correctly filled,; * >0, `srcSize` is too small, value is wanted `srcSize` amount,; * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:319,Energy Efficiency,charge,charge,319,"/* ============================ */; /** Block level API */; /* ============================ */; /*!; Block functions produce and decode raw zstd blocks, without frame metadata.; Frame metadata cost is typically ~12 bytes, which can be non-negligible for very small blocks (< 100 bytes).; But users will have to take in charge needed metadata to regenerate data, such as compressed and content sizes. A few rules to respect :; - Compressing and decompressing require a context structure; + Use ZSTD_createCCtx() and ZSTD_createDCtx(); - It is necessary to init context before starting; + compression : any ZSTD_compressBegin*() variant, including with dictionary; + decompression : any ZSTD_decompressBegin*() variant, including with dictionary; + copyCCtx() and copyDCtx() can be used too; - Block size is limited, it must be <= ZSTD_getBlockSize() <= ZSTD_BLOCKSIZE_MAX == 128 KB; + If input is larger than a block size, it's necessary to split input data into multiple blocks; + For inputs larger than a single block, consider using regular ZSTD_compress() instead.; Frame metadata is not that costly, and quickly becomes negligible as source size grows larger than a block.; - When a block is considered not compressible enough, ZSTD_compressBlock() result will be 0 (zero) !; ===> In which case, nothing is produced into `dst` !; + User __must__ test for such outcome and deal directly with uncompressed data; + A block cannot be declared incompressible if ZSTD_compressBlock() return value was != 0.; Doing so would mess up with statistics history, leading to potential data corruption.; + ZSTD_decompressBlock() _doesn't accept uncompressed data as input_ !!; + In case of multiple successive blocks, should some of them be uncompressed,; decoder must be informed of their existence in order to follow proper history.; Use ZSTD_insertBlock() for such a case.; */; /*===== Raw zstd block functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1350,Testability,test,test,1350,"/* ============================ */; /** Block level API */; /* ============================ */; /*!; Block functions produce and decode raw zstd blocks, without frame metadata.; Frame metadata cost is typically ~12 bytes, which can be non-negligible for very small blocks (< 100 bytes).; But users will have to take in charge needed metadata to regenerate data, such as compressed and content sizes. A few rules to respect :; - Compressing and decompressing require a context structure; + Use ZSTD_createCCtx() and ZSTD_createDCtx(); - It is necessary to init context before starting; + compression : any ZSTD_compressBegin*() variant, including with dictionary; + decompression : any ZSTD_decompressBegin*() variant, including with dictionary; + copyCCtx() and copyDCtx() can be used too; - Block size is limited, it must be <= ZSTD_getBlockSize() <= ZSTD_BLOCKSIZE_MAX == 128 KB; + If input is larger than a block size, it's necessary to split input data into multiple blocks; + For inputs larger than a single block, consider using regular ZSTD_compress() instead.; Frame metadata is not that costly, and quickly becomes negligible as source size grows larger than a block.; - When a block is considered not compressible enough, ZSTD_compressBlock() result will be 0 (zero) !; ===> In which case, nothing is produced into `dst` !; + User __must__ test for such outcome and deal directly with uncompressed data; + A block cannot be declared incompressible if ZSTD_compressBlock() return value was != 0.; Doing so would mess up with statistics history, leading to potential data corruption.; + ZSTD_decompressBlock() _doesn't accept uncompressed data as input_ !!; + In case of multiple successive blocks, should some of them be uncompressed,; decoder must be informed of their existence in order to follow proper history.; Use ZSTD_insertBlock() for such a case.; */; /*===== Raw zstd block functions =====*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:8,Integrability,depend,dependency,8,/*===== dependency =====*/,MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:83,Performance,load,load,83,"/* It isn't required but allows to generate better code, saving a function pointer load from the IAT and an indirect jump.*/",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:52,Availability,Error,Error,52,"/*-*********************************************; * Error codes list; *-*********************************************; * Error codes _values_ are pinned down since v1.3.1 only.; * Therefore, don't rely on values if you may link to any version < v1.3.1.; *; * Only values < 100 are considered stable.; *; * note 1 : this API shall be used with static linking only.; * dynamic linking is not yet officially supported.; * note 2 : Prefer relying on the enum than on its value whenever possible; * This is the only supported way to use the error list < v1.3.1; * note 3 : ZSTD_isError() is always correct, whatever the library version.; **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:121,Availability,Error,Error,121,"/*-*********************************************; * Error codes list; *-*********************************************; * Error codes _values_ are pinned down since v1.3.1 only.; * Therefore, don't rely on values if you may link to any version < v1.3.1.; *; * Only values < 100 are considered stable.; *; * note 1 : this API shall be used with static linking only.; * dynamic linking is not yet officially supported.; * note 2 : Prefer relying on the enum than on its value whenever possible; * This is the only supported way to use the error list < v1.3.1; * note 3 : ZSTD_isError() is always correct, whatever the library version.; **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:153,Availability,down,down,153,"/*-*********************************************; * Error codes list; *-*********************************************; * Error codes _values_ are pinned down since v1.3.1 only.; * Therefore, don't rely on values if you may link to any version < v1.3.1.; *; * Only values < 100 are considered stable.; *; * note 1 : this API shall be used with static linking only.; * dynamic linking is not yet officially supported.; * note 2 : Prefer relying on the enum than on its value whenever possible; * This is the only supported way to use the error list < v1.3.1; * note 3 : ZSTD_isError() is always correct, whatever the library version.; **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:536,Availability,error,error,536,"/*-*********************************************; * Error codes list; *-*********************************************; * Error codes _values_ are pinned down since v1.3.1 only.; * Therefore, don't rely on values if you may link to any version < v1.3.1.; *; * Only values < 100 are considered stable.; *; * note 1 : this API shall be used with static linking only.; * dynamic linking is not yet officially supported.; * note 2 : Prefer relying on the enum than on its value whenever possible; * This is the only supported way to use the error list < v1.3.1; * note 3 : ZSTD_isError() is always correct, whatever the library version.; **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h:13,Availability,error,error,13,"/* following error codes are __NOT STABLE__, they can be removed or changed in future versions */",MatchSource.CODE_COMMENT,builtins/zstd/zstd_errors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd_errors.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:135,Availability,avail,available,135,"/*; * This API consists of small unitary functions, which must be inlined for best performance.; * Since link-time-optimization is not available for all compilers,; * these functions are defined into a .h to be included.; */; /*-****************************************; * Dependencies; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:273,Integrability,Depend,Dependencies,273,"/*; * This API consists of small unitary functions, which must be inlined for best performance.; * Since link-time-optimization is not available for all compilers,; * these functions are defined into a .h to be included.; */; /*-****************************************; * Dependencies; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:83,Performance,perform,performance,83,"/*; * This API consists of small unitary functions, which must be inlined for best performance.; * Since link-time-optimization is not available for all compilers,; * these functions are defined into a .h to be included.; */; /*-****************************************; * Dependencies; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:115,Performance,optimiz,optimization,115,"/*; * This API consists of small unitary functions, which must be inlined for best performance.; * Since link-time-optimization is not available for all compilers,; * these functions are defined into a .h to be included.; */; /*-****************************************; * Dependencies; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:20,Integrability,rout,routines,20,/* unaligned access routines */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:13,Security,access,access,13,/* unaligned access routines */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:3,Testability,assert,assert,3,"/* assert(), DEBUGLOG(), RAWLOG() */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:3,Availability,error,error,3,/* error codes and messages */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:19,Integrability,message,messages,19,/* error codes and messages */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:210,Availability,error,error,210,"/* Start with initCStream, providing the size of buffer to write into.; * bitStream will never write outside of this buffer.; * `dstCapacity` must be >= sizeof(bitD->bitContainer), otherwise @return will be an error code.; *; * bits are first added to a local register.; * Local register is size_t, hence 64-bits on 64-bits systems, or 32-bits on 32-bits systems.; * Writing data into memory is an explicit operation, performed by the flushBits function.; * Hence keep track how many bits are potentially stored into local register to avoid register overflow.; * After a flushBits, a maximum of 7 bits might still be stored into local register.; *; * Avoid storing elements of more than 24 bits if you want compatibility with 32-bits bitstream readers.; *; * Last operation is to close the bitStream.; * The function returns the final size of CStream in bytes.; * If data couldn't fit into `dstBuffer`, it will return a 0 ( == not storable); */; /*-********************************************; * bitStream decoding API (read backward); **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:418,Performance,perform,performed,418,"/* Start with initCStream, providing the size of buffer to write into.; * bitStream will never write outside of this buffer.; * `dstCapacity` must be >= sizeof(bitD->bitContainer), otherwise @return will be an error code.; *; * bits are first added to a local register.; * Local register is size_t, hence 64-bits on 64-bits systems, or 32-bits on 32-bits systems.; * Writing data into memory is an explicit operation, performed by the flushBits function.; * Hence keep track how many bits are potentially stored into local register to avoid register overflow.; * After a flushBits, a maximum of 7 bits might still be stored into local register.; *; * Avoid storing elements of more than 24 bits if you want compatibility with 32-bits bitstream readers.; *; * Last operation is to close the bitStream.; * The function returns the final size of CStream in bytes.; * If data couldn't fit into `dstBuffer`, it will return a 0 ( == not storable); */; /*-********************************************; * bitStream decoding API (read backward); **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:535,Safety,avoid,avoid,535,"/* Start with initCStream, providing the size of buffer to write into.; * bitStream will never write outside of this buffer.; * `dstCapacity` must be >= sizeof(bitD->bitContainer), otherwise @return will be an error code.; *; * bits are first added to a local register.; * Local register is size_t, hence 64-bits on 64-bits systems, or 32-bits on 32-bits systems.; * Writing data into memory is an explicit operation, performed by the flushBits function.; * Hence keep track how many bits are potentially stored into local register to avoid register overflow.; * After a flushBits, a maximum of 7 bits might still be stored into local register.; *; * Avoid storing elements of more than 24 bits if you want compatibility with 32-bits bitstream readers.; *; * Last operation is to close the bitStream.; * The function returns the final size of CStream in bytes.; * If data couldn't fit into `dstBuffer`, it will return a 0 ( == not storable); */; /*-********************************************; * bitStream decoding API (read backward); **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:651,Safety,Avoid,Avoid,651,"/* Start with initCStream, providing the size of buffer to write into.; * bitStream will never write outside of this buffer.; * `dstCapacity` must be >= sizeof(bitD->bitContainer), otherwise @return will be an error code.; *; * bits are first added to a local register.; * Local register is size_t, hence 64-bits on 64-bits systems, or 32-bits on 32-bits systems.; * Writing data into memory is an explicit operation, performed by the flushBits function.; * Hence keep track how many bits are potentially stored into local register to avoid register overflow.; * After a flushBits, a maximum of 7 bits might still be stored into local register.; *; * Avoid storing elements of more than 24 bits if you want compatibility with 32-bits bitstream readers.; *; * Last operation is to close the bitStream.; * The function returns the final size of CStream in bytes.; * If data couldn't fit into `dstBuffer`, it will return a 0 ( == not storable); */; /*-********************************************; * bitStream decoding API (read backward); **********************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:99,Availability,down,down,99,"/* result of BIT_reloadDStream() */; /* 1,2,4,8 would be better for bitmap combinations, but slows down performance a bit ... :( */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:104,Performance,perform,performance,104,"/* result of BIT_reloadDStream() */; /* 1,2,4,8 would be better for bitmap combinations, but slows down performance a bit ... :( */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:606,Performance,perform,performed,606,"/* Start by invoking BIT_initDStream().; * A chunk of the bitStream is then stored into a local register.; * Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; * You can then retrieve bitFields stored into the local register, **in reverse order**.; * Local register is explicitly reloaded from memory by the BIT_reloadDStream() method.; * A reload guarantee a minimum of ((8*sizeof(bitD->bitContainer))-7) bits when its result is BIT_DStream_unfinished.; * Otherwise, it can be less than that, so proceed accordingly.; * Checking if DStream has reached its end can be performed with BIT_endOfDStream().; */; /*-****************************************; * unsafe API; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:693,Safety,unsafe,unsafe,693,"/* Start by invoking BIT_initDStream().; * A chunk of the bitStream is then stored into a local register.; * Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; * You can then retrieve bitFields stored into the local register, **in reverse order**.; * Local register is explicitly reloaded from memory by the BIT_reloadDStream() method.; * A reload guarantee a minimum of ((8*sizeof(bitD->bitContainer))-7) bits when its result is BIT_DStream_unfinished.; * Otherwise, it can be less than that, so proceed accordingly.; * Checking if DStream has reached its end can be performed with BIT_endOfDStream().; */; /*-****************************************; * unsafe API; ******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:3,Safety,unsafe,unsafe,3,/* unsafe version; does not check buffer overflow */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:265,Availability,error,error,265,"/*-**************************************************************; * bitStream encoding; ****************************************************************/; /*! BIT_initCStream() :; * `dstCapacity` must be > sizeof(size_t); * @return : 0 if success,; * otherwise an error code (can be tested using ERR_isError()) */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:284,Testability,test,tested,284,"/*-**************************************************************; * bitStream encoding; ****************************************************************/; /*! BIT_initCStream() :; * `dstCapacity` must be > sizeof(size_t); * @return : 0 if success,; * otherwise an error code (can be tested using ERR_isError()) */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:77,Safety,unsafe,unsafe,77,/*! BIT_flushBitsFast() :; * assumption : bitContainer has not overflowed; * unsafe version; does not check buffer overflow */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:73,Safety,safe,safe,73,"/*! BIT_flushBits() :; * assumption : bitContainer has not overflowed; * safe version; check for buffer overflow, and prevents it.; * note : does not signal buffer overflow.; * overflow will be revealed later on using BIT_closeCStream() */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:12,Safety,detect,detected,12,/* overflow detected */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:384,Availability,error,errorCode,384,"/*-********************************************************; * bitStream decoding; **********************************************************/; /*! BIT_initDStream() :; * Initialize a BIT_DStream_t.; * `bitD` : a pointer to an already allocated BIT_DStream_t structure.; * `srcSize` must be the *exact* size of the bitStream, in bytes.; * @return : size of stream (== srcSize), or an errorCode if a problem is detected; */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:235,Energy Efficiency,allocate,allocated,235,"/*-********************************************************; * bitStream decoding; **********************************************************/; /*! BIT_initDStream() :; * Initialize a BIT_DStream_t.; * `bitD` : a pointer to an already allocated BIT_DStream_t structure.; * `srcSize` must be the *exact* size of the bitStream, in bytes.; * @return : size of stream (== srcSize), or an errorCode if a problem is detected; */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:410,Safety,detect,detected,410,"/*-********************************************************; * bitStream decoding; **********************************************************/; /*! BIT_initDStream() :; * Initialize a BIT_DStream_t.; * `bitD` : a pointer to an already allocated BIT_DStream_t structure.; * `srcSize` must be the *exact* size of the bitStream, in bytes.; * @return : size of stream (== srcSize), or an errorCode if a problem is detected; */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:44,Availability,mask,mask,44,/* arbitrate between double-shift and shift+mask */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:28,Safety,unsafe,unsafe,28,/*! BIT_lookBitsFast() :; * unsafe version; only works if nbBits >= 1 */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:75,Deployability,update,update,75,/*! BIT_readBits() :; * Read (consume) next n bits from local register and update.; * Pay attention to not read more than nbBits contained into local register.; * @return : extracted value. */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:28,Safety,unsafe,unsafe,28,/*! BIT_readBitsFast() :; * unsafe version; only works only if nbBits >= 1 */,MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:113,Safety,safe,safe,113,"/*! BIT_reloadDStream() :; * Refill `bitD` from buffer previously set in BIT_initDStream() .; * This function is safe, it guarantees it will not read beyond src buffer.; * @return : status of `BIT_DStream_t` internal register.; * when status == BIT_DStream_unfinished, internal register is filled with at least 25 or 57 bits */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:12,Safety,detect,detected,12,"/* overflow detected, like end of stream */",MatchSource.CODE_COMMENT,builtins/zstd/common/bitstream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:154,Performance,perform,performance,154,"/**; * HINT_INLINE is used to help the compiler generate better code. It is *not*; * used for ""templates"", so it can be tweaked based on the compilers; * performance.; *; * gcc-4.8 and gcc-4.9 have been shown to benefit from leaving off the; * always_inline attribute.; *; * clang up to 5.0.0 (trunk) benefit tremendously from the always_inline; * attribute.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:3,Safety,detect,detects,3,/* detects whether we are being compiled under msan */,MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:47,Security,sanitiz,sanitizers,47,"/* Not all platforms that support msan provide sanitizers/msan_interface.h.; * We therefore declare the functions we need ourselves, rather than trying to; * include the header file... */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:117,Deployability,update,update,117,/* Make memory region fully uninitialized (without changing its contents).; This is a legacy interface that does not update origin information. Use; __msan_allocated_memory() instead. */,MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:93,Integrability,interface,interface,93,/* Make memory region fully uninitialized (without changing its contents).; This is a legacy interface that does not update origin information. Use; __msan_allocated_memory() instead. */,MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:3,Safety,detect,detects,3,/* detects whether we are being compiled under asan */,MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:47,Security,sanitiz,sanitizers,47,"/* Not all platforms that support asan provide sanitizers/asan_interface.h.; * We therefore declare the functions we need ourselves, rather than trying to; * include the header file... */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:111,Energy Efficiency,allocate,allocated,111,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as unaddressable.; *; * This memory must be previously allocated by your program. Instrumented; * code is forbidden from accessing addresses in this region until it is; * unpoisoned. This function is not guaranteed to poison the entire region -; * it could poison only a subregion of <c>[addr, addr+size)</c> due to ASan; * alignment restrictions.; *; * \note This function is not thread-safe because no two threads can poison or; * unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:444,Safety,safe,safe,444,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as unaddressable.; *; * This memory must be previously allocated by your program. Instrumented; * code is forbidden from accessing addresses in this region until it is; * unpoisoned. This function is not guaranteed to poison the entire region -; * it could poison only a subregion of <c>[addr, addr+size)</c> due to ASan; * alignment restrictions.; *; * \note This function is not thread-safe because no two threads can poison or; * unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:177,Security,access,accessing,177,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as unaddressable.; *; * This memory must be previously allocated by your program. Instrumented; * code is forbidden from accessing addresses in this region until it is; * unpoisoned. This function is not guaranteed to poison the entire region -; * it could poison only a subregion of <c>[addr, addr+size)</c> due to ASan; * alignment restrictions.; *; * \note This function is not thread-safe because no two threads can poison or; * unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:109,Energy Efficiency,allocate,allocated,109,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as addressable.; *; * This memory must be previously allocated by your program. Accessing; * addresses in this region is allowed until this region is poisoned again.; * This function could unpoison a super-region of <c>[addr, addr+size)</c> due; * to ASan alignment restrictions.; *; * \note This function is not thread-safe because no two threads can; * poison or unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:376,Safety,safe,safe,376,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as addressable.; *; * This memory must be previously allocated by your program. Accessing; * addresses in this region is allowed until this region is poisoned again.; * This function could unpoison a super-region of <c>[addr, addr+size)</c> due; * to ASan alignment restrictions.; *; * \note This function is not thread-safe because no two threads can; * poison or unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:136,Security,Access,Accessing,136,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as addressable.; *; * This memory must be previously allocated by your program. Accessing; * addresses in this region is allowed until this region is poisoned again.; * This function could unpoison a super-region of <c>[addr, addr+size)</c> due; * to ASan alignment restrictions.; *; * \note This function is not thread-safe because no two threads can; * poison or unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,builtins/zstd/common/compiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/cpu.h:166,Safety,avoid,avoid,166,"/* The following block like the normal cpuid branch below, but gcc; * reserves ebx for use of its pic register so we must specially; * handle the save and restore to avoid clobbering the register; */",MatchSource.CODE_COMMENT,builtins/zstd/common/cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/cpu.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/cpu.h:13,Modifiability,Extend,Extended,13,/* cpuid(7): Extended Features. */,MatchSource.CODE_COMMENT,builtins/zstd/common/cpu.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/cpu.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.c:678,Modifiability,variab,variable,678,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * This module only hosts one global variable; * which can be used to dynamically influence the verbosity of traces,; * such as DEBUGLOG and RAWLOG; */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:1097,Modifiability,variab,variable,1097,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * The purpose of this header is to enable debug functions.; * They regroup assert(), DEBUGLOG() and RAWLOG() for run-time,; * and DEBUG_STATIC_ASSERT() for compile-time.; *; * By default, DEBUGLEVEL==0, which means run-time debug is disabled.; *; * Level 1 enables assert() only.; * Starting level 2, traces can be generated and pushed to stderr.; * The higher the level, the more verbose the traces.; *; * It's possible to dynamically adjust level using variable g_debug_level,; * which is only declared if DEBUGLEVEL>=2,; * and is a global variable, not multi-thread protected (use with care); */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:1184,Modifiability,variab,variable,1184,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * The purpose of this header is to enable debug functions.; * They regroup assert(), DEBUGLOG() and RAWLOG() for run-time,; * and DEBUG_STATIC_ASSERT() for compile-time.; *; * By default, DEBUGLEVEL==0, which means run-time debug is disabled.; *; * Level 1 enables assert() only.; * Starting level 2, traces can be generated and pushed to stderr.; * The higher the level, the more verbose the traces.; *; * It's possible to dynamically adjust level using variable g_debug_level,; * which is only declared if DEBUGLEVEL>=2,; * and is a global variable, not multi-thread protected (use with care); */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:1198,Performance,multi-thread,multi-thread,1198,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * The purpose of this header is to enable debug functions.; * They regroup assert(), DEBUGLOG() and RAWLOG() for run-time,; * and DEBUG_STATIC_ASSERT() for compile-time.; *; * By default, DEBUGLEVEL==0, which means run-time debug is disabled.; *; * Level 1 enables assert() only.; * Starting level 2, traces can be generated and pushed to stderr.; * The higher the level, the more verbose the traces.; *; * It's possible to dynamically adjust level using variable g_debug_level,; * which is only declared if DEBUGLEVEL>=2,; * and is a global variable, not multi-thread protected (use with care); */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:717,Testability,assert,assert,717,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * The purpose of this header is to enable debug functions.; * They regroup assert(), DEBUGLOG() and RAWLOG() for run-time,; * and DEBUG_STATIC_ASSERT() for compile-time.; *; * By default, DEBUGLEVEL==0, which means run-time debug is disabled.; *; * Level 1 enables assert() only.; * Starting level 2, traces can be generated and pushed to stderr.; * The higher the level, the more verbose the traces.; *; * It's possible to dynamically adjust level using variable g_debug_level,; * which is only declared if DEBUGLEVEL>=2,; * and is a global variable, not multi-thread protected (use with care); */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:907,Testability,assert,assert,907,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * The purpose of this header is to enable debug functions.; * They regroup assert(), DEBUGLOG() and RAWLOG() for run-time,; * and DEBUG_STATIC_ASSERT() for compile-time.; *; * By default, DEBUGLEVEL==0, which means run-time debug is disabled.; *; * Level 1 enables assert() only.; * Starting level 2, traces can be generated and pushed to stderr.; * The higher the level, the more verbose the traces.; *; * It's possible to dynamically adjust level using variable g_debug_level,; * which is only declared if DEBUGLEVEL>=2,; * and is a global variable, not multi-thread protected (use with care); */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:10,Testability,assert,assert,10,"/* static assert is triggered at compile time, leaving no runtime artefact.; * static assert only works with compile-time constants.; * Also, this variant can only be used inside a function. */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:86,Testability,assert,assert,86,"/* static assert is triggered at compile time, leaving no runtime artefact.; * static assert only works with compile-time constants.; * Also, this variant can only be used inside a function. */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:46,Deployability,release,release,46,"/* recommended values for DEBUGLEVEL :; * 0 : release mode, no debug, all run-time checks disabled; * 1 : enables assert() only, no display; * 2 : reserved, for currently active debug path; * 3 : events once per object lifetime (CCtx, CDict, etc.); * 4 : events once per frame; * 5 : events once per block; * 6 : events once per sequence (verbose); * 7+: events at every position (*very* verbose); *; * It's generally inconvenient to output traces > 5.; * In which case, it's possible to selectively trigger high verbosity levels; * by modifying g_debug_level.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:114,Testability,assert,assert,114,"/* recommended values for DEBUGLEVEL :; * 0 : release mode, no debug, all run-time checks disabled; * 1 : enables assert() only, no display; * 2 : reserved, for currently active debug path; * 3 : events once per object lifetime (CCtx, CDict, etc.); * 4 : events once per frame; * 5 : events once per block; * 6 : events once per sequence (verbose); * 7+: events at every position (*very* verbose); *; * It's generally inconvenient to output traces > 5.; * In which case, it's possible to selectively trigger high verbosity levels; * by modifying g_debug_level.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:3,Testability,assert,assert,3,"/* assert may be already defined, due to prior #include <assert.h> */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:57,Testability,assert,assert,57,"/* assert may be already defined, due to prior #include <assert.h> */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:11,Testability,assert,assert,11,/* disable assert (default) */,MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:7,Modifiability,variab,variable,7,"/* the variable is only declared,; it actually lives in debug.c,; and is shared by the whole process.; It's not thread-safe.; It's useful when enabling very verbose levels; on selective conditions (such as position in src) */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:119,Safety,safe,safe,119,"/* the variable is only declared,; it actually lives in debug.c,; and is shared by the whole process.; It's not thread-safe.; It's useful when enabling very verbose levels; on selective conditions (such as position in src) */",MatchSource.CODE_COMMENT,builtins/zstd/common/debug.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:777,Integrability,Depend,Dependencies,777,"/* ******************************************************************; * Common functions of New Generation Entropy library; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - FSE+HUF source repository : https://github.com/Cyan4973/FiniteStateEntropy; * - Public forum : https://groups.google.com/forum/#!forum/lz4c; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /* *************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:10,Availability,ERROR,ERROR,10,"/* ERR_*, ERROR */",MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:6,Availability,Error,Error,6,/*=== Error Management ===*/,MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:106,Safety,Avoid,Avoid,106,/* Count the number of repeats. Each time the; * 2-bit repeat code is 0b11 there is another; * repeat.; * Avoid UB by setting the high bit to 1.; */,MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:14,Availability,error,error,14,"/* This is an error, but break and return an error; * at the end, because returning out of a loop makes; * it harder for the compiler to optimize.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:45,Availability,error,error,45,"/* This is an error, but break and return an error; * at the end, because returning out of a loop makes; * it harder for the compiler to optimize.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:137,Performance,optimiz,optimize,137,"/* This is an error, but break and return an error; * at the end, because returning out of a loop makes; * it harder for the compiler to optimize.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:70,Safety,predict,predictable,70,"/* extra accuracy */; /* When it matters (small blocks), this is a; * predictable branch, because we don't use -1.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:51,Deployability,update,update,51,/* This branch can be folded into the; * threshold update condition because we; * know that threshold > 1.; */,MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:3,Safety,Avoid,Avoids,3,/* Avoids the FORCE_INLINE of the _body() function. */,MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:227,Availability,error,error,227,"/*! HUF_readStats() :; Read compact Huffman tree, saved by HUF_writeCTable().; `huffWeight` is destination buffer.; `rankStats` is assumed to be a table of at least HUF_TABLELOG_MAX U32.; @return : size read from `src` , or an error Code .; Note : Needed by HUF_readCTable() and HUF_readDTableX?() .; */",MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:30,Energy Efficiency,power,power,30,/* last value must be a clean power of 2 */,MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c:3,Safety,Avoid,Avoids,3,/* Avoids the FORCE_INLINE of the _body() function. */,MatchSource.CODE_COMMENT,builtins/zstd/common/entropy_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/entropy_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.c:442,Availability,error,error,442,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* The purpose of this file is to have a single list of error strings embedded in binary */",MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.c:13,Availability,error,error,13,/* following error codes are not stable and may be removed or changed in a future version */,MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h:446,Security,expose,expose,446,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* Note : this module is expected to remain private, do not expose it */",MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h:47,Integrability,Depend,Dependencies,47,/* ****************************************; * Dependencies; ******************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h:47,Availability,Error,Error,47,/*-****************************************; * Error codes handling; ******************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h:21,Availability,error,error,21,/* check and forward error code */,MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h:47,Availability,Error,Error,47,/*-****************************************; * Error Strings; ******************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/error_private.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:48,Integrability,Depend,Dependencies,48,/*-*****************************************; * Dependencies; ******************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:83,Performance,load,load,83,"/* It isn't required but allows to generate better code, saving a function pointer load from the IAT and an indirect jump.*/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:320,Energy Efficiency,allocate,allocated,320,"/**< library version number; to be used when checking dll version */; /*-****************************************; * FSE simple functions; ******************************************/; /*! FSE_compress() :; Compress content of buffer 'src', of size 'srcSize', into destination buffer 'dst'.; 'dst' buffer must be already allocated. Compression runs faster is dstCapacity >= FSE_compressBound(srcSize).; @return : size of compressed data (<= dstCapacity).; Special values : if return == 0, srcData is not compressible => Nothing is stored within dst !!!; if return == 1, srcData is a single byte symbol * srcSize times. Use RLE compression instead.; if FSE_isError(return), compression failed (more details using FSE_getErrorName()); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:121,Usability,simpl,simple,121,"/**< library version number; to be used when checking dll version */; /*-****************************************; * FSE simple functions; ******************************************/; /*! FSE_compress() :; Compress content of buffer 'src', of size 'srcSize', into destination buffer 'dst'.; 'dst' buffer must be already allocated. Compression runs faster is dstCapacity >= FSE_compressBound(srcSize).; @return : size of compressed data (<= dstCapacity).; Special values : if return == 0, srcData is not compressible => Nothing is stored within dst !!!; if return == 1, srcData is a single byte symbol * srcSize times. Use RLE compression instead.; if FSE_isError(return), compression failed (more details using FSE_getErrorName()); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:216,Availability,error,error,216,"/*! FSE_decompress():; Decompress FSE data from buffer 'cSrc', of size 'cSrcSize',; into already allocated destination buffer 'dst', of size 'dstCapacity'.; @return : size of regenerated data (<= maxDstSize),; or an error code, which can be tested using FSE_isError() . ** Important ** : FSE_decompress() does not decompress non-compressible nor RLE data !!!; Why ? : making this distinction requires a header.; Header management is intentionally delegated to the user layer, which can better manage special cases.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:97,Energy Efficiency,allocate,allocated,97,"/*! FSE_decompress():; Decompress FSE data from buffer 'cSrc', of size 'cSrcSize',; into already allocated destination buffer 'dst', of size 'dstCapacity'.; @return : size of regenerated data (<= maxDstSize),; or an error code, which can be tested using FSE_isError() . ** Important ** : FSE_decompress() does not decompress non-compressible nor RLE data !!!; Why ? : making this distinction requires a header.; Header management is intentionally delegated to the user layer, which can better manage special cases.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:241,Testability,test,tested,241,"/*! FSE_decompress():; Decompress FSE data from buffer 'cSrc', of size 'cSrcSize',; into already allocated destination buffer 'dst', of size 'dstCapacity'.; @return : size of regenerated data (<= maxDstSize),; or an error code, which can be tested using FSE_isError() . ** Important ** : FSE_decompress() does not decompress non-compressible nor RLE data !!!; Why ? : making this distinction requires a header.; Header management is intentionally delegated to the user layer, which can better manage special cases.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:34,Availability,Error,Error,34,/* maximum compressed size */; /* Error Management */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:33,Availability,error,error,33,/* tells if a return value is an error code */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:12,Availability,error,error,12,"/* provides error code string (useful for debugging) */; /*-*****************************************; * FSE advanced functions; ******************************************/; /*! FSE_compress2() :; Same as FSE_compress(), but allows the selection of 'maxSymbolValue' and 'tableLog'; Both parameters can be defined as '0' to mean : use default value; @return : size of compressed data; Special values : if return == 0, srcData is not compressible => Nothing is stored within cSrc !!!; if return == 1, srcData is a single byte symbol * srcSize times. Use RLE compression.; if FSE_isError(return), it's an error code.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:602,Availability,error,error,602,"/* provides error code string (useful for debugging) */; /*-*****************************************; * FSE advanced functions; ******************************************/; /*! FSE_compress2() :; Same as FSE_compress(), but allows the selection of 'maxSymbolValue' and 'tableLog'; Both parameters can be defined as '0' to mean : use default value; @return : size of compressed data; Special values : if return == 0, srcData is not compressible => Nothing is stored within cSrc !!!; if return == 1, srcData is a single byte symbol * srcSize times. Use RLE compression.; if FSE_isError(return), it's an error code.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:981,Availability,down,downsize,981,"/*-*****************************************; * FSE detailed API; ******************************************/; /*!; FSE_compress() does the following:; 1. count symbol occurrence from source[] into table count[] (see hist.h); 2. normalize counters so that sum(count[]) == Power_of_2 (2^tableLog); 3. save normalized counters to memory buffer using writeNCount(); 4. build encoding table 'CTable' from normalized counters; 5. encode the data stream using encoding table 'CTable'. FSE_decompress() does the following:; 1. read normalized counters with readNCount(); 2. build decoding table 'DTable' from normalized counters; 3. decode the data stream using decoding table 'DTable'. The following API allows targeting specific sub-functions for advanced tasks.; For example, it's possible to compress several blocks using the same 'CTable',; or to save and provide normalized distribution using external method.; */; /* *** COMPRESSION *** */; /*! FSE_optimalTableLog():; dynamically downsize 'tableLog' when conditions are met.; It saves CPU time, by using smaller tables, while preserving or even improving compression ratio.; @return : recommended tableLog (necessarily <= 'maxTableLog') */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:692,Availability,error,errorCode,692,"/*! FSE_normalizeCount():; normalize counts so that sum(count[]) == Power_of_2 (2^tableLog); 'normalizedCounter' is a table of short, of minimum size (maxSymbolValue+1).; useLowProbCount is a boolean parameter which trades off compressed size for; faster header decoding. When it is set to 1, the compressed data will be slightly; smaller. And when it is set to 0, FSE_readNCount() and FSE_buildDTable() will be; faster. If you are compressing a small amount of data (< 2 KB) then useLowProbCount=0; is a good default, since header deserialization makes a big speed difference.; Otherwise, useLowProbCount=1 is a good default, since the speed difference is small.; @return : tableLog,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:716,Testability,test,tested,716,"/*! FSE_normalizeCount():; normalize counts so that sum(count[]) == Power_of_2 (2^tableLog); 'normalizedCounter' is a table of short, of minimum size (maxSymbolValue+1).; useLowProbCount is a boolean parameter which trades off compressed size for; faster header decoding. When it is set to 1, the compressed data will be slightly; smaller. And when it is set to 0, FSE_readNCount() and FSE_buildDTable() will be; faster. If you are compressing a small amount of data (< 2 KB) then useLowProbCount=0; is a good default, since header deserialization makes a big speed difference.; Otherwise, useLowProbCount=1 is a good default, since the speed difference is small.; @return : tableLog,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:122,Availability,error,errorCode,122,"/*! FSE_writeNCount():; Compactly save 'normalizedCounter' into 'buffer'.; @return : size of the compressed table,; or an errorCode, which can be tested using FSE_isError(). */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:146,Testability,test,tested,146,"/*! FSE_writeNCount():; Compactly save 'normalizedCounter' into 'buffer'.; @return : size of the compressed table,; or an errorCode, which can be tested using FSE_isError(). */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:73,Integrability,depend,depends,73,/*! Constructor and Destructor of FSE_CTable.; Note that FSE_CTable size depends on 'tableLog' and 'maxSymbolValue' */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:9,Energy Efficiency,allocate,allocate,9,/* don't allocate that. It's only meant to be more restrictive than void* */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:116,Availability,error,errorCode,116,"/*! FSE_buildCTable():; Builds `ct`, which must be already allocated, using FSE_createCTable().; @return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:59,Energy Efficiency,allocate,allocated,59,"/*! FSE_buildCTable():; Builds `ct`, which must be already allocated, using FSE_createCTable().; @return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:140,Testability,test,tested,140,"/*! FSE_buildCTable():; Builds `ct`, which must be already allocated, using FSE_createCTable().; @return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:216,Availability,error,errorCode,216,"/*! FSE_compress_usingCTable():; Compress `src` using `ct` into `dst` which must be already allocated.; @return : size of compressed data (<= `dstCapacity`),; or 0 if compressed data could not fit into `dst`,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:92,Energy Efficiency,allocate,allocated,92,"/*! FSE_compress_usingCTable():; Compress `src` using `ct` into `dst` which must be already allocated.; @return : size of compressed data (<= `dstCapacity`),; or 0 if compressed data could not fit into `dst`,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:240,Testability,test,tested,240,"/*! FSE_compress_usingCTable():; Compress `src` using `ct` into `dst` which must be already allocated.; @return : size of compressed data (<= `dstCapacity`),; or 0 if compressed data could not fit into `dst`,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:642,Availability,error,error,642,"/*!; Tutorial :; ----------; The first step is to count all symbols. FSE_count() does this job very fast.; Result will be saved into 'count', a table of unsigned int, which must be already allocated, and have 'maxSymbolValuePtr[0]+1' cells.; 'src' is a table of bytes of size 'srcSize'. All values within 'src' MUST be <= maxSymbolValuePtr[0]; maxSymbolValuePtr[0] will be updated, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:677,Availability,Error,ErrorCode,677,"/*!; Tutorial :; ----------; The first step is to count all symbols. FSE_count() does this job very fast.; Result will be saved into 'count', a table of unsigned int, which must be already allocated, and have 'maxSymbolValuePtr[0]+1' cells.; 'src' is a table of bytes of size 'srcSize'. All values within 'src' MUST be <= maxSymbolValuePtr[0]; maxSymbolValuePtr[0] will be updated, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1565,Availability,error,error,1565,"essibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function r",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1629,Availability,Error,ErrorCode,1629,"essibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function r",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1977,Availability,error,error,1977,"g value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an erro",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2012,Availability,Error,ErrorCode,2012,"g value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an erro",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2327,Availability,error,error,2327,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2364,Availability,Error,ErrorCode,2364,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2776,Availability,error,error,2776,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2811,Availability,Error,ErrorCode,2811,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:3022,Availability,error,errorCode,3022,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:373,Deployability,update,updated,373,"/*!; Tutorial :; ----------; The first step is to count all symbols. FSE_count() does this job very fast.; Result will be saved into 'count', a table of unsigned int, which must be already allocated, and have 'maxSymbolValuePtr[0]+1' cells.; 'src' is a table of bytes of size 'srcSize'. All values within 'src' MUST be <= maxSymbolValuePtr[0]; maxSymbolValuePtr[0] will be updated, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:3128,Deployability,update,updated,3128,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:189,Energy Efficiency,allocate,allocated,189,"/*!; Tutorial :; ----------; The first step is to count all symbols. FSE_count() does this job very fast.; Result will be saved into 'count', a table of unsigned int, which must be already allocated, and have 'maxSymbolValuePtr[0]+1' cells.; 'src' is a table of bytes of size 'srcSize'. All values within 'src' MUST be <= maxSymbolValuePtr[0]; maxSymbolValuePtr[0] will be updated, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1369,Energy Efficiency,allocate,allocated,1369,"ted, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (wh",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1803,Energy Efficiency,allocate,allocated,1803,"nt() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2220,Energy Efficiency,allocate,allocated,2220,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:701,Testability,test,tested,701,"/*!; Tutorial :; ----------; The first step is to count all symbols. FSE_count() does this job very fast.; Result will be saved into 'count', a table of unsigned int, which must be already allocated, and have 'maxSymbolValuePtr[0]+1' cells.; 'src' is a table of bytes of size 'srcSize'. All values within 'src' MUST be <= maxSymbolValuePtr[0]; maxSymbolValuePtr[0] will be updated, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1653,Testability,test,tested,1653,"essibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function r",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2036,Testability,test,tested,2036,"g value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an erro",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2388,Testability,test,tested,2388,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2835,Testability,test,tested,2835,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:3046,Testability,test,tested,3046,"r-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError(); ex : buffer size too small). 'normalizedCounter' can then be used to create the compression table 'CTable'.; The space required by 'CTable' must be already allocated, using FSE_createCTable().; You can then use FSE_buildCTable() to fill 'CTable'.; If there is an error, both functions will return an ErrorCode (which can be tested using FSE_isError()). 'CTable' can then be used to compress 'src', with FSE_compress_usingCTable().; Similar to FSE_count(), the convention is that 'src' is assumed to be a table of char of size 'srcSize'; The function returns the size of compressed data (without header), necessarily <= `dstCapacity`.; If it returns '0', compressed data could not fit into 'dst'.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()).; */; /* *** DECOMPRESSION *** */; /*! FSE_readNCount():; Read compactly saved 'normalizedCounter' from 'rBuffer'.; @return : size read from 'rBuffer',; or an errorCode, which can be tested using FSE_isError().; maxSymbolValuePtr[0] and tableLogPtr[0] will also be updated with their respective values */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:66,Integrability,depend,depends,66,/*! Constructor and Destructor of FSE_DTable.; Note that its size depends on 'tableLog' */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:9,Energy Efficiency,allocate,allocate,9,/* don't allocate that. It's just a way to be more restrictive than void* */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:115,Availability,error,errorCode,115,"/*! FSE_buildDTable():; Builds 'dt', which must be already allocated, using FSE_createDTable().; return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:59,Energy Efficiency,allocate,allocated,59,"/*! FSE_buildDTable():; Builds 'dt', which must be already allocated, using FSE_createDTable().; return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:139,Testability,test,tested,139,"/*! FSE_buildDTable():; Builds 'dt', which must be already allocated, using FSE_createDTable().; return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:221,Availability,error,errorCode,221,"/*! FSE_decompress_usingDTable():; Decompress compressed source `cSrc` of size `cSrcSize` using `dt`; into `dst` which must be already allocated.; @return : size of regenerated data (necessarily <= `dstCapacity`),; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:135,Energy Efficiency,allocate,allocated,135,"/*! FSE_decompress_usingDTable():; Decompress compressed source `cSrc` of size `cSrcSize` using `dt`; into `dst` which must be already allocated.; @return : size of regenerated data (necessarily <= `dstCapacity`),; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:245,Testability,test,tested,245,"/*! FSE_decompress_usingDTable():; Decompress compressed source `cSrc` of size `cSrcSize` using `dt`; into `dst` which must be already allocated.; @return : size of regenerated data (necessarily <= `dstCapacity`),; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:864,Availability,error,error,864,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:899,Availability,error,error,899,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1200,Availability,error,error,1200,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1235,Availability,error,error,1235,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1562,Availability,error,error,1562,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1597,Availability,error,error,1597,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:389,Energy Efficiency,allocate,allocated,389,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1148,Energy Efficiency,allocate,allocated,1148,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:281,Performance,perform,performed,281,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1051,Performance,perform,performed,1051,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:924,Testability,test,tested,924,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1260,Testability,test,tested,1260,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1622,Testability,test,tested,1622,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:7,Integrability,Depend,Dependency,7,/* *** Dependency *** */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:32,Energy Efficiency,allocate,allocate,32,/* It is possible to statically allocate FSE CTable/DTable as a table of FSE_CTable/FSE_DTable using below macros */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:139,Energy Efficiency,allocate,allocated,139,"/**< same as FSE_optimalTableLog(), which used `minus==2` */; /* FSE_compress_wksp() :; * Same as FSE_compress2(), but using an externally allocated scratch buffer (`workSpace`).; * FSE_COMPRESS_WKSP_SIZE_U32() provides the minimum size required for `workSpace` as a table of FSE_CTable.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:165,Energy Efficiency,allocate,allocated,165,"/**< build a fake FSE_CTable, designed to compress always the same symbolValue */; /* FSE_buildCTable_wksp() :; * Same as FSE_buildCTable(), but using an externally allocated scratch buffer (`workSpace`).; * `wkspSize` must be >= `FSE_BUILD_CTABLE_WORKSPACE_SIZE_U32(maxSymbolValue, tableLog)` of `unsigned`.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:52,Energy Efficiency,allocate,allocated,52,"/**< Same as FSE_buildDTable(), using an externally allocated `workspace` produced with `FSE_BUILD_DTABLE_WKSP_SIZE_U32(maxSymbolValue)` */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:51,Energy Efficiency,allocate,allocated,51,"/**< same as FSE_decompress(), using an externally allocated `workSpace` produced with `FSE_DECOMPRESS_WKSP_SIZE_U32(maxLog, maxSymbolValue)` */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:641,Availability,error,errorCode,641,"/**<; These functions are inner components of FSE_compress_usingCTable().; They allow the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* ***********************************",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:778,Availability,error,error,778,"/**<; These functions are inner components of FSE_compress_usingCTable().; They allow the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* ***********************************",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1839,Availability,error,error,1839," the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* *****************************************; * FSE symbol decompression API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1860,Availability,error,errorCode,1860," the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* *****************************************; * FSE symbol decompression API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:359,Modifiability,variab,variables,359,"/**<; These functions are inner components of FSE_compress_usingCTable().; They allow the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* ***********************************",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1471,Performance,perform,performed,1471," the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* *****************************************; * FSE symbol decompression API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:814,Testability,test,tested,814,"/**<; These functions are inner components of FSE_compress_usingCTable().; They allow the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* ***********************************",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1884,Testability,test,tested,1884," the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* *****************************************; * FSE symbol decompression API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:27,Integrability,depend,depending,27,"/* precise table may vary, depending on U16 */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:503,Availability,error,errorCode,503,"/**<; Let's now decompose FSE_decompress_usingDTable() into its unitary components.; You will decode FSE-encoded symbols from the bitStream,; and also any other bitFields you put in, **in reverse order**. You will need a few variables to track your bitStream. They are :. BIT_DStream_t DStream; // Stream context; FSE_DState_t DState; // State context. Multiple ones are possible; FSE_DTable* DTablePtr; // Decoding table, provided by FSE_buildDTable(). The first thing to do is to init the bitStream.; errorCode = BIT_initDStream(&DStream, srcBuffer, srcSize);. You should then retrieve your initial state(s); (in reverse flushing order if you have several ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbo",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:667,Availability,error,errorCode,667,"/**<; Let's now decompose FSE_decompress_usingDTable() into its unitary components.; You will decode FSE-encoded symbols from the bitStream,; and also any other bitFields you put in, **in reverse order**. You will need a few variables to track your bitStream. They are :. BIT_DStream_t DStream; // Stream context; FSE_DState_t DState; // State context. Multiple ones are possible; FSE_DTable* DTablePtr; // Decoding table, provided by FSE_buildDTable(). The first thing to do is to init the bitStream.; errorCode = BIT_initDStream(&DStream, srcBuffer, srcSize);. You should then retrieve your initial state(s); (in reverse flushing order if you have several ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbo",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1292,Integrability,depend,depends,1292,":. BIT_DStream_t DStream; // Stream context; FSE_DState_t DState; // State context. Multiple ones are possible; FSE_DTable* DTablePtr; // Decoding table, provided by FSE_buildDTable(). The first thing to do is to init the bitStream.; errorCode = BIT_initDStream(&DStream, srcBuffer, srcSize);. You should then retrieve your initial state(s); (in reverse flushing order if you have several ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:225,Modifiability,variab,variables,225,"/**<; Let's now decompose FSE_decompress_usingDTable() into its unitary components.; You will decode FSE-encoded symbols from the bitStream,; and also any other bitFields you put in, **in reverse order**. You will need a few variables to track your bitStream. They are :. BIT_DStream_t DStream; // Stream context; FSE_DState_t DState; // State context. Multiple ones are possible; FSE_DTable* DTablePtr; // Decoding table, provided by FSE_buildDTable(). The first thing to do is to init the bitStream.; errorCode = BIT_initDStream(&DStream, srcBuffer, srcSize);. You should then retrieve your initial state(s); (in reverse flushing order if you have several ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbo",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1360,Performance,perform,performed,1360,". Multiple ones are possible; FSE_DTable* DTablePtr; // Decoding table, provided by FSE_buildDTable(). The first thing to do is to init the bitStream.; errorCode = BIT_initDStream(&DStream, srcBuffer, srcSize);. You should then retrieve your initial state(s); (in reverse flushing order if you have several ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end i",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2353,Performance,perform,performed,2353,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2027,Safety,detect,detect,2027,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2596,Safety,unsafe,unsafe,2596,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2140,Testability,test,test,2140,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2133,Usability,simpl,simple,2133,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:30,Safety,unsafe,unsafe,30,"/*! FSE_decodeSymbolFast() :; unsafe, only works if no symbol has a probability > 50% */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:333,Energy Efficiency,Reduce,Reduced,333,"/* **************************************************************; * Tuning parameters; ****************************************************************/; /*!MEMORY_USAGE :; * Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.); * Increasing memory usage improves compression ratio; * Reduced memory usage can improve speed, due to cache effect; * Recommended max value is 14, for 16KB, which nicely fits into Intel x86 L1 cache */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:380,Performance,cache,cache,380,"/* **************************************************************; * Tuning parameters; ****************************************************************/; /*!MEMORY_USAGE :; * Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.); * Increasing memory usage improves compression ratio; * Reduced memory usage can improve speed, due to cache effect; * Recommended max value is 14, for 16KB, which nicely fits into Intel x86 L1 cache */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:471,Performance,cache,cache,471,"/* **************************************************************; * Tuning parameters; ****************************************************************/; /*!MEMORY_USAGE :; * Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.); * Increasing memory usage improves compression ratio; * Reduced memory usage can improve speed, due to cache effect; * Recommended max value is 14, for 16KB, which nicely fits into Intel x86 L1 cache */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:50,Security,authoriz,authorized,50,/*!FSE_MAX_SYMBOL_VALUE :; * Maximum symbol value authorized.; * Required for proper stack allocation */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:3,Testability,assert,assert,3,/* assert */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:69,Availability,Error,Error,69,/* **************************************************************; * Error Management; ****************************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:20,Modifiability,variab,variable,20,/* use only *after* variable declarations */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:293,Availability,mainten,maintenance,293,"/* **************************************************************; * Templates; ****************************************************************/; /*; designed to be included; for type-specific functions (template emulation in C); Objective is to write these functions only once, for improved maintenance; */; /* safety checks */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:313,Safety,safe,safety,313,"/* **************************************************************; * Templates; ****************************************************************/; /*; designed to be included; for type-specific functions (template emulation in C); Objective is to write these functions only once, for improved maintenance; */; /* safety checks */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:3,Safety,Sanity Check,Sanity Checks,3,/* Sanity Checks */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:13,Availability,down,down,13,"/* Init, lay down lowprob symbols */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:13,Availability,down,down,13,"/* First lay down the symbols in order.; * We use a uint64_t to lay down 8 bytes at a time. This reduces branch; * misses since small blocks generally have small table logs, so nearly; * all symbols have counts <= 8. We ensure we have 8 bytes at the end of; * our buffer to handle the over-write.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:68,Availability,down,down,68,"/* First lay down the symbols in order.; * We use a uint64_t to lay down 8 bytes at a time. This reduces branch; * misses since small blocks generally have small table logs, so nearly; * all symbols have counts <= 8. We ensure we have 8 bytes at the end of; * our buffer to handle the over-write.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:97,Energy Efficiency,reduce,reduces,97,"/* First lay down the symbols in order.; * We use a uint64_t to lay down 8 bytes at a time. This reduces branch; * misses since small blocks generally have small table logs, so nearly; * all symbols have counts <= 8. We ensure we have 8 bytes at the end of; * our buffer to handle the over-write.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:168,Testability,log,logs,168,"/* First lay down the symbols in order.; * We use a uint64_t to lay down 8 bytes at a time. This reduces branch; * misses since small blocks generally have small table logs, so nearly; * all symbols have counts <= 8. We ensure we have 8 bytes at the end of; * our buffer to handle the over-write.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:120,Modifiability,variab,variable,120,"/* Now we spread those positions across the table.; * The benefit of doing it in two stages is that we avoid the the; * variable size inner loop, which caused lots of branch misses.; * Now we can run through all the positions without any branch misses.; * We unroll the loop twice, since that is what emperically worked best.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:103,Safety,avoid,avoid,103,"/* Now we spread those positions across the table.; * The benefit of doing it in two stages is that we avoid the the; * variable size inner loop, which caused lots of branch misses.; * Now we can run through all the positions without any branch misses.; * We unroll the loop twice, since that is what emperically worked best.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:3,Safety,Sanity check,Sanity checks,3,/* Sanity checks */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:8,Testability,test,test,8,/* This test must be static */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:8,Testability,test,test,8,/* This test must be static */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:8,Testability,test,test,8,/* This test must be static */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:3,Safety,Avoid,Avoids,3,/* Avoids the FORCE_INLINE of the _body() function. */,MatchSource.CODE_COMMENT,builtins/zstd/common/fse_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:7,Integrability,Depend,Dependencies,7,/* *** Dependencies *** */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:264,Integrability,interface,interface,264,"/* *** library symbols visibility *** */; /* Note : when linking with -fvisibility=hidden on gcc, or by default on Visual,; * HUF symbols remain ""private"" (internal symbols for library only).; * Set macro FSE_DLL_EXPORT to 1 if you want HUF symbols visible on DLL interface */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:72,Performance,load,load,72,"/* not required, just to generate faster code (saves a function pointer load from IAT and an indirect jump) */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:230,Energy Efficiency,allocate,allocated,230,"/* ========================== */; /* *** simple functions *** */; /* ========================== */; /** HUF_compress() :; * Compress content from buffer 'src', of size 'srcSize', into buffer 'dst'.; * 'dst' buffer must be already allocated.; * Compression runs faster if `dstCapacity` >= HUF_compressBound(srcSize).; * `srcSize` must be <= `HUF_BLOCKSIZE_MAX` == 128 KB.; * @return : size of compressed data (<= `dstCapacity`).; * Special values : if return == 0, srcData is not compressible => Nothing is stored within dst !!!; * if HUF_isError(return), compression failed (more details using HUF_getErrorName()); */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:41,Usability,simpl,simple,41,"/* ========================== */; /* *** simple functions *** */; /* ========================== */; /** HUF_compress() :; * Compress content from buffer 'src', of size 'srcSize', into buffer 'dst'.; * 'dst' buffer must be already allocated.; * Compression runs faster if `dstCapacity` >= HUF_compressBound(srcSize).; * `srcSize` must be <= `HUF_BLOCKSIZE_MAX` == 128 KB.; * @return : size of compressed data (<= `dstCapacity`).; * Special values : if return == 0, srcData is not compressible => Nothing is stored within dst !!!; * if HUF_isError(return), compression failed (more details using HUF_getErrorName()); */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:486,Availability,error,error,486,"/** HUF_decompress() :; * Decompress HUF data from buffer 'cSrc', of size 'cSrcSize',; * into already allocated buffer 'dst', of minimum size 'dstSize'.; * `originalSize` : **must** be the ***exact*** size of original (uncompressed) data.; * Note : in contrast with FSE, HUF_decompress can regenerate; * RLE (cSrcSize==1) and uncompressed (cSrcSize==dstSize) data,; * because it knows size to regenerate (originalSize).; * @return : size of regenerated data (== originalSize),; * or an error code, which can be tested using HUF_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:102,Energy Efficiency,allocate,allocated,102,"/** HUF_decompress() :; * Decompress HUF data from buffer 'cSrc', of size 'cSrcSize',; * into already allocated buffer 'dst', of minimum size 'dstSize'.; * `originalSize` : **must** be the ***exact*** size of original (uncompressed) data.; * Note : in contrast with FSE, HUF_decompress can regenerate; * RLE (cSrcSize==1) and uncompressed (cSrcSize==dstSize) data,; * because it knows size to regenerate (originalSize).; * @return : size of regenerated data (== originalSize),; * or an error code, which can be tested using HUF_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:511,Testability,test,tested,511,"/** HUF_decompress() :; * Decompress HUF data from buffer 'cSrc', of size 'cSrcSize',; * into already allocated buffer 'dst', of minimum size 'dstSize'.; * `originalSize` : **must** be the ***exact*** size of original (uncompressed) data.; * Note : in contrast with FSE, HUF_decompress can regenerate; * RLE (cSrcSize==1) and uncompressed (cSrcSize==dstSize) data,; * because it knows size to regenerate (originalSize).; * @return : size of regenerated data (== originalSize),; * or an error code, which can be tested using HUF_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:49,Availability,Error,Error,49,/**< maximum compressed size (worst case) */; /* Error Management */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:35,Availability,error,error,35,/**< tells if a return value is an error code */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:14,Availability,error,error,14,"/**< provides error code string (useful for debugging) */; /* *** Advanced function *** */; /** HUF_compress2() :; * Same as HUF_compress(), but offers control over `maxSymbolValue` and `tableLog`.; * `maxSymbolValue` must be <= HUF_SYMBOLVALUE_MAX .; * `tableLog` must be `<= HUF_TABLELOG_MAX` . */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:76,Energy Efficiency,allocate,allocated,76,"/** HUF_compress4X_wksp() :; * Same as HUF_compress2(), but uses externally allocated `workSpace`.; * `workspace` must have minimum alignment of 4, and be at least as large as HUF_WORKSPACE_SIZE */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:7,Integrability,Depend,Dependencies,7,/* *** Dependencies *** */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:90,Security,expose,exposed,90,"/* static allocation of HUF's Compression Table */; /* this is a private definition, just exposed for allocation and strict aliasing purpose. never EVER access its members directly */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:153,Security,access,access,153,"/* static allocation of HUF's Compression Table */; /* this is a private definition, just exposed for allocation and strict aliasing purpose. never EVER access its members directly */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:39,Availability,error,errors,39,/**< considers RLE and uncompressed as errors */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:39,Availability,error,errors,39,/**< considers RLE and uncompressed as errors */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:231,Security,expose,exposed,231,"/* ****************************************; * HUF detailed API; * ****************************************/; /*! HUF_compress() does the following:; * 1. count symbol occurrence from source[] into table count[] using FSE_count() (exposed within ""fse.h""); * 2. (optional) refine tableLog using HUF_optimalTableLog(); * 3. build Huffman table from count using HUF_buildCTable(); * 4. save Huffman table to memory buffer using HUF_writeCTable(); * 5. encode the data stream using HUF_compress4X_usingCTable(); *; * The following API allows targeting specific sub-functions for advanced tasks.; * For example, it's possible to compress several blocks using the same 'CTable',; * or to save and regenerate 'CTable' using external methods.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:80,Energy Efficiency,allocate,allocated,80,"/** HUF_buildCTable_wksp() :; * Same as HUF_buildCTable(), but using externally allocated scratch buffer.; * `workSpace` must be aligned on 4-bytes boundaries, and its size must be >= HUF_CTABLE_WORKSPACE_SIZE.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:161,Availability,error,error,161,"/*! HUF_readStats() :; * Read compact Huffman tree, saved by HUF_writeCTable().; * `huffWeight` is destination buffer.; * @return : size read from `src` , or an error Code .; * Note : Needed by HUF_readCTable() and HUF_readDTableXn() . */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:26,Performance,Load,Loading,26,/** HUF_readCTable() :; * Loading a CTable saved with HUF_writeCTable() */,MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:247,Energy Efficiency,allocate,allocated,247,"/** HUF_getNbBits() :; * Read nbBits from CTable symbolTable, for symbol `symbolValue` presumed <= HUF_SYMBOLVALUE_MAX; * Note 1 : is not inlined, as HUF_CElt definition is private; * Note 2 : const void* used, so that it can provide a statically allocated table as argument (which uses type U32) */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:283,Availability,error,errors,283,"/**; * The minimum workspace size for the `workSpace` used in; * HUF_readDTableX1_wksp() and HUF_readDTableX2_wksp().; *; * The space used depends on HUF_TABLELOG_MAX, ranging from ~1500 bytes when; * HUF_TABLE_LOG_MAX=12 to ~1850 bytes when HUF_TABLE_LOG_MAX=15.; * Buffer overflow errors may potentially occur if code modifications result in; * a required workspace size greater than that specified in the following; * macro.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:139,Integrability,depend,depends,139,"/**; * The minimum workspace size for the `workSpace` used in; * HUF_readDTableX1_wksp() and HUF_readDTableX2_wksp().; *; * The space used depends on HUF_TABLELOG_MAX, ranging from ~1500 bytes when; * HUF_TABLE_LOG_MAX=12 to ~1850 bytes when HUF_TABLE_LOG_MAX=15.; * Buffer overflow errors may potentially occur if code modifications result in; * a required workspace size greater than that specified in the following; * macro.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/huf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:47,Integrability,Depend,Dependencies,47,/*-****************************************; * Dependencies; ******************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:175,Safety,detect,detection,175,/*-**************************************************************; * Memory I/O API; *****************************************************************/; /*=== Static platform detection ===*/,MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:571,Integrability,depend,depends,571,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:843,Integrability,depend,depending,843,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:282,Modifiability,portab,portable,282,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:522,Modifiability,portab,portable,522,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:612,Modifiability,portab,portable,612,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:769,Modifiability,portab,portable,769,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:460,Performance,perform,performance,460,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:933,Performance,perform,performance,933,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:273,Safety,safe,safe,273,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:513,Safety,Safe,Safe,513,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:641,Safety,safe,safe,641,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:208,Security,access,access,208,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:433,Security,access,access,433,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:746,Security,access,access,746,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:1014,Security,access,accessing-unaligned-memory,1014,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:22,Performance,perform,performance,22,/* don't use static : performance detrimental */,MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:102,Performance,perform,performance,102,"/* violates C standard, by lying on structure alignment.; Only use if no other choice to achieve best performance on target platform */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:27,Safety,safe,safer,27,"/* __pack instructions are safer, but compiler specific, hence potentially problematic for some compilers */; /* currently only defined for gcc and icc */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:19,Safety,safe,safe,19,"/* default method, safe and standard.; can sometimes prove slower */",MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:13,Testability,test,tested,13,/* code only tested on 32 and 64 bits systems */,MatchSource.CODE_COMMENT,builtins/zstd/common/mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:396,Integrability,Depend,Dependencies,396,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* ====== Dependencies ======= */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:3,Testability,assert,assert,3,/* assert */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:11,Energy Efficiency,adapt,adaptation,11,/* pthread adaptation */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:11,Modifiability,adapt,adaptation,11,/* pthread adaptation */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:7,Performance,queue,queue,7,/* The queue is a circular buffer */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:20,Performance,queue,queue,20,/* Indicates if the queue is empty */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:26,Performance,queue,queue,26,/* The mutex protects the queue */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:13,Modifiability,variab,variable,13,/* Condition variable for pushers to wait on when the queue is full */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:54,Performance,queue,queue,54,/* Condition variable for pushers to wait on when the queue is full */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:13,Modifiability,variab,variables,13,/* Condition variables for poppers to wait on when the queue is empty */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:55,Performance,queue,queue,55,/* Condition variables for poppers to wait on when the queue is empty */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:38,Availability,down,down,38,/* Indicates if the queue is shutting down */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:20,Performance,queue,queue,20,/* Indicates if the queue is shutting down */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:114,Availability,failure,failure,114,/* POOL_thread() :; * Work thread for the thread pool.; * Waits for jobs and executes them.; * @returns : NULL on failure else non-null.; */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:43,Performance,queue,queue,43,/* Lock the mutex and wait for a non-empty queue or until shutdown */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:12,Performance,queue,queueEmpty,12,"/* even if !queueEmpty, (possible if numThreadsBusy >= threadLimit),; * a few threads will be shutdown while !queueEmpty,; * but enough threads will remain active to finish the queue */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:110,Performance,queue,queueEmpty,110,"/* even if !queueEmpty, (possible if numThreadsBusy >= threadLimit),; * a few threads will be shutdown while !queueEmpty,; * but enough threads will remain active to finish the queue */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:177,Performance,queue,queue,177,"/* even if !queueEmpty, (possible if numThreadsBusy >= threadLimit),; * a few threads will be shutdown while !queueEmpty,; * but enough threads will remain active to finish the queue */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:21,Performance,queue,queue,21,/* Pop a job off the queue */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:19,Performance,queue,queue,19,"/* If the intended queue size was 0, signal after finishing job */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate the context and zero initialize */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:22,Performance,queue,queue,22,/* Initialize the job queue.; * It needs one extra space since one space is wasted to differentiate; * empty and full queues.; */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:118,Performance,queue,queues,118,/* Initialize the job queue.; * It needs one extra space since one space is wasted to differentiate; * empty and full queues.; */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate space for the thread handles */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:13,Availability,error,errors,13,/* Check for errors */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:32,Performance,queue,queue,32,"/*! POOL_join() :; Shutdown the queue, wake any sleeping threads, and join all of the threads.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:8,Availability,down,down,8,/* Shut down the queue */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:17,Performance,queue,queue,17,/* Shut down the queue */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:32,Availability,error,error,32,"/* @return : 0 on success, 1 on error */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:32,Availability,error,error,32,"/* @return : 0 on success, 1 on error */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:24,Performance,queue,queue,24,"/**; * Returns 1 if the queue is full and 0 otherwise.; *; * When queueSize is 1 (pool was created with an intended queueSize of 0),; * then a queue is empty if there is a thread free _and_ no job is waiting.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:66,Performance,queue,queueSize,66,"/**; * Returns 1 if the queue is full and 0 otherwise.; *; * When queueSize is 1 (pool was created with an intended queueSize of 0),; * then a queue is empty if there is a thread free _and_ no job is waiting.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:116,Performance,queue,queueSize,116,"/**; * Returns 1 if the queue is full and 0 otherwise.; *; * When queueSize is 1 (pool was created with an intended queueSize of 0),; * then a queue is empty if there is a thread free _and_ no job is waiting.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:143,Performance,queue,queue,143,"/**; * Returns 1 if the queue is full and 0 otherwise.; *; * When queueSize is 1 (pool was created with an intended queueSize of 0),; * then a queue is empty if there is a thread free _and_ no job is waiting.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:36,Performance,queue,queue,36,/* Wait until there is space in the queue for the new job */,MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c:76,Performance,multi-thread,multi-threading,76,"/* ZSTD_MULTITHREAD not defined */; /* ========================== */; /* No multi-threading support */; /* ========================== */; /* We don't need any data, but if it is empty, malloc() might return NULL. */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:140,Performance,queue,queued,140,"/*! POOL_create() :; * Create a thread pool with at most `numThreads` threads.; * `numThreads` must be at least 1.; * The maximum number of queued jobs before blocking is `queueSize`.; * @return : POOL_ctx pointer on success, else NULL.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:172,Performance,queue,queueSize,172,"/*! POOL_create() :; * Create a thread pool with at most `numThreads` threads.; * `numThreads` must be at least 1.; * The maximum number of queued jobs before blocking is `queueSize`.; * @return : POOL_ctx pointer on success, else NULL.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:308,Availability,error,error,308,"/*! POOL_resize() :; * Expands or shrinks pool's number of threads.; * This is more efficient than releasing + creating a new context,; * since it tries to preserve and re-use existing threads.; * `numThreads` must be at least 1.; * @return : 0 when resize was successful,; * !0 (typically 1) if there is an error.; * note : only numThreads can be resized, queueSize remains unchanged.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:84,Energy Efficiency,efficient,efficient,84,"/*! POOL_resize() :; * Expands or shrinks pool's number of threads.; * This is more efficient than releasing + creating a new context,; * since it tries to preserve and re-use existing threads.; * `numThreads` must be at least 1.; * @return : 0 when resize was successful,; * !0 (typically 1) if there is an error.; * note : only numThreads can be resized, queueSize remains unchanged.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:357,Performance,queue,queueSize,357,"/*! POOL_resize() :; * Expands or shrinks pool's number of threads.; * This is more efficient than releasing + creating a new context,; * since it tries to preserve and re-use existing threads.; * `numThreads` must be at least 1.; * @return : 0 when resize was successful,; * !0 (typically 1) if there is an error.; * note : only numThreads can be resized, queueSize remains unchanged.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:138,Performance,queue,queue,138,"/*! POOL_add() :; * Add the job `function(opaque)` to the thread pool. `ctx` must be valid.; * Possibly blocks until there is room in the queue.; * Note : The function may be executed asynchronously,; * therefore, `opaque` must live until function has been completed.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h:86,Availability,avail,available,86,"/*! POOL_tryAdd() :; * Add the job `function(opaque)` to thread pool _if_ a worker is available.; * Returns immediately even if not (does not block).; * @return : 1 if successful, 0 if not.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/pool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/pool.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.c:496,Integrability,wrap,wrapper,496,"/**; * Copyright (c) 2016 Tino Reichardt; * All rights reserved.; *; * You can contact the author at:; * - zstdmt source repository: https://github.com/mcmilk/zstdmt; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /**; * This file will hold wrapper for systems, which do not support pthreads; */",MatchSource.CODE_COMMENT,builtins/zstd/common/threading.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.c:25,Safety,avoid,avoid,25,/* create fake symbol to avoid empty translation unit warning */,MatchSource.CODE_COMMENT,builtins/zstd/common/threading.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.c:34,Integrability,Wrap,Wrapper,34,"/**; * Windows minimalist Pthread Wrapper, based on :; * http://www.cse.wustl.edu/~schmidt/win32-cv-1.html; */; /* === Dependencies === */",MatchSource.CODE_COMMENT,builtins/zstd/common/threading.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.c:119,Integrability,Depend,Dependencies,119,"/**; * Windows minimalist Pthread Wrapper, based on :; * http://www.cse.wustl.edu/~schmidt/win32-cv-1.html; */; /* === Dependencies === */",MatchSource.CODE_COMMENT,builtins/zstd/common/threading.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h:34,Integrability,Wrap,Wrapper,34,"/**; * Windows minimalist Pthread Wrapper, based on :; * http://www.cse.wustl.edu/~schmidt/win32-cv-1.html; */",MatchSource.CODE_COMMENT,builtins/zstd/common/threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h:13,Modifiability,variab,variable,13,/* condition variable */,MatchSource.CODE_COMMENT,builtins/zstd/common/threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h:21,Integrability,wrap,wrappers,21,/**; * add here more wrappers as required; */,MatchSource.CODE_COMMENT,builtins/zstd/common/threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h:33,Safety,detect,detection,33,/* posix assumed ; need a better detection method */,MatchSource.CODE_COMMENT,builtins/zstd/common/threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h:129,Modifiability,variab,variables,129,"/* DEBUGLEVEL >= 1 */; /* Debug implementation of threading.; * In this implementation we use pointers for mutexes and condition variables.; * This way, if we forget to init/destroy them the program will crash or ASAN; * will report leaks.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/threading.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c:430,Integrability,Depend,Dependencies,430,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /*-*************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c:52,Availability,Error,Error,52,/*-****************************************; * ZSTD Error Management; ******************************************/,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c:54,Availability,error,error,54,/*! ZSTD_isError() :; * tells if a return value is an error code; * symbol is required for external callers */,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c:38,Availability,error,error,38,/*! ZSTD_getErrorName() :; * provides error code string from function result (useful for debugging) */,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c:40,Availability,error,error,40,/*! ZSTD_getErrorString() :; * provides error code string from enum */,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c:50,Energy Efficiency,efficient,efficient,50,"/* calloc implemented as malloc+memset;; * not as efficient as calloc, but next best guess for custom malloc */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_common.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_common.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_deps.h:407,Integrability,depend,dependencies,407,"/*; * Copyright (c) 2016-2020, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* This file provides common libc dependencies that zstd requires.; * The purpose is to allow replacing this file with a custom implementation; * to compile zstd without libc support.; */; /* Need:; * NULL; * INT_MAX; * UINT_MAX; * ZSTD_memcpy(); * ZSTD_memset(); * ZSTD_memmove(); */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_deps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_deps.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_deps.h:41,Testability,assert,assert,41,/* ZSTD_DEPS_NEED_MATH64 */; /* Need:; * assert(); */,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_deps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_deps.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:267,Integrability,Depend,Dependencies,267,"/* this module contains definitions which must be identical; * across compression, decompression and dictBuilder.; * It also contains a few functions useful to at least 2 of them; * and which benefit from being inlined */; /*-*************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:3,Testability,assert,assert,3,"/* assert, DEBUGLOG, RAWLOG, g_debuglevel */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:14,Deployability,update,update,14,"/* XXH_reset, update, digest */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:15,Testability,assert,assert,15,/* ---- static assert (debug) --- */,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:28,Availability,error,error,28,"/**; * Return the specified error if the condition evaluates to true.; *; * In debug modes, prints additional information.; * In order to do that (particularly, printing the conditional that failed),; * this can't just wrap RETURN_ERROR().; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:219,Integrability,wrap,wrap,219,"/**; * Return the specified error if the condition evaluates to true.; *; * In debug modes, prints additional information.; * In order to do that (particularly, printing the conditional that failed),; * this can't just wrap RETURN_ERROR().; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:44,Availability,error,error,44,"/**; * Unconditionally return the specified error.; *; * In debug modes, prints additional information.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:50,Availability,error,error,50,"/**; * If the provided expression evaluates to an error code, returns that error code.; *; * In debug modes, prints additional information.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:75,Availability,error,error,75,"/**; * If the provided expression evaluates to an error code, returns that error code.; *; * In debug modes, prints additional information.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:43,Modifiability,variab,variable,43,/* C standard doesn't allow `static const` variable to be init using another `static const` variable */,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:92,Modifiability,variab,variable,92,/* C standard doesn't allow `static const` variable to be init using another `static const` variable */,MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:163,Safety,detect,detection,163,"/*! ZSTD_wildcopy() :; * Custom version of ZSTD_memcpy(), can over read/write up to WILDCOPY_OVERLENGTH bytes (if length==0); * @param ovtype controls the overlap detection; * - ZSTD_no_overlap: The source and destination are guaranteed to be at least WILDCOPY_VECLEN bytes apart.; * - ZSTD_overlap_src_before_dst: The src and dst may overlap, but they MUST be at least 8 bytes apart.; * The src buffer must be before the dst buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:239,Availability,down,down,239,"/* when workspace is continuously too large; * during at least this number of times,; * context's memory usage is considered wasteful,; * because it's sized to handle a worst case scenario which rarely happens.; * In which case, resize it down to free some memory */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:21,Deployability,continuous,continuously,21,"/* when workspace is continuously too large; * during at least this number of times,; * context's memory usage is considered wasteful,; * because it's sized to handle a worst case scenario which rarely happens.; * In which case, resize it down to free some memory */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:144,Availability,error,errors,144,"/**; * Contains the compressed frame size and an upper-bound for the decompressed frame size.; * Note: before using `compressedSize`, check for errors using ZSTD_isError().; * similarly, before using `decompressedBound`, check for errors using:; * `decompressedBound != ZSTD_CONTENTSIZE_ERROR`; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:231,Availability,error,errors,231,"/**; * Contains the compressed frame size and an upper-bound for the decompressed frame size.; * Note: before using `compressedSize`, check for errors using ZSTD_isError().; * similarly, before using `decompressedBound`, check for errors using:; * `decompressedBound != ZSTD_CONTENTSIZE_ERROR`; */",MatchSource.CODE_COMMENT,builtins/zstd/common/zstd_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:3,Testability,assert,assert,3,"/* assert, DEBUGLOG */",MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:69,Availability,Error,Error,69,/* **************************************************************; * Error Management; ****************************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:293,Availability,mainten,maintenance,293,"/* **************************************************************; * Templates; ****************************************************************/; /*; designed to be included; for type-specific functions (template emulation in C); Objective is to write these functions only once, for improved maintenance; */; /* safety checks */",MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:313,Safety,safe,safety,313,"/* **************************************************************; * Templates; ****************************************************************/; /*; designed to be included; for type-specific functions (template emulation in C); Objective is to write these functions only once, for improved maintenance; */; /* safety checks */",MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:108,Energy Efficiency,allocate,allocated,108,"/* Function templates */; /* FSE_buildCTable_wksp() :; * Same as FSE_buildCTable(), but using an externally allocated scratch buffer (`workSpace`).; * wkspSize should be sized to handle worst case situation, which is `1<<max_tableLog * sizeof(FSE_FUNCTION_TYPE)`; * workSpace must also be properly aligned with FSE_FUNCTION_TYPE requirements; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:22,Safety,safe,safe,22,/* write in buffer is safe */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:35,Safety,safe,safely,35,/* provides the minimum logSize to safely represent a distribution */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:24,Testability,log,logSize,24,/* provides the minimum logSize to safely represent a distribution */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:19,Energy Efficiency,reduce,reduced,19,/* Accuracy can be reduced */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:21,Safety,safe,safely,21,/* Need a minimum to safely represent all symbol values */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:3,Safety,risk,risk,3,/* risk of rounding to zero */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:87,Safety,detect,detected,87,"/* all values are pretty poor;; probably incompressible data (should have already been detected);; find max, then give all remaining points to max */",MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:3,Safety,Sanity check,Sanity checks,3,/* Sanity checks */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:3,Safety,Sanity check,Sanity checks,3,/* Sanity checks */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:20,Availability,avail,available,20,/* not enough space available to write a bitstream */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:3,Testability,test,test,3,/* test bit 2 */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:8,Testability,test,test,8,/* this test must be static */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:8,Testability,test,test,8,/* this test must be static */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:77,Energy Efficiency,allocate,allocated,77,"/* FSE_compress_wksp() :; * Same as FSE_compress2(), but using an externally allocated scratch buffer (`workSpace`).; * `wkspSize` size must be `(1<<tableLog)`.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:15,Availability,failure,failures,15,/* compilation failures here means scratchBuffer is not large enough */,MatchSource.CODE_COMMENT,builtins/zstd/compress/fse_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c:752,Integrability,depend,dependencies,752,"/* ******************************************************************; * hist : Histogram functions; * part of Finite State Entropy project; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - FSE source repository : https://github.com/Cyan4973/FiniteStateEntropy; * - Public forum : https://groups.google.com/forum/#!forum/lz4c; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /* --- dependencies --- */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c:3,Testability,assert,assert,3,"/* assert, DEBUGLOG */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c:3,Availability,ERROR,ERROR,3,/* ERROR */,MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c:7,Availability,Error,Error,7,/* --- Error management --- */,MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c:398,Availability,error,error,398,"/* HIST_count_parallel_wksp() :; * store histogram into 4 intermediate tables, recombined at the end.; * this design makes better use of OoO cpus,; * and is noticeably faster when some values are heavily repeated.; * But it needs some additional workspace for intermediate tables.; * `workSpace` must be a U32 table of size >= HIST_WKSP_SIZE_U32.; * @return : largest histogram frequency,; * or an error code (notably when histogram's alphabet is larger than *maxSymbolValuePtr) */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c:3,Safety,safe,safety,3,/* safety checks */,MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c:17,Safety,unsafe,unsafe,17,/* fast variant (unsafe : won't check if src contains values beyond count[] limit) */,MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:752,Integrability,depend,dependencies,752,"/* ******************************************************************; * hist : Histogram functions; * part of Finite State Entropy project; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - FSE source repository : https://github.com/Cyan4973/FiniteStateEntropy; * - Public forum : https://groups.google.com/forum/#!forum/lz4c; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /* --- dependencies --- */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:361,Availability,error,error,361,"/* --- simple histogram functions --- */; /*! HIST_count():; * Provides the precise count of each byte within a table 'count'.; * 'count' is a table of unsigned int, of minimum size (*maxSymbolValuePtr+1).; * Updates *maxSymbolValuePtr with actual largest symbol value detected.; * @return : count of the most frequent symbol (which isn't identified).; * or an error code, which can be tested using HIST_isError().; * note : if return == srcSize, there is only one symbol.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:209,Deployability,Update,Updates,209,"/* --- simple histogram functions --- */; /*! HIST_count():; * Provides the precise count of each byte within a table 'count'.; * 'count' is a table of unsigned int, of minimum size (*maxSymbolValuePtr+1).; * Updates *maxSymbolValuePtr with actual largest symbol value detected.; * @return : count of the most frequent symbol (which isn't identified).; * or an error code, which can be tested using HIST_isError().; * note : if return == srcSize, there is only one symbol.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:269,Safety,detect,detected,269,"/* --- simple histogram functions --- */; /*! HIST_count():; * Provides the precise count of each byte within a table 'count'.; * 'count' is a table of unsigned int, of minimum size (*maxSymbolValuePtr+1).; * Updates *maxSymbolValuePtr with actual largest symbol value detected.; * @return : count of the most frequent symbol (which isn't identified).; * or an error code, which can be tested using HIST_isError().; * note : if return == srcSize, there is only one symbol.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:386,Testability,test,tested,386,"/* --- simple histogram functions --- */; /*! HIST_count():; * Provides the precise count of each byte within a table 'count'.; * 'count' is a table of unsigned int, of minimum size (*maxSymbolValuePtr+1).; * Updates *maxSymbolValuePtr with actual largest symbol value detected.; * @return : count of the most frequent symbol (which isn't identified).; * or an error code, which can be tested using HIST_isError().; * note : if return == srcSize, there is only one symbol.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:7,Usability,simpl,simple,7,"/* --- simple histogram functions --- */; /*! HIST_count():; * Provides the precise count of each byte within a table 'count'.; * 'count' is a table of unsigned int, of minimum size (*maxSymbolValuePtr+1).; * Updates *maxSymbolValuePtr with actual largest symbol value detected.; * @return : count of the most frequent symbol (which isn't identified).; * or an error code, which can be tested using HIST_isError().; * note : if return == srcSize, there is only one symbol.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:35,Availability,error,error,35,/**< tells if a return value is an error code */; /* --- advanced histogram functions --- */,MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:146,Safety,unsafe,unsafe,146,"/** HIST_countFast() :; * same as HIST_count(), but blindly trusts that all byte values within src are <= *maxSymbolValuePtr.; * This function is unsafe, and will segfault if any value within `src` is `> *maxSymbolValuePtr`; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:361,Availability,error,error,361,"/*! HIST_count_simple() :; * Same as HIST_countFast(), this function is unsafe,; * and will segfault if any value within `src` is `> *maxSymbolValuePtr`.; * It is also a bit slower for large inputs.; * However, it does not need any additional memory (not even on stack).; * @return : count of the most frequent symbol.; * Note this function doesn't produce any error (i.e. it must succeed).; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:72,Safety,unsafe,unsafe,72,"/*! HIST_count_simple() :; * Same as HIST_countFast(), this function is unsafe,; * and will segfault if any value within `src` is `> *maxSymbolValuePtr`.; * It is also a bit slower for large inputs.; * However, it does not need any additional memory (not even on stack).; * @return : count of the most frequent symbol.; * Note this function doesn't produce any error (i.e. it must succeed).; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/hist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c:69,Availability,Error,Error,69,/* **************************************************************; * Error Management; ****************************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/compress/huf_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c:20,Modifiability,variab,variable,20,/* use only *after* variable declarations */,MatchSource.CODE_COMMENT,builtins/zstd/compress/huf_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c:10,Energy Efficiency,reduce,reduce,10,/* Try to reduce the next power of 2 above totalCost because we; * gain back half the rank.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/huf_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c:26,Energy Efficiency,power,power,26,/* Try to reduce the next power of 2 above totalCost because we; * gain back half the rank.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/huf_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c:20,Testability,test,test,20,/* HUF_MAX_TABLELOG test just to please gcc 5+; but it should not be necessary */,MatchSource.CODE_COMMENT,builtins/zstd/compress/huf_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c:101,Safety,avoid,avoid,101,"/* while (totalCost > 0) */; /* If we've removed too much weight, then we have to add it back.; * To avoid overshooting again, we only adjust the smallest rank.; * We take the largest nodes from the lowest rank 0 and move them; * to rank 1. There's guaranteed to be enough rank 0 symbols because; * TODO.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/huf_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c:80,Energy Efficiency,allocate,allocated,80,"/** HUF_buildCTable_wksp() :; * Same as HUF_buildCTable(), but using externally allocated scratch buffer.; * `workSpace` must be aligned on 4-bytes boundaries, and be at least as large as sizeof(HUF_buildCTable_wksp_tables).; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/huf_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c:3,Safety,safe,safety,3,/* safety checks */,MatchSource.CODE_COMMENT,builtins/zstd/compress/huf_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c:107,Safety,safe,safely,107,"/** HUF_buildCTable() :; * @return : maxNbBits; * Note : count is used before tree is written, so they can safely overlap; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/huf_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:10,Integrability,Depend,Dependencies,10,/* ====== Dependencies ====== */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:8,Availability,ERROR,ERROR,8,"/* MIN, ERROR, ZSTD_*, ZSTD_highbit32 */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:3,Modifiability,variab,variable,3,/* variable size */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:19,Deployability,release,release,19,/* compatible with release on NULL */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:18,Integrability,Wrap,Wrapper,18,/* ===== Seq Pool Wrapper ====== */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:3,Modifiability,variab,variable,3,/* variable size */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:52,Deployability,release,released,52,/* note : all CCtx borrowed from the pool should be released back to the pool _before_ freeing the pool */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:22,Deployability,release,release,22,/* compatibility with release on NULL */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:7,Modifiability,variab,variables,7,/* All variables in the struct are protected by mutex. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:30,Deployability,update,updated,30,/* Signaled when ldmWindow is updated */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:12,Safety,safe,safe,12,/* A thread-safe copy of ldmState.window */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:3,Deployability,Update,Update,3,/* Update window state and fill hash table with dict */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:32,Security,hash,hash,32,/* Update window state and fill hash table with dict */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:14,Performance,load,load,14,/* don't even load anything */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:20,Availability,error,error,20,/* A future job may error and skip our job */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:3,Deployability,Update,Update,3,/* Update ldmWindow to match the ldmState.window and signal the main; * thread if it is waiting for a buffer.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:10,Safety,safe,safe,10,/* Thread-safe - used by mtctx and worker */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:10,Safety,safe,safe,10,/* Thread-safe - used by mtctx and worker */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:10,Safety,safe,safe,10,/* Thread-safe - used by mtctx and (all) workers */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:10,Safety,safe,safe,10,/* Thread-safe - used by mtctx and (all) workers */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:10,Safety,safe,safe,10,/* Thread-safe - used by mtctx and (all) workers */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:10,Safety,safe,safe,10,/* Thread-safe - used by mtctx and (all) workers */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:21,Security,checksum,checksum,21,"/* Don't compute the checksum for chunks, since we compute it externally,; * but write it in the header.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:3,Performance,load,load,3,"/* load dictionary in ""content-only"" mode (no header analysis) */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:3,Performance,Perform,Perform,3,"/* Perform serial step as early as possible, but after CCtx initialization */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:36,Availability,mask,mask,36,/* chunkSize must be power of 2 for mask==(chunkSize-1) to work */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:21,Energy Efficiency,power,power,21,/* chunkSize must be power of 2 for mask==(chunkSize-1) to work */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:3,Deployability,release,release,3,/* release resources */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:59,Performance,Multi-thread,Multi-threaded,59,/* ------------------------------------------ */; /* ===== Multi-threaded compression ===== */; /* ------------------------------------------ */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:62,Deployability,Update,Updated,62,/* The position of the current inBuff in the round; * buffer. Updated past the end if the inBuff once; * the inBuff is sent to the worker thread.; * pos <= capacity.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:64,Deployability,update,update,64,"/* ZSTDMT_allocJobsTable(); * allocate and init a job table.; * update *nbJobsPtr to next power of 2 value, as size of table */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:30,Energy Efficiency,allocate,allocate,30,"/* ZSTDMT_allocJobsTable(); * allocate and init a job table.; * update *nbJobsPtr to next power of 2 value, as size of table */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:90,Energy Efficiency,power,power,90,"/* ZSTDMT_allocJobsTable(); * allocate and init a job table.; * update *nbJobsPtr to next power of 2 value, as size of table */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:22,Energy Efficiency,power,power,22,/* ensure nbJobs is a power of 2 */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:22,Energy Efficiency,power,power,22,/* ensure nbJobs is a power of 2 */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:3,Usability,Clear,Clear,3,"/* Clear the job description, but keep the mutex/cond */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:3,Deployability,release,release,3,/* release job resources into pools first */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:34,Availability,error,error,34,"/* ZSTDMT_resize() :; * @return : error code if fails, 0 on success */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:49,Deployability,Update,Updates,49,"/*! ZSTDMT_updateCParams_whileCompressing() :; * Updates a selected set of compression parameters, remaining compatible with currently active frame.; * New parameters will be applied to next compression job. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:29,Availability,avail,available,29,"/* if toFlush==0, nothing is available to flush.; * However, jobID is expected to still be active:; * if jobID was already completed and fully flushed,; * ZSTDMT_flushProduced() should have already moved onto next job.; * Therefore, some input has not yet been consumed. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:59,Performance,Multi-thread,Multi-threaded,59,/* ------------------------------------------ */; /* ===== Multi-threaded compression ===== */; /* ------------------------------------------ */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:35,Security,validat,validated,35,/* params supposed partially fully validated at this point */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:12,Performance,load,loadPrefix,12,/* note : a loadPrefix becomes an internal CDict */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:32,Usability,simpl,simplified,32,/* last job is empty -> will be simplified into a last empty block */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:3,Deployability,Update,Update,3,/* Update the round buffer pos and clear the input buffer to be reset */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:35,Usability,clear,clear,35,/* Update the round buffer pos and clear the input buffer to be reset */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:26,Security,checksum,checksum,26,/* single job exception : checksum is already calculated directly within worker thread */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:305,Availability,avail,available,305,"/*! ZSTDMT_flushProduced() :; * flush whatever data has been produced but not yet flushed in current job.; * move to next job if current one is fully flushed.; * `output` : `pos` will be updated with amount of data flushed .; * `blockToFlush` : if >0, the function will block and wait if there is no data available to flush .; * @return : amount of data remaining within internal buffer, 0 if no more, 1 if unknown but > 0, or an error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:430,Availability,error,error,430,"/*! ZSTDMT_flushProduced() :; * flush whatever data has been produced but not yet flushed in current job.; * move to next job if current one is fully flushed.; * `output` : `pos` will be updated with amount of data flushed .; * `blockToFlush` : if >0, the function will block and wait if there is no data available to flush .; * @return : amount of data remaining within internal buffer, 0 if no more, 1 if unknown but > 0, or an error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:187,Deployability,update,updated,187,"/*! ZSTDMT_flushProduced() :; * flush whatever data has been produced but not yet flushed in current job.; * move to next job if current one is fully flushed.; * `output` : `pos` will be updated with amount of data flushed .; * `blockToFlush` : if >0, the function will block and wait if there is no data available to flush .; * @return : amount of data remaining within internal buffer, 0 if no more, 1 if unknown but > 0, or an error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:13,Security,checksum,checksum,13,/* add frame checksum if necessary (can only happen once) */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:67,Usability,Simpl,Simply,67,/* ZSTD_invalidateRepCodes() doesn't work for extDict variants.; * Simply copy the prefix to the beginning in that case.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:26,Performance,load,load,26,/* The number of bytes to load from the input. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:57,Integrability,synchroniz,synchronization,57,/* Boolean declaring if we must flush because we found a synchronization point. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:40,Integrability,synchroniz,synchronization,40,"/**; * Searches through the input for a synchronization point. If one is found, we; * will instruct the caller to flush, and return the number of bytes to load.; * Otherwise, we will load as many bytes as possible and instruct the caller; * to continue as normal.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:155,Performance,load,load,155,"/**; * Searches through the input for a synchronization point. If one is found, we; * will instruct the caller to flush, and return the number of bytes to load.; * Otherwise, we will load as many bytes as possible and instruct the caller; * to continue as normal.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:183,Performance,load,load,183,"/**; * Searches through the input for a synchronization point. If one is found, we; * will instruct the caller to flush, and return the number of bytes to load.; * Otherwise, we will load as many bytes as possible and instruct the caller; * to continue as normal.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:55,Integrability,synchroniz,synchronization,55,"/* Not enough to compute the hash.; * We will miss any synchronization points in this RSYNC_LENGTH byte; * window. However, since it depends only in the internal buffers, if the; * state is already synchronized, we will remain synchronized.; * Additionally, the probability that we miss a synchronization point is; * low: RSYNC_LENGTH / targetSectionSize.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:133,Integrability,depend,depends,133,"/* Not enough to compute the hash.; * We will miss any synchronization points in this RSYNC_LENGTH byte; * window. However, since it depends only in the internal buffers, if the; * state is already synchronized, we will remain synchronized.; * Additionally, the probability that we miss a synchronization point is; * low: RSYNC_LENGTH / targetSectionSize.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:198,Integrability,synchroniz,synchronized,198,"/* Not enough to compute the hash.; * We will miss any synchronization points in this RSYNC_LENGTH byte; * window. However, since it depends only in the internal buffers, if the; * state is already synchronized, we will remain synchronized.; * Additionally, the probability that we miss a synchronization point is; * low: RSYNC_LENGTH / targetSectionSize.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:227,Integrability,synchroniz,synchronized,227,"/* Not enough to compute the hash.; * We will miss any synchronization points in this RSYNC_LENGTH byte; * window. However, since it depends only in the internal buffers, if the; * state is already synchronized, we will remain synchronized.; * Additionally, the probability that we miss a synchronization point is; * low: RSYNC_LENGTH / targetSectionSize.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:289,Integrability,synchroniz,synchronization,289,"/* Not enough to compute the hash.; * We will miss any synchronization points in this RSYNC_LENGTH byte; * window. However, since it depends only in the internal buffers, if the; * state is already synchronized, we will remain synchronized.; * Additionally, the probability that we miss a synchronization point is; * low: RSYNC_LENGTH / targetSectionSize.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:29,Security,hash,hash,29,"/* Not enough to compute the hash.; * We will miss any synchronization points in this RSYNC_LENGTH byte; * window. However, since it depends only in the internal buffers, if the; * state is already synchronized, we will remain synchronized.; * Additionally, the probability that we miss a synchronization point is; * low: RSYNC_LENGTH / targetSectionSize.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:23,Modifiability,variab,variables,23,/* Initialize the loop variables. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:51,Security,hash,hash,51,/* We have enough bytes buffered to initialize the hash.; * Start scanning at the beginning of the input.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:42,Performance,load,load,42,/* We're already at a sync point so don't load any more until; * we're able to flush this sync point.; * This likely happened because the job table was full so we; * couldn't add our job.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:57,Security,hash,hash,57,"/* We don't have enough bytes buffered to initialize the hash, but; * we know we have at least RSYNC_LENGTH bytes total.; * Start scanning after the first RSYNC_LENGTH bytes less the bytes; * already buffered.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:101,Integrability,synchroniz,synchronization,101,"/* Starting with the hash of the previous RSYNC_LENGTH bytes, roll; * through the input. If we hit a synchronization point, then cut the; * job off, and tell the compressor to flush the job. Otherwise, load; * all the bytes and continue as normal.; * If we go too long without a synchronization point (targetSectionSize); * then a block will be emitted anyways, but this is okay, since if we; * are already synchronized we will remain synchronized.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:279,Integrability,synchroniz,synchronization,279,"/* Starting with the hash of the previous RSYNC_LENGTH bytes, roll; * through the input. If we hit a synchronization point, then cut the; * job off, and tell the compressor to flush the job. Otherwise, load; * all the bytes and continue as normal.; * If we go too long without a synchronization point (targetSectionSize); * then a block will be emitted anyways, but this is okay, since if we; * are already synchronized we will remain synchronized.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:407,Integrability,synchroniz,synchronized,407,"/* Starting with the hash of the previous RSYNC_LENGTH bytes, roll; * through the input. If we hit a synchronization point, then cut the; * job off, and tell the compressor to flush the job. Otherwise, load; * all the bytes and continue as normal.; * If we go too long without a synchronization point (targetSectionSize); * then a block will be emitted anyways, but this is okay, since if we; * are already synchronized we will remain synchronized.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:435,Integrability,synchroniz,synchronized,435,"/* Starting with the hash of the previous RSYNC_LENGTH bytes, roll; * through the input. If we hit a synchronization point, then cut the; * job off, and tell the compressor to flush the job. Otherwise, load; * all the bytes and continue as normal.; * If we go too long without a synchronization point (targetSectionSize); * then a block will be emitted anyways, but this is okay, since if we; * are already synchronized we will remain synchronized.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:202,Performance,load,load,202,"/* Starting with the hash of the previous RSYNC_LENGTH bytes, roll; * through the input. If we hit a synchronization point, then cut the; * job off, and tell the compressor to flush the job. Otherwise, load; * all the bytes and continue as normal.; * If we go too long without a synchronization point (targetSectionSize); * then a block will be emitted anyways, but this is okay, since if we; * are already synchronized we will remain synchronized.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:21,Security,hash,hash,21,"/* Starting with the hash of the previous RSYNC_LENGTH bytes, roll; * through the input. If we hit a synchronization point, then cut the; * job off, and tell the compressor to flush the job. Otherwise, load; * all the bytes and continue as normal.; * If we go too long without a synchronization point (targetSectionSize); * then a block will be emitted anyways, but this is okay, since if we; * are already synchronized we will remain synchronized.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:106,Security,hash,hash,106,"/* if (pos >= RSYNC_LENGTH) assert(ZSTD_rollingHash_compute(istart + pos - RSYNC_LENGTH, RSYNC_LENGTH) == hash); */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:28,Testability,assert,assert,28,"/* if (pos >= RSYNC_LENGTH) assert(ZSTD_rollingHash_compute(istart + pos - RSYNC_LENGTH, RSYNC_LENGTH) == hash); */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:61,Security,expose,exposed,61,"/** ZSTDMT_compressStream_generic() :; * internal use only - exposed to be invoked from zstd_compress.c; * assumption : output and input are valid (pos <= size); * @return : minimum amount of data remaining to flush, 0 if none */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:273,Integrability,synchroniz,synchronization,273,/* Can't end yet because the input is not fully consumed.; * We are in one of these cases:; * - mtctx->inBuff is NULL & empty: we couldn't get an input buffer so don't create a new job.; * - We filled the input buffer: flush this job but don't end the frame.; * - We hit a synchronization point: flush this job but don't end the frame.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:354,Integrability,Depend,Dependencies,354,"/* Note : This is an internal API.; * These APIs used to be exposed with ZSTDLIB_API,; * because it used to be the only way to invoke MT compression.; * Now, you must use ZSTD_compress2 and ZSTD_compressStream2() instead.; *; * This API requires ZSTD_MULTITHREAD to be defined during compilation,; * otherwise ZSTDMT_createCCtx*() will fail.; */; /* === Dependencies === */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:60,Security,expose,exposed,60,"/* Note : This is an internal API.; * These APIs used to be exposed with ZSTDLIB_API,; * because it used to be the only way to invoke MT compression.; * Now, you must use ZSTD_compress2 and ZSTD_compressStream2() instead.; *; * This API requires ZSTD_MULTITHREAD to be defined during compilation,; * otherwise ZSTDMT_createCCtx*() will fail.; */; /* === Dependencies === */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:75,Integrability,interface,interface,75,"/* ========================================================; * === Private interface, for use by ZSTD_compress.c ===; * === Not exposed in libzstd. Never invoke directly ===; * ======================================================== */; /* === Memory management === */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:128,Security,expose,exposed,128,"/* ========================================================; * === Private interface, for use by ZSTD_compress.c ===; * === Not exposed in libzstd. Never invoke directly ===; * ======================================================== */; /* === Memory management === */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:191,Availability,error,error,191,"/*! ZSTDMT_initCStream_internal() :; * Private use only. Init streaming operation.; * expects params to be valid.; * must receive dict, or cdict, or none, but not both.; * @return : 0, or an error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:251,Availability,error,error,251,/*! ZSTDMT_compressStream_generic() :; * Combines ZSTDMT_compressStream() with optional ZSTDMT_flushStream() or ZSTDMT_endStream(); * depending on flush directive.; * @return : minimum amount of data still to be flushed; * 0 if fully flushed; * or an error code; * note : needs to be init using any ZSTD_initCStream*() variant */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:134,Integrability,depend,depending,134,/*! ZSTDMT_compressStream_generic() :; * Combines ZSTDMT_compressStream() with optional ZSTDMT_flushStream() or ZSTDMT_endStream(); * depending on flush directive.; * @return : minimum amount of data still to be flushed; * 0 if fully flushed; * or an error code; * note : needs to be init using any ZSTD_initCStream*() variant */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:49,Deployability,Update,Updates,49,"/*! ZSTDMT_updateCParams_whileCompressing() :; * Updates only a selected set of compression parameters, to remain compatible with current frame.; * New parameters will be applied to next compression job. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstdmt_compress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:430,Integrability,Depend,Dependencies,430,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /*-*************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:245,Energy Efficiency,allocate,allocates,245,"/* ***************************************************************; * Tuning parameters; *****************************************************************/; /*!; * COMPRESS_HEAPMODE :; * Select how default decompression function ZSTD_compress() allocates its context,; * on stack (0, default), or into heap (1).; * Note that functions with explicit context such as ZSTD_compressCCtx() are unaffected.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:7,Usability,Clear,Clears,7,/**; * Clears and frees all of the dictionaries in the CCtx.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:21,Security,checksum,checksum,21,/* A 32-bits content checksum will be calculated and written at end of frame (default:0) */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:100,Performance,perform,performed,100,"/** ZSTD_CCtx_setParametersUsingCCtxParams() :; * just applies `params` into `cctx`; * no action is performed, parameters are merely stored.; * If ZSTDMT is enabled, parameters are pushed to cctx->mtctx.; * This is possible even if a compression is ongoing.; * In which case, new parameters will be applied on the fly, starting with next compression job.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:101,Availability,error,error,101,"/** ZSTD_checkCParams() :; control CParam values remain within authorized range.; @return : 0, or an error code if one value is beyond authorized range */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:63,Security,authoriz,authorized,63,"/** ZSTD_checkCParams() :; control CParam values remain within authorized range.; @return : 0, or an error code if one value is beyond authorized range */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:135,Security,authoriz,authorized,135,"/** ZSTD_checkCParams() :; control CParam values remain within authorized range.; @return : 0, or an error code if one value is beyond authorized range */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:59,Security,hash,hashLog,59,/** ZSTD_cycleLog() :; * condition for correct operation : hashLog > 1 */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:392,Availability,down,downsizing,392,/** ZSTD_dictAndWindowLog() :; * Returns an adjusted window log that is large enough to fit the source and the dictionary.; * The zstd format says that the entire dictionary is valid if one byte of the dictionary; * is within the window. So the hashLog and chainLog should be large enough to reference both; * the dictionary and the window. So we must use this adjusted dictAndWindowLog when downsizing; * the hashLog and windowLog.; * NOTE: srcSize must not be ZSTD_CONTENTSIZE_UNKNOWN.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:245,Security,hash,hashLog,245,/** ZSTD_dictAndWindowLog() :; * Returns an adjusted window log that is large enough to fit the source and the dictionary.; * The zstd format says that the entire dictionary is valid if one byte of the dictionary; * is within the window. So the hashLog and chainLog should be large enough to reference both; * the dictionary and the window. So we must use this adjusted dictAndWindowLog when downsizing; * the hashLog and windowLog.; * NOTE: srcSize must not be ZSTD_CONTENTSIZE_UNKNOWN.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:410,Security,hash,hashLog,410,/** ZSTD_dictAndWindowLog() :; * Returns an adjusted window log that is large enough to fit the source and the dictionary.; * The zstd format says that the entire dictionary is valid if one byte of the dictionary; * is within the window. So the hashLog and chainLog should be large enough to reference both; * the dictionary and the window. So we must use this adjusted dictAndWindowLog when downsizing; * the hashLog and windowLog.; * NOTE: srcSize must not be ZSTD_CONTENTSIZE_UNKNOWN.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:60,Testability,log,log,60,/** ZSTD_dictAndWindowLog() :; * Returns an adjusted window log that is large enough to fit the source and the dictionary.; * The zstd format says that the entire dictionary is valid if one byte of the dictionary; * is within the window. So the hashLog and chainLog should be large enough to reference both; * the dictionary and the window. So we must use this adjusted dictAndWindowLog when downsizing; * the hashLog and windowLog.; * NOTE: srcSize must not be ZSTD_CONTENTSIZE_UNKNOWN.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:26,Testability,log,log,26,/* Larger than max window log */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:115,Availability,down,downsize,115,/** ZSTD_adjustCParams_internal() :; * optimize `cPar` for a specified input (`srcSize` and `dictSize`).; * mostly downsize to reduce memory consumption and initialization latency.; * `srcSize` can be ZSTD_CONTENTSIZE_UNKNOWN when not known.; * `mode` is the mode for parameter adjustment. See docs for `ZSTD_cParamMode_e`.; * note : `srcSize==0` means 0!; * condition : cPar is presumed validated (can be checked using ZSTD_checkCParams()). */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:127,Energy Efficiency,reduce,reduce,127,/** ZSTD_adjustCParams_internal() :; * optimize `cPar` for a specified input (`srcSize` and `dictSize`).; * mostly downsize to reduce memory consumption and initialization latency.; * `srcSize` can be ZSTD_CONTENTSIZE_UNKNOWN when not known.; * `mode` is the mode for parameter adjustment. See docs for `ZSTD_cParamMode_e`.; * note : `srcSize==0` means 0!; * condition : cPar is presumed validated (can be checked using ZSTD_checkCParams()). */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:141,Energy Efficiency,consumption,consumption,141,/** ZSTD_adjustCParams_internal() :; * optimize `cPar` for a specified input (`srcSize` and `dictSize`).; * mostly downsize to reduce memory consumption and initialization latency.; * `srcSize` can be ZSTD_CONTENTSIZE_UNKNOWN when not known.; * `mode` is the mode for parameter adjustment. See docs for `ZSTD_cParamMode_e`.; * note : `srcSize==0` means 0!; * condition : cPar is presumed validated (can be checked using ZSTD_checkCParams()). */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:39,Performance,optimiz,optimize,39,/** ZSTD_adjustCParams_internal() :; * optimize `cPar` for a specified input (`srcSize` and `dictSize`).; * mostly downsize to reduce memory consumption and initialization latency.; * `srcSize` can be ZSTD_CONTENTSIZE_UNKNOWN when not known.; * `mode` is the mode for parameter adjustment. See docs for `ZSTD_cParamMode_e`.; * note : `srcSize==0` means 0!; * condition : cPar is presumed validated (can be checked using ZSTD_checkCParams()). */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:172,Performance,latency,latency,172,/** ZSTD_adjustCParams_internal() :; * optimize `cPar` for a specified input (`srcSize` and `dictSize`).; * mostly downsize to reduce memory consumption and initialization latency.; * `srcSize` can be ZSTD_CONTENTSIZE_UNKNOWN when not known.; * `mode` is the mode for parameter adjustment. See docs for `ZSTD_cParamMode_e`.; * note : `srcSize==0` means 0!; * condition : cPar is presumed validated (can be checked using ZSTD_checkCParams()). */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:388,Security,validat,validated,388,/** ZSTD_adjustCParams_internal() :; * optimize `cPar` for a specified input (`srcSize` and `dictSize`).; * mostly downsize to reduce memory consumption and initialization latency.; * `srcSize` can be ZSTD_CONTENTSIZE_UNKNOWN when not known.; * `mode` is the mode for parameter adjustment. See docs for `ZSTD_cParamMode_e`.; * note : `srcSize==0` means 0!; * condition : cPar is presumed validated (can be checked using ZSTD_checkCParams()). */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:102,Energy Efficiency,allocate,allocate,102,"/* estimateCCtxSize is for one-shot compression. So no buffers should; * be needed. However, we still allocate two 0-sized buffers, which can; * take space under ASAN. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Usability,simpl,simplified,3,/* simplified; some data might still be left within streaming output buffer */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:8,Usability,simpl,simplification,8,"/* over-simplification; could also check if context is currently running in streaming mode, and in which case, report how many bytes are left to be flushed within output buffer */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:74,Usability,clear,cleared,74,"/**; * Controls, for this matchState reset, whether the tables need to be cleared /; * prepared for the coming compression (ZSTDcrp_makeClean), or whether the; * tables can be left unclean (ZSTDcrp_leaveDirty), because we know that a; * subsequent operation will overwrite the table space anyways (e.g., copying; * the matchState contents in from a CDict).; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:83,Energy Efficiency,reduce,reduceIndex,83,"/* ZSTD_indexTooCloseToMax() :; * minor optimization : prefer memset() rather than reduceIndex(); * which is measurably slow in some circumstances (reported for Visual Studio).; * Works when re-using a context for a lot of smallish inputs :; * if all inputs are smaller than ZSTD_INDEXOVERFLOW_MARGIN,; * memset() will be triggered before reduceIndex().; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:339,Energy Efficiency,reduce,reduceIndex,339,"/* ZSTD_indexTooCloseToMax() :; * minor optimization : prefer memset() rather than reduceIndex(); * which is measurably slow in some circumstances (reported for Visual Studio).; * Works when re-using a context for a lot of smallish inputs :; * if all inputs are smaller than ZSTD_INDEXOVERFLOW_MARGIN,; * memset() will be triggered before reduceIndex().; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:40,Performance,optimiz,optimization,40,"/* ZSTD_indexTooCloseToMax() :; * minor optimization : prefer memset() rather than reduceIndex(); * which is measurably slow in some circumstances (reported for Visual Studio).; * Works when re-using a context for a lot of smallish inputs :; * if all inputs are smaller than ZSTD_INDEXOVERFLOW_MARGIN,; * memset() will be triggered before reduceIndex().; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:67,Security,validat,validated,67,/*! ZSTD_resetCCtx_internal() :; note : `params` are assumed fully validated at this stage */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:9,Safety,avoid,avoid,9,/* TODO: avoid memset? */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:7,Security,hash,hash,7,/* ldm hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:9,Safety,avoid,avoid,9,/* TODO: avoid memset? */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Performance,load,loadedDictEnd,3,/* loadedDictEnd is expressed within the referential of the active context */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:433,Availability,error,error,433,"/*! ZSTD_copyCCtx_internal() :; * Duplicate an existing context `srcCCtx` into another one `dstCCtx`.; * Only works during stage ZSTDcs_init (i.e. after creation, but before first call to ZSTD_compressContinue()).; * The ""context"", in this case, refers to the hash and chain tables,; * entropy tables, and dictionary references.; * `windowLog` value is enforced if != 0, otherwise value is copied from srcCCtx.; * @return : 0, or an error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:260,Security,hash,hash,260,"/*! ZSTD_copyCCtx_internal() :; * Duplicate an existing context `srcCCtx` into another one `dstCCtx`.; * Only works during stage ZSTDcs_init (i.e. after creation, but before first call to ZSTD_compressContinue()).; * The ""context"", in this case, refers to the hash and chain tables,; * entropy tables, and dictionary references.; * `windowLog` value is enforced if != 0, otherwise value is copied from srcCCtx.; * @return : 0, or an error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:265,Availability,error,error,265,"/*! ZSTD_copyCCtx() :; * Duplicate an existing context `srcCCtx` into another one `dstCCtx`.; * Only works during stage ZSTDcs_init (i.e. after creation, but before first call to ZSTD_compressContinue()).; * pledgedSrcSize==0 means ""unknown"".; * @return : 0, or an error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:2,Security,checksum,checksum,2,/*checksum*/,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:28,Energy Efficiency,reduce,reduce,28,"/*! ZSTD_reduceTable() :; * reduce table indexes by `reducerValue`, or squash to zero.; * PreserveMark preserves ""unsorted mark"" for btlazy2 strategy.; * It must be set to a clear 0/1 value, to remove branch during inlining.; * Presume table size is a multiple of ZSTD_ROWSIZE; * to help auto-vectorization */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:53,Energy Efficiency,reduce,reducerValue,53,"/*! ZSTD_reduceTable() :; * reduce table indexes by `reducerValue`, or squash to zero.; * PreserveMark preserves ""unsorted mark"" for btlazy2 strategy.; * It must be set to a clear 0/1 value, to remove branch during inlining.; * Presume table size is a multiple of ZSTD_ROWSIZE; * to help auto-vectorization */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:174,Usability,clear,clear,174,"/*! ZSTD_reduceTable() :; * reduce table indexes by `reducerValue`, or squash to zero.; * PreserveMark preserves ""unsorted mark"" for btlazy2 strategy.; * It must be set to a clear 0/1 value, to remove branch during inlining.; * Presume table size is a multiple of ZSTD_ROWSIZE; * to help auto-vectorization */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:482,Safety,detect,detect,482,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty.; *; * This function however is intended to operate on those dirty tables and; * re-clean them. So when this function is used correctly, we can unpoison; * the memory it operated on. This introduces a blind spot though, since; * if we now try to operate on __actually__ poisoned memory, we will not; * detect that. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:6,Security,validat,validate,6,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty.; *; * This function however is intended to operate on those dirty tables and; * re-clean them. So when this function is used correctly, we can unpoison; * the memory it operated on. This introduces a blind spot though, since; * if we now try to operate on __actually__ poisoned memory, we will not; * detect that. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:74,Security,access,access,74,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty.; *; * This function however is intended to operate on those dirty tables and; * re-clean them. So when this function is used correctly, we can unpoison; * the memory it operated on. This introduces a blind spot though, since; * if we now try to operate on __actually__ poisoned memory, we will not; * detect that. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:37,Testability,log,logic,37,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty.; *; * This function however is intended to operate on those dirty tables and; * re-clean them. So when this function is used correctly, we can unpoison; * the memory it operated on. This introduces a blind spot though, since; * if we now try to operate on __actually__ poisoned memory, we will not; * detect that. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:51,Safety,avoid,avoid,51,/*! ZSTD_reduceIndex() :; * rescale all indexes to avoid future overflow (indexes are U32) */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:378,Performance,optimiz,optimizing,378,"/* zstd versions <= 1.3.4 mistakenly report corruption when; * FSE_readNCount() receives a buffer < 4 bytes.; * Fixed by https://github.com/facebook/zstd/pull/1146.; * This can happen when the last set_compressed table present is 2; * bytes and the bitstream is only one byte.; * In this exceedingly rare case, we will simply emit an uncompressed; * block, since it isn't worth optimizing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:319,Usability,simpl,simply,319,"/* zstd versions <= 1.3.4 mistakenly report corruption when; * FSE_readNCount() receives a buffer < 4 bytes.; * Fixed by https://github.com/facebook/zstd/pull/1146.; * This can happen when the last set_compressed table present is 2; * bytes and the bitstream is only one byte.; * In this exceedingly rare case, we will simply emit an uncompressed; * block, since it isn't worth optimizing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Testability,Assert,Assert,3,/* Assert that we have correctly flushed the ctx params into the ms's copy */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:64,Safety,safe,safe,64,"/* a gap between an attached dict and the current window is not safe,; * they must remain adjacent,; * and when that stops being the case, the dict must be unset */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:11,Deployability,update,update,11,/* limited update after a very long match */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Deployability,Update,Updates,3,/* Updates ldmSeqStore.pos */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Deployability,Update,Updates,3,/* Updates ldmSeqStore.size */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Deployability,Update,Updates,3,/* Updates ldmSeqStore.pos */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:14,Energy Efficiency,allocate,allocated,14,/* statically allocated in resetCCtx */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:162,Availability,error,error,162,"/* We don't want to emit our first block as a RLE even if it qualifies because; * doing so will cause the decoder (cli only) to throw a ""should consume all input error.""; * This is only an issue for zstd <= v1.4.3; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:48,Availability,avail,available,48,"/* We check that dictionaries have offset codes available for the first; * block. After the first block, the offcode table might not have large; * enough codes to represent the offsets in the data.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:162,Availability,error,error,162,"/* We don't want to emit our first block as a RLE even if it qualifies because; * doing so will cause the decoder (cli only) to throw a ""should consume all input error.""; * This is only an issue for zstd <= v1.4.3; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:178,Availability,error,error,178,"/*! ZSTD_compress_frameChunk() :; * Compress a chunk of data into one or multiple blocks.; * All blocks will be terminated, all input will be consumed.; * Function will issue an error if there is not enough `dstCapacity` to hold the compressed content.; * Frame is supposed already started (header already produced); * @return : compressed size, or an error code; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:352,Availability,error,error,352,"/*! ZSTD_compress_frameChunk() :; * Compress a chunk of data into one or multiple blocks.; * All blocks will be terminated, all input will be consumed.; * Function will issue an error if there is not enough `dstCapacity` to hold the compressed content.; * Frame is supposed already started (header already produced); * @return : compressed size, or an error code; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:10,Security,hash,hash,10,/* Ensure hash/chain table insertion resumes no sooner than lowlimit */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:37,Usability,resume,resumes,37,/* Ensure hash/chain table insertion resumes no sooner than lowlimit */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:209,Availability,error,error,209,/* ZSTD_writeLastEmptyBlock() :; * output an empty Block with end-of-frame mark to complete a frame; * @return : size of data written into `dst` (== ZSTD_blockHeaderSize (defined in zstd_internal.h)); * or an error code if `dstCapacity` is too small (<ZSTD_blockHeaderSize); */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:57,Availability,error,error,57,"/*! ZSTD_loadDictionaryContent() :; * @return : 0, or an error code; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Testability,Assert,Assert,3,/* Assert that we the ms params match the params we're being given */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:8,Performance,load,load,8,/* must load everything in one go */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:19,Performance,load,loaded,19,"/* We only set the loaded table as valid if it contains all non-zero; * weights. Otherwise, we set it to check */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:30,Safety,avoid,avoid,30,/* fill all offset symbols to avoid garbage at end of table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:194,Availability,error,error,194,"/* Dictionary format :; * See :; * https://github.com/facebook/zstd/blob/release/doc/zstd_compression_format.md#dictionary-format; */; /*! ZSTD_loadZstdDictionary() :; * @return : dictID, or an error code; * assumptions : magic number supposed already checked; * dictSize supposed >= 8; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:73,Deployability,release,release,73,"/* Dictionary format :; * See :; * https://github.com/facebook/zstd/blob/release/doc/zstd_compression_format.md#dictionary-format; */; /*! ZSTD_loadZstdDictionary() :; * @return : dictID, or an error code; * assumptions : magic number supposed already checked; * dictSize supposed >= 8; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:66,Availability,error,error,66,"/** ZSTD_compress_insertDictionary() :; * @return : dictID, or an error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:58,Availability,error,error,58,"/*! ZSTD_compressBegin_internal() :; * @return : 0, or an error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:35,Security,validat,validated,35,/* params are supposed to be fully validated at this point */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:43,Performance,optimiz,optimization,43,/* compression parameters verification and optimization */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:58,Availability,error,error,58,"/*! ZSTD_compressBegin_advanced() :; * @return : 0, or an error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:93,Availability,error,error,93,/*! ZSTD_writeEpilogue() :; * Ends a frame.; * @return : nb of bytes written into dst (or an error code) */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:11,Performance,load,load,11,/* (Maybe) load the dictionary; * Skips loading the dictionary if it is < 8 bytes.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:40,Performance,load,loading,40,/* (Maybe) load the dictionary; * Skips loading the dictionary if it is < 8 bytes.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:477,Availability,error,error,477,"/*! ZSTD_initStaticCDict_advanced() :; * Generate a digested dictionary in provided memory area.; * workspace: The memory area to emplace the dictionary into.; * Provided pointer must 8-bytes aligned.; * It must outlive dictionary usage.; * workspaceSize: Use ZSTD_estimateCDictSize(); * to determine how large workspace must be.; * cParams : use ZSTD_getCParams() to transform a compression level; * into its relevants cParams.; * @return : pointer to ZSTD_CDict*, or NULL if error (size too small); * Note : there is no corresponding ""free"" function.; * Since workspace was allocated externally, it must be freed externally.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:576,Energy Efficiency,allocate,allocated,576,"/*! ZSTD_initStaticCDict_advanced() :; * Generate a digested dictionary in provided memory area.; * workspace: The memory area to emplace the dictionary into.; * Provided pointer must 8-bytes aligned.; * It must outlive dictionary usage.; * workspaceSize: Use ZSTD_estimateCDictSize(); * to determine how large workspace must be.; * cParams : use ZSTD_getCParams() to transform a compression level; * into its relevants cParams.; * @return : pointer to ZSTD_CDict*, or NULL if error (size too small); * Note : there is no corresponding ""free"" function.; * Since workspace was allocated externally, it must be freed externally.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:74,Performance,load,loaded,74,"/*! ZSTD_getDictID_fromCDict() :; * Provides the dictID of the dictionary loaded into `cdict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:230,Performance,load,loaded,230,"/*! ZSTD_getDictID_fromCDict() :; * Provides the dictID of the dictionary loaded into `cdict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:19,Testability,log,log,19,"/* Increase window log to fit the entire dictionary and source if the; * source size is known. Limit the increase to 19, which is the; * window log for compression level 1 with the largest source size.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:144,Testability,log,log,144,"/* Increase window log to fit the entire dictionary and source if the; * source size is known. Limit the increase to 19, which is the; * window log for compression level 1 with the largest source size.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:2,Security,checksum,checksum,2,/*checksum*/,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:2,Security,checksum,checksum,2,/*checksum*/,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:11,Security,hash,hash,11,/* 32-bits hash */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:17,Usability,clear,cleared,17,/* Dictionary is cleared if !cdict */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:154,Performance,load,loaded,154,"/* ZSTD_initCStream_advanced() :; * pledgedSrcSize must be exact.; * if srcSize is not known at init time, use value ZSTD_CONTENTSIZE_UNKNOWN.; * dict is loaded with default parameters ZSTD_dct_auto and ZSTD_dlm_byCopy. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:12,Performance,load,loading,12,/* complete loading into inBuffer in buffered mode */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:11,Security,validat,validated,11,/* Already validated */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:30,Availability,error,error,30,/* Consume the input prior to error checking to mirror buffered mode. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:77,Security,validat,validated,77,/* After a compression call set the expected input/output buffer.; * This is validated at the start of the next compression call.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Security,Validat,Validate,3,/* Validate that the input/output buffers match the expectations set by; * ZSTD_setBufferExpectations.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:17,Performance,multi-thread,multi-threading,17,/* do not invoke multi-threading when src size is too small */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:20,Safety,avoid,avoid,20,"/* for small input: avoid automatic flush on reaching end of block, since; * it would require to add a 3-bytes null block to end frame; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:18,Availability,error,error,18,/* Returns a ZSTD error code if sequence is not valid */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:160,Availability,error,error,160,"/* Returns the number of bytes to move the current read position back by. Only non-zero; * if we ended up splitting a sequence. Otherwise, it may return a ZSTD error if something; * went wrong.; *; * This function will attempt to scan through blockSize bytes represented by the sequences; * in inSeqs, storing any (partial) sequences.; *; * Occasionally, we may want to change the actual number of bytes we consumed from inSeqs to; * avoid splitting a match, or to avoid splitting a match such that it would produce a match; * smaller than MINMATCH. In this case, we return the number of bytes that we didn't read from this block.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:434,Safety,avoid,avoid,434,"/* Returns the number of bytes to move the current read position back by. Only non-zero; * if we ended up splitting a sequence. Otherwise, it may return a ZSTD error if something; * went wrong.; *; * This function will attempt to scan through blockSize bytes represented by the sequences; * in inSeqs, storing any (partial) sequences.; *; * Occasionally, we may want to change the actual number of bytes we consumed from inSeqs to; * avoid splitting a match, or to avoid splitting a match such that it would produce a match; * smaller than MINMATCH. In this case, we return the number of bytes that we didn't read from this block.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:465,Safety,avoid,avoid,465,"/* Returns the number of bytes to move the current read position back by. Only non-zero; * if we ended up splitting a sequence. Otherwise, it may return a ZSTD error if something; * went wrong.; *; * This function will attempt to scan through blockSize bytes represented by the sequences; * in inSeqs, storing any (partial) sequences.; *; * Occasionally, we may want to change the actual number of bytes we consumed from inSeqs to; * avoid splitting a match, or to avoid splitting a match such that it would produce a match; * smaller than MINMATCH. In this case, we return the number of bytes that we didn't read from this block.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:23,Integrability,depend,depending,23,/* Modify the sequence depending on where endPosInSequence lies */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:160,Availability,error,error,160,"/* Compress, block-by-block, all of the sequences given.; *; * Returns the cumulative size of all compressed blocks (including their headers), otherwise a ZSTD error.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:14,Energy Efficiency,allocate,allocated,14,/* statically allocated in resetCCtx */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:162,Availability,error,error,162,"/* We don't want to emit our first block as a RLE even if it qualifies because; * doing so will cause the decoder (cli only) to throw a ""should consume all input error.""; * This is only an issue for zstd <= v1.4.3; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Availability,Error,Error,3,/* Error checking and repcodes update */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:31,Deployability,update,update,31,/* Error checking and repcodes update */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:106,Availability,recover,recover,106,"/**; * Reverses the adjustment applied to cparams when enabling dedicated dict; * search. This is used to recover the params set to be used in the working; * context. (Otherwise, those tables would also grow.); */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:106,Safety,recover,recover,106,"/**; * Reverses the adjustment applied to cparams when enabling dedicated dict; * search. This is used to recover the params set to be used in the working; * context. (Otherwise, those tables would also grow.); */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:18,Energy Efficiency,allocate,allocated,18,/* All tables are allocated inside cctx->workspace by ZSTD_resetCCtx_internal() */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:69,Performance,load,loadedDictEnd,69,"/* index of end of dictionary, within context's referential.; * When loadedDictEnd != 0, a dictionary is in use, and still valid.; * This relies on a mechanism to set loadedDictEnd=0 when dictionary is no longer within distance.; * Such mechanism is provided within ZSTD_window_enforceMaxDist() and ZSTD_checkDictValidity().; * When dict referential is copied into active context (i.e. not attached),; * loadedDictEnd == dictSize, since referential starts from zero.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:167,Performance,load,loadedDictEnd,167,"/* index of end of dictionary, within context's referential.; * When loadedDictEnd != 0, a dictionary is in use, and still valid.; * This relies on a mechanism to set loadedDictEnd=0 when dictionary is no longer within distance.; * Such mechanism is provided within ZSTD_window_enforceMaxDist() and ZSTD_checkDictValidity().; * When dict referential is copied into active context (i.e. not attached),; * loadedDictEnd == dictSize, since referential starts from zero.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:404,Performance,load,loadedDictEnd,404,"/* index of end of dictionary, within context's referential.; * When loadedDictEnd != 0, a dictionary is in use, and still valid.; * This relies on a mechanism to set loadedDictEnd=0 when dictionary is no longer within distance.; * Such mechanism is provided within ZSTD_window_enforceMaxDist() and ZSTD_checkDictValidity().; * When dict referential is copied into active context (i.e. not attached),; * loadedDictEnd == dictSize, since referential starts from zero.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:38,Deployability,update,update,38,/* index from which to continue table update */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:23,Deployability,rolling,rolling,23,/* Used to compute the rolling hash.; * Depends on ldmParams.minMatchLength */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:40,Integrability,Depend,Depends,40,/* Used to compute the rolling hash.; * Depends on ldmParams.minMatchLength */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:31,Security,hash,hash,31,/* Used to compute the rolling hash.; * Depends on ldmParams.minMatchLength */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:15,Security,hash,hashTable,15,/* Log size of hashTable */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:3,Testability,Log,Log,3,/* Log size of hashTable */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:3,Testability,Log,Log,3,"/* Log bucket size for collision resolution, at most 8 */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:3,Testability,Log,Log,3,/* Log number of entries to skip */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:10,Testability,log,log,10,/* Window log for the LDM */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:135,Availability,avail,available,135,/* == 1 if cParams(except wlog) or compression level are changed in requestedParams. Triggers transmission of new params to ZSTDMT (if available) then reset to 0. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:34,Performance,Multi-thread,Multi-threading,34,/* single-usage dictionary */; /* Multi-threading */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:19,Security,validat,validated,19,/* impossible: pre-validated */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:518,Safety,safe,safe,518,"/* preemptive overflow correction:; * 1. correction is large enough:; * lowLimit > (3<<29) ==> current > 3<<29 + 1<<windowLog; * 1<<windowLog <= newCurrent < 1<<chainLog + 1<<windowLog; *; * current - newCurrent; * > (3<<29 + 1<<windowLog) - (1<<windowLog + 1<<chainLog); * > (3<<29) - (1<<chainLog); * > (3<<29) - (1<<30) (NOTE: chainLog <= 30); * > 1<<29; *; * 2. (ip+ZSTD_CHUNKSIZE_MAX - cctx->base) doesn't overflow:; * After correction, current is less than (1<<chainLog + 1<<windowLog).; * In 64-bit mode we are safe, because we have 64-bit ptrdiff_t.; * In 32-bit mode we are safe, because (chainLog <= 29), so; * ip+ZSTD_CHUNKSIZE_MAX - cctx->base < 1<<32.; * 3. (cctx->lowLimit + 1<<windowLog) < 1<<32:; * windowLog <= 31 ==> 3<<29 + 1<<windowLog < 7<<29 < 1<<32.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:583,Safety,safe,safe,583,"/* preemptive overflow correction:; * 1. correction is large enough:; * lowLimit > (3<<29) ==> current > 3<<29 + 1<<windowLog; * 1<<windowLog <= newCurrent < 1<<chainLog + 1<<windowLog; *; * current - newCurrent; * > (3<<29 + 1<<windowLog) - (1<<windowLog + 1<<chainLog); * > (3<<29) - (1<<chainLog); * > (3<<29) - (1<<30) (NOTE: chainLog <= 30); * > 1<<29; *; * 2. (ip+ZSTD_CHUNKSIZE_MAX - cctx->base) doesn't overflow:; * After correction, current is less than (1<<chainLog + 1<<windowLog).; * In 64-bit mode we are safe, because we have 64-bit ptrdiff_t.; * In 32-bit mode we are safe, because (chainLog <= 29), so; * ip+ZSTD_CHUNKSIZE_MAX - cctx->base < 1<<32.; * 3. (cctx->lowLimit + 1<<windowLog) < 1<<32:; * windowLog <= 31 ==> 3<<29 + 1<<windowLog < 7<<29 < 1<<32.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:35,Performance,load,loadedDictEnd,35,"/* - When there is no dictionary : loadedDictEnd == 0.; In which case, the test (blockEndIdx > maxDist) is merely to avoid; overflowing next operation `newLowLimit = blockEndIdx - maxDist`.; - When there is a standard dictionary :; Index referential is copied from the dictionary,; which means it starts from 0.; In which case, loadedDictEnd == dictSize,; and it makes sense to compare `blockEndIdx > maxDist + dictSize`; since `blockEndIdx` also starts from zero.; - When there is an attached dictionary :; loadedDictEnd is expressed within the referential of the context,; so it can be directly compared against blockEndIdx.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:328,Performance,load,loadedDictEnd,328,"/* - When there is no dictionary : loadedDictEnd == 0.; In which case, the test (blockEndIdx > maxDist) is merely to avoid; overflowing next operation `newLowLimit = blockEndIdx - maxDist`.; - When there is a standard dictionary :; Index referential is copied from the dictionary,; which means it starts from 0.; In which case, loadedDictEnd == dictSize,; and it makes sense to compare `blockEndIdx > maxDist + dictSize`; since `blockEndIdx` also starts from zero.; - When there is an attached dictionary :; loadedDictEnd is expressed within the referential of the context,; so it can be directly compared against blockEndIdx.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:508,Performance,load,loadedDictEnd,508,"/* - When there is no dictionary : loadedDictEnd == 0.; In which case, the test (blockEndIdx > maxDist) is merely to avoid; overflowing next operation `newLowLimit = blockEndIdx - maxDist`.; - When there is a standard dictionary :; Index referential is copied from the dictionary,; which means it starts from 0.; In which case, loadedDictEnd == dictSize,; and it makes sense to compare `blockEndIdx > maxDist + dictSize`; since `blockEndIdx` also starts from zero.; - When there is an attached dictionary :; loadedDictEnd is expressed within the referential of the context,; so it can be directly compared against blockEndIdx.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:117,Safety,avoid,avoid,117,"/* - When there is no dictionary : loadedDictEnd == 0.; In which case, the test (blockEndIdx > maxDist) is merely to avoid; overflowing next operation `newLowLimit = blockEndIdx - maxDist`.; - When there is a standard dictionary :; Index referential is copied from the dictionary,; which means it starts from 0.; In which case, loadedDictEnd == dictSize,; and it makes sense to compare `blockEndIdx > maxDist + dictSize`; since `blockEndIdx` also starts from zero.; - When there is an attached dictionary :; loadedDictEnd is expressed within the referential of the context,; so it can be directly compared against blockEndIdx.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:75,Testability,test,test,75,"/* - When there is no dictionary : loadedDictEnd == 0.; In which case, the test (blockEndIdx > maxDist) is merely to avoid; overflowing next operation `newLowLimit = blockEndIdx - maxDist`.; - When there is a standard dictionary :; Index referential is copied from the dictionary,; which means it starts from 0.; In which case, loadedDictEnd == dictSize,; and it makes sense to compare `blockEndIdx > maxDist + dictSize`; since `blockEndIdx` also starts from zero.; - When there is an attached dictionary :; loadedDictEnd is expressed within the referential of the context,; so it can be directly compared against blockEndIdx.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:65,Usability,simpl,simplification,65,"/* On reaching window size, dictionaries are invalidated.; * For simplification, if window size is reached anywhere within next block,; * the dictionary is invalidated for the full block.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:37,Energy Efficiency,reduce,reduce,37,/* if input and dictionary overlap : reduce dictionary (area presumed modified by input) */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:156,Performance,load,loadedDictEnd,156,/* When using a dictionary the entire dictionary is valid if a single byte of the dictionary; * is within the window. We invalidate the dictionary (and set loadedDictEnd to 0) when it isn't; * valid for the entire block. So this check is sufficient to find the lowest valid match index.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:76,Safety,predict,predicted,76,"/* display a table content,; * listing each element, its frequency, and its predicted bit cost */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_literals.c:430,Integrability,Depend,Dependencies,430,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /*-*************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_literals.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_literals.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c:430,Integrability,Depend,Dependencies,430,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /*-*************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_sequences.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c:99,Integrability,depend,depending,99,/* Heuristic: This should cover most blocks <= 16K and; * start to fade out after 16K to about 32K depending on; * comprssibility.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_sequences.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c:88,Availability,error,error,88,/**; * Returns the cost in bytes of encoding the normalized count header.; * Returns an error if any of the helper functions return an error.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_sequences.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c:135,Availability,error,error,135,/**; * Returns the cost in bytes of encoding the normalized count header.; * Returns an error if any of the helper functions return an error.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_sequences.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c:98,Availability,error,error,98,/**; * Returns the cost in bits of encoding the distribution in count using ctable.; * Returns an error if ctable cannot represent all the symbols in count.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_sequences.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c:87,Usability,simpl,simple,87,"/* The format allows default tables to be repeated, but it isn't useful.; * When using simple heuristics to select encoding type, we don't want; * to confuse these tables with dictionaries. When running more careful; * analysis, we don't need to waste time checking both repeating tables; * and default tables.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_sequences.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_sequences.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:430,Integrability,Depend,Dependencies,430,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /*-*************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:252,Availability,error,error,252,"/** ZSTD_buildSuperBlockEntropy_literal() :; * Builds entropy for the super-block literals.; * Stores literals block type (raw, rle, compressed, repeat) and; * huffman description table to hufMetadata.; * @return : size of huffman description table or error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:3,Security,Validat,Validate,3,/* Validate the previous Huffman table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:195,Availability,error,error,195,/** ZSTD_buildSuperBlockEntropy_sequences() :; * Builds entropy for the super-block sequences.; * Stores symbol compression modes and fse table to fseMetadata.; * @return : size of fse tables or error code */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:104,Availability,error,error,104,/** ZSTD_buildSuperBlockEntropy() :; * Builds entropy for the super-block.; * @return : 0 on success or error code */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:1141,Availability,error,error,1141,"/** ZSTD_compressSubBlock_literal() :; * Compresses literals section for a sub-block.; * When we have to write the Huffman table we will sometimes choose a header; * size larger than necessary. This is because we have to pick the header size; * before we know the table size + compressed size, so we have a bound on the; * table size. If we guessed incorrectly, we fall back to uncompressed literals.; *; * We write the header when writeEntropy=1 and set entropyWrriten=1 when we succeeded; * in writing the header, otherwise it is set to 0.; *; * hufMetadata->hType has literals block type info.; * If it is set_basic, all sub-blocks literals section will be Raw_Literals_Block.; * If it is set_rle, all sub-blocks literals section will be RLE_Literals_Block.; * If it is set_compressed, first sub-block's literals section will be Compressed_Literals_Block; * If it is set_compressed, first sub-block's literals section will be Treeless_Literals_Block; * and the following sub-blocks' literals sections will be Treeless_Literals_Block.; * @return : compressed size of literals section of a sub-block; * Or 0 if it unable to compress.; * Or error code */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:524,Availability,error,error,524,"/** ZSTD_compressSubBlock_sequences() :; * Compresses sequences section for a sub-block.; * fseMetadata->llType, fseMetadata->ofType, and fseMetadata->mlType have; * symbol compression modes for the super-block.; * The first successfully compressed block will have these in its header.; * We set entropyWritten=1 when we succeed in compressing the sequences.; * The following sub-blocks will always have repeat mode.; * @return : compressed size of sequences section of a sub-block; * Or 0 if it is unable to compress; * Or error code. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:378,Performance,optimiz,optimizing,378,"/* zstd versions <= 1.3.4 mistakenly report corruption when; * FSE_readNCount() receives a buffer < 4 bytes.; * Fixed by https://github.com/facebook/zstd/pull/1146.; * This can happen when the last set_compressed table present is 2; * bytes and the bitstream is only one byte.; * In this exceedingly rare case, we will simply emit an uncompressed; * block, since it isn't worth optimizing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:319,Usability,simpl,simply,319,"/* zstd versions <= 1.3.4 mistakenly report corruption when; * FSE_readNCount() receives a buffer < 4 bytes.; * Fixed by https://github.com/facebook/zstd/pull/1146.; * This can happen when the last set_compressed table present is 2; * bytes and the bitstream is only one byte.; * In this exceedingly rare case, we will simply emit an uncompressed; * block, since it isn't worth optimizing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:44,Availability,error,error,44,/* zstd versions <= 1.4.0 mistakenly report error when; * sequences section body size is less than 3 bytes.; * Fixed by https://github.com/facebook/zstd/pull/1664.; * This can happen when the previous sequences section block is compressed; * with rle mode and the current block's sequences section is compressed; * with repeat mode where sequences section body size can be 1 byte.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:23,Performance,optimiz,optimization,23,"/* I think there is an optimization opportunity here.; * Calling ZSTD_estimateSubBlockSize for every sequence can be wasteful; * since it recalculates estimate from scratch.; * For example, it would recount literal distribution and symbol codes everytime.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:69,Integrability,contract,contract,69,"/* If we haven't written our entropy tables, then we've violated our contract and; * must emit an uncompressed block.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:14,Energy Efficiency,allocate,allocated,14,/* statically allocated in resetCCtx */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:14,Energy Efficiency,allocate,allocated,14,/* statically allocated in resetCCtx */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.h:44,Integrability,Depend,Dependencies,44,/*-*************************************; * Dependencies; ***************************************/,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_compress_superblock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:44,Integrability,Depend,Dependencies,44,/*-*************************************; * Dependencies; ***************************************/,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:60,Energy Efficiency,allocate,allocated,60,"/**; * Used to describe whether the workspace is statically allocated (and will not; * necessarily ever be freed), or if it's dynamically allocated and we can; * expect a well-formed caller to free this.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:138,Energy Efficiency,allocate,allocated,138,"/**; * Used to describe whether the workspace is statically allocated (and will not; * necessarily ever be freed), or if it's dynamically allocated and we can; * expect a well-formed caller to free this.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:63,Deployability,continuous,continuous,63,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:943,Energy Efficiency,allocate,allocated,943,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:1487,Energy Efficiency,efficient,efficiently,1487," trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized s",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:2022,Energy Efficiency,allocate,allocated,2022,"will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized separately from the broader ZSTD_CCtx.; * Examples:; * - Entropy Workspace; * - 2 x ZSTD_compressedBlockState_t; * - CDict dictionary contents; *; * - Tables: these are any of several different datastructures (hash tables,; * chain tables, binary trees) that all respect a common format: they are; * uint32_t arrays, all of whose values are between 0 and (nextSrc - base).; * Their sizes depend on the cparams.; *; * - Aligned: these buffers are used for various purposes that require 4 by",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:2478,Energy Efficiency,allocate,allocated,2478,"le to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized separately from the broader ZSTD_CCtx.; * Examples:; * - Entropy Workspace; * - 2 x ZSTD_compressedBlockState_t; * - CDict dictionary contents; *; * - Tables: these are any of several different datastructures (hash tables,; * chain tables, binary trees) that all respect a common format: they are; * uint32_t arrays, all of whose values are between 0 and (nextSrc - base).; * Their sizes depend on the cparams.; *; * - Aligned: these buffers are used for various purposes that require 4 byte; * alignment, but don't require any initialization before they're used.; *; * - Buffers: these buffers are used for various purposes that don't require; * any alignment or initialization before they're used. This means they can; * be moved around at no cost for a new compression.; *; * Allocating Memory:; *; * The various types of objects must be allocated in order, so they can be; * correctly packed into the workspace buffer. Tha",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:3396,Energy Efficiency,allocate,allocated,3396," the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized separately from the broader ZSTD_CCtx.; * Examples:; * - Entropy Workspace; * - 2 x ZSTD_compressedBlockState_t; * - CDict dictionary contents; *; * - Tables: these are any of several different datastructures (hash tables,; * chain tables, binary trees) that all respect a common format: they are; * uint32_t arrays, all of whose values are between 0 and (nextSrc - base).; * Their sizes depend on the cparams.; *; * - Aligned: these buffers are used for various purposes that require 4 byte; * alignment, but don't require any initialization before they're used.; *; * - Buffers: these buffers are used for various purposes that don't require; * any alignment or initialization before they're used. This means they can; * be moved around at no cost for a new compression.; *; * Allocating Memory:; *; * The various types of objects must be allocated in order, so they can be; * correctly packed into the workspace buffer. That order is:; *; * 1. Objects; * 2. Buffers; * 3. Aligned; * 4. Tables; *; * Attempts to reserve objects of different types out of order will fail.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:2943,Integrability,depend,depend,2943," the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized separately from the broader ZSTD_CCtx.; * Examples:; * - Entropy Workspace; * - 2 x ZSTD_compressedBlockState_t; * - CDict dictionary contents; *; * - Tables: these are any of several different datastructures (hash tables,; * chain tables, binary trees) that all respect a common format: they are; * uint32_t arrays, all of whose values are between 0 and (nextSrc - base).; * Their sizes depend on the cparams.; *; * - Aligned: these buffers are used for various purposes that require 4 byte; * alignment, but don't require any initialization before they're used.; *; * - Buffers: these buffers are used for various purposes that don't require; * any alignment or initialization before they're used. This means they can; * be moved around at no cost for a new compression.; *; * Allocating Memory:; *; * The various types of objects must be allocated in order, so they can be; * correctly packed into the workspace buffer. That order is:; *; * 1. Objects; * 2. Buffers; * 3. Aligned; * 4. Tables; *; * Attempts to reserve objects of different types out of order will fail.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:110,Performance,perform,perform,110,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:198,Performance,perform,perform,198,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:284,Performance,optimiz,optimizations,284,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:1387,Performance,perform,perform,1387,"orkspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * requi",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:2765,Security,hash,hash,2765," the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized separately from the broader ZSTD_CCtx.; * Examples:; * - Entropy Workspace; * - 2 x ZSTD_compressedBlockState_t; * - CDict dictionary contents; *; * - Tables: these are any of several different datastructures (hash tables,; * chain tables, binary trees) that all respect a common format: they are; * uint32_t arrays, all of whose values are between 0 and (nextSrc - base).; * Their sizes depend on the cparams.; *; * - Aligned: these buffers are used for various purposes that require 4 byte; * alignment, but don't require any initialization before they're used.; *; * - Buffers: these buffers are used for various purposes that don't require; * any alignment or initialization before they're used. This means they can; * be moved around at no cost for a new compression.; *; * Allocating Memory:; *; * The various types of objects must be allocated in order, so they can be; * correctly packed into the workspace buffer. That order is:; *; * 1. Objects; * 2. Buffers; * 3. Aligned; * 4. Tables; *; * Attempts to reserve objects of different types out of order will fail.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:527,Usability,clear,cleared,527,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:819,Usability,clear,cleared,819,"/**; * Zstd fits all its internal datastructures into a single continuous buffer,; * so that it only needs to perform a single OS allocation (or so that a buffer; * can be provided to it and it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:1198,Usability,clear,clear,1198,"it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:23,Energy Efficiency,power,power,23,/**; * Align must be a power of 2.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:83,Energy Efficiency,allocate,allocate,83,"/**; * Use this to determine how much space in the workspace we will consume to; * allocate this object. (Normally it should be exactly the size of the object,; * but under special conditions, like ASAN, where we pad each object, it might; * be larger.); *; * Since tables aren't currently redzoned, you don't need to call through this; * to figure out how much space you need for the matchState tables. Everything; * else is though.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:28,Availability,down,down,28,"/* If unaligned allocations down from a too-large top have left us; * unaligned, we need to realign our alloc ptr. Technically, this; * can consume space that is unaccounted for in the neededSpace; * calculation. However, I believe this can only happen when the; * workspace is too large, and specifically when it is too large; * by a larger margin than the space that will be consumed. */; /* TODO: cleaner, compiler warning friendly way to do this??? */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:50,Energy Efficiency,allocate,allocated,50,/**; * Returns whether this object/buffer/etc was allocated in this workspace.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:6,Security,validat,validate,6,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:74,Security,access,access,74,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:37,Testability,log,logic,37,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:28,Energy Efficiency,allocate,allocated,28,/**; * Zero the part of the allocated tables not already marked clean.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:53,Energy Efficiency,allocate,allocated,53,"/* We don't do this when the workspace is statically allocated, because; * when that is the case, we have no capability to hook into the end of the; * workspace's lifecycle to unpoison the memory.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:6,Security,validat,validate,6,"/* To validate that the context re-use logic is sound, and that we don't; * access stuff that this compression hasn't initialized, we re-""poison""; * the workspace (or at least the non-static, non-table parts of it); * every time we start a new compression. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:76,Security,access,access,76,"/* To validate that the context re-use logic is sound, and that we don't; * access stuff that this compression hasn't initialized, we re-""poison""; * the workspace (or at least the non-static, non-table parts of it); * every time we start a new compression. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:39,Testability,log,logic,39,"/* To validate that the context re-use logic is sound, and that we don't; * access stuff that this compression hasn't initialized, we re-""poison""; * the workspace (or at least the non-static, non-table parts of it); * every time we start a new compression. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:53,Energy Efficiency,allocate,allocated,53,"/* We don't do this when the workspace is statically allocated, because; * when that is the case, we have no capability to hook into the end of the; * workspace's lifecycle to unpoison the memory.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_cwksp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:58,Security,hash,hash,58,/* Always insert every fastHashFillStep position into the hash tables.; * Insert the other positions into the large hash table if their entry; * is empty.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_double_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:116,Security,hash,hash,116,/* Always insert every fastHashFillStep position into the hash tables.; * Insert the other positions into the large hash table if their entry; * is empty.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_double_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:8,Performance,load,load,8,/* Only load extra positions for ZSTD_dtlm_full */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_double_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:3,Deployability,update,update,3,/* update hash tables */; /* check dictMatchState repcode */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_double_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:10,Security,hash,hash,10,/* update hash tables */; /* check dictMatchState repcode */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_double_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:52,Testability,test,test,52,"/* Complementary insertion */; /* done after iLimit test, as candidates could be > iend-8 */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_double_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:3,Deployability,update,update,3,/* update hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_double_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:10,Security,hash,hash,10,/* update hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_double_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:52,Testability,test,test,52,"/* Complementary insertion */; /* done after iLimit test, as candidates could be > iend-8 */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_double_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:58,Security,hash,hash,58,/* Always insert every fastHashFillStep position into the hash table.; * Insert the other positions if their hash entry is empty.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:109,Security,hash,hash,109,/* Always insert every fastHashFillStep position into the hash table.; * Insert the other positions if their hash entry is empty.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:8,Performance,load,load,8,/* Only load extra positions for ZSTD_dtlm_full */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:3,Deployability,update,update,3,/* update hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:10,Security,hash,hash,10,/* update hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:3,Deployability,update,update,3,/* update hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:10,Security,hash,hash,10,/* update hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:9,Modifiability,variab,variables,9,/* these variables are not used when assert() is disabled */; /* ensure there will be no no underflow; * when translating a dict index into a local index */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:37,Testability,assert,assert,37,/* these variables are not used when assert() is disabled */; /* ensure there will be no no underflow; * when translating a dict index into a local index */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:3,Deployability,update,update,3,/* update hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:10,Security,hash,hash,10,/* update hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:3,Deployability,update,update,3,/* update hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:10,Security,hash,hash,10,/* update hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:3,Deployability,update,update,3,/* update offset history */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_fast.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:3,Deployability,Update,Update,3,/* Update Hash Table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:10,Security,Hash,Hash,10,/* Update Hash Table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:3,Deployability,update,update,3,/* update BT like a chain */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:3,Deployability,update,update,3,/* update smaller idx */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:52,Usability,simpl,simplification,52,"/* nullify last candidate if it's still unsorted; * simplification, detrimental to compression ratio, beneficial for speed */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:3,Deployability,Update,Update,3,/* Update Hash Table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:10,Security,Hash,Hash,10,/* Update Hash Table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:18,Safety,avoid,avoiding,18,"/* in addition to avoiding checking any; * further in this loop, make sure we; * skip checking in the dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:3,Deployability,update,update,3,/* update smaller idx */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:34,Deployability,update,updater,34,"/** ZSTD_BtFindBestMatch() : Tree updater, providing best match */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:40,Security,Hash,Hash,40,/* *********************************; * Hash Chain; ***********************************/,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:3,Deployability,Update,Update,3,/* Update chains up to ip (excluded); Assumption : always within prefix (i.e. not within extDict) */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:15,Security,hash,hashtable,15,"/* We know the hashtable is oversized by a factor of `bucketSize`.; * We are going to temporarily pretend `bucketSize == 1`, keeping only a; * single entry. We will use the rest of the space to construct a temporary; * chaintable.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:21,Security,hash,hash,21,/* fill conventional hash table and conventional chain table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:77,Performance,cache,cache,77,/* skip through the chain to the first position that won't be; * in the hash cache bucket */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:72,Security,hash,hash,72,/* skip through the chain to the first position that won't be; * in the hash cache bucket */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:345,Energy Efficiency,allocate,allocated,345,"/* only allow pulling `cacheSize` number of entries; * into the cache or chainTable beyond `minChain`,; * to replace the entries pulled out of the; * chainTable into the cache. This lets us reach; * back further without increasing the total number; * of entries in the chainTable, guaranteeing the; * DDSS chain table will fit into the space; * allocated for the regular one. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:23,Performance,cache,cacheSize,23,"/* only allow pulling `cacheSize` number of entries; * into the cache or chainTable beyond `minChain`,; * to replace the entries pulled out of the; * chainTable into the cache. This lets us reach; * back further without increasing the total number; * of entries in the chainTable, guaranteeing the; * DDSS chain table will fit into the space; * allocated for the regular one. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:64,Performance,cache,cache,64,"/* only allow pulling `cacheSize` number of entries; * into the cache or chainTable beyond `minChain`,; * to replace the entries pulled out of the; * chainTable into the cache. This lets us reach; * back further without increasing the total number; * of entries in the chainTable, guaranteeing the; * DDSS chain table will fit into the space; * allocated for the regular one. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:170,Performance,cache,cache,170,"/* only allow pulling `cacheSize` number of entries; * into the cache or chainTable beyond `minChain`,; * to replace the entries pulled out of the; * chainTable into the cache. This lets us reach; * back further without increasing the total number; * of entries in the chainTable, guaranteeing the; * DDSS chain table will fit into the space; * allocated for the regular one. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:51,Security,hash,hash,51,/* move chain pointers into the last entry of each hash bucket */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:27,Security,hash,hash,27,/* fill the buckets of the hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:20,Availability,down,down,20,/* Shift hash cache down 1. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:14,Performance,cache,cache,14,/* Shift hash cache down 1. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:9,Security,hash,hash,9,/* Shift hash cache down 1. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:18,Safety,avoid,avoids,18,"/* best possible, avoids read overflow on next attempt */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:18,Safety,avoid,avoids,18,"/* best possible, avoids read overflow on next attempt */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:18,Safety,avoid,avoids,18,"/* best possible, avoids read overflow on next attempt */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:18,Safety,avoid,avoids,18,"/* best possible, avoids read overflow on next attempt */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:138,Deployability,configurat,configurations,138,"/**; * This table is indexed first by the four ZSTD_dictMode_e values, and then; * by the two searchMethod_e values. NULLs are placed for configurations; * that should never occur (extDict modes go to the other implementation; * below and there is no DDSS for binary tree search yet).; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:138,Modifiability,config,configurations,138,"/**; * This table is indexed first by the four ZSTD_dictMode_e values, and then; * by the two searchMethod_e values. NULLs are placed for configurations; * that should never occur (extDict modes go to the other implementation; * below and there is no DDSS for binary tree search yet).; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:11,Safety,detect,detected,11,/* repcode detected we should take it */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:11,Safety,detect,detected,11,/* repcode detected */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:11,Safety,detect,detected,11,/* repcode detected */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:11,Safety,detect,detected,11,/* repcode detected we should take it */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h:102,Security,hash,hashTable,102,"/**; * Dedicated Dictionary Search Structure bucket log. In the; * ZSTD_dedicatedDictSearch mode, the hashTable has; * 2 ** ZSTD_LAZY_DDSS_BUCKET_LOG entries in each bucket, rather than just; * one.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h:52,Testability,log,log,52,"/**; * Dedicated Dictionary Search Structure bucket log. In the; * ZSTD_dedicatedDictSearch mode, the hashTable has; * 2 ** ZSTD_LAZY_DDSS_BUCKET_LOG entries in each bucket, rather than just; * one.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_lazy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:37,Security,hash,hash,37,"/** ZSTD_ldm_getTag() ;; * Given the hash, returns the most significant numTagBits bits; * after (32 + hbits) bits.; *; * If there are not enough bits remaining, return the last; * numTagBits bits. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:91,Security,hash,hash,91,/** ZSTD_ldm_getBucket() :; * Returns a pointer to the start of the bucket associated with hash. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:68,Security,hash,hash,68,/** ZSTD_ldm_insertEntry() :; * Insert the entry with corresponding hash into the hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:82,Security,hash,hash,82,/** ZSTD_ldm_insertEntry() :; * Insert the entry with corresponding hash into the hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:95,Deployability,rolling,rollingHash,95,"/** ZSTD_ldm_makeEntryAndInsertByTag() :; *; * Gets the small hash, checksum, and tag from the rollingHash.; *; * If the tag matches (1 << ldmParams.hashRateLog)-1, then; * creates an ldmEntry from the offset, and inserts it into the hash table.; *; * hBits is the length of the small hash, which is the most significant hBits; * of rollingHash. The checksum is the next 32 most significant bits, followed; * by ldmParams.hashRateLog bits that make up the tag. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:333,Deployability,rolling,rollingHash,333,"/** ZSTD_ldm_makeEntryAndInsertByTag() :; *; * Gets the small hash, checksum, and tag from the rollingHash.; *; * If the tag matches (1 << ldmParams.hashRateLog)-1, then; * creates an ldmEntry from the offset, and inserts it into the hash table.; *; * hBits is the length of the small hash, which is the most significant hBits; * of rollingHash. The checksum is the next 32 most significant bits, followed; * by ldmParams.hashRateLog bits that make up the tag. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:62,Security,hash,hash,62,"/** ZSTD_ldm_makeEntryAndInsertByTag() :; *; * Gets the small hash, checksum, and tag from the rollingHash.; *; * If the tag matches (1 << ldmParams.hashRateLog)-1, then; * creates an ldmEntry from the offset, and inserts it into the hash table.; *; * hBits is the length of the small hash, which is the most significant hBits; * of rollingHash. The checksum is the next 32 most significant bits, followed; * by ldmParams.hashRateLog bits that make up the tag. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:68,Security,checksum,checksum,68,"/** ZSTD_ldm_makeEntryAndInsertByTag() :; *; * Gets the small hash, checksum, and tag from the rollingHash.; *; * If the tag matches (1 << ldmParams.hashRateLog)-1, then; * creates an ldmEntry from the offset, and inserts it into the hash table.; *; * hBits is the length of the small hash, which is the most significant hBits; * of rollingHash. The checksum is the next 32 most significant bits, followed; * by ldmParams.hashRateLog bits that make up the tag. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:149,Security,hash,hashRateLog,149,"/** ZSTD_ldm_makeEntryAndInsertByTag() :; *; * Gets the small hash, checksum, and tag from the rollingHash.; *; * If the tag matches (1 << ldmParams.hashRateLog)-1, then; * creates an ldmEntry from the offset, and inserts it into the hash table.; *; * hBits is the length of the small hash, which is the most significant hBits; * of rollingHash. The checksum is the next 32 most significant bits, followed; * by ldmParams.hashRateLog bits that make up the tag. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:234,Security,hash,hash,234,"/** ZSTD_ldm_makeEntryAndInsertByTag() :; *; * Gets the small hash, checksum, and tag from the rollingHash.; *; * If the tag matches (1 << ldmParams.hashRateLog)-1, then; * creates an ldmEntry from the offset, and inserts it into the hash table.; *; * hBits is the length of the small hash, which is the most significant hBits; * of rollingHash. The checksum is the next 32 most significant bits, followed; * by ldmParams.hashRateLog bits that make up the tag. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:285,Security,hash,hash,285,"/** ZSTD_ldm_makeEntryAndInsertByTag() :; *; * Gets the small hash, checksum, and tag from the rollingHash.; *; * If the tag matches (1 << ldmParams.hashRateLog)-1, then; * creates an ldmEntry from the offset, and inserts it into the hash table.; *; * hBits is the length of the small hash, which is the most significant hBits; * of rollingHash. The checksum is the next 32 most significant bits, followed; * by ldmParams.hashRateLog bits that make up the tag. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:350,Security,checksum,checksum,350,"/** ZSTD_ldm_makeEntryAndInsertByTag() :; *; * Gets the small hash, checksum, and tag from the rollingHash.; *; * If the tag matches (1 << ldmParams.hashRateLog)-1, then; * creates an ldmEntry from the offset, and inserts it into the hash table.; *; * hBits is the length of the small hash, which is the most significant hBits; * of rollingHash. The checksum is the next 32 most significant bits, followed; * by ldmParams.hashRateLog bits that make up the tag. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:422,Security,hash,hashRateLog,422,"/** ZSTD_ldm_makeEntryAndInsertByTag() :; *; * Gets the small hash, checksum, and tag from the rollingHash.; *; * If the tag matches (1 << ldmParams.hashRateLog)-1, then; * creates an ldmEntry from the offset, and inserts it into the hash table.; *; * hBits is the length of the small hash, which is the most significant hBits; * of rollingHash. The checksum is the next 32 most significant bits, followed; * by ldmParams.hashRateLog bits that make up the tag. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:122,Deployability,rolling,rolling,122,/** ZSTD_ldm_fillLdmHashTable() :; *; * Fills hashTable from (lastHashed + 1) to iend (non-inclusive).; * lastHash is the rolling hash that corresponds to lastHashed.; *; * Returns the rolling hash corresponding to position iend-1. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:185,Deployability,rolling,rolling,185,/** ZSTD_ldm_fillLdmHashTable() :; *; * Fills hashTable from (lastHashed + 1) to iend (non-inclusive).; * lastHash is the rolling hash that corresponds to lastHashed.; *; * Returns the rolling hash corresponding to position iend-1. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:46,Security,hash,hashTable,46,/** ZSTD_ldm_fillLdmHashTable() :; *; * Fills hashTable from (lastHashed + 1) to iend (non-inclusive).; * lastHash is the rolling hash that corresponds to lastHashed.; *; * Returns the rolling hash corresponding to position iend-1. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:130,Security,hash,hash,130,/** ZSTD_ldm_fillLdmHashTable() :; *; * Fills hashTable from (lastHashed + 1) to iend (non-inclusive).; * lastHash is the rolling hash that corresponds to lastHashed.; *; * Returns the rolling hash corresponding to position iend-1. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:193,Security,hash,hash,193,/** ZSTD_ldm_fillLdmHashTable() :; *; * Fills hashTable from (lastHashed + 1) to iend (non-inclusive).; * lastHash is the rolling hash that corresponds to lastHashed.; *; * Returns the rolling hash corresponding to position iend-1. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:158,Deployability,update,update,158,"/** ZSTD_ldm_limitTableUpdate() :; *; * Sets cctx->nextToUpdate to a position corresponding closer to anchor; * if it is far way; * (after a long match, only update tables a limited amount). */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:3,Deployability,Rolling,Rolling,3,/* Rolling hash */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:11,Security,hash,hash,11,/* Rolling hash */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:37,Security,hash,hash,37,/* Insert the current entry into the hash table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:12,Security,hash,hash,12,/* Fill the hash table from lastHashed+1 to ip+mLength*/; /* Heuristic: don't need to fill the entire table at end of block */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:32,Energy Efficiency,reduce,reduce,32,/*! ZSTD_ldm_reduceTable() :; * reduce table indexes by `reducerValue` */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:57,Energy Efficiency,reduce,reducerValue,57,/*! ZSTD_ldm_reduceTable() :; * reduce table indexes by `reducerValue` */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:6,Performance,Perform,Perform,6,/* 1. Perform overflow correction if necessary. */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:172,Testability,Test,Test,172,"/* 2. We enforce the maximum offset allowed.; *; * kMaxChunkSize should be small enough that we don't lose too much of; * the window through early invalidation.; * TODO: * Test the chunk size.; * * Try invalidation after the sequence generation and test the; * the offset against maxDist directly.; *; * NOTE: Because of dictionaries + sequence splitting we MUST make sure; * that any offset used is valid at the END of the sequence, since it may; * be split into two sequences. This condition holds when using; * ZSTD_window_enforceMaxDist(), but if we move to checking offsets; * against maxDist directly, we'll have to carefully handle that case.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:249,Testability,test,test,249,"/* 2. We enforce the maximum offset allowed.; *; * kMaxChunkSize should be small enough that we don't lose too much of; * the window through early invalidation.; * TODO: * Test the chunk size.; * * Try invalidation after the sequence generation and test the; * the offset against maxDist directly.; *; * NOTE: Because of dictionaries + sequence splitting we MUST make sure; * that any offset used is valid at the END of the sequence, since it may; * be split into two sequences. This condition holds when using; * ZSTD_window_enforceMaxDist(), but if we move to checking offsets; * against maxDist directly, we'll have to carefully handle that case.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:22,Deployability,update,updates,22,/* maybeSplitSequence updates rawSeqStore->pos */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:3,Deployability,Update,Update,3,/* Update the repcodes */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:336,Availability,error,error,336,"/**; * ZSTD_ldm_generateSequences():; *; * Generates the sequences using the long distance match finder.; * Generates long range matching sequences in `sequences`, which parse a prefix; * of the source. `sequences` must be large enough to store every sequence,; * which can be checked with `ZSTD_ldm_getMaxNbSeq()`.; * @returns 0 or an error code.; *; * NOTE: The user must have called ZSTD_window_update() for all of the input; * they have, even if they pass it to ZSTD_ldm_generateSequences() in chunks.; * NOTE: This function returns an error if it runs out of space to store; * sequences.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:540,Availability,error,error,540,"/**; * ZSTD_ldm_generateSequences():; *; * Generates the sequences using the long distance match finder.; * Generates long range matching sequences in `sequences`, which parse a prefix; * of the source. `sequences` must be large enough to store every sequence,; * which can be checked with `ZSTD_ldm_getMaxNbSeq()`.; * @returns 0 or an error code.; *; * NOTE: The user must have called ZSTD_window_update() for all of the input; * they have, even if they pass it to ZSTD_ldm_generateSequences() in chunks.; * NOTE: This function returns an error if it runs out of space to store; * sequences.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:913,Availability,error,errors,913,"/**; * ZSTD_ldm_blockCompress():; *; * Compresses a block using the predefined sequences, along with a secondary; * block compressor. The literals section of every sequence is passed to the; * secondary block compressor, and those sequences are interspersed with the; * predefined sequences. Returns the length of the last literals.; * Updates `rawSeqStore.pos` to indicate how many sequences have been consumed.; * `rawSeqStore.seq` may also be updated to split the last sequence between two; * blocks.; * @return The length of the last literals.; *; * NOTE: The source must be at most the maximum block size, but the predefined; * sequences can be any size, and may be longer than the block. In the case that; * they are longer than the block, the last sequences may need to be split into; * two. We handle that case correctly, and update `rawSeqStore` appropriately.; * NOTE: This function does not return any errors.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:336,Deployability,Update,Updates,336,"/**; * ZSTD_ldm_blockCompress():; *; * Compresses a block using the predefined sequences, along with a secondary; * block compressor. The literals section of every sequence is passed to the; * secondary block compressor, and those sequences are interspersed with the; * predefined sequences. Returns the length of the last literals.; * Updates `rawSeqStore.pos` to indicate how many sequences have been consumed.; * `rawSeqStore.seq` may also be updated to split the last sequence between two; * blocks.; * @return The length of the last literals.; *; * NOTE: The source must be at most the maximum block size, but the predefined; * sequences can be any size, and may be longer than the block. In the case that; * they are longer than the block, the last sequences may need to be split into; * two. We handle that case correctly, and update `rawSeqStore` appropriately.; * NOTE: This function does not return any errors.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:446,Deployability,update,updated,446,"/**; * ZSTD_ldm_blockCompress():; *; * Compresses a block using the predefined sequences, along with a secondary; * block compressor. The literals section of every sequence is passed to the; * secondary block compressor, and those sequences are interspersed with the; * predefined sequences. Returns the length of the last literals.; * Updates `rawSeqStore.pos` to indicate how many sequences have been consumed.; * `rawSeqStore.seq` may also be updated to split the last sequence between two; * blocks.; * @return The length of the last literals.; *; * NOTE: The source must be at most the maximum block size, but the predefined; * sequences can be any size, and may be longer than the block. In the case that; * they are longer than the block, the last sequences may need to be split into; * two. We handle that case correctly, and update `rawSeqStore` appropriately.; * NOTE: This function does not return any errors.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:834,Deployability,update,update,834,"/**; * ZSTD_ldm_blockCompress():; *; * Compresses a block using the predefined sequences, along with a secondary; * block compressor. The literals section of every sequence is passed to the; * secondary block compressor, and those sequences are interspersed with the; * predefined sequences. Returns the length of the last literals.; * Updates `rawSeqStore.pos` to indicate how many sequences have been consumed.; * `rawSeqStore.seq` may also be updated to split the last sequence between two; * blocks.; * @return The length of the last literals.; *; * NOTE: The source must be at most the maximum block size, but the predefined; * sequences can be any size, and may be longer than the block. In the case that; * they are longer than the block, the last sequences may need to be split into; * two. We handle that case correctly, and update `rawSeqStore` appropriately.; * NOTE: This function does not return any errors.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:105,Safety,Avoid,Avoids,105,/**; * ZSTD_ldm_skipSequences():; *; * Skip past `srcSize` bytes worth of sequences in `rawSeqStore`.; * Avoids emitting matches less than `minMatch` bytes.; * Must be called for data with is not passed to ZSTD_ldm_blockCompress().; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:52,Security,hash,hashRateLog,52,"/** ZSTD_ldm_adjustParameters() :; * If the params->hashRateLog is not set, set it to its default value based on; * windowLog and params->hashLog.; *; * Ensures that params->bucketSizeLog is <= params->hashLog (setting it to; * params->hashLog if it is not).; *; * Ensures that the minMatchLength >= targetLength during optimal parsing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:138,Security,hash,hashLog,138,"/** ZSTD_ldm_adjustParameters() :; * If the params->hashRateLog is not set, set it to its default value based on; * windowLog and params->hashLog.; *; * Ensures that params->bucketSizeLog is <= params->hashLog (setting it to; * params->hashLog if it is not).; *; * Ensures that the minMatchLength >= targetLength during optimal parsing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:202,Security,hash,hashLog,202,"/** ZSTD_ldm_adjustParameters() :; * If the params->hashRateLog is not set, set it to its default value based on; * windowLog and params->hashLog.; *; * Ensures that params->bucketSizeLog is <= params->hashLog (setting it to; * params->hashLog if it is not).; *; * Ensures that the minMatchLength >= targetLength during optimal parsing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:236,Security,hash,hashLog,236,"/** ZSTD_ldm_adjustParameters() :; * If the params->hashRateLog is not set, set it to its default value based on; * windowLog and params->hashLog.; *; * Ensures that params->bucketSizeLog is <= params->hashLog (setting it to; * params->hashLog if it is not).; *; * Ensures that the minMatchLength >= targetLength during optimal parsing.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_ldm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:51,Energy Efficiency,adapt,adapt,51,"/* scaling factor for litFreq, so that frequencies adapt faster to new stats */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:51,Modifiability,adapt,adapt,51,"/* scaling factor for litFreq, so that frequencies adapt faster to new stats */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:3,Testability,log,log,3,/* log factor when using previous stats to init next stats */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:82,Integrability,message,messages,82,"/* debugging function,; * @return price in bytes as fractional value; * for debug messages only */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:29,Energy Efficiency,reduce,reduce,29,/* ZSTD_downscaleStat() :; * reduce all elements in table by a factor 2^(ZSTD_FREQ_DIV+malus); * return the resulting sum of elements */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:240,Availability,down,downscale,240,"/* ZSTD_rescaleFreqs() :; * if first block (detected by optPtr->litLengthSum == 0) : init statistics; * take hints from dictionary if there is one; * or init from zero, using src for literals stats, or flat 1 for match symbols; * otherwise downscale existing stats, to be used as seed for next block.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:44,Safety,detect,detected,44,"/* ZSTD_rescaleFreqs() :; * if first block (detected by optPtr->litLengthSum == 0) : init statistics; * take hints from dictionary if there is one; * or init from zero, using src for literals stats, or flat 1 for match symbols; * otherwise downscale existing stats, to be used as seed for next block.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:50,Availability,down,down,50,"/* new block : re-use previous statistics, scaled down */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:263,Performance,cache,cache,263,"/* ZSTD_getMatchPrice() :; * Provides the cost of the match part (offset + matchLength) of a sequence; * Must be combined with ZSTD_fullLiteralsCost() to get the full cost of a sequence.; * optLevel: when <2, favors small offset for decompression speed (improved cache efficiency) */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:37,Safety,safe,safe,37,/* ZSTD_readMINMATCH() :; * function safe only for comparisons; * assumption : memPtr must be at least 4 bytes before end of buffer */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:3,Deployability,Update,Update,3,/* Update hashTable3 up to ip (excluded); Assumption : always within prefix (i.e. not within extDict) */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:3,Deployability,Update,Update,3,/* Update Hash Table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:10,Security,Hash,Hash,10,/* Update Hash Table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:3,Deployability,update,update,3,/* update smaller idx */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:9,Performance,optimiz,optimization,9,/* speed optimization */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:48,Safety,detect,detects,48,/* farthest referenced position of any match => detects repetitive patterns */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:63,Security,validat,validate,63,/* equivalent to `curr > repIndex >= dictLimit` */; /* We must validate the repcode offset because when we're using a dictionary the; * valid offset range shrinks when the dictionary goes out of bounds.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:33,Testability,test,test,33,/* intentional overflow : do not test positions overlapping 2 memory segments */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:33,Testability,test,test,33,/* intentional overflow : do not test positions overlapping 2 memory segments */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:3,Deployability,Update,Update,3,/* Update Hash Table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:10,Security,Hash,Hash,10,/* Update Hash Table */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:3,Deployability,update,update,3,/* update smaller idx */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:94,Deployability,update,update,94,"/* ZSTD_optLdm_skipRawSeqStoreBytes():; * Moves forward in rawSeqStore by nbBytes, which will update the fields 'pos' and 'posInSequence'.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:124,Deployability,Update,Updates,124,/* ZSTD_opt_getNextMatchAndUpdateSeqStore():; * Calculates the beginning and end of the next match in the current block.; * Updates 'pos' and 'posInSequence' of the ldmSeqStore.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:63,Deployability,update,update,63,/* ZSTD_optLdm_processMatchCandidate():; * Wrapper function to update ldm seq store and call ldm functions as necessary.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:43,Integrability,Wrap,Wrapper,43,/* ZSTD_optLdm_processMatchCandidate():; * Wrapper function to update ldm seq store and call ldm functions as necessary.; */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:191,Safety,avoid,avoid,191,"/* We don't need to include the actual price of the literals because; * it is static for the duration of the forward pass, and is included; * in every price. We include the literal length to avoid negative; * prices when we subtract the previous literal length.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:8,Availability,down,downward,8,/* scan downward */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:9,Deployability,update,update,9,/* early update abort; gets ~+10% speed for about -0.01 ratio loss */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:16,Safety,abort,abort,16,/* early update abort; gets ~+10% speed for about -0.01 ratio loss */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:145,Deployability,update,update,145,"/* Set the next chunk's repcodes based on the repcodes of the beginning; * of the last match, and the last sequence. This avoids us having to; * update them while traversing the sequences.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:122,Safety,avoid,avoids,122,"/* Set the next chunk's repcodes based on the repcodes of the beginning; * of the last match, and the last sequence. This avoids us having to; * update them while traversing the sequences.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:201,Availability,error,error,201,"/* ZSTD_initStats_ultra():; * make a first compression pass, just to seed stats with more accurate starting values.; * only works on first block, with no dictionary and no ldm.; * this function cannot error, hence its contract must be respected.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:218,Integrability,contract,contract,218,"/* ZSTD_initStats_ultra():; * make a first compression pass, just to seed stats with more accurate starting values.; * only works on first block, with no dictionary and no ldm.; * this function cannot error, hence its contract must be respected.; */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:3,Deployability,update,updated,3,/* updated rep codes will sink here */,MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:279,Performance,load,loaded,279,"/* 2-pass strategy:; * this strategy makes a first pass over first block to collect statistics; * and seed next round's statistics with it.; * After 1st pass, function forgets everything, and starts a new block.; * Consequently, this can only work if no data has been previously loaded in tables,; * aka, no dictionary, no prefix, no ldm preprocessing.; * The compression ratio gain is generally small (~0.5% on first block),; * the cost is 2x cpu time on first block. */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:35,Performance,load,loaded,35,"/* start of frame, nothing already loaded nor skipped */",MatchSource.CODE_COMMENT,builtins/zstd/compress/zstd_opt.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:749,Integrability,Depend,Dependencies,749,"/* ******************************************************************; * huff0 huffman decoder,; * part of Finite State Entropy library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - FSE+HUF source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /* **************************************************************; * Dependencies; ****************************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:69,Availability,Error,Error,69,/* **************************************************************; * Error Management; ****************************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:82,Integrability,Wrap,Wrappers,82,/* **************************************************************; * BMI2 Variant Wrappers; ****************************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:96,Availability,down,down,96,/* single-symbol decoding */; /**; * Packs 4 HUF_DEltX1 structs into a U64. This is used to lay down 4 entries at; * a time.; */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:312,Safety,avoid,avoid,312,"/* Compute symbols and rankStart given rankVal:; *; * rankVal already contains the number of values of each weight.; *; * symbols contains the symbols ordered by weight. First are the rankVal[0]; * weight 0 symbols, followed by the rankVal[1] weight 1 symbols, and so on.; * symbols[0] is filled (but unused) to avoid a branch.; *; * rankStart contains the offset where each rank belongs in the DTable.; * rankStart[0] is not filled because there are no entries in the table for; * weight 0.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:210,Performance,optimiz,optimized,210,/* fill DTable; * We fill all entries of each weight in order.; * That way length is a constant for each iteration of the outter loop.; * We can switch based on the length to a different inner loop which is; * optimized for that particular case.; */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:191,Testability,test,test,191,"/* check corruption */; /* note : should not be necessary : op# advance in lock step, and we control op4.; * but curiously, binary generated by gcc 7.2 & 7.3 with -mbmi2 runs faster when >=1 test is present */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:21,Safety,avoid,avoid,21,/* force compiler to avoid strict-aliasing */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:27,Testability,assert,assertion,27,"/* if compiler fails here, assertion is wrong */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:48,Energy Efficiency,reduce,reduce,48,"/* advantage to algorithm using less memory, to reduce cache eviction */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:55,Performance,cache,cache,55,"/* advantage to algorithm using less memory, to reduce cache eviction */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:3,Security,validat,validation,3,/* validation checks */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:3,Security,validat,validation,3,/* validation checks */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:3,Security,validat,validation,3,/* validation checks */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:3,Security,validat,validation,3,/* validation checks */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:3,Security,validat,validation,3,/* validation checks */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/huf_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c:550,Integrability,Depend,Dependencies,550,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* zstd_ddict.c :; * concentrates all logic that needs to know the internals of ZSTD_DDict object */; /*-*******************************************************; * Dependencies; *********************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c:424,Testability,log,logic,424,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* zstd_ddict.c :; * concentrates all logic that needs to know the internals of ZSTD_DDict object */; /*-*******************************************************; * Dependencies; *********************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c:20,Integrability,rout,routines,20,/* low level memory routines */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c:3,Performance,load,load,3,/* load entropy tables */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c:177,Deployability,release,released,177,"/*! ZSTD_createDDict() :; * Create a digested dictionary, to start decompression without startup delay.; * `dict` content is copied inside DDict.; * Consequently, `dict` can be released after `ZSTD_DDict` creation */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c:171,Security,access,accessed,171,"/*! ZSTD_createDDict_byReference() :; * Create a digested dictionary, to start decompression without startup delay.; * Dictionary content is simply referenced, it will be accessed during decompression.; * Warning : dictBuffer must outlive DDict (DDict must be freed before dictBuffer) */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c:141,Usability,simpl,simply,141,"/*! ZSTD_createDDict_byReference() :; * Create a digested dictionary, to start decompression without startup delay.; * Dictionary content is simply referenced, it will be accessed during decompression.; * Warning : dictBuffer must outlive DDict (DDict must be freed before dictBuffer) */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c:74,Performance,load,loaded,74,"/*! ZSTD_getDictID_fromDDict() :; * Provides the dictID of the dictionary loaded into `ddict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c:230,Performance,load,loaded,230,"/*! ZSTD_getDictID_fromDDict() :; * Provides the dictID of the dictionary loaded into `ddict`.; * If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.; * Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.h:62,Integrability,Depend,Dependencies,62,/*-*******************************************************; * Dependencies; *********************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.h:62,Integrability,Interface,Interface,62,/*-*******************************************************; * Interface; *********************************************************/; /* note: several prototypes are already published in `zstd.h` :; * ZSTD_createDDict(); * ZSTD_createDDict_byReference(); * ZSTD_createDDict_advanced(); * ZSTD_freeDDict(); * ZSTD_initStaticDDict(); * ZSTD_sizeof_DDict(); * ZSTD_estimateDDictSize(); * ZSTD_getDictID_fromDict(); */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_ddict.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:624,Energy Efficiency,allocate,allocates,624,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* ***************************************************************; * Tuning parameters; *****************************************************************/; /*!; * HEAPMODE :; * Select how default decompression function ZSTD_decompress() allocates its context,; * on stack (0), or into heap (1, default; requires malloc()).; * Note that functions with explicit context such as ZSTD_decompressDCtx() are unaffected.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:219,Availability,error,error,219,"/*!; * NO_FORWARD_PROGRESS_MAX :; * maximum allowed nb of calls to ZSTD_decompressStream(); * without any forward progress; * (defined as: no byte read from input, and no byte flushed to output); * before triggering an error.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:62,Integrability,Depend,Dependencies,62,/*-*******************************************************; * Dependencies; *********************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:20,Integrability,rout,routines,20,/* low level memory routines */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:220,Availability,error,error,220,"/** ZSTD_frameHeaderSize_internal() :; * srcSize must be large enough to reach header size fields.; * note : only works for formats ZSTD_f_zstd1 and ZSTD_f_zstd1_magicless.; * @return : size of the Frame Header; * or an error code, which can be tested with ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:245,Testability,test,tested,245,"/** ZSTD_frameHeaderSize_internal() :; * srcSize must be large enough to reach header size fields.; * note : only works for formats ZSTD_f_zstd1 and ZSTD_f_zstd1_magicless.; * @return : size of the Frame Header; * or an error code, which can be tested with ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:128,Availability,error,error,128,"/** ZSTD_frameHeaderSize() :; * srcSize must be >= ZSTD_frameHeaderSize_prefix.; * @return : size of the Frame Header,; * or an error code (if srcSize is too small) */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:283,Availability,error,error,283,"/** ZSTD_getFrameHeader_advanced() :; * decode Frame Header, or require larger `srcSize`.; * note : only works for formats ZSTD_f_zstd1 and ZSTD_f_zstd1_magicless; * @return : 0, `zfhPtr` is correctly filled,; * >0, `srcSize` is too small, value is wanted `srcSize` amount,; * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:308,Testability,test,tested,308,"/** ZSTD_getFrameHeader_advanced() :; * decode Frame Header, or require larger `srcSize`.; * note : only works for formats ZSTD_f_zstd1 and ZSTD_f_zstd1_magicless; * @return : 0, `zfhPtr` is correctly filled,; * >0, `srcSize` is too small, value is wanted `srcSize` amount,; * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:267,Availability,error,error,267,"/** ZSTD_getFrameHeader() :; * decode Frame Header, or require larger `srcSize`.; * note : this function does not consume input, it only reads it.; * @return : 0, `zfhPtr` is correctly filled,; * >0, `srcSize` is too small, value is wanted `srcSize` amount,; * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:292,Testability,test,tested,292,"/** ZSTD_getFrameHeader() :; * decode Frame Header, or require larger `srcSize`.; * note : this function does not consume input, it only reads it.; * @return : 0, `zfhPtr` is correctly filled,; * >0, `srcSize` is too small, value is wanted `srcSize` amount,; * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:252,Availability,error,error,252,"/** ZSTD_getFrameContentSize() :; * compatible with legacy mode; * @return : decompressed size of the single frame pointed to be `src` if known, otherwise; * - ZSTD_CONTENTSIZE_UNKNOWN if the size cannot be determined; * - ZSTD_CONTENTSIZE_ERROR if an error occurred (e.g. invalid magic number, srcSize too small) */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:133,Availability,error,error,133,"/** ZSTD_decodeFrameHeader() :; * `headerSize` must be the size provided by ZSTD_frameHeaderSize().; * @return : 0 if success, or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:158,Testability,test,tested,158,"/** ZSTD_decodeFrameHeader() :; * `headerSize` must be the size provided by ZSTD_frameHeaderSize().; * @return : 0 if success, or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:23,Security,checksum,checksum,23,/* Final frame content checksum */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:75,Deployability,update,update,75,"/*! ZSTD_decompressFrame() :; * @dctx must be properly initialized; * will update *srcPtr and *srcSizePtr,; * to make *srcPtr progress by one frame. */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:17,Security,checksum,checksum,17,/* Frame content checksum verification */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:260,Energy Efficiency,reduce,reduce,260,"/**; * Similar to ZSTD_nextSrcSizeToDecompress(), but when when a block input can be streamed,; * we allow taking a partial block as the input. Currently only raw uncompressed blocks can; * be streamed.; *; * For blocks that can be streamed, this allows us to reduce the latency until we produce; * output, and avoid copying the input.; *; * @param inputSize - The total amount of input that the caller currently has.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:271,Performance,latency,latency,271,"/**; * Similar to ZSTD_nextSrcSizeToDecompress(), but when when a block input can be streamed,; * we allow taking a partial block as the input. Currently only raw uncompressed blocks can; * be streamed.; *; * For blocks that can be streamed, this allows us to reduce the latency until we produce; * output, and avoid copying the input.; *; * @param inputSize - The total amount of input that the caller currently has.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:311,Safety,avoid,avoid,311,"/**; * Similar to ZSTD_nextSrcSizeToDecompress(), but when when a block input can be streamed,; * we allow taking a partial block as the input. Currently only raw uncompressed blocks can; * be streamed.; *; * For blocks that can be streamed, this allows us to reduce the latency until we produce; * output, and avoid copying the input.; *; * @param inputSize - The total amount of input that the caller currently has.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:206,Availability,error,error,206,"/** ZSTD_decompressContinue() :; * srcSize : must be the exact nb of bytes expected (see ZSTD_nextSrcSizeToDecompress()); * @return : nb of bytes generated into `dst` (necessarily <= `dstCapacity); * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:231,Testability,test,tested,231,"/** ZSTD_decompressContinue() :; * srcSize : must be the exact nb of bytes expected (see ZSTD_nextSrcSizeToDecompress()); * @return : nb of bytes generated into `dst` (necessarily <= `dstCapacity); * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:3,Safety,Sanity check,Sanity check,3,/* Sanity check */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:16,Performance,load,load,16,/* remaining to load to get full skippable frame header */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:27,Security,checksum,checksum,27,/* another round for frame checksum */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:3,Performance,load,load,3,/* load entropy tables */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:183,Performance,load,loaded,183,"/*! ZSTD_getDictID_fromDict() :; * Provides the dictID stored within dictionary.; * if @return == 0, the dictionary is not conformant with Zstandard specification.; * It can still be loaded, but as a content-only dictionary. */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:663,Availability,failure,failure,663,"/*! ZSTD_getDictID_fromFrame() :; * Provides the dictID required to decompress frame stored within `src`.; * If @return == 0, the dictID could not be decoded.; * This could for one of the following reasons :; * - The frame does not require a dictionary (most common case).; * - The frame was built with dictID intentionally removed.; * Needed dictionary is a hidden information.; * Note : this use case also happens when using a non-conformant dictionary.; * - `srcSize` is too small, and as a result, frame header could not be decoded.; * Note : possible if `srcSize < ZSTD_FRAMEHEADERSIZE_MAX`.; * - This is not a Zstandard frame.; * When identifying the exact failure cause, it's possible to use; * ZSTD_getFrameHeader(), which will provide a more precise error code. */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:759,Availability,error,error,759,"/*! ZSTD_getDictID_fromFrame() :; * Provides the dictID required to decompress frame stored within `src`.; * If @return == 0, the dictID could not be decoded.; * This could for one of the following reasons :; * - The frame does not require a dictionary (most common case).; * - The frame was built with dictID intentionally removed.; * Needed dictionary is a hidden information.; * Note : this use case also happens when using a non-conformant dictionary.; * - `srcSize` is too small, and as a result, frame header could not be decoded.; * Note : possible if `srcSize < ZSTD_FRAMEHEADERSIZE_MAX`.; * - This is not a Zstandard frame.; * When identifying the exact failure cause, it's possible to use; * ZSTD_getFrameHeader(), which will provide a more precise error code. */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:96,Deployability,update,updates,96,"/* Calls ZSTD_decompressContinue() with the right parameters for ZSTD_decompressStream(); * and updates the stage and the output buffer state. This call is extracted so it can be; * used both when reading directly from the ZSTD_inBuffer, and in buffered input mode.; * NOTE: You must break after calling this function since the streamStage is modified.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:3,Availability,error,error,3,/* error */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:23,Performance,load,load,23,/* not enough input to load full header */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:3,Energy Efficiency,Adapt,Adapt,3,/* Adapt buffer sizes to frame header instructions */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:3,Modifiability,Adapt,Adapt,3,/* Adapt buffer sizes to frame header instructions */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:9,Security,checksum,checksum,9,/* frame checksum */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:49,Performance,load,loaded,49,"/* not enough input, wait for more */; /* decode loaded input */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:3,Deployability,Update,Update,3,/* Update the expected output buffer for ZSTD_obm_stable. */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:9,Deployability,release,release,9,/* can't release hostage (not present) */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:3,Deployability,release,release,3,/* release hostage */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:64,Deployability,release,released,64,/* output not fully flushed; keep last byte as hostage; will be released when all output is flushed */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:16,Performance,load,loaded,16,/* part already loaded*/,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:541,Integrability,Depend,Dependencies,541,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* zstd_decompress_block :; * this module takes care of decompressing _compressed_ block */; /*-*******************************************************; * Dependencies; *********************************************************/",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:20,Integrability,rout,routines,20,/* low level memory routines */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:119,Security,expose,exposed,119,/*! ZSTD_decodeLiteralsBlock() :; * @return : nb of bytes read from src (< srcSize ); * note : symbol not declared but exposed for fullbench */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:3,Safety,risk,risk,3,/* risk reading beyond src buffer with wildcopy */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:183,Deployability,release,release,183,"/* Default FSE distribution tables.; * These are pre-calculated FSE decoding tables using default distributions as defined in specification :; * https://github.com/facebook/zstd/blob/release/doc/zstd_compression_format.md#default-distributions; * They were generated programmatically with following method :; * - start from default distributions, present in /lib/common/zstd_internal.h; * - generate tables normally, using ZSTD_buildFSETable(); * - printout the content of tables; * - pretify output, report below, test with fuzzer to ensure it's correct */; /* Default FSE distribution table for Literal Lengths */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:515,Testability,test,test,515,"/* Default FSE distribution tables.; * These are pre-calculated FSE decoding tables using default distributions as defined in specification :; * https://github.com/facebook/zstd/blob/release/doc/zstd_compression_format.md#default-distributions; * They were generated programmatically with following method :; * - start from default distributions, present in /lib/common/zstd_internal.h; * - generate tables normally, using ZSTD_buildFSETable(); * - printout the content of tables; * - pretify output, report below, test with fuzzer to ensure it's correct */; /* Default FSE distribution table for Literal Lengths */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:151,Security,validat,validated,151,"/* ZSTD_buildFSETable() :; * generate FSE decoding table for one symbol (ll, ml or off); * cannot fail if input is valid =>; * all inputs are presumed validated at this stage */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:3,Safety,Sanity Check,Sanity Checks,3,/* Sanity Checks */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:13,Availability,down,down,13,"/* Init, lay down lowprob symbols */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:138,Safety,avoid,avoid,138,"/* Specialized symbol spreading for the case when there are; * no low probability (-1 count) symbols. When compressing; * small blocks we avoid low probability symbols to hit this; * case, since header decoding speed matters more.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:13,Availability,down,down,13,"/* First lay down the symbols in order.; * We use a uint64_t to lay down 8 bytes at a time. This reduces branch; * misses since small blocks generally have small table logs, so nearly; * all symbols have counts <= 8. We ensure we have 8 bytes at the end of; * our buffer to handle the over-write.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:68,Availability,down,down,68,"/* First lay down the symbols in order.; * We use a uint64_t to lay down 8 bytes at a time. This reduces branch; * misses since small blocks generally have small table logs, so nearly; * all symbols have counts <= 8. We ensure we have 8 bytes at the end of; * our buffer to handle the over-write.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:97,Energy Efficiency,reduce,reduces,97,"/* First lay down the symbols in order.; * We use a uint64_t to lay down 8 bytes at a time. This reduces branch; * misses since small blocks generally have small table logs, so nearly; * all symbols have counts <= 8. We ensure we have 8 bytes at the end of; * our buffer to handle the over-write.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:168,Testability,log,logs,168,"/* First lay down the symbols in order.; * We use a uint64_t to lay down 8 bytes at a time. This reduces branch; * misses since small blocks generally have small table logs, so nearly; * all symbols have counts <= 8. We ensure we have 8 bytes at the end of; * our buffer to handle the over-write.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:120,Modifiability,variab,variable,120,"/* Now we spread those positions across the table.; * The benefit of doing it in two stages is that we avoid the the; * variable size inner loop, which caused lots of branch misses.; * Now we can run through all the positions without any branch misses.; * We unroll the loop twice, since that is what emperically worked best.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:103,Safety,avoid,avoid,103,"/* Now we spread those positions across the table.; * The benefit of doing it in two stages is that we avoid the the; * variable size inner loop, which caused lots of branch misses.; * Now we can run through all the positions without any branch misses.; * We unroll the loop twice, since that is what emperically worked best.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:3,Safety,Avoid,Avoids,3,/* Avoids the FORCE_INLINE of the _body() function. */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:73,Availability,error,error,73,"/*! ZSTD_buildSeqTable() :; * @return : nb bytes read from src,; * or an error code if it fails */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:62,Deployability,update,updates,62,/*! ZSTD_overlapCopy8() :; * Copies 8 bytes from ip to op and updates op and ip where ip <= op.; * If the offset is < 8 then the offset is spread to at least 8 bytes.; *; * Precondition: *ip <= *op; * Postcondition: *op - *op >= 8; */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:433,Safety,detect,detection,433,"/*! ZSTD_safecopy() :; * Specialized version of memcpy() that is allowed to READ up to WILDCOPY_OVERLENGTH past the input buffer; * and write up to 16 bytes past oend_w (op >= oend_w is allowed).; * This function is only called in the uncommon case where the sequence is near the end of the block. It; * should be fast for a single long sequence, but can be slow for several short sequences.; *; * @param ovtype controls the overlap detection; * - ZSTD_no_overlap: The source and destination are guaranteed to be at least WILDCOPY_VECLEN bytes apart.; * - ZSTD_overlap_src_before_dst: The src and dst may overlap and may be any distance apart.; * The src buffer must be before the dst buffer.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:6,Safety,risk,risk,6,/* No risk of overwrite. */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:354,Performance,optimiz,optimized,354,"/* ZSTD_execSequenceEnd():; * This version handles cases that are near the end of the output buffer. It requires; * more careful checks to make sure there is no overflow. By separating out these hard; * and unlikely cases, we can speed up the common cases.; *; * NOTE: This function needs to be fast for a single long sequence, but doesn't need; * to be optimized for many small sequences, since those fall into ZSTD_execSequence().; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:3,Safety,risk,risk,3,/* risk : address space overflow (32-bits) */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:3,Safety,risk,risk,3,/* risk : address space underflow on oend=NULL */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:3,Deployability,update,update,3,/* update for next sequence */; /* Copy Match */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:6,Safety,avoid,avoid,6,/* to avoid another reload */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:159,Security,access,access,159,"/* note : this operation can overflow when seq.offset is really too large, which can only happen when input is corrupted.; * No consequence though : no memory access will occur, offset is only used for prefetching */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:13,Deployability,update,update,13,"/* ANS state update; * gcc-9.0.0 does 2.5% worse with ZSTD_updateFseStateWithDInfo().; * clang-9.2.0 does 7% worse with ZSTD_updateFseState().; * Naturally it seems like ZSTD_updateFseStateWithDInfo() should be the; * better option, so it is the default for other compilers. But, if you; * measure that it is worse, please put up a pull request.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:200,Performance,perform,performance,200,"/* Align the decompression loop to 32 + 16 bytes.; *; * zstd compiled with gcc-9 on an Intel i9-9900k shows 10% decompression; * speed swings based on the alignment of the decompression loop. This; * performance swing is caused by parts of the decompression loop falling; * out of the DSB. The entire decompression loop should fit in the DSB,; * when it can't we get much worse performance. You can measure if you've; * hit the good case or the bad case with this perf command for some; * compressed file test.zst:; *; * perf stat -e cycles -e instructions -e idq.all_dsb_cycles_any_uops \; * -e idq.all_mite_cycles_any_uops -- ./zstd -tq test.zst; *; * If you see most cycles served out of the MITE you've hit the bad case.; * If you see most cycles served out of the DSB you've hit the good case.; * If it is pretty even then you may be in an okay case.; *; * I've been able to reproduce this issue on the following CPUs:; * - Kabylake: Macbook Pro (15-inch, 2019) 2.4 GHz Intel Core i9; * Use Instruments->Counters to get DSB/MITE cycles.; * I never got performance swings, but I was able to; * go from the good case of mostly DSB to half of the; * cycles served from MITE.; * - Coffeelake: Intel i9-9900k; *; * I haven't been able to reproduce the instability or DSB misses on any; * of the following CPUS:; * - Haswell; * - Broadwell: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GH; * - Skylake; *; * If you are seeing performance stability this script can help test.; * It tests on 4 commits in zstd where I saw performance change.; *; * https://gist.github.com/terrelln/9889fc06a423fd5ca6e99351564473f4; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:378,Performance,perform,performance,378,"/* Align the decompression loop to 32 + 16 bytes.; *; * zstd compiled with gcc-9 on an Intel i9-9900k shows 10% decompression; * speed swings based on the alignment of the decompression loop. This; * performance swing is caused by parts of the decompression loop falling; * out of the DSB. The entire decompression loop should fit in the DSB,; * when it can't we get much worse performance. You can measure if you've; * hit the good case or the bad case with this perf command for some; * compressed file test.zst:; *; * perf stat -e cycles -e instructions -e idq.all_dsb_cycles_any_uops \; * -e idq.all_mite_cycles_any_uops -- ./zstd -tq test.zst; *; * If you see most cycles served out of the MITE you've hit the bad case.; * If you see most cycles served out of the DSB you've hit the good case.; * If it is pretty even then you may be in an okay case.; *; * I've been able to reproduce this issue on the following CPUs:; * - Kabylake: Macbook Pro (15-inch, 2019) 2.4 GHz Intel Core i9; * Use Instruments->Counters to get DSB/MITE cycles.; * I never got performance swings, but I was able to; * go from the good case of mostly DSB to half of the; * cycles served from MITE.; * - Coffeelake: Intel i9-9900k; *; * I haven't been able to reproduce the instability or DSB misses on any; * of the following CPUS:; * - Haswell; * - Broadwell: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GH; * - Skylake; *; * If you are seeing performance stability this script can help test.; * It tests on 4 commits in zstd where I saw performance change.; *; * https://gist.github.com/terrelln/9889fc06a423fd5ca6e99351564473f4; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:1057,Performance,perform,performance,1057,"/* Align the decompression loop to 32 + 16 bytes.; *; * zstd compiled with gcc-9 on an Intel i9-9900k shows 10% decompression; * speed swings based on the alignment of the decompression loop. This; * performance swing is caused by parts of the decompression loop falling; * out of the DSB. The entire decompression loop should fit in the DSB,; * when it can't we get much worse performance. You can measure if you've; * hit the good case or the bad case with this perf command for some; * compressed file test.zst:; *; * perf stat -e cycles -e instructions -e idq.all_dsb_cycles_any_uops \; * -e idq.all_mite_cycles_any_uops -- ./zstd -tq test.zst; *; * If you see most cycles served out of the MITE you've hit the bad case.; * If you see most cycles served out of the DSB you've hit the good case.; * If it is pretty even then you may be in an okay case.; *; * I've been able to reproduce this issue on the following CPUs:; * - Kabylake: Macbook Pro (15-inch, 2019) 2.4 GHz Intel Core i9; * Use Instruments->Counters to get DSB/MITE cycles.; * I never got performance swings, but I was able to; * go from the good case of mostly DSB to half of the; * cycles served from MITE.; * - Coffeelake: Intel i9-9900k; *; * I haven't been able to reproduce the instability or DSB misses on any; * of the following CPUS:; * - Haswell; * - Broadwell: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GH; * - Skylake; *; * If you are seeing performance stability this script can help test.; * It tests on 4 commits in zstd where I saw performance change.; *; * https://gist.github.com/terrelln/9889fc06a423fd5ca6e99351564473f4; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:1418,Performance,perform,performance,1418,"/* Align the decompression loop to 32 + 16 bytes.; *; * zstd compiled with gcc-9 on an Intel i9-9900k shows 10% decompression; * speed swings based on the alignment of the decompression loop. This; * performance swing is caused by parts of the decompression loop falling; * out of the DSB. The entire decompression loop should fit in the DSB,; * when it can't we get much worse performance. You can measure if you've; * hit the good case or the bad case with this perf command for some; * compressed file test.zst:; *; * perf stat -e cycles -e instructions -e idq.all_dsb_cycles_any_uops \; * -e idq.all_mite_cycles_any_uops -- ./zstd -tq test.zst; *; * If you see most cycles served out of the MITE you've hit the bad case.; * If you see most cycles served out of the DSB you've hit the good case.; * If it is pretty even then you may be in an okay case.; *; * I've been able to reproduce this issue on the following CPUs:; * - Kabylake: Macbook Pro (15-inch, 2019) 2.4 GHz Intel Core i9; * Use Instruments->Counters to get DSB/MITE cycles.; * I never got performance swings, but I was able to; * go from the good case of mostly DSB to half of the; * cycles served from MITE.; * - Coffeelake: Intel i9-9900k; *; * I haven't been able to reproduce the instability or DSB misses on any; * of the following CPUS:; * - Haswell; * - Broadwell: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GH; * - Skylake; *; * If you are seeing performance stability this script can help test.; * It tests on 4 commits in zstd where I saw performance change.; *; * https://gist.github.com/terrelln/9889fc06a423fd5ca6e99351564473f4; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:1512,Performance,perform,performance,1512,"/* Align the decompression loop to 32 + 16 bytes.; *; * zstd compiled with gcc-9 on an Intel i9-9900k shows 10% decompression; * speed swings based on the alignment of the decompression loop. This; * performance swing is caused by parts of the decompression loop falling; * out of the DSB. The entire decompression loop should fit in the DSB,; * when it can't we get much worse performance. You can measure if you've; * hit the good case or the bad case with this perf command for some; * compressed file test.zst:; *; * perf stat -e cycles -e instructions -e idq.all_dsb_cycles_any_uops \; * -e idq.all_mite_cycles_any_uops -- ./zstd -tq test.zst; *; * If you see most cycles served out of the MITE you've hit the bad case.; * If you see most cycles served out of the DSB you've hit the good case.; * If it is pretty even then you may be in an okay case.; *; * I've been able to reproduce this issue on the following CPUs:; * - Kabylake: Macbook Pro (15-inch, 2019) 2.4 GHz Intel Core i9; * Use Instruments->Counters to get DSB/MITE cycles.; * I never got performance swings, but I was able to; * go from the good case of mostly DSB to half of the; * cycles served from MITE.; * - Coffeelake: Intel i9-9900k; *; * I haven't been able to reproduce the instability or DSB misses on any; * of the following CPUS:; * - Haswell; * - Broadwell: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GH; * - Skylake; *; * If you are seeing performance stability this script can help test.; * It tests on 4 commits in zstd where I saw performance change.; *; * https://gist.github.com/terrelln/9889fc06a423fd5ca6e99351564473f4; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:505,Testability,test,test,505,"/* Align the decompression loop to 32 + 16 bytes.; *; * zstd compiled with gcc-9 on an Intel i9-9900k shows 10% decompression; * speed swings based on the alignment of the decompression loop. This; * performance swing is caused by parts of the decompression loop falling; * out of the DSB. The entire decompression loop should fit in the DSB,; * when it can't we get much worse performance. You can measure if you've; * hit the good case or the bad case with this perf command for some; * compressed file test.zst:; *; * perf stat -e cycles -e instructions -e idq.all_dsb_cycles_any_uops \; * -e idq.all_mite_cycles_any_uops -- ./zstd -tq test.zst; *; * If you see most cycles served out of the MITE you've hit the bad case.; * If you see most cycles served out of the DSB you've hit the good case.; * If it is pretty even then you may be in an okay case.; *; * I've been able to reproduce this issue on the following CPUs:; * - Kabylake: Macbook Pro (15-inch, 2019) 2.4 GHz Intel Core i9; * Use Instruments->Counters to get DSB/MITE cycles.; * I never got performance swings, but I was able to; * go from the good case of mostly DSB to half of the; * cycles served from MITE.; * - Coffeelake: Intel i9-9900k; *; * I haven't been able to reproduce the instability or DSB misses on any; * of the following CPUS:; * - Haswell; * - Broadwell: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GH; * - Skylake; *; * If you are seeing performance stability this script can help test.; * It tests on 4 commits in zstd where I saw performance change.; *; * https://gist.github.com/terrelln/9889fc06a423fd5ca6e99351564473f4; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:639,Testability,test,test,639,"/* Align the decompression loop to 32 + 16 bytes.; *; * zstd compiled with gcc-9 on an Intel i9-9900k shows 10% decompression; * speed swings based on the alignment of the decompression loop. This; * performance swing is caused by parts of the decompression loop falling; * out of the DSB. The entire decompression loop should fit in the DSB,; * when it can't we get much worse performance. You can measure if you've; * hit the good case or the bad case with this perf command for some; * compressed file test.zst:; *; * perf stat -e cycles -e instructions -e idq.all_dsb_cycles_any_uops \; * -e idq.all_mite_cycles_any_uops -- ./zstd -tq test.zst; *; * If you see most cycles served out of the MITE you've hit the bad case.; * If you see most cycles served out of the DSB you've hit the good case.; * If it is pretty even then you may be in an okay case.; *; * I've been able to reproduce this issue on the following CPUs:; * - Kabylake: Macbook Pro (15-inch, 2019) 2.4 GHz Intel Core i9; * Use Instruments->Counters to get DSB/MITE cycles.; * I never got performance swings, but I was able to; * go from the good case of mostly DSB to half of the; * cycles served from MITE.; * - Coffeelake: Intel i9-9900k; *; * I haven't been able to reproduce the instability or DSB misses on any; * of the following CPUS:; * - Haswell; * - Broadwell: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GH; * - Skylake; *; * If you are seeing performance stability this script can help test.; * It tests on 4 commits in zstd where I saw performance change.; *; * https://gist.github.com/terrelln/9889fc06a423fd5ca6e99351564473f4; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:1461,Testability,test,test,1461,"/* Align the decompression loop to 32 + 16 bytes.; *; * zstd compiled with gcc-9 on an Intel i9-9900k shows 10% decompression; * speed swings based on the alignment of the decompression loop. This; * performance swing is caused by parts of the decompression loop falling; * out of the DSB. The entire decompression loop should fit in the DSB,; * when it can't we get much worse performance. You can measure if you've; * hit the good case or the bad case with this perf command for some; * compressed file test.zst:; *; * perf stat -e cycles -e instructions -e idq.all_dsb_cycles_any_uops \; * -e idq.all_mite_cycles_any_uops -- ./zstd -tq test.zst; *; * If you see most cycles served out of the MITE you've hit the bad case.; * If you see most cycles served out of the DSB you've hit the good case.; * If it is pretty even then you may be in an okay case.; *; * I've been able to reproduce this issue on the following CPUs:; * - Kabylake: Macbook Pro (15-inch, 2019) 2.4 GHz Intel Core i9; * Use Instruments->Counters to get DSB/MITE cycles.; * I never got performance swings, but I was able to; * go from the good case of mostly DSB to half of the; * cycles served from MITE.; * - Coffeelake: Intel i9-9900k; *; * I haven't been able to reproduce the instability or DSB misses on any; * of the following CPUS:; * - Haswell; * - Broadwell: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GH; * - Skylake; *; * If you are seeing performance stability this script can help test.; * It tests on 4 commits in zstd where I saw performance change.; *; * https://gist.github.com/terrelln/9889fc06a423fd5ca6e99351564473f4; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:1473,Testability,test,tests,1473,"/* Align the decompression loop to 32 + 16 bytes.; *; * zstd compiled with gcc-9 on an Intel i9-9900k shows 10% decompression; * speed swings based on the alignment of the decompression loop. This; * performance swing is caused by parts of the decompression loop falling; * out of the DSB. The entire decompression loop should fit in the DSB,; * when it can't we get much worse performance. You can measure if you've; * hit the good case or the bad case with this perf command for some; * compressed file test.zst:; *; * perf stat -e cycles -e instructions -e idq.all_dsb_cycles_any_uops \; * -e idq.all_mite_cycles_any_uops -- ./zstd -tq test.zst; *; * If you see most cycles served out of the MITE you've hit the bad case.; * If you see most cycles served out of the DSB you've hit the good case.; * If it is pretty even then you may be in an okay case.; *; * I've been able to reproduce this issue on the following CPUs:; * - Kabylake: Macbook Pro (15-inch, 2019) 2.4 GHz Intel Core i9; * Use Instruments->Counters to get DSB/MITE cycles.; * I never got performance swings, but I was able to; * go from the good case of mostly DSB to half of the; * cycles served from MITE.; * - Coffeelake: Intel i9-9900k; *; * I haven't been able to reproduce the instability or DSB misses on any; * of the following CPUS:; * - Haswell; * - Broadwell: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GH; * - Skylake; *; * If you are seeing performance stability this script can help test.; * It tests on 4 commits in zstd where I saw performance change.; *; * https://gist.github.com/terrelln/9889fc06a423fd5ca6e99351564473f4; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:95,Availability,error,error,95,/* gcc and clang both don't like early returns in this loop.; * Instead break and check for an error at the end of the loop.; */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:15,Safety,safe,safe,15,"/* note : it's safe to invoke PREFETCH() on any memory address, including invalid ones */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:15,Safety,safe,safe,15,"/* note : it's safe to invoke PREFETCH() on any memory address, including invalid ones */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:10,Performance,queue,queue,10,/* finish queue */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:140,Performance,cache,cache,140,"/* ZSTD_decompressSequencesLong() :; * decompression function triggered when a minimum share of offsets is considered ""long"",; * aka out of cache.; * note : ""long"" definition seems overloaded here, sometimes meaning ""wider than bitstream register"", and sometimes meaning ""farther than memory cache distance"".; * This function will try to mitigate main memory latency through the use of prefetching */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:292,Performance,cache,cache,292,"/* ZSTD_decompressSequencesLong() :; * decompression function triggered when a minimum share of offsets is considered ""long"",; * aka out of cache.; * note : ""long"" definition seems overloaded here, sometimes meaning ""wider than bitstream register"", and sometimes meaning ""farther than memory cache distance"".; * This function will try to mitigate main memory latency through the use of prefetching */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:359,Performance,latency,latency,359,"/* ZSTD_decompressSequencesLong() :; * decompression function triggered when a minimum share of offsets is considered ""long"",; * aka out of cache.; * note : ""long"" definition seems overloaded here, sometimes meaning ""wider than bitstream register"", and sometimes meaning ""farther than memory cache distance"".; * This function will try to mitigate main memory latency through the use of prefetching */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h:62,Integrability,Depend,Dependencies,62,/*-*******************************************************; * Dependencies; *********************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h:392,Availability,error,error,392,"/* === Prototypes === */; /* note: prototypes already published within `zstd.h` :; * ZSTD_decompressBlock(); */; /* note: prototypes already published within `zstd_internal.h` :; * ZSTD_getcBlockSize(); * ZSTD_decodeSeqHeaders(); */; /* ZSTD_decompressBlock_internal() :; * decompress block, starting at `src`,; * into destination buffer `dst`.; * @return : decompressed block size,; * or an error code (which can be tested using ZSTD_isError()); */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h:417,Testability,test,tested,417,"/* === Prototypes === */; /* note: prototypes already published within `zstd.h` :; * ZSTD_decompressBlock(); */; /* note: prototypes already published within `zstd_internal.h` :; * ZSTD_getcBlockSize(); * ZSTD_decodeSeqHeaders(); */; /* ZSTD_decompressBlock_internal() :; * decompress block, starting at `src`,; * into destination buffer `dst`.; * @return : decompressed block size,; * or an error code (which can be tested using ZSTD_isError()); */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h:213,Energy Efficiency,power,power,213,"/* ZSTD_buildFSETable() :; * generate FSE decoding table for one symbol (ll, ml or off); * this function must be called with valid parameters only; * (dt is large enough, normalizedCounter distribution total is a power of 2, max is within range, etc.); * in which case it cannot fail.; * The workspace must be 4-byte aligned and at least ZSTD_BUILD_FSE_TABLE_WKSP_SIZE bytes, which is; * defined in zstd_decompress_internal.h.; * Internal use only.; */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_block.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:62,Integrability,Depend,Dependencies,62,/*-*******************************************************; * Dependencies; *********************************************************/,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:3,Safety,detect,detect,3,/* detect continuity */,MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:40,Security,checksum,checksums,40,"/* User specified: if == 1, will ignore checksums in compressed frame. Default == 0 */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:17,Security,validat,validate,17,"/* if == 1, will validate checksum. Is == 1 if (fParams.checksumFlag == 1) and (forceIgnoreChecksum == 0). */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:26,Security,checksum,checksum,26,"/* if == 1, will validate checksum. Is == 1 if (fParams.checksumFlag == 1) and (forceIgnoreChecksum == 0). */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:56,Security,checksum,checksumFlag,56,"/* if == 1, will validate checksum. Is == 1 if (fParams.checksumFlag == 1) and (forceIgnoreChecksum == 0). */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:86,Performance,cache,cache,86,"/* if == 1 : dictionary is ""new"" for working context, and presumed ""cold"" (not in cpu cache) */",MatchSource.CODE_COMMENT,builtins/zstd/decompress/zstd_decompress_internal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:669,Energy Efficiency,Adapt,Adapted,669,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* *****************************************************************************; * Constructs a dictionary using a heuristic based on the following paper:; *; * Liao, Petri, Moffat, Wirth; * Effective Construction of Relative Lempel-Ziv Dictionaries; * Published in WWW 2016.; *; * Adapted from code originally written by @ot (Giuseppe Ottaviano).; ******************************************************************************/; /*-*************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:861,Integrability,Depend,Dependencies,861,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* *****************************************************************************; * Constructs a dictionary using a heuristic based on the following paper:; *; * Liao, Petri, Moffat, Wirth; * Effective Construction of Relative Lempel-Ziv Dictionaries; * Published in WWW 2016.; *; * Adapted from code originally written by @ot (Giuseppe Ottaviano).; ******************************************************************************/; /*-*************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:669,Modifiability,Adapt,Adapted,669,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* *****************************************************************************; * Constructs a dictionary using a heuristic based on the following paper:; *; * Liao, Petri, Moffat, Wirth; * Effective Construction of Relative Lempel-Ziv Dictionaries; * Published in WWW 2016.; *; * Adapted from code originally written by @ot (Giuseppe Ottaviano).; ******************************************************************************/; /*-*************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:22,Availability,error,errors,22,/* 0 : no display; 1: errors; 2: default; 3: details; 4: debug */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:336,Performance,load,load,336,"/*-*************************************; * Hash table; ***************************************; * A small specialized hash map for storing activeDmers.; * The map does not resize, so if it becomes full it will loop forever.; * Thus, the map must be large enough to store every value.; * The map implements linear probing and keeps its load less than 0.5.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:44,Security,Hash,Hash,44,"/*-*************************************; * Hash table; ***************************************; * A small specialized hash map for storing activeDmers.; * The map does not resize, so if it becomes full it will loop forever.; * Thus, the map must be large enough to store every value.; * The map implements linear probing and keeps its load less than 0.5.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:119,Security,hash,hash,119,"/*-*************************************; * Hash table; ***************************************; * A small specialized hash map for storing activeDmers.; * The map does not resize, so if it becomes full it will loop forever.; * Thus, the map must be large enough to store every value.; * The map implements linear probing and keeps its load less than 0.5.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:7,Usability,Clear,Clear,7,/**; * Clear the map.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:77,Availability,failure,failure,77,/**; * Initializes a map of the given size.; * Returns 1 on success and 0 on failure.; * The map must be destroyed with COVER_map_destroy().; * The map is only guaranteed to be large enough to hold size elements.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:16,Security,hash,hash,16,/**; * Internal hash function; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:163,Availability,error,error,163,/**; * Prepare a context for dictionary building.; * The context is only dependent on the parameter `d` and can used multiple; * times.; * Returns 0 on success or error code on error.; * The context must be destroyed with `COVER_ctx_destroy()`.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:177,Availability,error,error,177,/**; * Prepare a context for dictionary building.; * The context is only dependent on the parameter `d` and can used multiple; * times.; * Returns 0 on success or error code on error.; * The context must be destroyed with `COVER_ctx_destroy()`.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:73,Integrability,depend,dependent,73,/**; * Prepare a context for dictionary building.; * The context is only dependent on the parameter `d` and can used multiple; * times.; * Returns 0 on success or error code on error.; * The context must be destroyed with `COVER_ctx_destroy()`.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:22,Testability,test,testing,22,/* Split samples into testing and training sets */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:20,Testability,test,testing,20,/* Check if there's testing sample */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate dst with enough space to compress the maximum sized sample */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:48,Availability,error,error,48,/* Compress each sample and sum their sizes (or error) */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:56,Availability,error,error,56,"/**; * Called when a thread finishes executing, both on error or success.; * Decrements liveJobs and signals any waiting threads if liveJobs == 0.; * If this dictionary is the best so far save it and its parameters.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:3,Energy Efficiency,Allocate,Allocate,3,/* Allocate space if necessary */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:37,Deployability,update,updates,37,/**; * Tries a set of parameters and updates the COVER_best_t with the results.; * This function is thread safe if zstd is compiled with multithreaded support.; * It takes its parameters as an *OWNING* opaque pointer to support threading.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:107,Safety,safe,safe,107,/**; * Tries a set of parameters and updates the COVER_best_t with the results.; * This function is thread safe if zstd is compiled with multithreaded support.; * It takes its parameters as an *OWNING* opaque pointer to support threading.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:28,Modifiability,variab,variables,28,/* Save parameters as local variables */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate space for hash table, dict, and freqs */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:22,Security,hash,hash,22,"/* Allocate space for hash table, dict, and freqs */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:8,Availability,down,down,8,/* Turn down global display level to clean up display at level 2 and below */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:52,Integrability,Synchroniz,Synchronizing,52,/**; * COVER_best_t is used for two purposes:; * 1. Synchronizing threads.; * 2. Saving the best parameters and dictionary.; *; * All of the methods except COVER_best_init() are thread safe if zstd is; * compiled with multithreaded support.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:185,Safety,safe,safe,185,/**; * COVER_best_t is used for two purposes:; * 1. Synchronizing threads.; * 2. Saving the best parameters and dictionary.; *; * All of the methods except COVER_best_init() are thread safe if zstd is; * compiled with multithreaded support.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:56,Availability,error,error,56,"/**; * Called when a thread finishes executing, both on error or success.; * Decrements liveJobs and signals any waiting threads if liveJobs == 0.; * If this dictionary is the best so far save it and its parameters.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:7,Availability,Error,Error,7,/**; * Error function for COVER_selectDict function. Checks if the return; * value is an error.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:89,Availability,error,error,89,/**; * Error function for COVER_selectDict function. Checks if the return; * value is an error.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:7,Availability,Error,Error,7,/**; * Error function for COVER_selectDict function. Returns a struct where; * return.totalCompressedSize is a ZSTD error.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h:116,Availability,error,error,116,/**; * Error function for COVER_selectDict function. Returns a struct where; * return.totalCompressedSize is a ZSTD error.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/cover.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:144,Energy Efficiency,charge,charge,144,"/*; * divsufsort.c for libdivsufsort-lite; * Copyright (c) 2003-2008 Yuta Mori All Rights Reserved.; *; * Permission is hereby granted, free of charge, to any person; * obtaining a copy of this software and associated documentation; * files (the ""Software""), to deal in the Software without; * restriction, including without limitation the rights to use,; * copy, modify, merge, publish, distribute, sublicense, and/or sell; * copies of the Software, and to permit persons to whom the; * Software is furnished to do so, subject to the following; * conditions:; *; * The above copyright notice and this permission notice shall be; * included in all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,; * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES; * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT; * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING; * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR; * OTHER DEALINGS IN THE SOFTWARE.; */; /*- Compiler specifics -*/",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:1047,Integrability,CONTRACT,CONTRACT,1047,"/*; * divsufsort.c for libdivsufsort-lite; * Copyright (c) 2003-2008 Yuta Mori All Rights Reserved.; *; * Permission is hereby granted, free of charge, to any person; * obtaining a copy of this software and associated documentation; * files (the ""Software""), to deal in the Software without; * restriction, including without limitation the rights to use,; * copy, modify, merge, publish, distribute, sublicense, and/or sell; * copies of the Software, and to permit persons to whom the; * Software is furnished to do so, subject to the following; * conditions:; *; * The above copyright notice and this permission notice shall be; * included in all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,; * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES; * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT; * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING; * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR; * OTHER DEALINGS IN THE SOFTWARE.; */; /*- Compiler specifics -*/",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:4,Integrability,Depend,Dependencies,4,/*- Dependencies -*/,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:18,Testability,log,log,18,/* minstacksize = log(SS_BLOCKSIZE) / log(3) * 2 */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:38,Testability,log,log,38,/* minstacksize = log(SS_BLOCKSIZE) / log(3) * 2 */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:14,Availability,down,down,14,/* Simple top-down heapsort. */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:3,Usability,Simpl,Simple,3,/* Simple top-down heapsort. */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:84,Usability,Simpl,Simple,84,/*---------------------------------------------------------------------------*/; /* Simple insertionsort for small size groups. */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:14,Availability,down,down,14,/* Simple top-down heapsort. */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:3,Usability,Simpl,Simple,3,/* Simple top-down heapsort. */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:3,Deployability,update,update,3,/* update ranks */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:3,Deployability,update,update,3,/* update ranks */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:144,Energy Efficiency,charge,charge,144,"/*; * divsufsort.h for libdivsufsort-lite; * Copyright (c) 2003-2008 Yuta Mori All Rights Reserved.; *; * Permission is hereby granted, free of charge, to any person; * obtaining a copy of this software and associated documentation; * files (the ""Software""), to deal in the Software without; * restriction, including without limitation the rights to use,; * copy, modify, merge, publish, distribute, sublicense, and/or sell; * copies of the Software, and to permit persons to whom the; * Software is furnished to do so, subject to the following; * conditions:; *; * The above copyright notice and this permission notice shall be; * included in all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,; * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES; * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT; * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING; * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR; * OTHER DEALINGS IN THE SOFTWARE.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:1047,Integrability,CONTRACT,CONTRACT,1047,"/*; * divsufsort.h for libdivsufsort-lite; * Copyright (c) 2003-2008 Yuta Mori All Rights Reserved.; *; * Permission is hereby granted, free of charge, to any person; * obtaining a copy of this software and associated documentation; * files (the ""Software""), to deal in the Software without; * restriction, including without limitation the rights to use,; * copy, modify, merge, publish, distribute, sublicense, and/or sell; * copies of the Software, and to permit persons to whom the; * Software is furnished to do so, subject to the following; * conditions:; *; * The above copyright notice and this permission notice shall be; * included in all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,; * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES; * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT; * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING; * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR; * OTHER DEALINGS IN THE SOFTWARE.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:274,Availability,error,error,274,"/*- Prototypes -*/; /**; * Constructs the suffix array of a given string.; * @param T [0..n-1] The input string.; * @param SA [0..n-1] The output array of suffixes.; * @param n The length of the given string.; * @param openMP enables OpenMP optimization.; * @return 0 if no error occurred, -1 or -2 otherwise.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:241,Performance,optimiz,optimization,241,"/*- Prototypes -*/; /**; * Constructs the suffix array of a given string.; * @param T [0..n-1] The input string.; * @param SA [0..n-1] The output array of suffixes.; * @param n The length of the given string.; * @param openMP enables OpenMP optimization.; * @return 0 if no error occurred, -1 or -2 otherwise.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:483,Availability,error,error,483,"/**; * Constructs the burrows-wheeler transformed string of a given string.; * @param T [0..n-1] The input string.; * @param U [0..n-1] The output string. (can be T); * @param A [0..n-1] The temporary array. (can be NULL); * @param n The length of the given string.; * @param num_indexes The length of secondary indexes array. (can be NULL); * @param indexes The secondary indexes array. (can be NULL); * @param openMP enables OpenMP optimization.; * @return The primary index if no error occurred, -1 or -2 otherwise.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h:434,Performance,optimiz,optimization,434,"/**; * Constructs the burrows-wheeler transformed string of a given string.; * @param T [0..n-1] The input string.; * @param U [0..n-1] The output string. (can be T); * @param A [0..n-1] The temporary array. (can be NULL); * @param n The length of the given string.; * @param num_indexes The length of secondary indexes array. (can be NULL); * @param indexes The secondary indexes array. (can be NULL); * @param openMP enables OpenMP optimization.; * @return The primary index if no error occurred, -1 or -2 otherwise.; */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/divsufsort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.h
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:417,Integrability,Depend,Dependencies,417,"/*; * Copyright (c) 2018-2020, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /*-*************************************; * Dependencies; ***************************************/",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:22,Availability,error,errors,22,/* 0 : no display; 1: errors; 2: default; 3: details; 4: debug */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:44,Security,Hash,Hash,44,/*-*************************************; * Hash Functions; ***************************************/; /**; * Hash the d-byte value pointed to by p and mod 2^f into the frequency vector; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:109,Security,Hash,Hash,109,/*-*************************************; * Hash Functions; ***************************************/; /**; * Hash the d-byte value pointed to by p and mod 2^f into the frequency vector; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:252,Security,hash,hash,252,/*-*************************************; * Helper functions; ***************************************/; /**; * Selects the best segment in an epoch.; * Segments of are scored according to the function:; *; * Let F(d) be the frequency of all dmers with hash value d.; * Let S_i be hash value of the dmer at position i of segment S which has length k.; *; * Score(S) = F(S_1) + F(S_2) + ... + F(S_{k-d+1}); *; * Once the dmer with hash value d is in the dictionary we set F(d) = 0.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:280,Security,hash,hash,280,/*-*************************************; * Helper functions; ***************************************/; /**; * Selects the best segment in an epoch.; * Segments of are scored according to the function:; *; * Let F(d) be the frequency of all dmers with hash value d.; * Let S_i be hash value of the dmer at position i of segment S which has length k.; *; * Score(S) = F(S_1) + F(S_2) + ... + F(S_{k-d+1}); *; * Once the dmer with hash value d is in the dictionary we set F(d) = 0.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:429,Security,hash,hash,429,/*-*************************************; * Helper functions; ***************************************/; /**; * Selects the best segment in an epoch.; * Segments of are scored according to the function:; *; * Let F(d) be the frequency of all dmers with hash value d.; * Let S_i be hash value of the dmer at position i of segment S which has length k.; *; * Score(S) = F(S_1) + F(S_2) + ... + F(S_{k-d+1}); *; * Once the dmer with hash value d is in the dictionary we set F(d) = 0.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:7,Security,hash,hash,7,/* Get hash value of current dmer */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:7,Security,hash,hash,7,/* Get hash value of the dmer to be eliminated from active segment */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:25,Security,hash,hash,25,/* Zero the frequency of hash value of each dmer covered by the chosen segment. */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:34,Security,hash,hash,34,/**; * Calculate for frequency of hash value of each dmer in ctx->samples; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:163,Availability,error,error,163,/**; * Prepare a context for dictionary building.; * The context is only dependent on the parameter `d` and can used multiple; * times.; * Returns 0 on success or error code on error.; * The context must be destroyed with `FASTCOVER_ctx_destroy()`.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:177,Availability,error,error,177,/**; * Prepare a context for dictionary building.; * The context is only dependent on the parameter `d` and can used multiple; * times.; * Returns 0 on success or error code on error.; * The context must be destroyed with `FASTCOVER_ctx_destroy()`.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:73,Integrability,depend,dependent,73,/**; * Prepare a context for dictionary building.; * The context is only dependent on the parameter `d` and can used multiple; * times.; * Returns 0 on success or error code on error.; * The context must be destroyed with `FASTCOVER_ctx_destroy()`.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:22,Testability,test,testing,22,/* Split samples into testing and training sets */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:20,Testability,test,testing,20,/* Check if there's testing sample */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:37,Deployability,update,updates,37,/**; * Tries a set of parameters and updates the COVER_best_t with the results.; * This function is thread safe if zstd is compiled with multithreaded support.; * It takes its parameters as an *OWNING* opaque pointer to support threading.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:107,Safety,safe,safe,107,/**; * Tries a set of parameters and updates the COVER_best_t with the results.; * This function is thread safe if zstd is compiled with multithreaded support.; * It takes its parameters as an *OWNING* opaque pointer to support threading.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:28,Modifiability,variab,variables,28,/* Save parameters as local variables */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:3,Energy Efficiency,Allocate,Allocate,3,"/* Allocate space for hash table, dict, and freqs */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:22,Security,hash,hash,22,"/* Allocate space for hash table, dict, and freqs */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:8,Availability,down,down,8,/* Turn down global display level to clean up display at level 2 and below */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/fastcover.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:44,Integrability,Depend,Dependencies,44,/*-*************************************; * Dependencies; ***************************************/,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/zdict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:22,Availability,error,errors,22,/* 0 : no display; 1: errors; 2: default; 3: details; 4: debug */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/zdict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:3,Energy Efficiency,reduce,reduce,3,/* reduce maxLength in case of final into repetitive data */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/zdict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:20,Security,secur,security,20,/* +16 for overflow security */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/zdict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:118,Deployability,update,update,118,"/* note filePos tracks borders between samples.; It's not used at this stage, but planned to become useful in a later update */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/zdict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:30,Energy Efficiency,allocate,allocated,30,/* must be ZSTD_BLOCKSIZE_MAX allocated */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/zdict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:24,Modifiability,rewrite,rewrite,24,/* ZDICT_flatLit() :; * rewrite `countLit` to contain a mostly flat but still compressible distribution of literals.; * necessary to avoid generating a non-compressible distribution that HUF_writeCTable() cannot encode.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/zdict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:133,Safety,avoid,avoid,133,/* ZDICT_flatLit() :; * rewrite `countLit` to contain a mostly flat but still compressible distribution of literals.; * necessary to avoid generating a non-compressible distribution that HUF_writeCTable() cannot encode.; */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/zdict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:150,Availability,error,error,150,"/*! ZDICT_trainFromBuffer_unsafe_legacy() :; * Warning : `samplesBuffer` must be followed by noisy guard band.; * @return : size of dictionary, or an error code which can be tested with ZDICT_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/zdict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:174,Testability,test,tested,174,"/*! ZDICT_trainFromBuffer_unsafe_legacy() :; * Warning : `samplesBuffer` must be followed by noisy guard band.; * @return : size of dictionary, or an error code which can be tested with ZDICT_isError(); */",MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/zdict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c
https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:63,Availability,avail,available,63,/* Use default level since no compression level information is available */,MatchSource.CODE_COMMENT,builtins/zstd/dictBuilder/zdict.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c
https://github.com/root-project/root/tree/v6-32-06/cmake/unix/makepchinput.py:54,Testability,test,test,54,"# Make sure we don't get warnings from the old RooFit test statistics; # headers that are deprecated. This line can be removed once the deprecaded; # headers are gone (ROOT 6.32.00):",MatchSource.CODE_COMMENT,cmake/unix/makepchinput.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/unix/makepchinput.py
https://github.com/root-project/root/tree/v6-32-06/cmake/unix/rootmapcat.py:9,Energy Efficiency,reduce,reduce,9,"# Now we reduce the fwd declarations",MatchSource.CODE_COMMENT,cmake/unix/rootmapcat.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/unix/rootmapcat.py
https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h:27,Safety,safe,safe,27,/* local static not thread safe */,MatchSource.CODE_COMMENT,cmake/win/w32pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h
https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h:23,Performance,perform,performance,23,/*forcing int to bool (performance warning) */,MatchSource.CODE_COMMENT,cmake/win/w32pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h
https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h:27,Availability,error,error,27,/* check op precedence for error */,MatchSource.CODE_COMMENT,cmake/win/w32pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h
https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h:23,Integrability,interface,interface,23,/* X needs to have dll-interface to be used by clients of class Y */,MatchSource.CODE_COMMENT,cmake/win/w32pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h
https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h:16,Modifiability,variab,variable,16,/* loop control variable is used outside the for-loop scope */,MatchSource.CODE_COMMENT,cmake/win/w32pragma.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/win/w32pragma.h
https://github.com/root-project/root/tree/v6-32-06/config/__cplusplus.cxx:12,Integrability,message,message,12,"// `#pragma message` is supported in well-known compilers including gcc, clang, icc, and MSVC. But not nvc++.",MatchSource.CODE_COMMENT,config/__cplusplus.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/config/__cplusplus.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:392,Availability,avail,available,392,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:418,Energy Efficiency,reduce,reduces,418,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:183,Integrability,rout,routines,183,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:252,Integrability,rout,routines,252,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:487,Integrability,rout,routines,487,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:718,Integrability,rout,routines,718,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:699,Safety,safe,safe,699,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bswapcpy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:136,Integrability,rout,routines,136,"//////////////////////////////////////////////////////////////////////////; // //; // Bytes //; // //; // A set of inline byte handling routines. //; // //; // The set of tobuf() and frombuf() routines take care of packing a //; // basic type value into a buffer in network byte order (i.e. they //; // perform byte swapping when needed). The buffer does not have to //; // start on a machine (long) word boundary. //; // //; // For __GNUC__ on linux on i486 processors and up //; // use the `bswap' opcode provided by the GNU C Library. //; // //; // The set of host2net() and net2host() routines convert a basic type //; // value from host to network byte order and vice versa. On BIG ENDIAN //; // machines this is a no op. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:193,Integrability,rout,routines,193,"//////////////////////////////////////////////////////////////////////////; // //; // Bytes //; // //; // A set of inline byte handling routines. //; // //; // The set of tobuf() and frombuf() routines take care of packing a //; // basic type value into a buffer in network byte order (i.e. they //; // perform byte swapping when needed). The buffer does not have to //; // start on a machine (long) word boundary. //; // //; // For __GNUC__ on linux on i486 processors and up //; // use the `bswap' opcode provided by the GNU C Library. //; // //; // The set of host2net() and net2host() routines convert a basic type //; // value from host to network byte order and vice versa. On BIG ENDIAN //; // machines this is a no op. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:589,Integrability,rout,routines,589,"//////////////////////////////////////////////////////////////////////////; // //; // Bytes //; // //; // A set of inline byte handling routines. //; // //; // The set of tobuf() and frombuf() routines take care of packing a //; // basic type value into a buffer in network byte order (i.e. they //; // perform byte swapping when needed). The buffer does not have to //; // start on a machine (long) word boundary. //; // //; // For __GNUC__ on linux on i486 processors and up //; // use the `bswap' opcode provided by the GNU C Library. //; // //; // The set of host2net() and net2host() routines convert a basic type //; // value from host to network byte order and vice versa. On BIG ENDIAN //; // machines this is a no op. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:303,Performance,perform,perform,303,"//////////////////////////////////////////////////////////////////////////; // //; // Bytes //; // //; // A set of inline byte handling routines. //; // //; // The set of tobuf() and frombuf() routines take care of packing a //; // basic type value into a buffer in network byte order (i.e. they //; // perform byte swapping when needed). The buffer does not have to //; // start on a machine (long) word boundary. //; // //; // For __GNUC__ on linux on i486 processors and up //; // use the `bswap' opcode provided by the GNU C Library. //; // //; // The set of host2net() and net2host() routines convert a basic type //; // value from host to network byte order and vice versa. On BIG ENDIAN //; // machines this is a no op. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:27,Performance,optimiz,optimization,27,"// To work around a stupid optimization bug in MSVC++ 6.0",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:27,Performance,optimiz,optimization,27,"// To work around a stupid optimization bug in MSVC++ 6.0",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:27,Performance,optimiz,optimization,27,"// To work around a stupid optimization bug in MSVC++ 6.0",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:27,Performance,optimiz,optimization,27,"// To work around a stupid optimization bug in MSVC++ 6.0",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h:27,Performance,optimiz,optimization,27,"// To work around a stupid optimization bug in MSVC++ 6.0",MatchSource.CODE_COMMENT,core/base/inc/Bytes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bytes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Byteswap.h:295,Safety,safe,safe,295,"/* Originally (mid-1990s), this file contained copy/pasted assembler from RH6.0's; * version of <bits/byteswap.h>. Hence, we keep a copy of the FSF copyright below.; * I believe all the original code has been excised, perhaps with exception of the; * R__bswap_constant_* functions. To be on the safe side, we are keeping the; * copyright below.; * -- Brian Bockelman, August 2018; */; /* Copyright (C) 1997 Free Software Foundation, Inc.; This file is part of the GNU C Library. The GNU C Library is free software; you can redistribute it and/or; modify it under the terms of the GNU Library General Public License as; published by the Free Software Foundation; either version 2 of the; License, or (at your option) any later version. The GNU C Library is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; Library General Public License for more details. You should have received a copy of the GNU Library General Public; License along with the GNU C Library; see the file COPYING.LIB. If not,; write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,; Boston, MA 02111-1307, USA. */",MatchSource.CODE_COMMENT,core/base/inc/Byteswap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Byteswap.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Byteswap.h:26,Safety,safe,safely,26,"// Signed integers can be safely byteswapped if they are reinterpret_cast'ed to unsigned",MatchSource.CODE_COMMENT,core/base/inc/Byteswap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Byteswap.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Match.h:122,Integrability,rout,routines,122,"//////////////////////////////////////////////////////////////////////////; // //; // Declarations for regular expression routines. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/Match.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Match.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:86,Integrability,Message,MessageTypes,86,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:131,Integrability,message,message,131,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:146,Integrability,Message,Message,146,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:208,Integrability,message,message,208,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:242,Integrability,message,message,242,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:337,Integrability,message,message,337,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:383,Integrability,message,message,383,"//////////////////////////////////////////////////////////////////////////; // //; // MessageTypes //; // //; // System predefined message types. Message types are constants that //; // indicate what kind of message it is. Make sure your own message //; // types don't clash whith the ones defined in this file. ROOT reserves //; // all message ids between 0 - 10000. Make sure your message //; // id < 200000000. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:32,Integrability,message,message,32,"//OR with kMESS_ZIP to compress message",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:37,Integrability,message,message,37,"//OR with kMESS_ACK to force each; //message to be acknowledged",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:10,Integrability,message,message,10,"//generic message type",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:42,Integrability,message,message,42,"//TProcessID object follows; //---- PROOF message opcodes (1000 - 1999)",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:19,Availability,error,error,19,"//server got fatal error and died",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Testability,log,loglevel,2,"//loglevel follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Testability,log,log,2,"//log file length and content follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Testability,log,log,2,"//log file received, status follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:37,Integrability,Message,Message,37,"//print status of worker - (OBSOLETE Message)",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Availability,ping,ping,2,"//ping worker",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:22,Modifiability,config,config,22,"//ask master to print config",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:29,Integrability,message,messages,29,"//cache and package handling messages",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Performance,cache,cache,2,"//cache and package handling messages",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:10,Safety,abort,abort,10,"//stop or abort the current process call",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Security,validat,validate,2,"//validate a TDSet",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Integrability,message,message,2,"//message with unique session tag",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Integrability,message,message,2,"//message with max number of queries",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:4,Integrability,message,message,4,"//a message for the client follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:43,Integrability,message,messages,43,"//switch on/off real-time retrieval of log messages",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:39,Testability,log,log,39,"//switch on/off real-time retrieval of log messages",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:9,Availability,echo,echo,9,"//object echo request from client",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:39,Integrability,message,message,39,"//control output sending; //---- ROOTD message opcodes (2000 - 2099)",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Security,authoriz,authorization,2,"//authorization status (to client)",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Availability,error,error,2,"//error code and message follow",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:17,Integrability,message,message,17,"//error code and message follow",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:16,Integrability,protocol,protocol,16,"//returns rootd protocol",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:15,Integrability,message,message,15,"//an encrypted message follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:5,Security,encrypt,encrypted,5,"//an encrypted message follows",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:7,Security,Access,Access,7,"//test Access",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,Testability,test,test,2,"//test Access",MatchSource.CODE_COMMENT,core/base/inc/MessageTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RConfig.h:188,Safety,avoid,avoid,188,"/*************************************************************************; * *; * Old RConfig.h forwarding to ROOT/RConfig.hxx *; * *; * Please #include ROOT/RConfig.hxx instead, e.g. to avoid clashes with *; * R's Rconfig.h *; * *; *************************************************************************/",MatchSource.CODE_COMMENT,core/base/inc/RConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RConfig.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RQ_OBJECT.h:700,Performance,Load,Load,700,"//---- RQ_OBJECT macro -----------------------------------------------; //; // Macro is used to delegate TQObject methods to other classes; // Example:; //; // #include ""RQ_OBJECT.h""; //; // class A {; // RQ_OBJECT(""A""); // private:; // Int_t fValue;; // public:; // A() : fValue(0) { }; // ~A() { }; //; // void SetValue(Int_t value); // void PrintValue() const { printf(""value=%d\n"", fValue); }; // Int_t GetValue() const { return fValue; }; // };; //; // void A::SetValue(Int_t value); // {; // // Sets new value; //; // // to prevent infinite looping in the case; // // of cyclic connections; // if (value != fValue) {; // fValue = value;; // Emit(""SetValue(Int_t)"", fValue);; // }; // }; //; // Load this class into root session and try the following:; //; // a = new A();; // b = new A();; //; // Here is one way to connect two of these objects together:; //; // a->Connect(""SetValue(Int_t)"", ""A"", b, ""SetValue(Int_t)"");; //; // Calling a->SetValue(79) will make a emit a signal, which b; // will receive, i.e. b->SetValue(79) is invoked. b will in; // turn emit the same signal, which nobody receives, since no; // slot has been connected to it, so it disappears into hyperspace.; //",MatchSource.CODE_COMMENT,core/base/inc/RQ_OBJECT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RQ_OBJECT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:26,Integrability,interface,interface,26,"// This class defines the interface for the class registration and; // the TClass creation. To modify the default behavior, one would; // inherit from this class and overload ROOT::DefineBehavior().; // See TQObject.h and table/inc/Ttypes.h for examples.",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:138,Modifiability,inherit,inherit,138,"// This class defines the interface for the class registration and; // the TClass creation. To modify the default behavior, one would; // inherit from this class and overload ROOT::DefineBehavior().; // See TQObject.h and table/inc/Ttypes.h for examples.",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:327,Performance,load,load,327,"// We need a reference to the template instance static member in a concrete function in order; // to force its instantiation (even before the function is actually run); // Since we do have a reference to Dictionary (in T::Dictionary), using fgGenericInfo; // here will insure that it is initialized at process start or library load time.",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:281,Availability,redundant,redundant,281,"//---- ClassDefT macros for templates with one template argument ---------------; // ClassDefT corresponds to ClassDef; // ClassDefT2 goes in the same header as ClassDefT but must be; // outside the class scope; // ClassImpT corresponds to ClassImp; /// This ClassDefT is strictly redundant and is kept only for; /// backward compatibility. \deprecated",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:281,Safety,redund,redundant,281,"//---- ClassDefT macros for templates with one template argument ---------------; // ClassDefT corresponds to ClassDef; // ClassDefT2 goes in the same header as ClassDefT but must be; // outside the class scope; // ClassImpT corresponds to ClassImp; /// This ClassDefT is strictly redundant and is kept only for; /// backward compatibility. \deprecated",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:195,Availability,error,errors,195,"//---- Macro to load a library into the interpreter --------------; // Call as R__LOAD_LIBRARY(libEvent); // This macro intentionally does not take string as argument, to; // prevent compilation errors with complex diagnostics due to; // TString BAD_DO_NOT_TRY = ""lib"";; // R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:331,Availability,ERROR,ERROR,331,"//---- Macro to load a library into the interpreter --------------; // Call as R__LOAD_LIBRARY(libEvent); // This macro intentionally does not take string as argument, to; // prevent compilation errors with complex diagnostics due to; // TString BAD_DO_NOT_TRY = ""lib"";; // R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:16,Performance,load,load,16,"//---- Macro to load a library into the interpreter --------------; // Call as R__LOAD_LIBRARY(libEvent); // This macro intentionally does not take string as argument, to; // prevent compilation errors with complex diagnostics due to; // TString BAD_DO_NOT_TRY = ""lib"";; // R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:141,Integrability,message,message,141,"// No way to inform linker though preprocessor :-(; // We could even inform the user:; /*; # define R__LOAD_LIBRARY(LIBRARY) \; _R_PragmaStr(message ""Compiler cannot handle linking against "" #LIBRARY \; "". Use -L and -l instead.""); */",MatchSource.CODE_COMMENT,core/base/inc/Rtypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h:44,Availability,down,down,44,"// this should never be used but help quiet down some compiler!",MatchSource.CODE_COMMENT,core/base/inc/RtypesImp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h:135,Availability,error,error,135,"// The STL GenerateInitInstance are not unique and hence are declared static; // (not accessible outside the dictionary and not linker error for duplicate)",MatchSource.CODE_COMMENT,core/base/inc/RtypesImp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h:86,Security,access,accessible,86,"// The STL GenerateInitInstance are not unique and hence are declared static; // (not accessible outside the dictionary and not linker error for duplicate)",MatchSource.CODE_COMMENT,core/base/inc/RtypesImp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h:19,Safety,avoid,avoid,19,/* Helper class to avoid compiler warning about casting function pointer; ** to void pointer.; */,MatchSource.CODE_COMMENT,core/base/inc/RtypesImp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/RtypesImp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h:185,Integrability,message,messages,185,"//////////////////////////////////////////////////////////////////////////; // //; // TBase64 //; // //; // This code implements the Base64 encoding and decoding. //; // Base64 encoded messages are typically used in authentication //; // protocols and to pack binary data in HTTP messages. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TBase64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h:238,Integrability,protocol,protocols,238,"//////////////////////////////////////////////////////////////////////////; // //; // TBase64 //; // //; // This code implements the Base64 encoding and decoding. //; // Base64 encoded messages are typically used in authentication //; // protocols and to pack binary data in HTTP messages. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TBase64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h:280,Integrability,message,messages,280,"//////////////////////////////////////////////////////////////////////////; // //; // TBase64 //; // //; // This code implements the Base64 encoding and decoding. //; // Base64 encoded messages are typically used in authentication //; // protocols and to pack binary data in HTTP messages. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TBase64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h:216,Security,authenticat,authentication,216,"//////////////////////////////////////////////////////////////////////////; // //; // TBase64 //; // //; // This code implements the Base64 encoding and decoding. //; // Base64 encoded messages are typically used in authentication //; // protocols and to pack binary data in HTTP messages. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TBase64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBenchmark.h:450,Testability,Benchmark,Benchmark,450,"// @(#)root/base:$Id$; // Author: Rene Brun 12/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; // ---------------------------------- Benchmark.h",MatchSource.CODE_COMMENT,core/base/inc/TBenchmark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBenchmark.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h:37,Modifiability,extend,extending,37,"//! Realloc function to be used when extending the buffer.",MatchSource.CODE_COMMENT,core/base/inc/TBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h:27,Performance,cache,cache,27,"//Stack of pointers to the cache where to temporarily store the value of 'missing' data members; // Default ctor",MatchSource.CODE_COMMENT,core/base/inc/TBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h:440,Usability,usab,usable,440,"// Read TObject derived classes from a TBuffer. Need to provide; // custom version for non-TObject derived classes.; // This operator has to be a templated and/or automatically; // generated if we want to be able to check the type of the; // incoming object. I.e. a operator>>(TBuffer &buf, TObject *&); // would not be sufficient to pass the information 'which class do we want'; // since the pointer could be zero (so typeid(*obj) is not usable).",MatchSource.CODE_COMMENT,core/base/inc/TBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h:146,Safety,avoid,avoid,146,"//TODO: Check on casing of enums - also clearer names would help; //TODO: Go through all shapes and check type is being set for each; // Scope to avoid clashes",MatchSource.CODE_COMMENT,core/base/inc/TBuffer3DTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h:40,Usability,clear,clearer,40,"//TODO: Check on casing of enums - also clearer names would help; //TODO: Go through all shapes and check type is being set for each; // Scope to avoid clashes",MatchSource.CODE_COMMENT,core/base/inc/TBuffer3DTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:130,Modifiability,extend,extends,130,"//////////////////////////////////////////////////////////////////////////; // //; // TColorGradient //; // //; // TColorGradient extends basic TColor. //; // Actually, this is not a simple color, but linear or radial gradient //; // for a filled area. By inheriting from TColor, gradients can be //; // placed inside gROOT's list of colors and use it in all TAttXXX //; // descendants without modifying any existing code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:256,Modifiability,inherit,inheriting,256,"//////////////////////////////////////////////////////////////////////////; // //; // TColorGradient //; // //; // TColorGradient extends basic TColor. //; // Actually, this is not a simple color, but linear or radial gradient //; // for a filled area. By inheriting from TColor, gradients can be //; // placed inside gROOT's list of colors and use it in all TAttXXX //; // descendants without modifying any existing code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:183,Usability,simpl,simple,183,"//////////////////////////////////////////////////////////////////////////; // //; // TColorGradient //; // //; // TColorGradient extends basic TColor. //; // Actually, this is not a simple color, but linear or radial gradient //; // for a filled area. By inheriting from TColor, gradients can be //; // placed inside gROOT's list of colors and use it in all TAttXXX //; // descendants without modifying any existing code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:23,Modifiability,inherit,inherited,23,"//With C++11 we'll use inherited constructors!!!",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:173,Modifiability,extend,extended,173,"//; //Radial gradient. Can be either ""simple"": you specify a center; //and radius in NDC coordinates (see comments about linear gradient; //and coordinate modes above), or ""extended"": you have two centers; //(start,end) and two radiuses (R1, R2) and interpolation between them;; //still start/end and radiuses are in NDC.; //",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:38,Usability,simpl,simple,38,"//; //Radial gradient. Can be either ""simple"": you specify a center; //and radius in NDC coordinates (see comments about linear gradient; //and coordinate modes above), or ""extended"": you have two centers; //(start,end) and two radiuses (R1, R2) and interpolation between them;; //still start/end and radiuses are in NDC.; //",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:23,Modifiability,inherit,inherited,23,"//With C++11 we'll use inherited constructors!!!",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:2,Modifiability,Extend,Extended,2,"//Extended gradient.",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:38,Modifiability,extend,extended,38,"//Simple radial gradient: the same as extended with; //start == end, r1 = 0, r2 = radius.",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:2,Usability,Simpl,Simple,2,"//Simple radial gradient: the same as extended with; //start == end, r1 = 0, r2 = radius.",MatchSource.CODE_COMMENT,core/base/inc/TColorGradient.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDatime.h:497,Modifiability,portab,portable,497,"//////////////////////////////////////////////////////////////////////////; // //; // TDatime //; // //; // This class stores the date and time with a precision of one second //; // in an unsigned 32 bit word (e.g. 950130 124559). The date is stored //; // with the origin being the 1st january 1995. //; // //; // This class has no support for time zones. The time is assumed //; // to be in the local time of the machine where the object was created. //; // As a result, TDatime objects are not portable between machines //; // operating in different time zones and unsuitable for storing the //; // date/time of data taking events and the like. If absolute time is //; // required, use TTimeStamp. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TDatime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDatime.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h:452,Safety,safe,safe,452,"/** \class TContext; \ingroup Base. TDirectory::TContext keeps track and restore the current directory.; With this tool C++ exceptions will be guaranteed to properly restore the; current directory pointer. For example code like:. ~~~ {.cpp}; TDirectory *sav = gDirectory;; mydirectory->cd();; if (...) {; ....; sav->cd();; return;; } else if (...) {; ....; sav->cd();; return;; }; sav->cd;; return;; ~~~. can be replaced with the simpler and exception safe:. ~~~ {.cpp}; TDirectory::TContext context(gDirectory, mydirectory);; if (...) {; ....; return;; } else if (...) {; ....; return;; }; return;; ~~~. */",MatchSource.CODE_COMMENT,core/base/inc/TDirectory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h:430,Usability,simpl,simpler,430,"/** \class TContext; \ingroup Base. TDirectory::TContext keeps track and restore the current directory.; With this tool C++ exceptions will be guaranteed to properly restore the; current directory pointer. For example code like:. ~~~ {.cpp}; TDirectory *sav = gDirectory;; mydirectory->cd();; if (...) {; ....; sav->cd();; return;; } else if (...) {; ....; sav->cd();; return;; }; sav->cd;; return;; ~~~. can be replaced with the simpler and exception safe:. ~~~ {.cpp}; TDirectory::TContext context(gDirectory, mydirectory);; if (...) {; ....; return;; } else if (...) {; ....; return;; }; return;; ~~~. */",MatchSource.CODE_COMMENT,core/base/inc/TDirectory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h:44,Security,access,access,44,"//! Set to true if a TDirectory might still access this object.",MatchSource.CODE_COMMENT,core/base/inc/TDirectory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TDirectory.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TFileInfo.h:19,Security,access,access,19,"//! current URL to access the file, points to URL; // in the fUrlList or 0, if the list end is reached",MatchSource.CODE_COMMENT,core/base/inc/TFileInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TFileInfo.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TInetAddress.h:147,Integrability,Protocol,Protocol,147,"//////////////////////////////////////////////////////////////////////////; // //; // TInetAddress //; // //; // This class represents an Internet Protocol (IP) address. //; // Objects of this class can not be created directly, but only via //; // the TSystem GetHostByName(), GetSockName(), and GetPeerName() //; // members and via members of the TServerSocket and TSocket classes. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TInetAddress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TInetAddress.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TInetAddress.h:25,Integrability,Protocol,Protocol,25,"//Represents an Internet Protocol (IP) address",MatchSource.CODE_COMMENT,core/base/inc/TInetAddress.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TInetAddress.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h:233,Availability,avail,available,233,"//////////////////////////////////////////////////////////////////////////; // //; // TMath Base functions //; // //; // Define the functions Min, Max, Abs, Sign, Range for all types. //; // NB: These functions are unfortunately not available in a portable //; // way in std::. //; // //; // More functions are defined in TMath.h. TMathBase.h is designed to be //; // a stable file and used in place of TMath.h in the ROOT miniCore. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMathBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h:248,Modifiability,portab,portable,248,"//////////////////////////////////////////////////////////////////////////; // //; // TMath Base functions //; // //; // Define the functions Min, Max, Abs, Sign, Range for all types. //; // NB: These functions are unfortunately not available in a portable //; // way in std::. //; // //; // More functions are defined in TMath.h. TMathBase.h is designed to be //; // a stable file and used in place of TMath.h in the ROOT miniCore. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMathBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h:153,Availability,down,down,153,"/// Sort the n1 elements of the Short_t array defined by its; /// iterators. In output the array index contains the indices of; /// the sorted array. If down is false sort in increasing order; /// (default is decreasing order).; ///; /// NOTE that the array index must be created with a length bigger; /// or equal than the main array before calling this function.",MatchSource.CODE_COMMENT,core/base/inc/TMathBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h:169,Availability,down,down,169,"/// Sort the n elements of the array a of generic templated type Element.; /// In output the array index of type Index contains the indices of the sorted array.; /// If down is false sort in increasing order (default is decreasing order).; ///; /// NOTE that the array index must be created with a length >= n; /// before calling this function.; /// NOTE also that the size type for n must be the same type used for the index array; /// (templated type Index)",MatchSource.CODE_COMMENT,core/base/inc/TMathBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMathBase.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:382,Availability,avail,available,382,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:678,Deployability,Update,Update,678,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:134,Integrability,message,message-digest,134,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:607,Integrability,message,message,607,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:406,Security,Secur,Security,406,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:447,Testability,test,tested,447,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:2,Integrability,message,message,2,"//message digest",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:10,Integrability,message,message,10,"//true if message digest has been finalized",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:21,Security,hash,hash,21,"// MD5 cryptographic hash functions with a 128 bit output",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:27,Safety,avoid,avoid,27,"// Not inlined in order to avoid const casted away warning in user code.",MatchSource.CODE_COMMENT,core/base/inc/TMD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMemberInspector.h:141,Security,access,accessing,141,"//////////////////////////////////////////////////////////////////////////; // //; // TMemberInspector //; // //; // Abstract base class for accessing the datamembers of a class. //; // Classes derived from this class can be given as argument to the //; // ShowMembers() methods of ROOT classes. This feature facilitates //; // the writing of class browsers and inspectors. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMemberInspector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMemberInspector.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:489,Deployability,install,install,489,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:123,Integrability,message,messages,123,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:233,Integrability,message,messages,233,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:365,Integrability,message,message,365,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:424,Integrability,message,message,424,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:472,Integrability,message,message,472,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:511,Integrability,message,message,511,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:547,Integrability,message,message,547,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:410,Security,access,access,410,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:19,Integrability,message,message,19,"// class for which message has to be handled",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:21,Integrability,message,message,21,"// object generating message",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:3,Integrability,message,message,3,"// message id (often matching specific enum in fClass)",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:23,Integrability,message,messages,23,"// number of different messages handled",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:13,Integrability,message,message,13,"// count per message",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:3,Integrability,message,message,3,"// message ids",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:18,Integrability,message,messages,18,"// if true handle messages also for derived classes",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:11,Integrability,message,message,11,"// Generic message handler",MatchSource.CODE_COMMENT,core/base/inc/TMessageHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h:542,Performance,Load,LoadTree,542,"/** \class TNotifyLink; \ingroup Base. A node in a doubly linked list of subscribers to TChain notifications. TObject has a virtual TObject::Notify() method that takes no parameters and returns a boolean.; By default the method does nothing, and different objects in ROOT use this method for different purposes. `TChain` uses `Notify` to implement a callback mechanism that notifies interested parties (subscribers) when; the chain switches to a new sub-tree.; In practice it calls the Notify() method of its fNotify data member from TChain::LoadTree().; However there could be several different objects interested in knowing that a given TChain switched to a new tree.; TNotifyLink can be used to build a linked list of subscribers: calling TNotifyLink::Notify() on the head; node of the list propagates the call to all subscribers in the list. Example usage:; ~~~{.cpp}; TNotifyLink l(subscriber); // subscriber must implement `Notify()`; l.PrependLink(chain); // prepends `l` to the list of notify links of the chain; ~~~. \note TChain does not explicitly enforce that its fNotify data member be the head node of a list of; TNotifyLinks, but that is the case in practice at least when using TTreeReader or RDataFrame to process the chain. \note TChain does not take ownership of the TNotifyLink and the TNotifyLink does not take ownership of the; subscriber object.; **/; /// See TNotifyLink.",MatchSource.CODE_COMMENT,core/base/inc/TNotifyLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h:114,Integrability,depend,dependency,114,"/// Set this link as the head of the chain's list of notify subscribers.; /// Templated only to remove an include dependency from TChain: it expects; /// a TChain as input (in practice anything that implements SetNotify and; /// GetNotify will work, but in ROOT that is only TTree and its sub-classes).",MatchSource.CODE_COMMENT,core/base/inc/TNotifyLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h:308,Availability,error,error,308,"/// Remove this link from a chain's list of notify subscribers.; /// Templated only to remove an include dependency from TChain: it expects; /// a TChain as input (in practice anything that implements SetNotify and; /// GetNotify will work, but in ROOT that is only TTree and its sub-classes).; /// \note No error is emitted if the TNotifyLink is not part of the linked list; /// for the chain passed as argument. The TNotifyLink will still remove itself; /// from the doubly linked list.",MatchSource.CODE_COMMENT,core/base/inc/TNotifyLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h:105,Integrability,depend,dependency,105,"/// Remove this link from a chain's list of notify subscribers.; /// Templated only to remove an include dependency from TChain: it expects; /// a TChain as input (in practice anything that implements SetNotify and; /// GetNotify will work, but in ROOT that is only TTree and its sub-classes).; /// \note No error is emitted if the TNotifyLink is not part of the linked list; /// for the chain passed as argument. The TNotifyLink will still remove itself; /// from the doubly linked list.",MatchSource.CODE_COMMENT,core/base/inc/TNotifyLink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TNotifyLink.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:39,Testability,test,test,39,"//----- Private bits, clients can only test but not change them",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:20,Security,Hash,Hash,20,"///< class overload Hash but does call RecursiveRemove in destructor; // kCheckedHash = 0x10000000, ///< CheckedHash has check for the consistency of Hash/RecursiveRemove",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:150,Security,Hash,Hash,150,"///< class overload Hash but does call RecursiveRemove in destructor; // kCheckedHash = 0x10000000, ///< CheckedHash has check for the consistency of Hash/RecursiveRemove",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:7,Availability,error,error,7,"//---- error handling",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:284,Energy Efficiency,allocate,allocated,284,"////////////////////////////////////////////////////////////////////////////////; /// TObject constructor. It sets the two data words of TObject to their; /// initial values. The unique ID is set to 0 and the status word is; /// set depending if the object is created on the stack or allocated; /// on the heap. Depending on the ROOT environment variable ""Root.ObjStat""; /// (see TEnv) the object is added to the global TObjectTable for; /// bookkeeping.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:233,Integrability,depend,depending,233,"////////////////////////////////////////////////////////////////////////////////; /// TObject constructor. It sets the two data words of TObject to their; /// initial values. The unique ID is set to 0 and the status word is; /// set depending if the object is created on the stack or allocated; /// on the heap. Depending on the ROOT environment variable ""Root.ObjStat""; /// (see TEnv) the object is added to the global TObjectTable for; /// bookkeeping.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:312,Integrability,Depend,Depending,312,"////////////////////////////////////////////////////////////////////////////////; /// TObject constructor. It sets the two data words of TObject to their; /// initial values. The unique ID is set to 0 and the status word is; /// set depending if the object is created on the stack or allocated; /// on the heap. Depending on the ROOT environment variable ""Root.ObjStat""; /// (see TEnv) the object is added to the global TObjectTable for; /// bookkeeping.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:346,Modifiability,variab,variable,346,"////////////////////////////////////////////////////////////////////////////////; /// TObject constructor. It sets the two data words of TObject to their; /// initial values. The unique ID is set to 0 and the status word is; /// set depending if the object is created on the stack or allocated; /// on the heap. Depending on the ROOT environment variable ""Root.ObjStat""; /// (see TEnv) the object is added to the global TObjectTable for; /// bookkeeping.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:3,Testability,test,test,3,"// test uses fBits so don't move next line",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:266,Integrability,rout,routine,266,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:598,Safety,safe,safe,598,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:151,Security,Hash,Hash,151,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:210,Security,Hash,Hash,210,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:333,Security,Hash,Hash,333,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:514,Security,Hash,Hash,514,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:615,Security,Hash,Hash,615,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:423,Modifiability,variab,variable,423,"// Testing and recording whether we already called HasInconstistentTObjectHash; // for this object could save some cpu cycles in some circuntances (at the cost; // of reserving yet another bit).; // For each insert (CheckedHash is called only for insert in THashList/THashTable), it; // cost one memory fetch, one arithmetic operation and one branching.; // This save a virtual function call which itself contains a static variable memory; // fetch, a branching (of whether the static was already set or not).; // Given that a virtual function call is essentially 2 memory fetches (virtual table; // location and then content), one arithmetic operation and one function call/jump),; // we guess-estimate that the version recording-then-testing-prior-check would start; // saving cpu cycle when each object is inserted in average 1.5 times in a THashList/THashTable.; // if ( !fBits & kCheckedHash) {",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:3,Testability,Test,Testing,3,"// Testing and recording whether we already called HasInconstistentTObjectHash; // for this object could save some cpu cycles in some circuntances (at the cost; // of reserving yet another bit).; // For each insert (CheckedHash is called only for insert in THashList/THashTable), it; // cost one memory fetch, one arithmetic operation and one branching.; // This save a virtual function call which itself contains a static variable memory; // fetch, a branching (of whether the static was already set or not).; // Given that a virtual function call is essentially 2 memory fetches (virtual table; // location and then content), one arithmetic operation and one function call/jump),; // we guess-estimate that the version recording-then-testing-prior-check would start; // saving cpu cycle when each object is inserted in average 1.5 times in a THashList/THashTable.; // if ( !fBits & kCheckedHash) {",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:736,Testability,test,testing-prior-check,736,"// Testing and recording whether we already called HasInconstistentTObjectHash; // for this object could save some cpu cycles in some circuntances (at the cost; // of reserving yet another bit).; // For each insert (CheckedHash is called only for insert in THashList/THashTable), it; // cost one memory fetch, one arithmetic operation and one branching.; // This save a virtual function call which itself contains a static variable memory; // fetch, a branching (of whether the static was already set or not).; // Given that a virtual function call is essentially 2 memory fetches (virtual table; // location and then content), one arithmetic operation and one function call/jump),; // we guess-estimate that the version recording-then-testing-prior-check would start; // saving cpu cycle when each object is inserted in average 1.5 times in a THashList/THashTable.; // if ( !fBits & kCheckedHash) {",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:349,Integrability,rout,routine,349,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:182,Security,Hash,Hash,182,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:560,Security,Hash,Hash,560,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:619,Security,hash,hash,619,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:312,Testability,test,tested,312,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:102,Availability,error,error,102,"/// @brief Check if the TObject's memory has been deleted.; /// @warning This should be only used for error mitigation as the answer is only; /// sometimes correct. It actually just checks whether the object has been; /// deleted, so this will falsely return true for an object that has; /// been destructed but its memory has not been deleted. This will return an; /// undefined value if the memory is re-used between the deletion and the check.; /// i.e. This is useful to prevent a segmentation fault in case where the problem; /// can be detected when the deletion and the usage are 'close-by'; /// @warning In enviroment where delete taints (changes) the memory, this function; /// always returns false as the marker left by ~TObject will be overwritten.; /// @param obj The memory to check; /// @return true if the object has been destructed and it can be inferred that it has been deleted",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:498,Availability,fault,fault,498,"/// @brief Check if the TObject's memory has been deleted.; /// @warning This should be only used for error mitigation as the answer is only; /// sometimes correct. It actually just checks whether the object has been; /// deleted, so this will falsely return true for an object that has; /// been destructed but its memory has not been deleted. This will return an; /// undefined value if the memory is re-used between the deletion and the check.; /// i.e. This is useful to prevent a segmentation fault in case where the problem; /// can be detected when the deletion and the usage are 'close-by'; /// @warning In enviroment where delete taints (changes) the memory, this function; /// always returns false as the marker left by ~TObject will be overwritten.; /// @param obj The memory to check; /// @return true if the object has been destructed and it can be inferred that it has been deleted",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:542,Safety,detect,detected,542,"/// @brief Check if the TObject's memory has been deleted.; /// @warning This should be only used for error mitigation as the answer is only; /// sometimes correct. It actually just checks whether the object has been; /// deleted, so this will falsely return true for an object that has; /// been destructed but its memory has not been deleted. This will return an; /// undefined value if the memory is re-used between the deletion and the check.; /// i.e. This is useful to prevent a segmentation fault in case where the problem; /// can be detected when the deletion and the usage are 'close-by'; /// @warning In enviroment where delete taints (changes) the memory, this function; /// always returns false as the marker left by ~TObject will be overwritten.; /// @param obj The memory to check; /// @return true if the object has been destructed and it can be inferred that it has been deleted",MatchSource.CODE_COMMENT,core/base/inc/TObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObjString.h:3,Integrability,wrap,wrapped,3,"// wrapped TString",MatchSource.CODE_COMMENT,core/base/inc/TObjString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObjString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TParameter.h:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,core/base/inc/TParameter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TParameter.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPluginManager.h:106,Modifiability,Plugin,PluginHandler,106,"// Fallback to slow path with type conversion for arguments.; // The fCallEnv object is shared, since the PluginHandler is a global; // resource ... and both SetParams and Execute ends up taking the lock; // individually anyway ...",MatchSource.CODE_COMMENT,core/base/inc/TPluginManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPluginManager.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPoint.h:448,Integrability,rout,routines,448,"//////////////////////////////////////////////////////////////////////////; // //; // TPoint //; // //; // TPoint implements a 2D screen (device) point (see also TPoints). //; // //; // Don't add in dictionary since that will add a virtual table pointer //; // and that will destroy the data layout of an array of TPoint's which //; // should match the layout of an array of XPoint's (so no extra copying //; // needs to be done in the X11 drawing routines). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPoint.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPoint.h:12,Security,access,access,12,"// for easy access",MatchSource.CODE_COMMENT,core/base/inc/TPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPoint.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPRegexp.h:3,Integrability,Wrap,Wrapper,3,"// Wrapper for Perl-like regular expression matching.",MatchSource.CODE_COMMENT,core/base/inc/TPRegexp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPRegexp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQClass.h:143,Modifiability,inherit,inheriting,143,"//---- Class Initialization Behavior --------------------------------------; //; // This Class and Function are automatically used for classes inheriting from; // TQObject. They make it possible to have a single connection from all; // objects of the same class.",MatchSource.CODE_COMMENT,core/base/inc/TQClass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQClass.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:134,Usability,Undo,Undo,134,"//////////////////////////////////////////////////////////////////////////; // //; // TQCommand, TQUndoManager - support for multiple Undo/Redo operations //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:3,Usability,undo,undo,3,"// undo action",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:3,Usability,undo,undo,3,"// undo values",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:13,Usability,undo,undo,13,"// number of undo arguments",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:6,Usability,undo,undoing,6,"// -1 undoing on, 1 redoing on, 0 nothing in progress",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:43,Usability,Undo,Undo,43,"// fStatus++ after Redo(), fStatus-- after Undo()",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:17,Usability,Undo,Undo,17,"// kTRUE if Redo/Undo methods are new/delete",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:19,Usability,undo,undo,19,"// object to which undo/redo actions applied",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:36,Usability,undo,undo,36,"// encapsulates the information for undo/redo a single action.",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:12,Testability,log,logging,12,"// kTRUE if logging is ON",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:30,Usability,undo,undo,30,"// recorder of operations for undo and redo",MatchSource.CODE_COMMENT,core/base/inc/TQCommand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQConnection.h:23,Integrability,interface,interface,23,"// slot-method calling interface",MatchSource.CODE_COMMENT,core/base/inc/TQConnection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQConnection.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQObject.h:24,Modifiability,variab,variable,24,"// Activate signal with variable argument list.; // For internal use and for var arg EmitVA() in RQ_OBJECT.h.",MatchSource.CODE_COMMENT,core/base/inc/TQObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h:203,Safety,safe,safe,203,"//////////////////////////////////////////////////////////////////////////; // //; // TRedirectOutputGuard //; // //; // This class provides output redirection to a file in a guaranteed //; // exception safe way. Use like this: //; // { //; // TRedirectOutputGuard guard(filelog, mode); //; // ... // do something //; // } //; // when guard goes out of scope output is automatically redirected to //; // the standard units in the TRedirectOutputGuard destructor. //; // The exception mechanism takes care of calling the dtors //; // of local objects so it is exception safe. //; // The 'mode' options follow the fopen write modes convention; default //; // is ""a"". //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TRedirectOutputGuard.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h:569,Safety,safe,safe,569,"//////////////////////////////////////////////////////////////////////////; // //; // TRedirectOutputGuard //; // //; // This class provides output redirection to a file in a guaranteed //; // exception safe way. Use like this: //; // { //; // TRedirectOutputGuard guard(filelog, mode); //; // ... // do something //; // } //; // when guard goes out of scope output is automatically redirected to //; // the standard units in the TRedirectOutputGuard destructor. //; // The exception mechanism takes care of calling the dtors //; // of local objects so it is exception safe. //; // The 'mode' options follow the fopen write modes convention; default //; // is ""a"". //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TRedirectOutputGuard.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h:13,Safety,safe,safe,13,"// Exception safe output redirection",MatchSource.CODE_COMMENT,core/base/inc/TRedirectOutputGuard.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRegexp.h:12,Usability,clear,clear,12,"// Return & clear status",MatchSource.CODE_COMMENT,core/base/inc/TRegexp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRegexp.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRemoteObject.h:147,Integrability,protocol,protocol,147,"//////////////////////////////////////////////////////////////////////////; // //; // TRemoteObject //; // //; // The TRemoteObject class provides protocol for browsing ROOT objects //; // from a remote ROOT session. //; // It contains information on the real remote object as: //; // - Object Properties (i.e. file stat if the object is a TSystemFile) //; // - Object Name //; // - Class Name //; // - TKey Object Name (if the remote object is a TKey) //; // - TKey Class Name (if the remote object is a TKey) //; // - Remote object address //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TRemoteObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRemoteObject.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:196,Security,access,accessible,196,"//////////////////////////////////////////////////////////////////////////; // //; // TROOT //; // //; // The TROOT object is the entry point to the system. //; // The single instance of TROOT is accessible via the global gROOT. //; // Using the gROOT pointer one has access to basically every object //; // created in a ROOT based program. The TROOT object is essentially a //; // container of several lists pointing to the main ROOT objects. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:268,Security,access,access,268,"//////////////////////////////////////////////////////////////////////////; // //; // TROOT //; // //; // The TROOT object is the entry point to the system. //; // The single instance of TROOT is accessible via the global gROOT. //; // Using the gROOT pointer one has access to basically every object //; // created in a ROOT based program. The TROOT object is essentially a //; // container of several lists pointing to the main ROOT objects. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:30,Performance,multi-thread,multi-threading,30,"/// \brief Enable support for multi-threading within the ROOT code; /// in particular, enables the global mutex to make ROOT thread safe/aware.",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:132,Safety,safe,safe,132,"/// \brief Enable support for multi-threading within the ROOT code; /// in particular, enables the global mutex to make ROOT thread safe/aware.",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:34,Performance,multi-thread,multi-threading,34,"/// \brief Enable ROOT's implicit multi-threading for all objects and methods that provide an internal; /// parallelisation mechanism.",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:8,Integrability,synchroniz,synchronize,8,"///< To synchronize multi-threads",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:20,Performance,multi-thread,multi-threads,20,"///< To synchronize multi-threads",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:12,Modifiability,config,configure,12,"///< ROOT ./configure set build options",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:12,Modifiability,config,configure,12,"///< ROOT ./configure detected build features",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:22,Safety,detect,detected,22,"///< ROOT ./configure detected build features",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:20,Modifiability,variab,variables,20,"///< List of global variables",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:13,Integrability,message,message,13,"///< List of message handlers",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:13,Security,secur,security,13,"///< List of security contexts (TSecContext)",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:20,Modifiability,plugin,plugin,20,"///< Keeps track of plugin library handlers",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:22,Integrability,interface,interface,22,"///< Operating System interface",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:71,Testability,Test,TestBit,71,"/// \brief call RecursiveRemove for obj if gROOT is valid; /// and obj.TestBit(kMustCleanup) is true.; /// Note: this reset the kMustCleanup bit to allow; /// harmless multiple call to this function.",MatchSource.CODE_COMMENT,core/base/inc/TROOT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRootIOCtor.h:566,Availability,avail,available,566,"//////////////////////////////////////////////////////////////////////////; // //; // TRootIOCtor //; // //; // Helper class used to mark a constructor to be used by ROOT instead //; // of the default constructor. //; // If rootcint sees in a class declaration of the class MyClass: //; // MyClass(TRootIOCtor*); //; // This constructor will be used instead of the default constructor. //; // //; // Also the pragma: //; // #pragma link C++ ioctortype MyMarker; //; // can be used to tell rootcint that a constuctor taking a MyMarker* //; // should be used whenever available. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TRootIOCtor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRootIOCtor.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:17,Energy Efficiency,allocate,allocated,17,"// largest block allocated",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:75,Testability,test,test,75,"// true if using ROOT's new/delete; //----- Private bits, clients can only test but not change them",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:264,Integrability,rout,routine,264,"//called by TObject's constructor to determine if object was created by call to new; // This technique is necessary as there is one stack per thread; // and we can not rely on comparison with the current stack memory position.; // Note that a false positive (this routine returning true for an object; // created on the stack) requires the previous stack value to have been; // set to exactly kObjectAllocMemValue at exactly the right position (i.e.; // where this object's fUniqueID is located.; // The consequence of a false positive will be visible if and only if; // the object is auto-added to a TDirectory (i.e. TTree, TH*, TGraph,; // TEventList) or explicitly added to the directory by the user; // and; // the TDirectory (or TFile) object is created on the stack *before*; // the object.; // The consequence would be that those objects would be deleted twice, once; // by the TDirectory and once automatically when going out of scope; // (and thus quite visible). A false negative (which is not possible with; // this implementation) would have been a silent memory leak.; // This will be reported by valgrind as uninitialized memory reads for; // object created on the stack, use $ROOTSYS/etc/valgrind-root.supp",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:136,Integrability,rout,routine,136,"// Assign the kIsOnHeap bit in 'bits' based on the pattern seen in uniqueID.; // See Storage::FilledByObjectAlloc for details.; // This routine is marked as inline with attribute noinline so that it never; // inlined and thus can be used in a valgrind suppression file to suppress; // the known/intentional uninitialized memory read but still be a 'quick'; // function call to avoid losing performance at object creation.; // Moving the function into the source file, results in doubling of the; // overhead (compared to inlining)",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:390,Performance,perform,performance,390,"// Assign the kIsOnHeap bit in 'bits' based on the pattern seen in uniqueID.; // See Storage::FilledByObjectAlloc for details.; // This routine is marked as inline with attribute noinline so that it never; // inlined and thus can be used in a valgrind suppression file to suppress; // the known/intentional uninitialized memory read but still be a 'quick'; // function call to avoid losing performance at object creation.; // Moving the function into the source file, results in doubling of the; // overhead (compared to inlining)",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h:377,Safety,avoid,avoid,377,"// Assign the kIsOnHeap bit in 'bits' based on the pattern seen in uniqueID.; // See Storage::FilledByObjectAlloc for details.; // This routine is marked as inline with attribute noinline so that it never; // inlined and thus can be used in a valgrind suppression file to suppress; // the known/intentional uninitialized memory read but still be a 'quick'; // function call to avoid losing performance at object creation.; // Moving the function into the source file, results in doubling of the; // overhead (compared to inlining)",MatchSource.CODE_COMMENT,core/base/inc/TStorage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStorage.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:38,Safety,detect,detecting,38,"// Convert self to upper-case; // For detecting null substrings",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:12,Integrability,interface,interface,12,"// ROOT I/O interface",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:9,Integrability,interface,interface,9,"// C I/O interface",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:132,Availability,error,errors,132,"// Clang 5.0 support for explicit conversion is still inadequate even in c++17 mode.; // (It leads to extraneous ambiguous overload errors)",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:14,Security,hash,hash,14,"// Calculates hash index from any char string.",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:3,Security,Access,Access,3,"// Access to elements of sub-string with bounds checking",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:10,Testability,Log,Logical,10,"// String Logical operators",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:13,Testability,Log,Logical,13,"// SubString Logical operators; // Bool_t operator==(const TSubString &s1, const TSubString &s2);; // Bool_t operator==(const TSubString &s1, const char *s2);; // Bool_t operator==(const TSubString &s1, const TString &s2);",MatchSource.CODE_COMMENT,core/base/inc/TString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStringLong.h:12,Integrability,interface,interface,12,"// ROOT I/O interface",MatchSource.CODE_COMMENT,core/base/inc/TStringLong.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStringLong.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:13,Testability,log,log,13,"///< True if log scale in X",MatchSource.CODE_COMMENT,core/base/inc/TStyle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:13,Testability,log,log,13,"///< True if log scale in y",MatchSource.CODE_COMMENT,core/base/inc/TStyle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:13,Testability,log,log,13,"///< True if log scale in z",MatchSource.CODE_COMMENT,core/base/inc/TStyle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:33,Availability,error,error,33,"///< Size of lines at the end of error bars",MatchSource.CODE_COMMENT,core/base/inc/TStyle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h:31,Availability,error,errors,31,"///< Per cent of bin width for errors along X",MatchSource.CODE_COMMENT,core/base/inc/TStyle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TStyle.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSysEvtHandler.h:17,Availability,mask,mask,17,"//Event interest mask, either bit 1 (read), 2 (write) or both can be set",MatchSource.CODE_COMMENT,core/base/inc/TSysEvtHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSysEvtHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSysEvtHandler.h:12,Availability,mask,mask,12,"//Readiness mask, either bit 1 (read), 2 (write) or both can be set",MatchSource.CODE_COMMENT,core/base/inc/TSysEvtHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSysEvtHandler.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Availability,mask,mask,3,"// mask for file owner permissions",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Availability,mask,mask,3,"// mask for group permissions",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Availability,mask,mask,3,"// mask for permissions for others (not in group)",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Security,password,password,3,"// password",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:11,Performance,cache,cache,11,"// level 2 cache size in KB",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:7,Performance,load,load,7,"// cpu load average over 1 m",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:7,Performance,load,load,7,"// cpu load average over 5 m",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:7,Performance,load,load,7,"// cpu load average over 15 m",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:12,Performance,load,load,12,"// cpu user load in percentage",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:11,Performance,load,load,11,"// cpu sys load in percentage",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:16,Performance,load,load,16,"// cpu user+sys load in percentage",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:7,Performance,load,load,7,"// CPU load information.",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Availability,avail,available,3,"// available RAM in MB",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Performance,cache,cached,3,"// cached RAM in MB",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:3,Performance,cache,cached,3,"// cached swap in MB",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:7,Integrability,message,message,7,"// OOB message inline",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:15,Availability,alive,alive,15,"// keep socket alive",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h:20,Integrability,message,message,20,"// peek at incoming message (receive only)",MatchSource.CODE_COMMENT,core/base/inc/TSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TSystem.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,core/base/inc/TTask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,core/base/inc/TTask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h:4,Deployability,TOGGLE,TOGGLE,4,"// *TOGGLE*",MatchSource.CODE_COMMENT,core/base/inc/TTask.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTask.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:545,Safety,Timeout,Timeout,545,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:644,Safety,Timeout,Timeout,644,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:709,Safety,timeout,timeout,709,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:906,Safety,Timeout,Timeout,906,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:1048,Safety,Timeout,Timeout,1048,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:1098,Safety,timeout,timeout,1098,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TTimer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUri.h:82,Modifiability,variab,variables,82,"// In order to represent the five basic components of an URI,; // we use 7 member variables (authority gets split in 3 parts); //; // foo://user:pass@example.com:8042/over/there?name=ferret#nose; // \_/ \________________________/\_________/ \_________/ \__/; // | | | | |; // scheme authority path query fragment; //; // In many cases we have to distinguish between empty; // TString and undefined value (i.e. delimiter not found).; // Therefore, we use a TString to hold the string value; // and a corresponding Bool_t to store if it is defined or not.; // The Bool_t has precedence.",MatchSource.CODE_COMMENT,core/base/inc/TUri.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUri.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUri.h:28,Security,password,password,28,"// authority/userinfo: user@password, ...",MatchSource.CODE_COMMENT,core/base/inc/TUri.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUri.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h:3,Integrability,protocol,protocol,3,"// protocol: http, ftp, news, root, proof, ...",MatchSource.CODE_COMMENT,core/base/inc/TUrl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h:3,Security,password,password,3,"// password",MatchSource.CODE_COMMENT,core/base/inc/TUrl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h:19,Integrability,protocol,protocols,19,"// list of special protocols",MatchSource.CODE_COMMENT,core/base/inc/TUrl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h:70,Safety,detect,detection,70,"// NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see ROOT-10300",MatchSource.CODE_COMMENT,core/base/inc/TUrl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUrl.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h:186,Usability,GUID,GUIDs,186,"//////////////////////////////////////////////////////////////////////////; // //; // TUUID //; // //; // This class defines a UUID (Universally Unique IDentifier), also //; // known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits //; // long, and if generated according to this algorithm, is either //; // guaranteed to be different from all other UUIDs/GUIDs generated //; // until 3400 A.D. or extremely likely to be different. UUIDs were //; // originally used in the Network Computing System (NCS) and //; // later in the Open Software Foundation's (OSF) Distributed Computing //; // Environment (DCE). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TUUID.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h:365,Usability,GUID,GUIDs,365,"//////////////////////////////////////////////////////////////////////////; // //; // TUUID //; // //; // This class defines a UUID (Universally Unique IDentifier), also //; // known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits //; // long, and if generated according to this algorithm, is either //; // guaranteed to be different from all other UUIDs/GUIDs generated //; // until 3400 A.D. or extremely likely to be different. UUIDs were //; // originally used in the Network Computing System (NCS) and //; // later in the Open Software Foundation's (OSF) Distributed Computing //; // Environment (DCE). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TUUID.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h:27,Safety,avoid,avoid,27,"// Not inlined in order to avoid const casted away warning in user code.",MatchSource.CODE_COMMENT,core/base/inc/TUUID.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVersionCheck.h:80,Modifiability,plugin,plugin,80,/** \class TVersionCheck; \ingroup Base. Used to check if the shared library or plugin is compatible with; the current version of ROOT.; */,MatchSource.CODE_COMMENT,core/base/inc/TVersionCheck.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVersionCheck.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h:122,Integrability,interface,interface,122,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualAuth //; // //; // Abstract interface for client authentication code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualAuth.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h:143,Security,authenticat,authentication,143,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualAuth //; // //; // Abstract interface for client authentication code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualAuth.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h:15,Integrability,interface,interface,15,"// client auth interface",MatchSource.CODE_COMMENT,core/base/inc/TVirtualAuth.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:496,Availability,Avail,Available,496,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:977,Availability,redundant,redundant,977,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:1532,Availability,avail,available,1532,"ing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW really computes"" of the FFTW manual; //; // NOTE: FFTW computes unnormalized transforms, so doing a transform, followed by its; // inverse will give the original array, multiplied by normalization constant; // (transform size(N) for FFT, 2*(N-1) for DCT-I, 2*(N+1) for DST-I, 2*N for; // other sine/cosine transforms); //; // How to use it:; // Call to the static function FFT returns a pointer to a fast fourier transform; // with requested parameters. Call to the static function SineCosine returns a; // pointer to a sine or cosine transform with requested parameters. Example:; // {; // Int_t N = 10; Double_t *in = new Double_t[N];; // TVirtualFFT *fftr2c = TVirtualFFT::FFT(1, &N, ""R2C"");; // fftr2c->SetPoints(in);; // fftr2c->Transform();; // Double_t re, im;; // for (Int_t i=0; i<N; i++); // fftr2c->GetPointComplex(i, re, im);; // ...; // fftr2c->SetPoints(in2);; // ...; // fftr2c->SetPoints(in3);; // ...; // }; // Different options are explained in the ",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:262,Deployability,install,installed,262,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:393,Deployability,install,installation,393,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:121,Integrability,interface,interface,121,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:977,Safety,redund,redundant,977,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:997,Testability,log,logically,997,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:11,Integrability,interface,interface,11,"//abstract interface for FFT calculations",MatchSource.CODE_COMMENT,core/base/inc/TVirtualFFT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:323,Availability,avail,available,323,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualGL //; // //; // The TVirtualGL class is an abstract base class defining the //; // OpenGL interface protocol. All interactions with OpenGL should be //; // done via the global pointer gVirtualGL. If the OpenGL library is //; // available this pointer is pointing to an instance of the TGLKernel //; // class which provides the actual interface to OpenGL. Using this //; // scheme of ABC we can use OpenGL in other parts of the framework //; // without having to link with the OpenGL library in case we don't //; // use the classes using OpenGL. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:185,Integrability,interface,interface,185,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualGL //; // //; // The TVirtualGL class is an abstract base class defining the //; // OpenGL interface protocol. All interactions with OpenGL should be //; // done via the global pointer gVirtualGL. If the OpenGL library is //; // available this pointer is pointing to an instance of the TGLKernel //; // class which provides the actual interface to OpenGL. Using this //; // scheme of ABC we can use OpenGL in other parts of the framework //; // without having to link with the OpenGL library in case we don't //; // use the classes using OpenGL. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:195,Integrability,protocol,protocol,195,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualGL //; // //; // The TVirtualGL class is an abstract base class defining the //; // OpenGL interface protocol. All interactions with OpenGL should be //; // done via the global pointer gVirtualGL. If the OpenGL library is //; // available this pointer is pointing to an instance of the TGLKernel //; // class which provides the actual interface to OpenGL. Using this //; // scheme of ABC we can use OpenGL in other parts of the framework //; // without having to link with the OpenGL library in case we don't //; // use the classes using OpenGL. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:429,Integrability,interface,interface,429,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualGL //; // //; // The TVirtualGL class is an abstract base class defining the //; // OpenGL interface protocol. All interactions with OpenGL should be //; // done via the global pointer gVirtualGL. If the OpenGL library is //; // available this pointer is pointing to an instance of the TGLKernel //; // class which provides the actual interface to OpenGL. Using this //; // scheme of ABC we can use OpenGL in other parts of the framework //; // without having to link with the OpenGL library in case we don't //; // use the classes using OpenGL. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:3,Integrability,Interface,Interface,3,"// Interface for OpenGL painter",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:2,Integrability,Interface,Interface,2,"//Interface for GL manipulator",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h:3,Integrability,Interface,Interface,3,"// Interface for OpenGL manager",MatchSource.CODE_COMMENT,core/base/inc/TVirtualGL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualGL.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMonitoring.h:2,Testability,log,loglevel,2,/*loglevel*/,MatchSource.CODE_COMMENT,core/base/inc/TVirtualMonitoring.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMonitoring.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:206,Availability,avail,available,206,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualMutex //; // //; // This class implements a mutex interface. The actual work is done via //; // TMutex which is available as soon as the thread library is loaded. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:144,Integrability,interface,interface,144,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualMutex //; // //; // This class implements a mutex interface. The actual work is done via //; // TMutex which is available as soon as the thread library is loaded. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:249,Performance,load,loaded,249,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualMutex //; // //; // This class implements a mutex interface. The actual work is done via //; // TMutex which is available as soon as the thread library is loaded. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:194,Safety,safe,safe,194,"//////////////////////////////////////////////////////////////////////////; // //; // TLockGuard //; // //; // This class provides mutex resource management in a guaranteed and //; // exception safe way. Use like this: //; // { //; // TLockGuard guard(mutex); //; // ... // do something //; // } //; // where mutex is a pointer to a TMutex object. //; // When guard goes out of scope the mutex is unlocked in the TLockGuard //; // destructor. The exception mechanism takes care of calling the dtors //; // of local objects so it is exception safe. //; // In contrast to std::lock_guard, TLockGuard constructor expects a //; // pointer, not the mutex object itself. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:542,Safety,safe,safe,542,"//////////////////////////////////////////////////////////////////////////; // //; // TLockGuard //; // //; // This class provides mutex resource management in a guaranteed and //; // exception safe way. Use like this: //; // { //; // TLockGuard guard(mutex); //; // ... // do something //; // } //; // where mutex is a pointer to a TMutex object. //; // When guard goes out of scope the mutex is unlocked in the TLockGuard //; // destructor. The exception mechanism takes care of calling the dtors //; // of local objects so it is exception safe. //; // In contrast to std::lock_guard, TLockGuard constructor expects a //; // pointer, not the mutex object itself. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:13,Safety,safe,safe,13,"// Exception safe locking/unlocking of mutex",MatchSource.CODE_COMMENT,core/base/inc/TVirtualMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h:37,Integrability,interface,interface,37,"// methods related to the old editor interface",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadEditor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h:37,Integrability,interface,interface,37,"// methods related to the new editor interface; //static methods for both interfaces",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadEditor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h:74,Integrability,interface,interfaces,74,"// methods related to the new editor interface; //static methods for both interfaces",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadEditor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h:11,Integrability,interface,interface,11,"//Abstract interface for graphics pad editor",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadEditor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadEditor.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h:18,Integrability,interface,interface,18,"//This part is an interface to X11 pixmap management and to save sub-pads off-screens for OpenGL.; //Currently, must be implemented only for X11/GDI",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h:13,Usability,Clear,Clear,13,"//gVirtualX->Clear()",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h:10,Integrability,interface,interface,10,"//Painter interface for pad.",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPadPainter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPerfStats.h:131,Integrability,interface,interface,131,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualPerfStats //; // //; // Provides the interface for the PROOF internal performance measurment //; // and event tracing. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPerfStats.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPerfStats.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPerfStats.h:164,Performance,perform,performance,164,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualPerfStats //; // //; // Provides the interface for the PROOF internal performance measurment //; // and event tracing. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualPerfStats.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPerfStats.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualQConnection.h:4,Integrability,Mediat,Mediates,4,"/// Mediates the link between the signal and the slot. It decouples the setting of; /// arguments and sending a signal.; ///; /// There are three different modes in argument setting required by TQObject's Emit/EmitVA:; /// setting integral types, setting array types and setting const char*.",MatchSource.CODE_COMMENT,core/base/inc/TVirtualQConnection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualQConnection.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h:58,Usability,simpl,simply,58,"// When they can, TPad::Paint() and TPad::PaintModified() simply; // call the following function:",MatchSource.CODE_COMMENT,core/base/inc/TVirtualViewer3D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h:3,Usability,Simpl,Simple,3,"// Simple object addition - buffer represents a unique single positioned object",MatchSource.CODE_COMMENT,core/base/inc/TVirtualViewer3D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h:75,Testability,log,logical,75,"// Complex object addition - for adding physical objects which have common logical; // shapes. In this case buffer describes template shape (aside from kCore).",MatchSource.CODE_COMMENT,core/base/inc/TVirtualViewer3D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h:12,Integrability,interface,interface,12,"// Abstract interface to 3D viewers",MatchSource.CODE_COMMENT,core/base/inc/TVirtualViewer3D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h:154,Integrability,interface,interface,154,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualX //; // //; // Semi-Abstract base class defining a generic interface to the //; // underlying, low level, graphics system (X11, Win32, MacOS). //; // An instance of TVirtualX itself defines a batch interface to the //; // graphics system. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h:293,Integrability,interface,interface,293,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualX //; // //; // Semi-Abstract base class defining a generic interface to the //; // underlying, low level, graphics system (X11, Win32, MacOS). //; // An instance of TVirtualX itself defines a batch interface to the //; // graphics system. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/TVirtualX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h:25,Integrability,interface,interface,25,"//ABC defining a generic interface to graphics system",MatchSource.CODE_COMMENT,core/base/inc/TVirtualX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualX.h
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:3,Energy Efficiency,Adapt,Adapted,3,"// Adapted from http://stackoverflow.com/questions/3758606/; // how-to-convert-byte-size-into-human-readable-format-in-java; // and http://agentzlerich.blogspot.com/2011/01/converting-to-and-from-human-readable.html; // However those sources use the 'conventional' 'legacy' nomenclature,; // rather than the official Standard Units. See; // http://physics.nist.gov/cuu/Units/binary.html; // and http://www.dr-lex.be/info-stuff/bytecalc.html for example.; ///////////////////////////////////////////////////////////////////////////////; /// Return the size expressed in 'human readable' format.; /// \param bytes the size in bytes to be converted; /// \param si whether to use the SI units or not.; /// \param coeff return the size expressed in the new unit.; /// \param units return a pointer to the string representation of the new unit",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:3,Modifiability,Adapt,Adapted,3,"// Adapted from http://stackoverflow.com/questions/3758606/; // how-to-convert-byte-size-into-human-readable-format-in-java; // and http://agentzlerich.blogspot.com/2011/01/converting-to-and-from-human-readable.html; // However those sources use the 'conventional' 'legacy' nomenclature,; // rather than the official Standard Units. See; // http://physics.nist.gov/cuu/Units/binary.html; // and http://www.dr-lex.be/info-stuff/bytecalc.html for example.; ///////////////////////////////////////////////////////////////////////////////; /// Return the size expressed in 'human readable' format.; /// \param bytes the size in bytes to be converted; /// \param si whether to use the SI units or not.; /// \param coeff return the size expressed in the new unit.; /// \param units return a pointer to the string representation of the new unit",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:58,Testability,log,log,58,"// On some 32bit platforms, the result of; // (int) (std::log(bytes) / std::log(unit); // in the case of bytes==unit ends up surprisingly to be zero; // rather than one, so 'hard code' the result",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:76,Testability,log,log,76,"// On some 32bit platforms, the result of; // (int) (std::log(bytes) / std::log(unit); // in the case of bytes==unit ends up surprisingly to be zero; // rather than one, so 'hard code' the result",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:662,Availability,failure,failure,662,"///////////////////////////////////////////////////////////////////////////////; /// Convert strings like the following into byte counts; /// 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB; /// with some amount of forgiveness baked into the parsing.; /// For this routine we use the official SI unit where the [i] is reserved; /// for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes.; /// \param str the string to be parsed; /// \param value will be updated with the result if and only if the parse is successful and does not overflow for the type of value.; /// \return return a EFromHumanReadableSize enum value indicating the success or failure of the parse.; ///",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:472,Deployability,update,updated,472,"///////////////////////////////////////////////////////////////////////////////; /// Convert strings like the following into byte counts; /// 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB; /// with some amount of forgiveness baked into the parsing.; /// For this routine we use the official SI unit where the [i] is reserved; /// for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes.; /// \param str the string to be parsed; /// \param value will be updated with the result if and only if the parse is successful and does not overflow for the type of value.; /// \return return a EFromHumanReadableSize enum value indicating the success or failure of the parse.; ///",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:349,Energy Efficiency,power,power,349,"///////////////////////////////////////////////////////////////////////////////; /// Convert strings like the following into byte counts; /// 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB; /// with some amount of forgiveness baked into the parsing.; /// For this routine we use the official SI unit where the [i] is reserved; /// for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes.; /// \param str the string to be parsed; /// \param value will be updated with the result if and only if the parse is successful and does not overflow for the type of value.; /// \return return a EFromHumanReadableSize enum value indicating the success or failure of the parse.; ///",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:265,Integrability,rout,routine,265,"///////////////////////////////////////////////////////////////////////////////; /// Convert strings like the following into byte counts; /// 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB; /// with some amount of forgiveness baked into the parsing.; /// For this routine we use the official SI unit where the [i] is reserved; /// for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes.; /// \param str the string to be parsed; /// \param value will be updated with the result if and only if the parse is successful and does not overflow for the type of value.; /// \return return a EFromHumanReadableSize enum value indicating the success or failure of the parse.; ///",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:105,Availability,error,error,105,"// Skip any remaining white space; // while (cur<size && isspace(str[cur])) ++cur;; // Do not:; // Parse error on anything but a null terminator; // if (cur<size) return -1;",MatchSource.CODE_COMMENT,core/base/inc/ROOT/StringConv.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TErrorDefaultHandler.hxx:60,Availability,error,error,60,"/// Destructs resources that are taken by using the default error handler.; /// This function is called during the destruction of gROOT.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TErrorDefaultHandler.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TErrorDefaultHandler.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:791,Availability,avail,available,791,"//////////////////////////////////////////////////////////////////////////; ///; /// \class ROOT::TExecutorCRTP; /// \brief This class defines an interface to execute the same task; /// multiple times, possibly in parallel and with different arguments every; /// time.; ///; /// ###ROOT::TExecutorCRTP<SubC>::Map; /// The two possible usages of the Map method are:\n; /// * `Map(F func, unsigned nTimes)`: func is executed nTimes with no arguments; /// * `Map(F func, T& args)`: func is executed on each element of the collection of arguments args; ///; /// The Map function forwards the call to MapImpl, to be implemented by the child classes.; ///; /// For either signature, func is executed as many times as needed by a pool of; /// n workers, where n typically defaults to the number of available cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes; /// never delete what they return, they simply forget it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the argu",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:2049,Energy Efficiency,Reduce,Reduce,2049,"ver delete what they return, they simply forget it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of methods combine all elements from a std::vector into a single value.; /// \param redfunc; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes an std::vector and combines all its elements into a single result.\n; /// \endparblock; /// \param [args]; /// \parblock; /// a standard vector\n; /// \endparblock; ///; /// ### ROOT::TExecutorCRTP<SubC>::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects returned by the corresponding Map execution to ""squash"" them; /// into a single object. This function should be independent of the size of; /// the vector returned by Map due to optimization of the number of chunks.; ///; /// #### Examples:; /// ~~~{.cpp}; /// Generate 1 ten times and sum those tens; /// root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const s",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:3248,Energy Efficiency,Reduce,Reduce,3248,"ction to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of methods combine all elements from a std::vector into a single value.; /// \param redfunc; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes an std::vector and combines all its elements into a single result.\n; /// \endparblock; /// \param [args]; /// \parblock; /// a standard vector\n; /// \endparblock; ///; /// ### ROOT::TExecutorCRTP<SubC>::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects returned by the corresponding Map execution to ""squash"" them; /// into a single object. This function should be independent of the size of; /// the vector returned by Map due to optimization of the number of chunks.; ///; /// #### Examples:; /// ~~~{.cpp}; /// Generate 1 ten times and sum those tens; /// root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); /// root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ///; /// Create 10 histograms and merge them into one; /// root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ///; /// ~~~; ///; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:3503,Energy Efficiency,Reduce,ReduceObjects,3503,"ction to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of methods combine all elements from a std::vector into a single value.; /// \param redfunc; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes an std::vector and combines all its elements into a single result.\n; /// \endparblock; /// \param [args]; /// \parblock; /// a standard vector\n; /// \endparblock; ///; /// ### ROOT::TExecutorCRTP<SubC>::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects returned by the corresponding Map execution to ""squash"" them; /// into a single object. This function should be independent of the size of; /// the vector returned by Map due to optimization of the number of chunks.; ///; /// #### Examples:; /// ~~~{.cpp}; /// Generate 1 ten times and sum those tens; /// root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); /// root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ///; /// Create 10 histograms and merge them into one; /// root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ///; /// ~~~; ///; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:146,Integrability,interface,interface,146,"//////////////////////////////////////////////////////////////////////////; ///; /// \class ROOT::TExecutorCRTP; /// \brief This class defines an interface to execute the same task; /// multiple times, possibly in parallel and with different arguments every; /// time.; ///; /// ###ROOT::TExecutorCRTP<SubC>::Map; /// The two possible usages of the Map method are:\n; /// * `Map(F func, unsigned nTimes)`: func is executed nTimes with no arguments; /// * `Map(F func, T& args)`: func is executed on each element of the collection of arguments args; ///; /// The Map function forwards the call to MapImpl, to be implemented by the child classes.; ///; /// For either signature, func is executed as many times as needed by a pool of; /// n workers, where n typically defaults to the number of available cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes; /// never delete what they return, they simply forget it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the argu",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:1729,Integrability,wrap,wrapped,1729," func is executed as many times as needed by a pool of; /// n workers, where n typically defaults to the number of available cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes; /// never delete what they return, they simply forget it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of methods combine all elements from a std::vector into a single value.; /// \param redfunc; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes an std::vector and combines all its elements into a single result.\n; /// \endparblock; /// \param [args]; /// \parblock; /// a standard vector\n; /// \endparblock; ///; /// ### ROOT::TExecutorCRTP<SubC>::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects retu",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:2851,Performance,optimiz,optimization,2851,"ction to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of methods combine all elements from a std::vector into a single value.; /// \param redfunc; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes an std::vector and combines all its elements into a single result.\n; /// \endparblock; /// \param [args]; /// \parblock; /// a standard vector\n; /// \endparblock; ///; /// ### ROOT::TExecutorCRTP<SubC>::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects returned by the corresponding Map execution to ""squash"" them; /// into a single object. This function should be independent of the size of; /// the vector returned by Map due to optimization of the number of chunks.; ///; /// #### Examples:; /// ~~~{.cpp}; /// Generate 1 ten times and sum those tens; /// root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); /// root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ///; /// Create 10 histograms and merge them into one; /// root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ///; /// ~~~; ///; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:1108,Usability,simpl,simply,1108,"//; /// \class ROOT::TExecutorCRTP; /// \brief This class defines an interface to execute the same task; /// multiple times, possibly in parallel and with different arguments every; /// time.; ///; /// ###ROOT::TExecutorCRTP<SubC>::Map; /// The two possible usages of the Map method are:\n; /// * `Map(F func, unsigned nTimes)`: func is executed nTimes with no arguments; /// * `Map(F func, T& args)`: func is executed on each element of the collection of arguments args; ///; /// The Map function forwards the call to MapImpl, to be implemented by the child classes.; ///; /// For either signature, func is executed as many times as needed by a pool of; /// n workers, where n typically defaults to the number of available cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes; /// never delete what they return, they simply forget it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of meth",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:171,Energy Efficiency,Reduce,Reduce,171,"// MapReduce; // The trailing return types check at compile time that func is compatible with the type of the arguments.; // A static_assert check in TExecutorCRTP<SubC>::Reduce is used to check that redfunc is compatible with the type returned by func",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:392,Integrability,wrap,wrapping,392,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function without arguments several times.; ///; /// \param func Function to be executed.; /// \param nTimes Number of times function should be called.; /// \return A vector with the results of the function calls.; /// Functions that take arguments can be executed (with; /// fixed arguments) by wrapping them in a lambda or with std::bind.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:192,Energy Efficiency,Reduce,Reduce,192,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce).; ///; /// \param func Function to be executed.; /// \param nTimes Number of times function should be called.; /// \return A vector with the results of the function calls.; /// \param redfunc Reduction function to combine the results of the calls to `func`. Must return the same type as `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:187,Energy Efficiency,Reduce,Reduce,187,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce).; ///; /// \param func Function to be executed. Must take an element of the sequence passed assecond argument as a parameter.; /// \param args Sequence of indexes to execute `func` on.; /// \param redfunc Reduction function to combine the results of the calls to `func`. Must return the same type as `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:201,Energy Efficiency,Reduce,Reduce,201,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce).; ///; /// \param func Function to be executed on the elements of the initializer_list passed as second parameter.; /// \param args initializer_list for a vector to apply `func` on.; /// \param redfunc Reduction function to combine the results of the calls to `func`. Must return the same type as `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:190,Energy Efficiency,Reduce,Reduce,190,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Vector of elements passed as an argument to `func`.; /// \param redfunc Reduction function to combine the results of the calls to `func`. Must return the same type as `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:201,Energy Efficiency,Reduce,Reduce,201,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Immutable vector of elements passed as an argument to `func`.; /// \param redfunc Reduction function to combine the results of the calls to `func`. Must return the same type as `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:202,Energy Efficiency,Reduce,Reduce,202,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Vector of elements passed as an argument to `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:123,Modifiability,inherit,inheriting,123,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Vector of elements passed as an argument to `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:213,Energy Efficiency,Reduce,Reduce,213,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Immutable vector of elements passed as an argument to `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:123,Modifiability,inherit,inheriting,123,"//////////////////////////////////////////////////////////////////////////; /// \brief Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce).; ///; /// \param func Function to be executed on the elements of the vector passed as second parameter.; /// \param args Immutable vector of elements passed as an argument to `func`.; /// \return A value result of ""reducing"" the vector returned by the Map operation into a single object.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:88,Energy Efficiency,Reduce,Reduce,88,"//////////////////////////////////////////////////////////////////////////; /// \brief ""Reduce"" an std::vector into a single object by using the object's Merge method.; ///; /// \param mergeObjs A vector of ROOT objects implementing the Merge method; /// \return An object result of merging the vector elements into one.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:88,Energy Efficiency,Reduce,Reduce,88,"//////////////////////////////////////////////////////////////////////////; /// \brief ""Reduce"" an std::vector into a single object by passing a; /// function as the second argument defining the reduction operation.; ///; /// \param objs A vector of elements to combine.; /// \param redfunc Reduction function to combine the elements of the vector `objs`; /// \return A value result of combining the vector elements into a single object of the same type.",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:22,Energy Efficiency,reduce,reduce,22,"// check we can apply reduce to objs",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TExecutorCRTP.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TSequentialExecutor.hxx:233,Energy Efficiency,Reduce,Reduce,233,"// MapReduce; // the late return types also check at compile-time whether redfunc is compatible with func,; // other than checking that func is compatible with the type of arguments.; // a static_assert check in TSequentialExecutor::Reduce is used to check that redfunc is compatible with the type returned by func",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TSequentialExecutor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TSequentialExecutor.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TSequentialExecutor.hxx:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce; //",MatchSource.CODE_COMMENT,core/base/inc/ROOT/TSequentialExecutor.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TSequentialExecutor.hxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx:54,Testability,test,test,54,"//; // Bitmap functions. Set bit b in the map and; // test bit b to see if it was set previously.; //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/src/Match.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx:8,Usability,simpl,simple,8,"// Do a simple match. Note that omatch() fails if there's still; // something in pat but we're at end of string.",MatchSource.CODE_COMMENT,core/base/src/Match.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx:184,Availability,failure,failure,184,"////////////////////////////////////////////////////////////////////////////////; /// Match one pattern element, pointed at by pat, against the character at; /// **strp. Return 0 on a failure, 1 on success. *strp is advanced to skip; /// over the matched character on a successful match. Closure is handled one; /// level up by patcmp().; ///; /// ""start"" points at the character at the left edge of the line. This might; /// not be the same thing as *strp if the search is starting in the middle; /// of the string. An end-of- line anchor matches end of string only.",MatchSource.CODE_COMMENT,core/base/src/Match.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Match.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/root-argparse.py:195,Availability,avail,available,195,"""""""ROOTs Object-Oriented Technologies.\n; root is an interactive interpreter of C++ code. It uses the ROOT framework. For more information on ROOT, please refer to\n; An extensive Users Guide is available from that site (see below).; """"""",MatchSource.CODE_COMMENT,core/base/src/root-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/root-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/base/src/root-argparse.py:186,Usability,Guid,Guide,186,"""""""ROOTs Object-Oriented Technologies.\n; root is an interactive interpreter of C++ code. It uses the ROOT framework. For more information on ROOT, please refer to\n; An extensive Users Guide is available from that site (see below).; """"""",MatchSource.CODE_COMMENT,core/base/src/root-argparse.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/root-argparse.py
https://github.com/root-project/root/tree/v6-32-06/core/base/src/Stringio.cxx:9,Availability,avail,available,9,"// Space available (+1 for terminator)",MatchSource.CODE_COMMENT,core/base/src/Stringio.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Stringio.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/Stringio.cxx:27,Availability,failure,failure,27,"// Check for EOF or stream failure",MatchSource.CODE_COMMENT,core/base/src/Stringio.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/Stringio.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:515,Integrability,interface,interfaces,515,"// @(#)root/base:$Id$; // Author: Fons Rademakers 22/12/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TApplication; \ingroup Base. This class creates the ROOT Application Environment that interfaces; to the windowing system eventloop and eventhandlers.; This class must be instantiated exactly once in any given; application. Normally the specific application class inherits from; TApplication (see TRint).; */",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:693,Modifiability,inherit,inherits,693,"// @(#)root/base:$Id$; // Author: Fons Rademakers 22/12/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TApplication; \ingroup Base. This class creates the ROOT Application Environment that interfaces; to the windowing system eventloop and eventhandlers.; This class must be instantiated exactly once in any given; application. Normally the specific application class inherits from; TApplication (see TRint).; */",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:11,Availability,avail,available,11,"// List of available applications; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:88,Availability,down,down,88,"// Insure that the files, canvases and sockets are closed.; // If we get here, the tear down has started. We have no way to know what; // has or has not yet been done. In particular on Ubuntu, this was called; // after the function static in TSystem.cxx has been destructed. So we; // set gROOT in its end-of-life mode which prevents executing code, like; // autoloading libraries (!) that is pointless ...",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:886,Availability,avail,available,886,"////////////////////////////////////////////////////////////////////////////////; /// Create an application environment. The application environment; /// provides an interface to the graphics system and eventloop; /// (be it X, Windows, macOS or BeOS). After creating the application; /// object start the eventloop by calling its Run() method. The command; /// line options recognized by TApplication are described in the GetOptions(); /// method. The recognized options are removed from the argument array.; /// The original list of argument options can be retrieved via the Argc(); /// and Argv() methods. The appClassName ""proofserv"" is reserved for the; /// PROOF system. The ""options"" and ""numOptions"" arguments are not used,; /// except if you want to by-pass the argv processing by GetOptions(); /// in which case you should specify numOptions<0. All options will; /// still be available via the Argv() method for later use.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:166,Integrability,interface,interface,166,"////////////////////////////////////////////////////////////////////////////////; /// Create an application environment. The application environment; /// provides an interface to the graphics system and eventloop; /// (be it X, Windows, macOS or BeOS). After creating the application; /// object start the eventloop by calling its Run() method. The command; /// line options recognized by TApplication are described in the GetOptions(); /// method. The recognized options are removed from the argument array.; /// The original list of argument options can be retrieved via the Argc(); /// and Argv() methods. The appClassName ""proofserv"" is reserved for the; /// PROOF system. The ""options"" and ""numOptions"" arguments are not used,; /// except if you want to by-pass the argv processing by GetOptions(); /// in which case you should specify numOptions<0. All options will; /// still be available via the Argv() method for later use.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:45,Security,access,accessed,45,"// copy command line arguments, can be later accessed via Argc() and Argv()",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce the risk of the files or sockets being closed after the; // end of 'main' (or more exactly before the library start being; // unloaded).",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:14,Safety,risk,risk,14,"// Reduce the risk of the files or sockets being closed after the; // end of 'main' (or more exactly before the library start being; // unloaded).",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:198,Performance,load,loaded,198,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the graphics environment.; /// If @param only_web is specified, only web-related part of graphics is loaded",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:3,Performance,Load,Load,3,"// Load the graphics related libraries",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:10,Performance,load,load,10,"// Try to load TrueType font renderer. Only try to load if not in batch; // mode and Root.UseTTFonts is true and Root.TTFontPath exists. Abort silently; // if libttf or libGX11TTF are not found in $ROOTSYS/lib or $ROOTSYS/ttf/lib.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:51,Performance,load,load,51,"// Try to load TrueType font renderer. Only try to load if not in batch; // mode and Root.UseTTFonts is true and Root.TTFontPath exists. Abort silently; // if libttf or libGX11TTF are not found in $ROOTSYS/lib or $ROOTSYS/ttf/lib.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:137,Safety,Abort,Abort,137,"// Try to load TrueType font renderer. Only try to load if not in batch; // mode and Root.UseTTFonts is true and Root.TTFontPath exists. Abort silently; // if libttf or libGX11TTF are not found in $ROOTSYS/lib or $ROOTSYS/ttf/lib.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:13,Integrability,depend,dependent,13,"// Create WM dependent application environment",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:46,Energy Efficiency,allocate,allocated,46,"// Create the canvas colors early so they are allocated before; // any color table expensive bitmaps get allocated in GUI routines (like; // creation of XPM bitmaps).",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:105,Energy Efficiency,allocate,allocated,105,"// Create the canvas colors early so they are allocated before; // any color table expensive bitmaps get allocated in GUI routines (like; // creation of XPM bitmaps).",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:122,Integrability,rout,routines,122,"// Create the canvas colors early so they are allocated before; // any color table expensive bitmaps get allocated in GUI routines (like; // creation of XPM bitmaps).",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:40,Integrability,depend,dependent,40,"// Hook for further initializing the WM dependent application environment",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear list containing macro files passed as program arguments.; /// This method is called from TRint::Run() to ensure that the macro; /// files are only executed the first time Run() is called.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:60,Modifiability,config,configured,60,"// EnableImplicitMT() only enables thread safety if IMT was configured;; // enable thread safety even with IMT off:",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:42,Safety,safe,safety,42,"// EnableImplicitMT() only enables thread safety if IMT was configured;; // enable thread safety even with IMT off:",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:90,Safety,safe,safety,90,"// EnableImplicitMT() only enables thread safety if IMT was configured;; // enable thread safety even with IMT off:",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:89,Availability,down,down,89,"// used when started by front-end program to signal that; // splash screen can be popped down (TRint::PrintLogo())",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:189,Integrability,rout,routine,189,"////////////////////////////////////////////////////////////////////////////////; /// Handle idle timeout. When this timer expires the registered idle command; /// will be executed by this routine and a signal will be emitted.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:98,Safety,timeout,timeout,98,"////////////////////////////////////////////////////////////////////////////////; /// Handle idle timeout. When this timer expires the registered idle command; /// will be executed by this routine and a signal will be emitted.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:314,Integrability,message,message,314,"/////////////////////////////////////////////////////////////////////////////////; /// The function generates and executes a command that loads the Doxygen URL in; /// a browser. It works for Mac, Windows and Linux. In the case of Linux, the; /// function also checks if the DISPLAY is set. If it isn't, a warning message; /// and the URL will be displayed on the terminal.; ///; /// \param[in] url web page to be displayed in a browser",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:138,Performance,load,loads,138,"/////////////////////////////////////////////////////////////////////////////////; /// The function generates and executes a command that loads the Doxygen URL in; /// a browser. It works for Mac, Windows and Linux. In the case of Linux, the; /// function also checks if the DISPLAY is set. If it isn't, a warning message; /// and the URL will be displayed on the terminal.; ///; /// \param[in] url web page to be displayed in a browser",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:204,Usability,guid,guide,204,"////////////////////////////////////////////////////////////////////////////////; /// The function generates a URL address for class or namespace (scopeName).; /// This is the URL to the online reference guide, generated by Doxygen.; /// With the enumeration ""EUrl"" we pick which case we need - the one for; /// class (kURLforClass) or the one for namespace (kURLforNameSpace).; ///; /// \param[in] scopeName the name of the class or the namespace; /// \param[in] scopeType the enumerator for class or namespace",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:22,Deployability,patch,patches,22,"R""(.*/(v\d)-(\d\d)-00-patches)""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:401,Safety,avoid,avoid,401,"////////////////////////////////////////////////////////////////////////////////; /// The function returns a TString with the arguments of a method from the; /// scope (scopeName), but modified with respect to Doxygen syntax - spacing; /// around special symbols and adding the missing scopes (""std::"").; /// ""FormatMethodArgsForDoxygen"" works for functions defined inside namespaces; /// as well. We avoid looking up twice for the TFunction by passing ""func"".; ///; /// \param[in] scopeName the name of the class/namespace/struct; /// \param[in] func pointer to the method",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:228,Usability,guid,guide,228,"////////////////////////////////////////////////////////////////////////////////; /// The function generates a URL for ""dataMemberName"" defined in ""scopeName"".; /// It returns a TString with the URL used in the online reference guide,; /// generated with Doxygen. For data members the URL consist of 2 parts -; /// URL for ""scopeName"" and a part for ""dataMemberName"".; /// For enumerator, the URL could be separated into 3 parts - URL for; /// ""scopeName"", part for the enumeration and a part for the enumerator.; ///; /// \param[in] scopeName the name of the class/namespace/struct; /// \param[in] dataMemberName the name of the data member/enumerator; /// \param[in] dataMember pointer to the data member/enumerator; /// \param[in] scopeType enumerator to the scope type",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:53,Security,hash,hashed,53,"// If we work with data members, we have to append a hashed with MD5 text, consisting of:; // ""Type ClassName::DataMemberNameDataMemberName(arguments)"".; // We first get the type of the data member.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:31,Security,hash,hashed,31,"// Then we append ""#a"" and the hashed text.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:103,Security,hash,hashed,103,"// If the enumeration is not anonymous we put ""scopeName::Enumeration"" in a TString,; // which will be hashed with MD5 later.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:31,Security,hash,hashed,31,"// The next part of the URL is hashed ""@ scopeName::EnumeratorEnumerator"".",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:30,Security,hash,hashed,30,"// Then we have to append the hashed text for the enumerator.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:35,Security,hash,hashed,35,"// We append ""a"" and then the next hashed text.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:134,Security,hash,hashed,134,"////////////////////////////////////////////////////////////////////////////////; /// The function generates URL for enumeration. The hashed text consist of:; /// ""Class::EnumerationEnumeration"".; ///; /// \param[in] scopeName the name of the class/namespace/struct; /// \param[in] enumeration the name of the enumeration; /// \param[in] scopeType enumerator for class/namespace/struct",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:57,Security,hash,hashed,57,"// The URL consists of URL for the ""scopeName"", ""#a"" and hashed as MD5 text.; // The text is ""Class::EnumerationEnumeration.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:39,Security,hash,hashed,39,"// Then we have to append ""#a"" and the hashed text.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:321,Security,hash,hashed,321,"////////////////////////////////////////////////////////////////////////////////; /// The function generates URL for any member function (including Constructor/; /// Destructor) of ""scopeName"". Doxygen first generates the URL for the scope.; /// We do that with the help of ""UrlGenerator"". Then we append ""#a"" and a; /// hashed with MD5 text. It consists of:; /// ""ReturnType ScopeName::MethodNameMethodName(Method arguments)"".; /// For constructor/destructor of a class, the return type is not appended.; ///; /// \param[in] scopeName the name of the class/namespace/struct; /// \param[in] methodName the name of the method from the scope; /// \param[in] func pointer to the method; /// \param[in] methodType enumerator for method or constructor; /// \param[in] scopeType enumerator for class/namespace/struct",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:17,Security,hash,hashed,17,"// We append the hashed text.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:117,Deployability,install,installation,117,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// It gets the ROOT installation setup as TString; ///; /// \return a string with several lines; ///",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:77,Deployability,release,release,77,"// If branch and commit are identical - e.g. ""v5-34-18"" - then we have; // a release build. Else specify the git hash this build was made from.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:113,Security,hash,hash,113,"// If branch and commit are identical - e.g. ""v5-34-18"" - then we have; // a release build. Else specify the git hash this build was made from.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:31,Energy Efficiency,efficient,efficient,31,"R""(___; _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; )""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:103,Energy Efficiency,efficient,efficient-and-successful-posting,103,"R""(___; _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; )""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:259,Usability,clear,clear,259,"R""(___; _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; )""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:357,Usability,clear,clear,357,"R""(___; _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; )""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:85,Availability,down,download,85,"R""(; <!--; Please specify also how you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; <!--; Add any other context about the problem here.; -->)""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:67,Deployability,install,install,67,"R""(; <!--; Please specify also how you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; <!--; Add any other context about the problem here.; -->)""",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:325,Availability,error,error,325,"////////////////////////////////////////////////////////////////////////////////; /// It opens the online reference guide, generated with Doxygen, for the; /// chosen scope (class/namespace/struct) or member (method/function/; /// data member/enumeration/enumerator. If the user types incorrect value,; /// it will return an error or warning.; ///; /// \param[in] strippedClass the scope or scope::member",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:116,Usability,guid,guide,116,"////////////////////////////////////////////////////////////////////////////////; /// It opens the online reference guide, generated with Doxygen, for the; /// chosen scope (class/namespace/struct) or member (method/function/; /// data member/enumeration/enumerator. If the user types incorrect value,; /// it will return an error or warning.; ///; /// \param[in] strippedClass the scope or scope::member",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:3,Availability,Error,Error,3,"// Error out if ""strippedClass"" is un-scoped (and it's not a class, see `TClass::GetClass(strippedClass)` above).; // TODO: Global functions.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:37,Availability,avail,available,37,"// We have enumerators for the three available cases - class, namespace and struct.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:11,Integrability,message,message,11,"// Warning message will appear if the user types the function name incorrectly; // or the function is not a member function of ""cl"" or any of its base classes.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:166,Usability,guid,guide,166,"////////////////////////////////////////////////////////////////////////////////; /// The function lists useful commands ("".help"") or opens the online reference; /// guide, generated with Doxygen ("".help scope"" or "".help scope::member"").; /// \note You can use "".?"" as the short version of "".help""; /// \param[in] line command from the command line",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:32,Modifiability,extend,extended,32,"// If the user wants to use the extended "".help scopeName"" command to access; // the online reference guide, we first check if the command starts correctly.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:70,Security,access,access,70,"// If the user wants to use the extended "".help scopeName"" command to access; // the online reference guide, we first check if the command starts correctly.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:102,Usability,guid,guide,102,"// If the user wants to use the extended "".help scopeName"" command to access; // the online reference guide, we first check if the command starts correctly.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:41,Modifiability,extend,extended,41,"// We call the function what handles the extended "".help scopeName"" command.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:4,Performance,Load,Load,4,"/// Load shared libs necessary for graphics. These libraries are only; /// loaded when gROOT->IsBatch() is kFALSE.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:75,Performance,load,loaded,75,"/// Load shared libs necessary for graphics. These libraries are only; /// loaded when gROOT->IsBatch() is kFALSE.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:260,Modifiability,variab,variable,260,"////////////////////////////////////////////////////////////////////////////////; /// Parse the content of a line starting with "".R"" (already stripped-off); /// The format is; /// ~~~ {.cpp}; /// [user@]host[:dir] [-l user] [-d dbg] [script]; /// ~~~; /// The variable 'dir' is the remote directory to be used as working dir.; /// The username can be specified in two ways, ""-l"" having the priority; /// (as in ssh).; /// A 'dbg' value > 0 gives increasing verbosity.; /// The last argument 'script' allows to specify an alternative script to; /// be executed remotely to startup the session.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:278,Modifiability,variab,variable,278,"////////////////////////////////////////////////////////////////////////////////; /// Process the content of a line starting with "".R"" (already stripped-off); /// The format is; /// ~~~ {.cpp}; /// [user@]host[:dir] [-l user] [-d dbg] [script] | [host] -close; /// ~~~; /// The variable 'dir' is the remote directory to be used as working dir.; /// The username can be specified in two ways, ""-l"" having the priority; /// (as in ssh).; /// A 'dbg' value > 0 gives increasing verbosity.; /// The last argument 'script' allows to specify an alternative script to; /// be executed remotely to startup the session.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:12,Performance,load,loaded,12,"// List the loaded libraries",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:37,Usability,simpl,simple,37,"// strip-off leading blanks; // very simple minded pre-processor parsing, only works in case macro file; // starts with ""#ifndef __CINT__"". In that case everything till next; // ""#else"" or ""#endif"" will be skipped.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:127,Integrability,depend,dependent,127,"////////////////////////////////////////////////////////////////////////////////; /// Main application eventloop. Calls system dependent eventloop via gSystem.",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:98,Availability,echo,echo,98,"////////////////////////////////////////////////////////////////////////////////; /// Set console echo mode:; ///; /// - mode = kTRUE - echo input symbols; /// - mode = kFALSE - noecho input symbols",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:136,Availability,echo,echo,136,"////////////////////////////////////////////////////////////////////////////////; /// Set console echo mode:; ///; /// - mode = kTRUE - echo input symbols; /// - mode = kFALSE - noecho input symbols",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:91,Availability,avail,available,91,"////////////////////////////////////////////////////////////////////////////////; /// Show available sessions",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:122,Availability,avail,available,122,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning the list of available applications",MatchSource.CODE_COMMENT,core/base/src/TApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAtt3D.cxx:132,Integrability,interface,interface,132,"////////////////////////////////////////////////////////////////////////////////; /// Set total size of this 3D object (used by X3D interface).",MatchSource.CODE_COMMENT,core/base/src/TAtt3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAtt3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttAxis.cxx:206,Performance,optimiz,optimized,206,"////////////////////////////////////////////////////////////////////////////////; /// Set the number of divisions for this axis.; ///; /// - if optim = kTRUE (default), the number of divisions will be; /// optimized around the specified value.; /// - if optim = kFALSE, or n < 0, the axis will be forced to use; /// exactly n divisions.; ///~~~ {.cpp}; /// n = n1 + 100*n2 + 10000*n3; ///~~~; /// Where n1 is the number of primary divisions,; /// n2 is the number of second order divisions and; /// n3 is the number of third order divisions.; ///; /// If the number of divisions is ""optimized"" (see above) n1, n2, n3 are; /// maximum values.; ///; /// Examples:; ///; /// - ndiv = 0: no tick marks.; /// - ndiv = 2: 2 divisions, one tick mark in the middle of the axis.; /// - ndiv = 510: 10 primary divisions, 5 secondary divisions.; /// - ndiv = -10: exactly 10 primary divisions.",MatchSource.CODE_COMMENT,core/base/src/TAttAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttAxis.cxx:583,Performance,optimiz,optimized,583,"////////////////////////////////////////////////////////////////////////////////; /// Set the number of divisions for this axis.; ///; /// - if optim = kTRUE (default), the number of divisions will be; /// optimized around the specified value.; /// - if optim = kFALSE, or n < 0, the axis will be forced to use; /// exactly n divisions.; ///~~~ {.cpp}; /// n = n1 + 100*n2 + 10000*n3; ///~~~; /// Where n1 is the number of primary divisions,; /// n2 is the number of second order divisions and; /// n3 is the number of third order divisions.; ///; /// If the number of divisions is ""optimized"" (see above) n1, n2, n3 are; /// maximum values.; ///; /// Examples:; ///; /// - ndiv = 0: no tick marks.; /// - ndiv = 2: 2 divisions, one tick mark in the middle of the axis.; /// - ndiv = 510: 10 primary divisions, 5 secondary divisions.; /// - ndiv = -10: exactly 10 primary divisions.",MatchSource.CODE_COMMENT,core/base/src/TAttAxis.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttAxis.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate and prepare for incremental filling.",MatchSource.CODE_COMMENT,core/base/src/TAttBBox.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox.cxx:86,Testability,Assert,Assert,86,"////////////////////////////////////////////////////////////////////////////////; /// Assert extents of all sides of the bounding-box are at least epsilon.",MatchSource.CODE_COMMENT,core/base/src/TAttBBox.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox2D.cxx:123,Modifiability,inherit,inheriting,123,"/** \class TAttBBox2D; \ingroup Base; \ingroup GraphicsAtt. Abstract base class for elements drawn in the editor.; Classes inheriting from TAttBBox2D implementing the TAttBBox2D; virtual classes, and using TPad::ShowGuideLines in ExecuteEvent; will automatically get the guide lines drawn when moved in the pad.; All methods work with pixel coordinates.; */; ////////////////////////////////////////////////////////////////////////////////; // TAttBBox2D destructor.",MatchSource.CODE_COMMENT,core/base/src/TAttBBox2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox2D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox2D.cxx:271,Usability,guid,guide,271,"/** \class TAttBBox2D; \ingroup Base; \ingroup GraphicsAtt. Abstract base class for elements drawn in the editor.; Classes inheriting from TAttBBox2D implementing the TAttBBox2D; virtual classes, and using TPad::ShowGuideLines in ExecuteEvent; will automatically get the guide lines drawn when moved in the pad.; All methods work with pixel coordinates.; */; ////////////////////////////////////////////////////////////////////////////////; // TAttBBox2D destructor.",MatchSource.CODE_COMMENT,core/base/src/TAttBBox2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttBBox2D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx:1174,Availability,avail,available,1174,". It holds all the fill area; attributes. ## Fill Area attributes; Fill Area attributes are:. - [Fill Area color](\ref ATTFILL1); - [Fill Area style](\ref ATTFILL2). \anchor ATTFILL1; ## Fill Area color; The fill area color is a color index (integer) pointing in the ROOT; color table.; The fill area color of any class inheriting from `TAttFill` can; be changed using the method `SetFillColor` and retrieved using the; method `GetFillColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetFillColorAlpha()`, allows to set a transparent color.; In the following example the fill color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetFillColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag; `OpenGL.CanvasPreferGL` is set to `1` in `$ROOTSYS/etc/system.rootrc`, or on Mac; with the Cocoa backend.; On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. ### The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the Color Wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception; Touching color chips have the same hue, but with different brightness and vividness. Colors of slightly different hues _clash_. If you intend to display; colors of the same hue together, you sh",MatchSource.CODE_COMMENT,core/base/src/TAttFill.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx:130,Modifiability,inherit,inheritance,130,"/** \class TAttFill; \ingroup Base; \ingroup GraphicsAtt. Fill Area Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the fill area; attributes. ## Fill Area attributes; Fill Area attributes are:. - [Fill Area color](\ref ATTFILL1); - [Fill Area style](\ref ATTFILL2). \anchor ATTFILL1; ## Fill Area color; The fill area color is a color index (integer) pointing in the ROOT; color table.; The fill area color of any class inheriting from `TAttFill` can; be changed using the method `SetFillColor` and retrieved using the; method `GetFillColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetFillColorAlpha()`, allows to set a transparent color.; In the following example the fill color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetFillColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag; `OpenGL.CanvasPreferGL` is set to `1` in `$ROOTSYS/etc/system.rootrc`, or on Mac; with the Cocoa backend.; On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. ### The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the Color Wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception; Touch",MatchSource.CODE_COMMENT,core/base/src/TAttFill.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx:508,Modifiability,inherit,inheriting,508,"/** \class TAttFill; \ingroup Base; \ingroup GraphicsAtt. Fill Area Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the fill area; attributes. ## Fill Area attributes; Fill Area attributes are:. - [Fill Area color](\ref ATTFILL1); - [Fill Area style](\ref ATTFILL2). \anchor ATTFILL1; ## Fill Area color; The fill area color is a color index (integer) pointing in the ROOT; color table.; The fill area color of any class inheriting from `TAttFill` can; be changed using the method `SetFillColor` and retrieved using the; method `GetFillColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetFillColorAlpha()`, allows to set a transparent color.; In the following example the fill color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetFillColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag; `OpenGL.CanvasPreferGL` is set to `1` in `$ROOTSYS/etc/system.rootrc`, or on Mac; with the Cocoa backend.; On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. ### The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the Color Wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception; Touch",MatchSource.CODE_COMMENT,core/base/src/TAttFill.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx:3160,Modifiability,inherit,inheriting,3160," from the same group. Each color chip is identified by a mnemonic (eg kYellow) and a number.; The keywords, kRed, kBlue, kYellow, kPink, etc are defined in the header file __Rtypes.h__; that is included in all ROOT other header files. We strongly recommend to use these keywords; in your code instead of hardcoded color numbers, eg:; ~~~ {.cpp}; myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);; ~~~. Begin_Macro; {; TColorWheel *w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; w->SetCanvas(cw);; w->Draw();; }; End_Macro. ### Special case forcing black&white output.; If the current style fill area color is set to 0, then ROOT will force; a black&white output for all objects with a fill area defined and independently; of the object fill style. \anchor ATTFILL2; ## Fill Area style; The fill area style defines the pattern used to fill a polygon.; The fill area style of any class inheriting from `TAttFill` can; be changed using the method `SetFillStyle` and retrieved using the; method `GetFillStyle`.; ### Conventions for fill styles:. - 0 : hollow; - 1001 : Solid; - 3000+pattern_number (see below); - For TPad only:. - 4000 :the window is transparent.; - 4000 to 4100 the window is 100% transparent to 100% opaque. The pad transparency is visible in binary outputs files like gif, jpg, png etc ..; but not in vector graphics output files like PS, PDF and SVG. This convention; (fill style > 4000) is kept for backward compatibility. It is better to use; the color transparency instead. pattern_number can have any value from 1 to 25 (see table), or any; value from 100 to 999. For the latest the numbering convention is the following:; ~~~ {.cpp}; pattern_number = ijk (FillStyle = 3ijk). i (1-9) : specify the space between each hatch; 1 = 1/2mm 9 = 6mm. j (0-9) : specify angle between 0 and 90 degrees; 0 = 0; 1 = 10; 2 = 20; 3 = 30; 4 = 45; 5 = Not drawn; 6 = 60; 7 = 70; 8 = 80; 9 = 90. k (0-9) : specify angle betw",MatchSource.CODE_COMMENT,core/base/src/TAttFill.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttFill.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:1159,Availability,avail,available,1159,"istograms). It holds all the line attributes. ## Line attributes; Line attributes are:. - [Line Color](\ref ATTLINE1); - [Line Width](\ref ATTLINE2); - [Line Style](\ref ATTLINE3). \anchor ATTLINE1; ## Line Color; The line color is a color index (integer) pointing in the ROOT; color table.; The line color of any class inheriting from `TAttLine` can; be changed using the method `SetLineColor` and retrieved using the; method `GetLineColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetLineColorAlpha()`, allows to set a transparent color.; In the following example the line color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetLineColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \ancho",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:125,Modifiability,inherit,inheritance,125,"/** \class TAttLine; \ingroup Base; \ingroup GraphicsAtt. Line Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the line attributes. ## Line attributes; Line attributes are:. - [Line Color](\ref ATTLINE1); - [Line Width](\ref ATTLINE2); - [Line Style](\ref ATTLINE3). \anchor ATTLINE1; ## Line Color; The line color is a color index (integer) pointing in the ROOT; color table.; The line color of any class inheriting from `TAttLine` can; be changed using the method `SetLineColor` and retrieved using the; method `GetLineColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetLineColorAlpha()`, allows to set a transparent color.; In the following example the line color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetLineColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:493,Modifiability,inherit,inheriting,493,"/** \class TAttLine; \ingroup Base; \ingroup GraphicsAtt. Line Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the line attributes. ## Line attributes; Line attributes are:. - [Line Color](\ref ATTLINE1); - [Line Width](\ref ATTLINE2); - [Line Style](\ref ATTLINE3). \anchor ATTLINE1; ## Line Color; The line color is a color index (integer) pointing in the ROOT; color table.; The line color of any class inheriting from `TAttLine` can; be changed using the method `SetLineColor` and retrieved using the; method `GetLineColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetLineColorAlpha()`, allows to set a transparent color.; In the following example the line color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetLineColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:1684,Modifiability,inherit,inheriting,1684,"lors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetLineColorAlpha()`, allows to set a transparent color.; In the following example the line color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetLineColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \anchor ATTLINE3; ## Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from `TAttLine` can be changed using the method; `SetLineStyle` and retrieved using the method `GetLineStyle`. The first 10 line styles are predefined as shown on the following picture:. Begin_Macro; {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; lh->SetLineWidth(3);; t.Dr",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:2277,Modifiability,inherit,inheriting,2277,"e file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \anchor ATTLINE3; ## Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from `TAttLine` can be changed using the method; `SetLineStyle` and retrieved using the method `GetLineStyle`. The first 10 line styles are predefined as shown on the following picture:. Begin_Macro; {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; lh->SetLineWidth(3);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. Some line styles can be accessed via the following enum:. ~~~ {.cpp}; kSolid = 1; kDashed = 2; kDotted = 3; kDashDotted = 4; ~~~. Additional line styles can be defined using `TStyle::SetLineStyleString`.; For example the line style number 11 can be defined as follow:; ~~~ {.cpp}; gStyle->SetLineStyleString(11,""400 200"");; ~~~; Existing line styles (1 to 10) can be redefined using the same method.; */; ////////////////////////////////////////////////////////////////////////////////; /// AttLine default constructor.",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:2815,Security,access,accessed,2815,"e file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \anchor ATTLINE3; ## Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from `TAttLine` can be changed using the method; `SetLineStyle` and retrieved using the method `GetLineStyle`. The first 10 line styles are predefined as shown on the following picture:. Begin_Macro; {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; lh->SetLineWidth(3);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. Some line styles can be accessed via the following enum:. ~~~ {.cpp}; kSolid = 1; kDashed = 2; kDotted = 3; kDashDotted = 4; ~~~. Additional line styles can be defined using `TStyle::SetLineStyleString`.; For example the line style number 11 can be defined as follow:; ~~~ {.cpp}; gStyle->SetLineStyleString(11,""400 200"");; ~~~; Existing line styles (1 to 10) can be redefined using the same method.; */; ////////////////////////////////////////////////////////////////////////////////; /// AttLine default constructor.",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:1921,Testability,test,test,1921,"ine color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetLineColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \anchor ATTLINE3; ## Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from `TAttLine` can be changed using the method; `SetLineStyle` and retrieved using the method `GetLineStyle`. The first 10 line styles are predefined as shown on the following picture:. Begin_Macro; {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; lh->SetLineWidth(3);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. Some line styles can be accessed via the following enum:. ~~~ {.cpp}; kSolid = 1; kDashed = 2; kDotted = 3; kDashDotted ",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:2523,Testability,test,test,2523,"e file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \anchor ATTLINE3; ## Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from `TAttLine` can be changed using the method; `SetLineStyle` and retrieved using the method `GetLineStyle`. The first 10 line styles are predefined as shown on the following picture:. Begin_Macro; {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; lh->SetLineWidth(3);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. Some line styles can be accessed via the following enum:. ~~~ {.cpp}; kSolid = 1; kDashed = 2; kDotted = 3; kDashDotted = 4; ~~~. Additional line styles can be defined using `TStyle::SetLineStyleString`.; For example the line style number 11 can be defined as follow:; ~~~ {.cpp}; gStyle->SetLineStyleString(11,""400 200"");; ~~~; Existing line styles (1 to 10) can be redefined using the same method.; */; ////////////////////////////////////////////////////////////////////////////////; /// AttLine default constructor.",MatchSource.CODE_COMMENT,core/base/src/TAttLine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:1239,Availability,avail,available,1239,"marker attributes are:. - [Marker color](\ref ATTMARKER1); - [Marker style](\ref ATTMARKER2); - [Marker line width](\ref ATTMARKER21); - [Marker size](\ref M3). \anchor ATTMARKER1; ## Marker color; The marker color is a color index (integer) pointing in the ROOT color; table.; The marker color of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerColor` and retrieved using the; method `GetMarkerColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency. `SetMarkerColorAlpha()`, allows to set a transparent color.; In the following example the marker color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetMarkerColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTMARKER2; ## Marker style. The Marker style defines the markers' shape.; The marker style of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:2510,Availability,down,down,2510,"changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cross kFullCross; 35 open diamond cross kOpenDiamondCross; 36 open square diagonal kOpenSquareDiagonal; 37 open three triangle kOpenThreeTriangles; 38 octagon with cross kOctagonCross; 39 full three triangles kFullThreeTriangles; 40 open four triangleX kOpenFourTrianglesX; 41 full four triangleX kFullFourTrianglesX; 42 open double diamond kOpenDoubleDiamond; 43 full double diamond kFullDoubleDiamond; 44 open four triangle+ kOpenFourTrianglesPlus; 45 full four triangle+ kFullFourTrianglesPlus; 46 open cross X kOpenCrossX; 47 full cross X kFullCrossX; 48 four squares X kFourSquaresX; 49 four squares+ kFourSquaresPlus; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker types"",0,0,500,200);; TMarker marker;; marker.DisplayMarkerTypes();; }; End_Macro. \warning Non-symmetric symbols should be used carefully. See markerwarning.C. \anchor ATTMARKER21; ### Marker line width. The line width of a marker is not actually a marker attribute since it does; only apply to open marker sy",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:2754,Availability,down,down,2754,"changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cross kFullCross; 35 open diamond cross kOpenDiamondCross; 36 open square diagonal kOpenSquareDiagonal; 37 open three triangle kOpenThreeTriangles; 38 octagon with cross kOctagonCross; 39 full three triangles kFullThreeTriangles; 40 open four triangleX kOpenFourTrianglesX; 41 full four triangleX kFullFourTrianglesX; 42 open double diamond kOpenDoubleDiamond; 43 full double diamond kFullDoubleDiamond; 44 open four triangle+ kOpenFourTrianglesPlus; 45 full four triangle+ kFullFourTrianglesPlus; 46 open cross X kOpenCrossX; 47 full cross X kFullCrossX; 48 four squares X kFourSquaresX; 49 four squares+ kFourSquaresPlus; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker types"",0,0,500,200);; TMarker marker;; marker.DisplayMarkerTypes();; }; End_Macro. \warning Non-symmetric symbols should be used carefully. See markerwarning.C. \anchor ATTMARKER21; ### Marker line width. The line width of a marker is not actually a marker attribute since it does; only apply to open marker sy",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:129,Modifiability,inherit,inheritance,129,"/** \class TAttMarker; \ingroup Base; \ingroup GraphicsAtt. Marker Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the markers; attributes. ## Marker attributes; The marker attributes are:. - [Marker color](\ref ATTMARKER1); - [Marker style](\ref ATTMARKER2); - [Marker line width](\ref ATTMARKER21); - [Marker size](\ref M3). \anchor ATTMARKER1; ## Marker color; The marker color is a color index (integer) pointing in the ROOT color; table.; The marker color of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerColor` and retrieved using the; method `GetMarkerColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency. `SetMarkerColorAlpha()`, allows to set a transparent color.; In the following example the marker color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetMarkerColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTMARKER2; ## Marker style. The Marker style defines the markers' shape.; The marker style of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker ",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:561,Modifiability,inherit,inheriting,561,"/** \class TAttMarker; \ingroup Base; \ingroup GraphicsAtt. Marker Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the markers; attributes. ## Marker attributes; The marker attributes are:. - [Marker color](\ref ATTMARKER1); - [Marker style](\ref ATTMARKER2); - [Marker line width](\ref ATTMARKER21); - [Marker size](\ref M3). \anchor ATTMARKER1; ## Marker color; The marker color is a color index (integer) pointing in the ROOT color; table.; The marker color of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerColor` and retrieved using the; method `GetMarkerColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency. `SetMarkerColorAlpha()`, allows to set a transparent color.; In the following example the marker color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetMarkerColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTMARKER2; ## Marker style. The Marker style defines the markers' shape.; The marker style of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker ",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:1771,Modifiability,inherit,inheriting,1771,"00);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency. `SetMarkerColorAlpha()`, allows to set a transparent color.; In the following example the marker color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetMarkerColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTMARKER2; ## Marker style. The Marker style defines the markers' shape.; The marker style of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cro",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:4717,Modifiability,inherit,inheriting,4717,"since it does; only apply to open marker symbols and marker symbols consisting of lines. All; of these marker symbols are redefined with thicker lines by style numbers; starting from 50:. ~~~ {.cpp}; Marker numbers Line width; 50 - 67 2; 68 - 85 3; 86 - 103 4; 104 - 121 5; ...; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker line widths"",0,0,600,266);; TMarker marker;; marker.DisplayMarkerLineWidths();; }; End_Macro. \anchor M3; ## Marker size. Various marker sizes are shown in the figure below. The default marker size=1; is shown in the top left corner. Marker sizes smaller than 1 can be; specified. The marker size does not refer to any coordinate systems, it is an; absolute value. Therefore the marker size is not affected by any change; in TPad's scale. A marker size equal to 1 correspond to 8 pixels.; That is, a square marker with size 1 will be drawn with a side equal to 8; pixels on the screen. The marker size of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerSize` and retrieved using the; method `GetMarkerSize`. Begin_Macro; {; auto c = new TCanvas(""c"",""Marker sizes"",0,0,500,200);; TMarker marker;; marker.SetMarkerStyle(3);; Double_t x = 0;; Double_t dx = 1/6.0;; for (Int_t i=1; i<6; i++) {; x += dx;; marker.SetMarkerSize(i*0.2); marker.DrawMarker(x,.165);; marker.SetMarkerSize(i*0.8); marker.DrawMarker(x,.495);; marker.SetMarkerSize(i*1.0); marker.DrawMarker(x,.835);; }; }; End_Macro. Note that the marker styles number 1 6 and 7 (the dots), cannot be scaled. They; are meant to be very fast to draw and are always drawn with the same number of; pixels; therefore `SetMarkerSize` does not apply on them. To have a; ""scalable dot"" a filled circle should be used instead, i.e. the marker style; number 20. By default (if `SetMarkerStyle` is not specified), the marker; style used is 1. That's the most common one to draw scatter plots.; */; ////////////////////////////////////////////////////////////////////////////////; /// ",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:2344,Performance,scalab,scalable,2344,"changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cross kFullCross; 35 open diamond cross kOpenDiamondCross; 36 open square diagonal kOpenSquareDiagonal; 37 open three triangle kOpenThreeTriangles; 38 octagon with cross kOctagonCross; 39 full three triangles kFullThreeTriangles; 40 open four triangleX kOpenFourTrianglesX; 41 full four triangleX kFullFourTrianglesX; 42 open double diamond kOpenDoubleDiamond; 43 full double diamond kFullDoubleDiamond; 44 open four triangle+ kOpenFourTrianglesPlus; 45 full four triangle+ kFullFourTrianglesPlus; 46 open cross X kOpenCrossX; 47 full cross X kFullCrossX; 48 four squares X kFourSquaresX; 49 four squares+ kFourSquaresPlus; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker types"",0,0,500,200);; TMarker marker;; marker.DisplayMarkerTypes();; }; End_Macro. \warning Non-symmetric symbols should be used carefully. See markerwarning.C. \anchor ATTMARKER21; ### Marker line width. The line width of a marker is not actually a marker attribute since it does; only apply to open marker sy",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:2386,Performance,scalab,scalable,2386,"changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cross kFullCross; 35 open diamond cross kOpenDiamondCross; 36 open square diagonal kOpenSquareDiagonal; 37 open three triangle kOpenThreeTriangles; 38 octagon with cross kOctagonCross; 39 full three triangles kFullThreeTriangles; 40 open four triangleX kOpenFourTrianglesX; 41 full four triangleX kFullFourTrianglesX; 42 open double diamond kOpenDoubleDiamond; 43 full double diamond kFullDoubleDiamond; 44 open four triangle+ kOpenFourTrianglesPlus; 45 full four triangle+ kFullFourTrianglesPlus; 46 open cross X kOpenCrossX; 47 full cross X kFullCrossX; 48 four squares X kFourSquaresX; 49 four squares+ kFourSquaresPlus; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker types"",0,0,500,200);; TMarker marker;; marker.DisplayMarkerTypes();; }; End_Macro. \warning Non-symmetric symbols should be used carefully. See markerwarning.C. \anchor ATTMARKER21; ### Marker line width. The line width of a marker is not actually a marker attribute since it does; only apply to open marker sy",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:5456,Performance,scalab,scalable,5456,"e marker symbols are redefined with thicker lines by style numbers; starting from 50:. ~~~ {.cpp}; Marker numbers Line width; 50 - 67 2; 68 - 85 3; 86 - 103 4; 104 - 121 5; ...; ~~~. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Marker line widths"",0,0,600,266);; TMarker marker;; marker.DisplayMarkerLineWidths();; }; End_Macro. \anchor M3; ## Marker size. Various marker sizes are shown in the figure below. The default marker size=1; is shown in the top left corner. Marker sizes smaller than 1 can be; specified. The marker size does not refer to any coordinate systems, it is an; absolute value. Therefore the marker size is not affected by any change; in TPad's scale. A marker size equal to 1 correspond to 8 pixels.; That is, a square marker with size 1 will be drawn with a side equal to 8; pixels on the screen. The marker size of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerSize` and retrieved using the; method `GetMarkerSize`. Begin_Macro; {; auto c = new TCanvas(""c"",""Marker sizes"",0,0,500,200);; TMarker marker;; marker.SetMarkerStyle(3);; Double_t x = 0;; Double_t dx = 1/6.0;; for (Int_t i=1; i<6; i++) {; x += dx;; marker.SetMarkerSize(i*0.2); marker.DrawMarker(x,.165);; marker.SetMarkerSize(i*0.8); marker.DrawMarker(x,.495);; marker.SetMarkerSize(i*1.0); marker.DrawMarker(x,.835);; }; }; End_Macro. Note that the marker styles number 1 6 and 7 (the dots), cannot be scaled. They; are meant to be very fast to draw and are always drawn with the same number of; pixels; therefore `SetMarkerSize` does not apply on them. To have a; ""scalable dot"" a filled circle should be used instead, i.e. the marker style; number 20. By default (if `SetMarkerStyle` is not specified), the marker; style used is 1. That's the most common one to draw scatter plots.; */; ////////////////////////////////////////////////////////////////////////////////; /// TAttMarker default constructor.; ///; /// Default text attributes are taking from the current style.",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:2123,Security,access,accessed,2123,"parency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetMarkerColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTMARKER2; ## Marker style. The Marker style defines the markers' shape.; The marker style of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cross kFullCross; 35 open diamond cross kOpenDiamondCross; 36 open square diagonal kOpenSquareDiagonal; 37 open three triangle kOpenThreeTriangles; 38 octagon with cross kOctagonCross; 39 full three triangles kFullThreeTriangles; 40 open four triangleX kOpenFou",MatchSource.CODE_COMMENT,core/base/src/TAttMarker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:1446,Availability,avail,available,1446," quality and speed](\ref ATTTEXT51); - [How to use True Type Fonts](\ref ATTTEXT52); - [List of the currently supported fonts](\ref ATTTEXT53). \anchor ATTTEXT1; ## Text Alignment. The text alignment is an integer number (`align`) allowing to control; the horizontal and vertical position of the text string with respect; to the text position.; The text alignment of any class inheriting from `TAttText` can; be changed using the method `SetTextAlign` and retrieved using the; method `GetTextAlign`. ~~~ {.cpp}; align = 10*HorizontalAlign + VerticalAlign; ~~~. For horizontal alignment the following convention applies:. ~~~ {.cpp}; 1=left adjusted, 2=centered, 3=right adjusted; ~~~. For vertical alignment the following convention applies:. ~~~ {.cpp}; 1=bottom adjusted, 2=centered, 3=top adjusted; ~~~. For example:. ~~~ {.cpp}; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; ~~~. Begin_Macro(source); textalign.C; End_Macro. Mnemonic constants are available:. ~~~ {.cpp}; kHAlignLeft = 10, kHAlignCenter = 20, kHAlignRight = 30,; kVAlignBottom = 1, kVAlignCenter = 2, kVAlignTop = 3; ~~~. They allow to write:. ~~~ {.cpp}; object->SetTextAlign(kHAlignLeft+kVAlignTop);; ~~~. \anchor ATTTEXT2; ## Text Angle. Text angle in degrees.; The text angle of any class inheriting from `TAttText` can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Color. The text color is a color index (integer) pointing in the ROOT; color table.; The text color of any class inheriting from `TAttText` can; be changed using the method `SetTextColor` and retrieved using the; method `GetTextColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; ",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:2770,Availability,avail,available,2770," can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Color. The text color is a color index (integer) pointing in the ROOT; color table.; The text color of any class inheriting from `TAttText` can; be changed using the method `SetTextColor` and retrieved using the; method `GetTextColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetTextColorAlpha()`, allows to set a transparent color.; In the following example the text color of the text `text`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; text->SetTextColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTTEXT4; ## Text Size. If the text precision (see next paragraph) is smaller than 3, the text; size (`textsize`) is a fraction of the current pad size. Therefore the; same `textsize` value can generate text outputs with different absolute; sizes in two different pads.; The text size in pixels (`charheight`) is computed the following way:. ~~~ {.cpp}; pad_width = gPad->XtoPixel(gPad->GetX2());; pad_height = gPad->YtoPixel(gPad->GetY1());; if (pad_width < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, ",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:6686,Availability,avail,available,6686,"t and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the following line; in the `.rootrc` file:. ~~~ {.cpp}; Unix.*.Root.UseTTFonts: false; ~~~. \anchor ATTTEXT53; ### List of the currently supported fonts. ~~~ {.cpp}; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Times-Italic""; 2 : ""Free Serif Bold"" ""Times-Bold""; 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 4 : ""Tex Gyre Regular"" ""Helvetica""; 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 8 : ""Free Mono"" ""Courier""; 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 10 : ""Free Mono Bold"" ""Courier-Bold""; 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOblique""; 12 : ""Symbol"" ""Symbol""; 13 : ""Free Serif"" ""Times-Roman""; 14 : ""Wingdings"" ""ZapfDingbats""; ~~~. The PostScript and PDF backends use the original PostScript-defined 13 fonts' styles; forming four type families (Courier, Helvetica, Times, Symbol) as listed in the; ""Core Font Set"" section of [this page](https://en.wikipedia.org/wiki/PostScript_fonts).; These fonts are always available and do not need to be loaded in the PS or PDF files; allowing to keep the files' sizes small. On screen, text is rendered using free TTF fonts similar to the PDF ones. The corresponding; font files are coming with the ROOT distribution in `$ROOTSYS/fonts/Free*`. Begin_Macro; fonts.C; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// AttText default constructor.; ///; /// Default text attributes are taken from the current style.",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:3806,Integrability,depend,depend,3806,"orms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTTEXT4; ## Text Size. If the text precision (see next paragraph) is smaller than 3, the text; size (`textsize`) is a fraction of the current pad size. Therefore the; same `textsize` value can generate text outputs with different absolute; sizes in two different pads.; The text size in pixels (`charheight`) is computed the following way:. ~~~ {.cpp}; pad_width = gPad->XtoPixel(gPad->GetX2());; pad_height = gPad->YtoPixel(gPad->GetY1());; if (pad_width < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given `textsize` value always generates the same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is give",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:5322,Integrability,depend,depending,5322,"d Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the following line; in the `.rootrc` file:. ~~~ {.cpp}; Unix.*.Root.UseTTFonts: false; ~~~. \anchor ATTTEXT53; ### List of the currently supported fonts. ~~~ {.cpp}; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Times-Italic""; 2 : ""Free Serif Bold"" ""Times-Bold""; 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 4 : ""Tex Gyre Regular"" ""Helvetica""; 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 8 : ""Free Mono"" ""Courier""; 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 10 : ""Free Mono Bold"" ""Courier-Bold""; 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOblique""; 12 : ""Symbol",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:125,Modifiability,inherit,inheritance,125,"/** \class TAttText; \ingroup Base; \ingroup GraphicsAtt. Text Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the text attributes. ## Text attributes; Text attributes are:. - [Text Alignment](\ref ATTTEXT1); - [Text Angle](\ref ATTTEXT2); - [Text Color](\ref ATTTEXT3); - [Text Size](\ref ATTTEXT4); - [Text Font and Precision](\ref ATTTEXT5); - [Font quality and speed](\ref ATTTEXT51); - [How to use True Type Fonts](\ref ATTTEXT52); - [List of the currently supported fonts](\ref ATTTEXT53). \anchor ATTTEXT1; ## Text Alignment. The text alignment is an integer number (`align`) allowing to control; the horizontal and vertical position of the text string with respect; to the text position.; The text alignment of any class inheriting from `TAttText` can; be changed using the method `SetTextAlign` and retrieved using the; method `GetTextAlign`. ~~~ {.cpp}; align = 10*HorizontalAlign + VerticalAlign; ~~~. For horizontal alignment the following convention applies:. ~~~ {.cpp}; 1=left adjusted, 2=centered, 3=right adjusted; ~~~. For vertical alignment the following convention applies:. ~~~ {.cpp}; 1=bottom adjusted, 2=centered, 3=top adjusted; ~~~. For example:. ~~~ {.cpp}; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; ~~~. Begin_Macro(source); textalign.C; End_Macro. Mnemonic constants are available:. ~~~ {.cpp}; kHAlignLeft = 10, kHAlignCenter = 20, kHAlignRight = 30,; kVAlignBottom = 1, kVAlignCenter = 2, kVAlignTop = 3; ~~~. They allow to write:. ~~~ {.cpp}; object->SetTextAlign(kHAlignLeft+kVAlignTop);; ~~~. \anchor ATTTEXT2; ## Text Angle. Text angle in degrees.; The text angle of any class inheriting from `TAttText` can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Col",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:816,Modifiability,inherit,inheriting,816,"/** \class TAttText; \ingroup Base; \ingroup GraphicsAtt. Text Attributes class. This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the text attributes. ## Text attributes; Text attributes are:. - [Text Alignment](\ref ATTTEXT1); - [Text Angle](\ref ATTTEXT2); - [Text Color](\ref ATTTEXT3); - [Text Size](\ref ATTTEXT4); - [Text Font and Precision](\ref ATTTEXT5); - [Font quality and speed](\ref ATTTEXT51); - [How to use True Type Fonts](\ref ATTTEXT52); - [List of the currently supported fonts](\ref ATTTEXT53). \anchor ATTTEXT1; ## Text Alignment. The text alignment is an integer number (`align`) allowing to control; the horizontal and vertical position of the text string with respect; to the text position.; The text alignment of any class inheriting from `TAttText` can; be changed using the method `SetTextAlign` and retrieved using the; method `GetTextAlign`. ~~~ {.cpp}; align = 10*HorizontalAlign + VerticalAlign; ~~~. For horizontal alignment the following convention applies:. ~~~ {.cpp}; 1=left adjusted, 2=centered, 3=right adjusted; ~~~. For vertical alignment the following convention applies:. ~~~ {.cpp}; 1=bottom adjusted, 2=centered, 3=top adjusted; ~~~. For example:. ~~~ {.cpp}; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; ~~~. Begin_Macro(source); textalign.C; End_Macro. Mnemonic constants are available:. ~~~ {.cpp}; kHAlignLeft = 10, kHAlignCenter = 20, kHAlignRight = 30,; kVAlignBottom = 1, kVAlignCenter = 2, kVAlignTop = 3; ~~~. They allow to write:. ~~~ {.cpp}; object->SetTextAlign(kHAlignLeft+kVAlignTop);; ~~~. \anchor ATTTEXT2; ## Text Angle. Text angle in degrees.; The text angle of any class inheriting from `TAttText` can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Col",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:1758,Modifiability,inherit,inheriting,1758,"f any class inheriting from `TAttText` can; be changed using the method `SetTextAlign` and retrieved using the; method `GetTextAlign`. ~~~ {.cpp}; align = 10*HorizontalAlign + VerticalAlign; ~~~. For horizontal alignment the following convention applies:. ~~~ {.cpp}; 1=left adjusted, 2=centered, 3=right adjusted; ~~~. For vertical alignment the following convention applies:. ~~~ {.cpp}; 1=bottom adjusted, 2=centered, 3=top adjusted; ~~~. For example:. ~~~ {.cpp}; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; ~~~. Begin_Macro(source); textalign.C; End_Macro. Mnemonic constants are available:. ~~~ {.cpp}; kHAlignLeft = 10, kHAlignCenter = 20, kHAlignRight = 30,; kVAlignBottom = 1, kVAlignCenter = 2, kVAlignTop = 3; ~~~. They allow to write:. ~~~ {.cpp}; object->SetTextAlign(kHAlignLeft+kVAlignTop);; ~~~. \anchor ATTTEXT2; ## Text Angle. Text angle in degrees.; The text angle of any class inheriting from `TAttText` can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Color. The text color is a color index (integer) pointing in the ROOT; color table.; The text color of any class inheriting from `TAttText` can; be changed using the method `SetTextColor` and retrieved using the; method `GetTextColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetTextColorAlpha()`, allows to set a transparent color.; In the following example the text color of the text `text`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; text->SetTextColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when th",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:2111,Modifiability,inherit,inheriting,2111,"ing convention applies:. ~~~ {.cpp}; 1=bottom adjusted, 2=centered, 3=top adjusted; ~~~. For example:. ~~~ {.cpp}; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; ~~~. Begin_Macro(source); textalign.C; End_Macro. Mnemonic constants are available:. ~~~ {.cpp}; kHAlignLeft = 10, kHAlignCenter = 20, kHAlignRight = 30,; kVAlignBottom = 1, kVAlignCenter = 2, kVAlignTop = 3; ~~~. They allow to write:. ~~~ {.cpp}; object->SetTextAlign(kHAlignLeft+kVAlignTop);; ~~~. \anchor ATTTEXT2; ## Text Angle. Text angle in degrees.; The text angle of any class inheriting from `TAttText` can; be changed using the method `SetTextAngle` and retrieved using the; method `GetTextAngle`.; The following picture shows the text angle:. Begin_Macro(source); textangle.C; End_Macro. \anchor ATTTEXT3; ## Text Color. The text color is a color index (integer) pointing in the ROOT; color table.; The text color of any class inheriting from `TAttText` can; be changed using the method `SetTextColor` and retrieved using the; method `GetTextColor`.; The following table shows the first 50 default colors. Begin_Macro; {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. ### Color transparency; `SetTextColorAlpha()`, allows to set a transparent color.; In the following example the text color of the text `text`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; text->SetTextColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, the",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:4169,Modifiability,inherit,inheriting,4169,"Size. If the text precision (see next paragraph) is smaller than 3, the text; size (`textsize`) is a fraction of the current pad size. Therefore the; same `textsize` value can generate text outputs with different absolute; sizes in two different pads.; The text size in pixels (`charheight`) is computed the following way:. ~~~ {.cpp}; pad_width = gPad->XtoPixel(gPad->GetX2());; pad_height = gPad->YtoPixel(gPad->GetY1());; if (pad_width < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given `textsize` value always generates the same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their siz",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:4846,Modifiability,inherit,inheriting,4846,"same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the following line; in the `.rootrc` file:. ~~~ {.cpp}; Unix.*.Root.UseTTFonts: false; ~~~. \anchor ATTTEXT53; ### List of the currently supported fonts. ~~~ {.cpp}; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Tim",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:4609,Performance,scalab,scalable,4609,"h < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given `textsize` value always generates the same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the f",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:4678,Performance,scalab,scalable,4678,"h < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given `textsize` value always generates the same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the f",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:4735,Performance,scalab,scalable,4735,"h < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;; ~~~. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given `textsize` value always generates the same absolute; size. The text size (`charheight`) is given in pixels:. ~~~ {.cpp}; charheight = textsize;; ~~~. Note that to scale fonts to the same size as the old True Type package a; scale factor of `0.93376068` is apply to the text size before drawing. The text size of any class inheriting from `TAttText` can; be changed using the method `SetTextSize` and retrieved using the; method `GetTextSize`. \anchor ATTTEXT5; ## Text Font and Precision. The text font code is combination of the font number and the precision.; ~~~ {.cpp}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the f",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:5430,Performance,scalab,scalable,5430,"}; Text font code = 10*fontnumber + precision; ~~~; Font numbers must be between 1 and 14. The precision can be:. - `precision = 0` fast hardware fonts (steps in the size); - `precision = 1` scalable and rotatable hardware fonts (see below); - `precision = 2` scalable and rotatable hardware fonts; - `precision = 3` scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from `TAttText` can; be changed using the method `SetTextFont` and retrieved using the; method `GetTextFont`. \anchor ATTTEXT51; ### Font quality and speed. When precision 0 is used, only the original non-scaled X11 system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the following line; in the `.rootrc` file:. ~~~ {.cpp}; Unix.*.Root.UseTTFonts: false; ~~~. \anchor ATTTEXT53; ### List of the currently supported fonts. ~~~ {.cpp}; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Times-Italic""; 2 : ""Free Serif Bold"" ""Times-Bold""; 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 4 : ""Tex Gyre Regular"" ""Helvetica""; 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 8 : ""Free Mono"" ""Courier""; 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 10 : ""Free Mono Bold"" ""Courier-Bold""; 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOblique""; 12 : ""Symbol"" ""Symbol""; 13 : ""Free Serif"" ""Times-Roman""; 14 : ""Wingdings"" ""ZapfDingbats""; ~~~. The PostScri",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx:6718,Performance,load,loaded,6718,"t and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts.; These days TTF fonts are rendered fast enough and can be used in all cases. \anchor ATTTEXT52; ### How to use True Type Fonts. TTF fonts are used by default. They can be deactivated via the following line; in the `.rootrc` file:. ~~~ {.cpp}; Unix.*.Root.UseTTFonts: false; ~~~. \anchor ATTTEXT53; ### List of the currently supported fonts. ~~~ {.cpp}; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Times-Italic""; 2 : ""Free Serif Bold"" ""Times-Bold""; 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 4 : ""Tex Gyre Regular"" ""Helvetica""; 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 8 : ""Free Mono"" ""Courier""; 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 10 : ""Free Mono Bold"" ""Courier-Bold""; 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOblique""; 12 : ""Symbol"" ""Symbol""; 13 : ""Free Serif"" ""Times-Roman""; 14 : ""Wingdings"" ""ZapfDingbats""; ~~~. The PostScript and PDF backends use the original PostScript-defined 13 fonts' styles; forming four type families (Courier, Helvetica, Times, Symbol) as listed in the; ""Core Font Set"" section of [this page](https://en.wikipedia.org/wiki/PostScript_fonts).; These fonts are always available and do not need to be loaded in the PS or PDF files; allowing to keep the files' sizes small. On screen, text is rendered using free TTF fonts similar to the PDF ones. The corresponding; font files are coming with the ROOT distribution in `$ROOTSYS/fonts/Free*`. Begin_Macro; fonts.C; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// AttText default constructor.; ///; /// Default text attributes are taken from the current style.",MatchSource.CODE_COMMENT,core/base/src/TAttText.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttText.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx:540,Integrability,message,messages,540,"// @(#)root/base:$Id$; // Author: Gerardo Ganis + Fons Rademakers 15/5/2009; /*************************************************************************; * Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBase64; \ingroup Base. This code implements the Base64 encoding and decoding. Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages.; */",MatchSource.CODE_COMMENT,core/base/src/TBase64.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx:587,Integrability,protocol,protocols,587,"// @(#)root/base:$Id$; // Author: Gerardo Ganis + Fons Rademakers 15/5/2009; /*************************************************************************; * Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBase64; \ingroup Base. This code implements the Base64 encoding and decoding. Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages.; */",MatchSource.CODE_COMMENT,core/base/src/TBase64.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx:629,Integrability,message,messages,629,"// @(#)root/base:$Id$; // Author: Gerardo Ganis + Fons Rademakers 15/5/2009; /*************************************************************************; * Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBase64; \ingroup Base. This code implements the Base64 encoding and decoding. Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages.; */",MatchSource.CODE_COMMENT,core/base/src/TBase64.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx:571,Security,authenticat,authentication,571,"// @(#)root/base:$Id$; // Author: Gerardo Ganis + Fons Rademakers 15/5/2009; /*************************************************************************; * Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBase64; \ingroup Base. This code implements the Base64 encoding and decoding. Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages.; */",MatchSource.CODE_COMMENT,core/base/src/TBase64.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:75,Testability,benchmark,benchmarking,75,"/** \class TBenchmark; \ingroup Base. This class is a ROOT utility to help benchmarking applications; */; ////////////////////////////////////////////////////////////////////////////////; /// Benchmark default constructor",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:192,Testability,Benchmark,Benchmark,192,"/** \class TBenchmark; \ingroup Base. This class is a ROOT utility to help benchmarking applications; */; ////////////////////////////////////////////////////////////////////////////////; /// Benchmark default constructor",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:86,Testability,Benchmark,Benchmark,86,"////////////////////////////////////////////////////////////////////////////////; /// Benchmark destructor.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:103,Testability,Benchmark,Benchmark,103,"////////////////////////////////////////////////////////////////////////////////; /// Returns index of Benchmark name.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:111,Testability,Benchmark,Benchmark,111,"////////////////////////////////////////////////////////////////////////////////; /// Returns Cpu time used by Benchmark name.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:111,Testability,Benchmark,Benchmark,111,"////////////////////////////////////////////////////////////////////////////////; /// Returns Realtime used by Benchmark name.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:107,Testability,Benchmark,Benchmark,107,"////////////////////////////////////////////////////////////////////////////////; /// Prints parameters of Benchmark name.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:96,Testability,Benchmark,Benchmarks,96,"////////////////////////////////////////////////////////////////////////////////; /// Reset all Benchmarks",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:92,Testability,Benchmark,Benchmark,92,"////////////////////////////////////////////////////////////////////////////////; /// Stops Benchmark name and Prints results",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:93,Testability,Benchmark,Benchmark,93,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:215,Testability,benchmark,benchmark,215,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:253,Testability,benchmark,benchmarks,253,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:270,Testability,Benchmark,Benchmark,270,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:416,Testability,benchmark,benchmark,416,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:481,Testability,benchmark,benchmark,481,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:534,Testability,benchmark,benchmarks,534,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:504,Usability,resume,resume,504,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:16,Testability,benchmark,benchmark,16,"// define a new benchmark to Start",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:23,Testability,benchmark,benchmark,23,"// Resume the existing benchmark",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:3,Usability,Resume,Resume,3,"// Resume the existing benchmark",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:97,Testability,Benchmark,Benchmark,97,"////////////////////////////////////////////////////////////////////////////////; /// Terminates Benchmark with specified name.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:110,Testability,benchmark,benchmarks,110,"////////////////////////////////////////////////////////////////////////////////; /// Prints a summary of all benchmarks.",MatchSource.CODE_COMMENT,core/base/src/TBenchmark.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:62,Safety,avoid,avoid,62,"/// Default streamer implementation used by ClassDefInline to avoid; /// requirement to include TBuffer.h",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:500,Availability,error,error,500,"////////////////////////////////////////////////////////////////////////////////; /// Create an I/O buffer object. Mode should be either TBuffer::kRead or; /// TBuffer::kWrite. By default the I/O buffer has a size of; /// TBuffer::kInitialSize (1024) bytes. An external buffer can be passed; /// to TBuffer via the buf argument. By default this buffer will be adopted; /// unless adopt is false.; ///; /// If the new buffer is _not_ adopted and no memory allocation routine; /// is provided, a Fatal error will be issued if the Buffer attempts to; /// expand.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:466,Integrability,rout,routine,466,"////////////////////////////////////////////////////////////////////////////////; /// Create an I/O buffer object. Mode should be either TBuffer::kRead or; /// TBuffer::kWrite. By default the I/O buffer has a size of; /// TBuffer::kInitialSize (1024) bytes. An external buffer can be passed; /// to TBuffer via the buf argument. By default this buffer will be adopted; /// unless adopt is false.; ///; /// If the new buffer is _not_ adopted and no memory allocation routine; /// is provided, a Fatal error will be issued if the Buffer attempts to; /// expand.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:271,Safety,avoid,avoiding,271,"////////////////////////////////////////////////////////////////////////////////; /// Automatically calculate a new size and expand the buffer to fit at least size_needed.; /// The goals is to minimize the number of memory allocation and the memory allocation; /// which avoiding too much memory wastage.; ///; /// If the size_needed is larger than the current size, the policy; /// is to expand to double the current size or the size_needed which ever is largest.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:580,Availability,error,error,580,"////////////////////////////////////////////////////////////////////////////////; /// Sets a new buffer in an existing TBuffer object. If newsiz=0 then the; /// new buffer is expected to have the same size as the previous buffer.; /// The current buffer position is reset to the start of the buffer.; /// If the TBuffer owned the previous buffer, it will be deleted prior; /// to accepting the new buffer. By default the new buffer will be; /// adopted unless adopt is false.; ///; /// If the new buffer is _not_ adopted and no memory allocation routine; /// is provided, a Fatal error will be issued if the Buffer attempts to; /// expand.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:546,Integrability,rout,routine,546,"////////////////////////////////////////////////////////////////////////////////; /// Sets a new buffer in an existing TBuffer object. If newsiz=0 then the; /// new buffer is expected to have the same size as the previous buffer.; /// The current buffer position is reset to the start of the buffer.; /// If the TBuffer owned the previous buffer, it will be deleted prior; /// to accepting the new buffer. By default the new buffer will be; /// adopted unless adopt is false.; ///; /// If the new buffer is _not_ adopted and no memory allocation routine; /// is provided, a Fatal error will be issued if the Buffer attempts to; /// expand.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:393,Availability,down,down,393,"////////////////////////////////////////////////////////////////////////////////; /// Expand (or shrink) the I/O buffer to newsize bytes.; /// If copy is true (the default), the existing content of the; /// buffer is preserved, otherwise the buffer is returned zero-ed out.; ///; /// In order to avoid losing data, if the current length is greater than; /// the requested size, we only shrink down to the current length.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:296,Safety,avoid,avoid,296,"////////////////////////////////////////////////////////////////////////////////; /// Expand (or shrink) the I/O buffer to newsize bytes.; /// If copy is true (the default), the existing content of the; /// buffer is preserved, otherwise the buffer is returned zero-ed out.; ///; /// In order to avoid losing data, if the current length is greater than; /// the requested size, we only shrink down to the current length.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:55,Deployability,release,release,55,"// We had reserved space for the free block count,; // release it,",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:102,Performance,cache,cache,102,"////////////////////////////////////////////////////////////////////////////////; /// Push a new data cache area onto the list of area to be used for; /// temporarily store 'missing' data members.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:112,Performance,cache,cache,112,"////////////////////////////////////////////////////////////////////////////////; /// Return the 'current' data cache area from the list of area to be used for; /// temporarily store 'missing' data members.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx:120,Performance,cache,cache,120,"////////////////////////////////////////////////////////////////////////////////; /// Pop and Return the 'current' data cache area from the list of area to be used for; /// temporarily store 'missing' data members.",MatchSource.CODE_COMMENT,core/base/src/TBuffer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:8155,Energy Efficiency,efficient,efficient,8155,"ept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ### Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:203,Integrability,interface,interface,203,"/** \class TBuffer3D; \ingroup Base. Generic 3D primitive description class.; See TBuffer3DTypes for producer classes. ### Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNo",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5553,Integrability,interface,interface,5553,"n. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be ",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:563,Performance,perform,performance,563,"/** \class TBuffer3D; \ingroup Base. Generic 3D primitive description class.; See TBuffer3DTypes for producer classes. ### Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNo",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:1404,Performance,perform,performance,1404,"f points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNone. You must; fill the buffer and mark these sections valid, and pass the buffer again. A; typical code snippet would be:. ~~~ {.cpp}; TBuffer3DSphere sphereBuffer;; // Fill out kCore...; // Fill out kBoundingBox...; // Fill out kShapeSpecific for TBuffer3DSphere; // Try first add to viewer; Int_t reqSections = viewer-&gt;AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqS",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5171,Performance,cache,cached,5171," box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be ",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5269,Performance,perform,perform,5269,"penGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not a",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5325,Performance,perform,performance,5325,"penGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not a",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:6427,Performance,cache,cached,6427,"t be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to;",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:8177,Performance,cache,cache,8177,"ept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ### Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:7601,Safety,detect,detect,7601,"o be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descende",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:943,Testability,test,test,943,"/** \class TBuffer3D; \ingroup Base. Generic 3D primitive description class.; See TBuffer3DTypes for producer classes. ### Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNo",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:4544,Testability,Log,Logical,4544,"to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the inte",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:4736,Testability,log,logical,4736," need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaste",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:4923,Testability,log,logical,4923,"ce function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical obje",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5045,Testability,log,logical,5045,"contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5075,Testability,log,logical,5075,"contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5390,Testability,log,logical,5390,"ain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .;",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5779,Testability,log,logical,5779,"number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends pot",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:5856,Testability,log,logical,5856,"number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends pot",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:7030,Testability,log,logical,7030,"ch can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSect",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:7929,Testability,log,logical,7929,"ept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ### Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:8188,Testability,log,logical,8188,"ept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ### Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:887,Usability,Clear,ClearSectionsValid,887,"/** \class TBuffer3D; \ingroup Base. Generic 3D primitive description class.; See TBuffer3DTypes for producer classes. ### Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNo",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:952,Usability,clear,clear,952,"/** \class TBuffer3D; \ingroup Base. Generic 3D primitive description class.; See TBuffer3DTypes for producer classes. ### Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNo",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:3254,Usability,clear,clear,3254,"ere; // Try first add to viewer; Int_t reqSections = viewer-&gt;AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqSections & TBuffer3D::kRawSizes) {; // Fill out kRawSizes...; }; if (reqSections & TBuffer3D::kRaw) {; // Fill out kRaw...; }; // Add second time to viewer - ignore return cannot do more; viewer-&gt;AddObject(buffer);; }; }; ~~~. `ShapeSpecific`: If the viewer can directly display the buffer without; filling of the kRaw/kRawSizes section it will not need to request client side; tessellation. Currently we provide the following various shape specific classes, which the; OpenGL viewer can take advantage of (see TBuffer3D.h and TBuffer3DTypes.h). - TBuffer3DSphere - solid, hollow and cut spheres*; - TBuffer3DTubeSeg - angle tube segment; - TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated. Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time. `BoundingBox:` You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster`",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:3906,Usability,simpl,simpler,3906,"f (see TBuffer3D.h and TBuffer3DTypes.h). - TBuffer3DSphere - solid, hollow and cut spheres*; - TBuffer3DTubeSeg - angle tube segment; - TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated. Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time. `BoundingBox:` You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placem",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:6640,Usability,simpl,simply,6640,"epeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D ",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:7901,Usability,simpl,simple,7901,"ept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ### Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear any sections marked valid.",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test if buffer represents a solid uncut sphere.",MatchSource.CODE_COMMENT,core/base/src/TBuffer3D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4052,Availability,avail,available,4052,"etCanvas(cw);; w->Draw();; }; End_Macro. The complete list of predefined color names is the following:. ~~~ {.cpp}; kWhite = 0, kBlack = 1, kGray = 920, kRed = 632, kGreen = 416,; kBlue = 600, kYellow = 400, kMagenta = 616, kCyan = 432, kOrange = 800,; kSpring = 820, kTeal = 840, kAzure = 860, kViolet = 880, kPink = 900; ~~~. Note the special role of color `kWhite` (color number 0). It is the default; background color also. For instance in a PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Pet",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4766,Availability,avail,available,4766,"lorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(sour",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4916,Availability,avail,available,4916,"al objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro.",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:11747,Availability,down,downloaded,11747,"inbow-color-map),; which is misleading for colour-blinded people in a 2D plot (not so much in a 3D surfaces). The `kCMYK` palette, is also not great because it's dark, then lighter, then; half-dark again. Some others, like `kAquamarine`, have almost no contrast therefore it would; be almost impossible (for a color blind person) to see something with a such palette. Therefore the palettes are classified in two categories: those which are Colour Vision Deficiency; friendly and those which are not. An easy way to classify the palettes is to turn them into grayscale using TCanvas::SetGrayscale().; The grayscale version of a palette should be as proportional as possible, and monotonously; increasing or decreasing. Unless it is symmetrical, then it is fine to have white in the; borders and black in the centre (for example an axis that goes between; -40 degrees and +40 degrees, the 0 has a meaning in the perceptualcolormap.C example). A full set of colour-vision deficiency friendly and perceptually uniform colour maps can be; [downloaded](https://doi.org/10.5281/zenodo.4491293) and used with ROOT (since 6.26) via:; `gStyle->SetPalette(""filename.txt"")` or `TColor::CreateColorTableFromFile(""filename.txt"")`.; Remember to increase the number of contours for a smoother result, e.g.:; `gStyle->SetNumberContours(99)` if you are drawing with ""surf1z"" or `gStyle->SetNumberContours(256)`; if with ""colz"". \anchor C06a; ### Colour Vision Deficiency (CVD) friendly palettes. <table border=0>; <tr><td>; Begin_Macro; {; auto c = new TCanvas(""c"",""c"",0,0,300,300);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",0.999,3.002,0.999,3.002);; f2->SetContour(99); gStyle->SetPalette(kBird);; f2->Draw(""surf2Z""); f2->SetTitle(""kBird (default)"");; }; End_Macro; </td><td>; Begin_Macro; {; auto c = new TCanvas(""c"",""c"",0,0,300,300);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",0.999,3.002,0.999,3.002);; f2->SetContour(99); gStyle->SetPalette(kGreyScale);; f2->Draw(""surf2Z"")",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:31784,Availability,avail,available,31784,"nsparent one. The color transparency is defined via its alpha component. The; alpha value varies from `0.` (fully transparent) to `1.` (fully; opaque). To set the alpha value of an existing color it is enough to do:. ~~~ {.cpp}; TColor *col26 = gROOT->GetColor(26);; col26->SetAlpha(0.01);; ~~~. A new color can be created transparent the following way:. ~~~ {.cpp}; Int_t ci = 1756;; auto color = new TColor(ci, 0.1, 0.2, 0.3, """", 0.5); // alpha = 0.5; ~~~. An example of transparency usage with parallel coordinates can be found; in parallelcoordtrans.C. To ease the creation of a transparent color the static method; `GetColorTransparent(Int_t color, Float_t a)` is provided.; In the following example the `trans_red` color index point to; a red color 30% opaque (70% transparent). The alpha value of; the color index `kRed` is not modified. ~~~ {.cpp}; Int_t trans_red = GetColorTransparent(kRed, 0.3);; ~~~. This function is also used in the methods; `SetFillColorAlpha()`, `SetLineColorAlpha()`,; `SetMarkerColorAlpha()` and `SetTextColorAlpha()`.; In the following example the fill color of the histogram `histo`; is set to blue with an opacity of 35% (i.e. a transparency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetFillColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. The following macro gives an example of transparency usage:. Begin_Macro(source); ../../../tutorials/graphics/transparency.C; End_Macro. */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5405,Deployability,toggle,toggle,5405,"tial for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. ~~~ {.cpp}; gStyle->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the col",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:6803,Deployability,continuous,continuous,6803,"vas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. ~~~ {.cpp}; gStyle->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; End_Macro. To define more a complex palette with a continuous gradient of color, one; should use the static function `TColor::CreateGradientColorTable()`.; The following example demonstrates how to proceed:. Begin_Macro(source); {; auto c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; const Int_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; End_Macro. The function `TColor::CreateGradientColorTable()` automatically; calls `gStyle->SetPalette()`, so there is not need to add one. After a call to `TColor::CreateGradientColorTable()` it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch b",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:662,Energy Efficiency,green,green,662,"/** \class TColor; \ingroup Base; \ingroup GraphicsAtt. The color creation and management class. - [Introduction](\ref C00); - [Basic colors](\ref C01); - [The color wheel](\ref C02); - [Bright and dark colors](\ref C03); - [Accessible Color Schemes](\ref C031); - [Gray scale view of of canvas with colors](\ref C04); - [Color palettes](\ref C05); - [High quality predefined palettes](\ref C06); - [Colour Vision Deficiency (CVD) friendly palettes](\ref C06a); - [Non Colour Vision Deficiency (CVD) friendly palettes](\ref C06b); - [Palette inversion](\ref C061); - [Color transparency](\ref C07). \anchor C00; ## Introduction. Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. ~~~ {.cpp}; TColor *color = gROOT->GetColor(10);; ~~~. Then it can be manipulated. For example its RGB components can be modified:. ~~~ {.cpp}; color->SetRGB(0.1, 0.2, 0.3);; ~~~. A new color can be created the following way:. ~~~ {.cpp}; Int_t ci = 1756; // color index; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. \since **6.07/07:**; TColor::GetFreeColorIndex() allows to make sure the new color is created with an; unused color index:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. Two sets of colors are initialized;. - The basic colors: colors with index from 0 to 50.; - The color wheel: colors with indices from 300 to 1000. \anchor C01; ## Basic colors; The following image displays the 50 basic colors. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. \anchor C02; ## The color wheel; The wheel contains the recommended 216 colors ",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:7182,Energy Efficiency,Green,Green,7182,"Style->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; End_Macro. To define more a complex palette with a continuous gradient of color, one; should use the static function `TColor::CreateGradientColorTable()`.; The following example demonstrates how to proceed:. Begin_Macro(source); {; auto c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; const Int_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; End_Macro. The function `TColor::CreateGradientColorTable()` automatically; calls `gStyle->SetPalette()`, so there is not need to add one. After a call to `TColor::CreateGradientColorTable()` it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. ~~~ {.cpp}; Int_t MyPalette[100];; Double_t Red[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t Green[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t Blue[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t Length[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:7380,Energy Efficiency,Green,Green,7380,"use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; End_Macro. To define more a complex palette with a continuous gradient of color, one; should use the static function `TColor::CreateGradientColorTable()`.; The following example demonstrates how to proceed:. Begin_Macro(source); {; auto c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; const Int_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; End_Macro. The function `TColor::CreateGradientColorTable()` automatically; calls `gStyle->SetPalette()`, so there is not need to add one. After a call to `TColor::CreateGradientColorTable()` it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. ~~~ {.cpp}; Int_t MyPalette[100];; Double_t Red[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t Green[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t Blue[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t Length[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, Length, Red, Green, Blue, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;; ~~~. Later on to reuse the palette `MyPalette` it will be enough to do. ~~~ {.cpp}; gStyle->SetPalette(100, MyPalette);; ~~~. As only one palett",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:8012,Energy Efficiency,Green,Green,8012,"""c2"",0,0,600,400);; auto f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; const Int_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; End_Macro. The function `TColor::CreateGradientColorTable()` automatically; calls `gStyle->SetPalette()`, so there is not need to add one. After a call to `TColor::CreateGradientColorTable()` it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. ~~~ {.cpp}; Int_t MyPalette[100];; Double_t Red[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t Green[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t Blue[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t Length[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, Length, Red, Green, Blue, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;; ~~~. Later on to reuse the palette `MyPalette` it will be enough to do. ~~~ {.cpp}; gStyle->SetPalette(100, MyPalette);; ~~~. As only one palette is active, one need to use `TExec` to be able to; display plots using different palettes on the same pad.; The tutorial multipalette.C illustrates this feature. Begin_Macro(source); ../../../tutorials/graphs/multipalette.C; End_Macro. \since **6.26:**; The function `TColor::CreateColorTableFromFile(""filename.txt"")` allows you to create a color; palette based on an input ASCII file. In contrast to `TColor::CreateGradientColorTable()`, here; the length (spacing) is constant and can not be tuned. There is no gradient being interpolated; between adjacent colors. The palette will contain the exact",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:8201,Energy Efficiency,Green,Green,8201,"0, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; End_Macro. The function `TColor::CreateGradientColorTable()` automatically; calls `gStyle->SetPalette()`, so there is not need to add one. After a call to `TColor::CreateGradientColorTable()` it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. ~~~ {.cpp}; Int_t MyPalette[100];; Double_t Red[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t Green[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t Blue[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t Length[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, Length, Red, Green, Blue, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;; ~~~. Later on to reuse the palette `MyPalette` it will be enough to do. ~~~ {.cpp}; gStyle->SetPalette(100, MyPalette);; ~~~. As only one palette is active, one need to use `TExec` to be able to; display plots using different palettes on the same pad.; The tutorial multipalette.C illustrates this feature. Begin_Macro(source); ../../../tutorials/graphs/multipalette.C; End_Macro. \since **6.26:**; The function `TColor::CreateColorTableFromFile(""filename.txt"")` allows you to create a color; palette based on an input ASCII file. In contrast to `TColor::CreateGradientColorTable()`, here; the length (spacing) is constant and can not be tuned. There is no gradient being interpolated; between adjacent colors. The palette will contain the exact colors stored in the file, that; comprises one line per color in the format ""r g b"" as floats. \anchor C06; ## High quality predefined palettes; \since **6.04:**; 63 high quality palettes are",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:6013,Modifiability,variab,variable,6013,"rName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. ~~~ {.cpp}; gStyle->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; End_Macro. To define more a complex palette with a continuous gradient of color, one; should use the static function `TColor::CreateGradientColorTable()`.; The following example demonstrates how to proceed:. Begin_Macro(source); {; auto c",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:8905,Performance,tune,tuned,8905,"define palettes.; To store a palette in an array it is enough to do:. ~~~ {.cpp}; Int_t MyPalette[100];; Double_t Red[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t Green[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t Blue[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t Length[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, Length, Red, Green, Blue, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;; ~~~. Later on to reuse the palette `MyPalette` it will be enough to do. ~~~ {.cpp}; gStyle->SetPalette(100, MyPalette);; ~~~. As only one palette is active, one need to use `TExec` to be able to; display plots using different palettes on the same pad.; The tutorial multipalette.C illustrates this feature. Begin_Macro(source); ../../../tutorials/graphs/multipalette.C; End_Macro. \since **6.26:**; The function `TColor::CreateColorTableFromFile(""filename.txt"")` allows you to create a color; palette based on an input ASCII file. In contrast to `TColor::CreateGradientColorTable()`, here; the length (spacing) is constant and can not be tuned. There is no gradient being interpolated; between adjacent colors. The palette will contain the exact colors stored in the file, that; comprises one line per color in the format ""r g b"" as floats. \anchor C06; ## High quality predefined palettes; \since **6.04:**; 63 high quality palettes are predefined with 255 colors each. These palettes can be accessed ""by name"" with `gStyle->SetPalette(num)`.; `num` can be taken within the following enum:. ~~~ {.cpp}; kDeepSea=51, kGreyScale=52, kDarkBodyRadiator=53,; kBlueYellow= 54, kRainBow=55, kInvertedDarkBodyRadiator=56,; kBird=57, kCubehelix=58, kGreenRedViolet=59,; kBlueRedYellow=60, kOcean=61, kColorPrintableOnGrey=62,; kAlpine=63, kAquamarine=64, kArmy=65,; kAtlantic=66, kAurora=67, kAvocado=68,; kBeach=69, kBlackBody=70, kBlueGreenYellow=71,; kBrownCyan=72, kCMYK=73, kCandy=74,; kCherry=75, kCoffee=76, kDarkRainBow=77,; kDarkTerrain=78, kFall=79, kFruitPunch=80,; kFuchsia=81, kGrey",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:225,Security,Access,Accessible,225,"/** \class TColor; \ingroup Base; \ingroup GraphicsAtt. The color creation and management class. - [Introduction](\ref C00); - [Basic colors](\ref C01); - [The color wheel](\ref C02); - [Bright and dark colors](\ref C03); - [Accessible Color Schemes](\ref C031); - [Gray scale view of of canvas with colors](\ref C04); - [Color palettes](\ref C05); - [High quality predefined palettes](\ref C06); - [Colour Vision Deficiency (CVD) friendly palettes](\ref C06a); - [Non Colour Vision Deficiency (CVD) friendly palettes](\ref C06b); - [Palette inversion](\ref C061); - [Color transparency](\ref C07). \anchor C00; ## Introduction. Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. ~~~ {.cpp}; TColor *color = gROOT->GetColor(10);; ~~~. Then it can be manipulated. For example its RGB components can be modified:. ~~~ {.cpp}; color->SetRGB(0.1, 0.2, 0.3);; ~~~. A new color can be created the following way:. ~~~ {.cpp}; Int_t ci = 1756; // color index; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. \since **6.07/07:**; TColor::GetFreeColorIndex() allows to make sure the new color is created with an; unused color index:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. Two sets of colors are initialized;. - The basic colors: colors with index from 0 to 50.; - The color wheel: colors with indices from 300 to 1000. \anchor C01; ## Basic colors; The following image displays the 50 basic colors. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. \anchor C02; ## The color wheel; The wheel contains the recommended 216 colors ",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4349,Security,Access,Accessible,4349,"00; ~~~. Note the special role of color `kWhite` (color number 0). It is the default; background color also. For instance in a PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can ",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4571,Security,access,accessibility,4571,"PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, ",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4816,Security,access,accessible-color-cycles,4816,"chor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5146,Security,access,accessiblecolorschemes,5146," these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current p",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5532,Security,access,access,5532,"esults should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. ~~~ {.cpp}; gStyle->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palet",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5651,Security,access,access,5651,"esults should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. ~~~ {.cpp}; gStyle->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palet",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:9260,Security,access,accessed,9260,"ater on to reuse the palette `MyPalette` it will be enough to do. ~~~ {.cpp}; gStyle->SetPalette(100, MyPalette);; ~~~. As only one palette is active, one need to use `TExec` to be able to; display plots using different palettes on the same pad.; The tutorial multipalette.C illustrates this feature. Begin_Macro(source); ../../../tutorials/graphs/multipalette.C; End_Macro. \since **6.26:**; The function `TColor::CreateColorTableFromFile(""filename.txt"")` allows you to create a color; palette based on an input ASCII file. In contrast to `TColor::CreateGradientColorTable()`, here; the length (spacing) is constant and can not be tuned. There is no gradient being interpolated; between adjacent colors. The palette will contain the exact colors stored in the file, that; comprises one line per color in the format ""r g b"" as floats. \anchor C06; ## High quality predefined palettes; \since **6.04:**; 63 high quality palettes are predefined with 255 colors each. These palettes can be accessed ""by name"" with `gStyle->SetPalette(num)`.; `num` can be taken within the following enum:. ~~~ {.cpp}; kDeepSea=51, kGreyScale=52, kDarkBodyRadiator=53,; kBlueYellow= 54, kRainBow=55, kInvertedDarkBodyRadiator=56,; kBird=57, kCubehelix=58, kGreenRedViolet=59,; kBlueRedYellow=60, kOcean=61, kColorPrintableOnGrey=62,; kAlpine=63, kAquamarine=64, kArmy=65,; kAtlantic=66, kAurora=67, kAvocado=68,; kBeach=69, kBlackBody=70, kBlueGreenYellow=71,; kBrownCyan=72, kCMYK=73, kCandy=74,; kCherry=75, kCoffee=76, kDarkRainBow=77,; kDarkTerrain=78, kFall=79, kFruitPunch=80,; kFuchsia=81, kGreyYellow=82, kGreenBrownTerrain=83,; kGreenPink=84, kIsland=85, kLake=86,; kLightTemperature=87, kLightTerrain=88, kMint=89,; kNeon=90, kPastel=91, kPearl=92,; kPigeon=93, kPlum=94, kRedBlue=95,; kRose=96, kRust=97, kSandyTerrain=98,; kSienna=99, kSolar=100, kSouthWest=101,; kStarryNight=102, kSunset=103, kTemperatureMap=104,; kThermometer=105, kValentine=106, kVisibleSpectrum=107,; kWaterMelon=108, kCool=109, kCopper=",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:689,Usability,simpl,simply,689,"/** \class TColor; \ingroup Base; \ingroup GraphicsAtt. The color creation and management class. - [Introduction](\ref C00); - [Basic colors](\ref C01); - [The color wheel](\ref C02); - [Bright and dark colors](\ref C03); - [Accessible Color Schemes](\ref C031); - [Gray scale view of of canvas with colors](\ref C04); - [Color palettes](\ref C05); - [High quality predefined palettes](\ref C06); - [Colour Vision Deficiency (CVD) friendly palettes](\ref C06a); - [Non Colour Vision Deficiency (CVD) friendly palettes](\ref C06b); - [Palette inversion](\ref C061); - [Color transparency](\ref C07). \anchor C00; ## Introduction. Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. ~~~ {.cpp}; TColor *color = gROOT->GetColor(10);; ~~~. Then it can be manipulated. For example its RGB components can be modified:. ~~~ {.cpp}; color->SetRGB(0.1, 0.2, 0.3);; ~~~. A new color can be created the following way:. ~~~ {.cpp}; Int_t ci = 1756; // color index; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. \since **6.07/07:**; TColor::GetFreeColorIndex() allows to make sure the new color is created with an; unused color index:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. Two sets of colors are initialized;. - The basic colors: colors with index from 0 to 50.; - The color wheel: colors with indices from 300 to 1000. \anchor C01; ## Basic colors; The following image displays the 50 basic colors. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. \anchor C02; ## The color wheel; The wheel contains the recommended 216 colors ",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3582,Usability,simpl,simply,3582,"oup. Each color chip is identified by a mnemonic (e.g. kYellow) and a number.; The keywords, kRed, kBlue, kYellow, kPink, etc are defined in the header file; Rtypes.h that is included in all ROOT other header files. It is better; to use these keywords in user code instead of hardcoded color numbers, e.g.:. ~~~ {.cpp}; myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);; ~~~. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; w->SetCanvas(cw);; w->Draw();; }; End_Macro. The complete list of predefined color names is the following:. ~~~ {.cpp}; kWhite = 0, kBlack = 1, kGray = 920, kRed = 632, kGreen = 416,; kBlue = 600, kYellow = 400, kMagenta = 616, kCyan = 432, kOrange = 800,; kSpring = 820, kTeal = 840, kAzure = 860, kViolet = 880, kPink = 900; ~~~. Note the special role of color `kWhite` (color number 0). It is the default; background color also. For instance in a PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publication",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3659,Usability,simpl,simplest,3659,", kPink, etc are defined in the header file; Rtypes.h that is included in all ROOT other header files. It is better; to use these keywords in user code instead of hardcoded color numbers, e.g.:. ~~~ {.cpp}; myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);; ~~~. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; w->SetCanvas(cw);; w->Draw();; }; End_Macro. The complete list of predefined color names is the following:. ~~~ {.cpp}; kWhite = 0, kBlack = 1, kGray = 920, kRed = 632, kGreen = 416,; kBlue = 600, kYellow = 400, kMagenta = 616, kCyan = 432, kOrange = 800,; kSpring = 820, kTeal = 840, kAzure = 860, kViolet = 880, kPink = 900; ~~~. Note the special role of color `kWhite` (color number 0). It is the default; background color also. For instance in a PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color s",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:233,Safety,avoid,avoid,233,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning kTRUE if some new colors have been defined after; /// initialisation or since the last call to this method. This allows to avoid; /// the colors and palette streaming in TCanvas::Streamer if not needed.; /// If method called once with set_always_on = 1, all next canvases will be; // saved with color palette - disregard if new colors created or not.; /// To reset such mode, just call methoid once with set_always_on = -1",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate color now (can be delayed when we have a large colormap)",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:158,Integrability,depend,dependent,158,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning color number for color specified by; /// system dependent pixel value. Pixel values can be obtained, e.g.,; /// from the GUI color picker.; ///; /// The color retrieval is done using a threshold defined by SetColorThreshold.",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:279,Availability,avail,available,279,"////////////////////////////////////////////////////////////////////////////////; /// This method specifies the color threshold used by GetColor to retrieve a color.; ///; /// \param[in] t Color threshold. By default is equal to 1./31. or 1./255.; /// depending on the number of available color planes.; ///; /// When GetColor is called, it scans the defined colors and compare them to the; /// requested color.; /// If the Red Green and Blue values passed to GetColor are Rr Gr Br; /// and Rd Gd Bd the values of a defined color. These two colors are considered equal; /// if (abs(Rr-Rd) < t & abs(Br-Bd) < t & abs(Br-Bd) < t). If this test passes,; /// the color defined by Rd Gd Bd is returned by GetColor.; ///; /// To make sure GetColor will return a color having exactly the requested; /// R G B values it is enough to specify a nul :; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(0.);; /// ~~~; ///; /// To reset the color threshold to its default value it is enough to do:; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(-1.);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:428,Energy Efficiency,Green,Green,428,"////////////////////////////////////////////////////////////////////////////////; /// This method specifies the color threshold used by GetColor to retrieve a color.; ///; /// \param[in] t Color threshold. By default is equal to 1./31. or 1./255.; /// depending on the number of available color planes.; ///; /// When GetColor is called, it scans the defined colors and compare them to the; /// requested color.; /// If the Red Green and Blue values passed to GetColor are Rr Gr Br; /// and Rd Gd Bd the values of a defined color. These two colors are considered equal; /// if (abs(Rr-Rd) < t & abs(Br-Bd) < t & abs(Br-Bd) < t). If this test passes,; /// the color defined by Rd Gd Bd is returned by GetColor.; ///; /// To make sure GetColor will return a color having exactly the requested; /// R G B values it is enough to specify a nul :; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(0.);; /// ~~~; ///; /// To reset the color threshold to its default value it is enough to do:; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(-1.);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:252,Integrability,depend,depending,252,"////////////////////////////////////////////////////////////////////////////////; /// This method specifies the color threshold used by GetColor to retrieve a color.; ///; /// \param[in] t Color threshold. By default is equal to 1./31. or 1./255.; /// depending on the number of available color planes.; ///; /// When GetColor is called, it scans the defined colors and compare them to the; /// requested color.; /// If the Red Green and Blue values passed to GetColor are Rr Gr Br; /// and Rd Gd Bd the values of a defined color. These two colors are considered equal; /// if (abs(Rr-Rd) < t & abs(Br-Bd) < t & abs(Br-Bd) < t). If this test passes,; /// the color defined by Rd Gd Bd is returned by GetColor.; ///; /// To make sure GetColor will return a color having exactly the requested; /// R G B values it is enough to specify a nul :; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(0.);; /// ~~~; ///; /// To reset the color threshold to its default value it is enough to do:; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(-1.);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:637,Testability,test,test,637,"////////////////////////////////////////////////////////////////////////////////; /// This method specifies the color threshold used by GetColor to retrieve a color.; ///; /// \param[in] t Color threshold. By default is equal to 1./31. or 1./255.; /// depending on the number of available color planes.; ///; /// When GetColor is called, it scans the defined colors and compare them to the; /// requested color.; /// If the Red Green and Blue values passed to GetColor are Rr Gr Br; /// and Rd Gd Bd the values of a defined color. These two colors are considered equal; /// if (abs(Rr-Rd) < t & abs(Br-Bd) < t & abs(Br-Bd) < t). If this test passes,; /// the color defined by Rd Gd Bd is returned by GetColor.; ///; /// To make sure GetColor will return a color having exactly the requested; /// R G B values it is enough to specify a nul :; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(0.);; /// ~~~; ///; /// To reset the color threshold to its default value it is enough to do:; /// ~~~ {.cpp}; /// TColor::SetColorThreshold(-1.);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:119,Integrability,depend,dependent,119,"////////////////////////////////////////////////////////////////////////////////; /// Convert r,g,b to graphics system dependent pixel value.; /// The r,g,b triplet must be [0,1].",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:119,Integrability,depend,dependent,119,"////////////////////////////////////////////////////////////////////////////////; /// Convert r,g,b to graphics system dependent pixel value.; /// The r,g,b triplet must be [0,255].",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:102,Integrability,depend,dependent,102,"////////////////////////////////////////////////////////////////////////////////; /// Convert machine dependent pixel value (obtained via RGB2Pixel or; /// via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; /// The r,g,b triplet will be [0,1].",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:102,Integrability,depend,dependent,102,"////////////////////////////////////////////////////////////////////////////////; /// Convert machine dependent pixel value (obtained via RGB2Pixel or; /// via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; /// The r,g,b triplet will be [0,255].",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:102,Integrability,depend,dependent,102,"////////////////////////////////////////////////////////////////////////////////; /// Convert machine dependent pixel value (obtained via RGB2Pixel or; /// via Number2Pixel() or via TColor::GetPixel()) to a hexadecimal string.; /// This string can be directly passed to, for example,; /// TGClient::GetColorByName(). String will be reused so copy immediately; /// if needed.",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:934,Availability,error,error,934,"////////////////////////////////////////////////////////////////////////////////; /// \brief Static function creating a color palette based on an input text file.; ///; /// Every color in the file will take the same amount of space in the palette.; ///; /// \see https://doi.org/10.1038/s41467-020-19160-7; /// \note This function is designed to load into ROOT the colour-vision; /// deficiency friendly and perceptually uniform colour maps specially designed; /// in https://doi.org/10.5281/zenodo.4491293, namely the .txt files stored; /// in the subfolders of ScientificColourMaps7.zip, e.g. batlow/batlow.txt; ///; /// \param fileName: Name of a .txt file (ASCII) containing three floats per; /// line, separated by spaces, namely the r g b fractions of the color, each; /// value being in the range [0,1].; /// \param alpha the global opacity for all colors within this palette; /// \return a positive value on success and -1 on error.; /// \author Fernando Hueso-González",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:346,Performance,load,load,346,"////////////////////////////////////////////////////////////////////////////////; /// \brief Static function creating a color palette based on an input text file.; ///; /// Every color in the file will take the same amount of space in the palette.; ///; /// \see https://doi.org/10.1038/s41467-020-19160-7; /// \note This function is designed to load into ROOT the colour-vision; /// deficiency friendly and perceptually uniform colour maps specially designed; /// in https://doi.org/10.5281/zenodo.4491293, namely the .txt files stored; /// in the subfolders of ScientificColourMaps7.zip, e.g. batlow/batlow.txt; ///; /// \param fileName: Name of a .txt file (ASCII) containing three floats per; /// line, separated by spaces, namely the r g b fractions of the color, each; /// value being in the range [0,1].; /// \param alpha the global opacity for all colors within this palette; /// \return a positive value on success and -1 on error.; /// \author Fernando Hueso-González",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:1060,Availability,error,error,1060,"///////////////////////////////////////////////////////////////////////; /// Static function creating a color table with several connected linear gradients.; ///; /// - Number: The number of end point colors that will form the gradients.; /// Must be at least 2.; /// - Stops: Where in the whole table the end point colors should lie.; /// Each entry must be on [0, 1], each entry must be greater than; /// the previous entry.; /// - Red, Green, Blue: The end point color values.; /// Each entry must be on [0, 1]; /// - NColors: Total number of colors in the table. Must be at least 1.; /// - alpha: the opacity factor, between 0 and 1. Default is no transparency (1).; /// - setPalette: activate the newly created palette (true by default). If false,; /// the caller is in charge of calling TColor::SetPalette using the; /// return value of the function (first palette color index) and; /// reconstructing the Int_t palette[NColors+1] array.; ///; /// Returns a positive value (the index of the first color of the palette) on; /// success and -1 on error.; ///; /// The table is constructed by tracing lines between the given points in; /// RGB space. Each color value may have a value between 0 and 1. The; /// difference between consecutive ""Stops"" values gives the fraction of; /// space in the whole table that should be used for the interval between; /// the corresponding color values.; ///; /// Normally the first element of Stops should be 0 and the last should be 1.; /// If this is not true, fewer than NColors will be used in proportion with; /// the total interval between the first and last elements of Stops.; ///; /// This definition is similar to the povray-definition of gradient; /// color tables.; ///; /// For instance:; /// ~~~ {.cpp}; /// UInt_t Number = 3;; /// Double_t Red[3] = { 0.0, 1.0, 1.0 };; /// Double_t Green[3] = { 0.0, 0.0, 1.0 };; /// Double_t Blue[3] = { 1.0, 0.0, 1.0 };; /// Double_t Stops[3] = { 0.0, 0.4, 1.0 };; /// ~~~; /// This defines a table in which t",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:448,Energy Efficiency,Green,Green,448,"////////////////////////////////////////////////////////////////////////////////; /// Static function creating a color table with several connected linear gradients.; ///; /// - Number: The number of end point colors that will form the gradients.; /// Must be at least 2.; /// - Stops: Where in the whole table the end point colors should lie.; /// Each entry must be on [0, 1], each entry must be greater than; /// the previous entry.; /// - Red, Green, Blue: The end point color values.; /// Each entry must be on [0, 1]; /// - NColors: Total number of colors in the table. Must be at least 1.; /// - alpha: the opacity factor, between 0 and 1. Default is no transparency (1).; /// - setPalette: activate the newly created palette (true by default). If false,; /// the caller is in charge of calling TColor::SetPalette using the; /// return value of the function (first palette color index) and; /// reconstructing the Int_t palette[NColors+1] array.; ///; /// Returns a positive value (the index of the first color of the palette) on; /// success and -1 on error.; ///; /// The table is constructed by tracing lines between the given points in; /// RGB space. Each color value may have a value between 0 and 1. The; /// difference between consecutive ""Stops"" values gives the fraction of; /// space in the whole table that should be used for the interval between; /// the corresponding color values.; ///; /// Normally the first element of Stops should be 0 and the last should be 1.; /// If this is not true, fewer than NColors will be used in proportion with; /// the total interval between the first and last elements of Stops.; ///; /// This definition is similar to the povray-definition of gradient; /// color tables.; ///; /// For instance:; /// ~~~ {.cpp}; /// UInt_t Number = 3;; /// Double_t Red[3] = { 0.0, 1.0, 1.0 };; /// Double_t Green[3] = { 0.0, 0.0, 1.0 };; /// Double_t Blue[3] = { 1.0, 0.0, 1.0 };; /// Double_t Stops[3] = { 0.0, 0.4, 1.0 };; /// ~~~; /// This defines a table in",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:784,Energy Efficiency,charge,charge,784,"////////////////////////////////////////////////////////////////////////////////; /// Static function creating a color table with several connected linear gradients.; ///; /// - Number: The number of end point colors that will form the gradients.; /// Must be at least 2.; /// - Stops: Where in the whole table the end point colors should lie.; /// Each entry must be on [0, 1], each entry must be greater than; /// the previous entry.; /// - Red, Green, Blue: The end point color values.; /// Each entry must be on [0, 1]; /// - NColors: Total number of colors in the table. Must be at least 1.; /// - alpha: the opacity factor, between 0 and 1. Default is no transparency (1).; /// - setPalette: activate the newly created palette (true by default). If false,; /// the caller is in charge of calling TColor::SetPalette using the; /// return value of the function (first palette color index) and; /// reconstructing the Int_t palette[NColors+1] array.; ///; /// Returns a positive value (the index of the first color of the palette) on; /// success and -1 on error.; ///; /// The table is constructed by tracing lines between the given points in; /// RGB space. Each color value may have a value between 0 and 1. The; /// difference between consecutive ""Stops"" values gives the fraction of; /// space in the whole table that should be used for the interval between; /// the corresponding color values.; ///; /// Normally the first element of Stops should be 0 and the last should be 1.; /// If this is not true, fewer than NColors will be used in proportion with; /// the total interval between the first and last elements of Stops.; ///; /// This definition is similar to the povray-definition of gradient; /// color tables.; ///; /// For instance:; /// ~~~ {.cpp}; /// UInt_t Number = 3;; /// Double_t Red[3] = { 0.0, 1.0, 1.0 };; /// Double_t Green[3] = { 0.0, 0.0, 1.0 };; /// Double_t Blue[3] = { 1.0, 0.0, 1.0 };; /// Double_t Stops[3] = { 0.0, 0.4, 1.0 };; /// ~~~; /// This defines a table in",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:1847,Energy Efficiency,Green,Green,1847," NColors: Total number of colors in the table. Must be at least 1.; /// - alpha: the opacity factor, between 0 and 1. Default is no transparency (1).; /// - setPalette: activate the newly created palette (true by default). If false,; /// the caller is in charge of calling TColor::SetPalette using the; /// return value of the function (first palette color index) and; /// reconstructing the Int_t palette[NColors+1] array.; ///; /// Returns a positive value (the index of the first color of the palette) on; /// success and -1 on error.; ///; /// The table is constructed by tracing lines between the given points in; /// RGB space. Each color value may have a value between 0 and 1. The; /// difference between consecutive ""Stops"" values gives the fraction of; /// space in the whole table that should be used for the interval between; /// the corresponding color values.; ///; /// Normally the first element of Stops should be 0 and the last should be 1.; /// If this is not true, fewer than NColors will be used in proportion with; /// the total interval between the first and last elements of Stops.; ///; /// This definition is similar to the povray-definition of gradient; /// color tables.; ///; /// For instance:; /// ~~~ {.cpp}; /// UInt_t Number = 3;; /// Double_t Red[3] = { 0.0, 1.0, 1.0 };; /// Double_t Green[3] = { 0.0, 0.0, 1.0 };; /// Double_t Blue[3] = { 1.0, 0.0, 1.0 };; /// Double_t Stops[3] = { 0.0, 0.4, 1.0 };; /// ~~~; /// This defines a table in which there are three color end points:; /// RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; /// The first 40% of the table is used to go linearly from blue to red.; /// The remaining 60% of the table is used to go linearly from red to white.; ///; /// If you define a very short interval such that less than one color fits; /// in it, no colors at all will be allocated. If this occurs for all; /// intervals, ROOT will revert to the default palette.; ///; /// Original code by Andreas Zoglauer (zog@mpe.mpg.de)",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:2377,Energy Efficiency,allocate,allocated,2377," NColors: Total number of colors in the table. Must be at least 1.; /// - alpha: the opacity factor, between 0 and 1. Default is no transparency (1).; /// - setPalette: activate the newly created palette (true by default). If false,; /// the caller is in charge of calling TColor::SetPalette using the; /// return value of the function (first palette color index) and; /// reconstructing the Int_t palette[NColors+1] array.; ///; /// Returns a positive value (the index of the first color of the palette) on; /// success and -1 on error.; ///; /// The table is constructed by tracing lines between the given points in; /// RGB space. Each color value may have a value between 0 and 1. The; /// difference between consecutive ""Stops"" values gives the fraction of; /// space in the whole table that should be used for the interval between; /// the corresponding color values.; ///; /// Normally the first element of Stops should be 0 and the last should be 1.; /// If this is not true, fewer than NColors will be used in proportion with; /// the total interval between the first and last elements of Stops.; ///; /// This definition is similar to the povray-definition of gradient; /// color tables.; ///; /// For instance:; /// ~~~ {.cpp}; /// UInt_t Number = 3;; /// Double_t Red[3] = { 0.0, 1.0, 1.0 };; /// Double_t Green[3] = { 0.0, 0.0, 1.0 };; /// Double_t Blue[3] = { 1.0, 0.0, 1.0 };; /// Double_t Stops[3] = { 0.0, 0.4, 1.0 };; /// ~~~; /// This defines a table in which there are three color end points:; /// RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; /// The first 40% of the table is used to go linearly from blue to red.; /// The remaining 60% of the table is used to go linearly from red to white.; ///; /// If you define a very short interval such that less than one color fits; /// in it, no colors at all will be allocated. If this occurs for all; /// intervals, ROOT will revert to the default palette.; ///; /// Original code by Andreas Zoglauer (zog@mpe.mpg.de)",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:1149,Availability,avail,available,1149,"ed by the histogram classes; /// (see TH1::Draw options).; /// For example TH1::Draw(""col"") draws a 2-D histogram with cells; /// represented by a box filled with a color CI function of the cell content.; /// if the cell content is N, the color CI used will be the color number; /// in colors[N],etc. If the maximum cell content is > ncolors, all; /// cell contents are scaled to ncolors.; ///; /// `if ncolors <= 0` a default palette (see below) of 50 colors is; /// defined. The colors defined in this palette are OK for coloring pads, labels.; ///; /// ~~~ {.cpp}; /// index 0->9 : grey colors from light to dark grey; /// index 10->19 : ""brown"" colors; /// index 20->29 : ""blueish"" colors; /// index 30->39 : ""redish"" colors; /// index 40->49 : basic colors; /// ~~~; ///; /// `if ncolors == 1 && colors == 0`, a Rainbow Color map is created; /// with 50 colors. It is kept for backward compatibility. Better palettes like; /// kBird are recommended.; ///; /// High quality predefined palettes with 255 colors are available when `colors == 0`.; /// The following value of `ncolors` give access to:; ///; /// ~~~ {.cpp}; /// if ncolors = 51 and colors=0, a Deep Sea palette is used.; /// if ncolors = 52 and colors=0, a Grey Scale palette is used.; /// if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; /// if ncolors = 54 and colors=0, a Two-Color Hue palette is used.(dark blue through neutral gray to bright yellow); /// if ncolors = 55 and colors=0, a Rain Bow palette is used.; /// if ncolors = 56 and colors=0, an Inverted Dark Body Radiator palette is used.; /// if ncolors = 57 and colors=0, a monotonically increasing L value palette is used.; /// if ncolors = 58 and colors=0, a Cubehelix palette is used; /// (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); /// if ncolors = 59 and colors=0, a Green Red Violet palette is used.; /// if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; /// if ncolors = 61 and col",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:1883,Energy Efficiency,Green,Green,1883,"//; /// `if ncolors == 1 && colors == 0`, a Rainbow Color map is created; /// with 50 colors. It is kept for backward compatibility. Better palettes like; /// kBird are recommended.; ///; /// High quality predefined palettes with 255 colors are available when `colors == 0`.; /// The following value of `ncolors` give access to:; ///; /// ~~~ {.cpp}; /// if ncolors = 51 and colors=0, a Deep Sea palette is used.; /// if ncolors = 52 and colors=0, a Grey Scale palette is used.; /// if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; /// if ncolors = 54 and colors=0, a Two-Color Hue palette is used.(dark blue through neutral gray to bright yellow); /// if ncolors = 55 and colors=0, a Rain Bow palette is used.; /// if ncolors = 56 and colors=0, an Inverted Dark Body Radiator palette is used.; /// if ncolors = 57 and colors=0, a monotonically increasing L value palette is used.; /// if ncolors = 58 and colors=0, a Cubehelix palette is used; /// (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); /// if ncolors = 59 and colors=0, a Green Red Violet palette is used.; /// if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; /// if ncolors = 61 and colors=0, an Ocean palette is used.; /// if ncolors = 62 and colors=0, a Color Printable On Grey palette is used.; /// if ncolors = 63 and colors=0, an Alpine palette is used.; /// if ncolors = 64 and colors=0, an Aquamarine palette is used.; /// if ncolors = 65 and colors=0, an Army palette is used.; /// if ncolors = 66 and colors=0, an Atlantic palette is used.; /// if ncolors = 67 and colors=0, an Aurora palette is used.; /// if ncolors = 68 and colors=0, an Avocado palette is used.; /// if ncolors = 69 and colors=0, a Beach palette is used.; /// if ncolors = 70 and colors=0, a Black Body palette is used.; /// if ncolors = 71 and colors=0, a Blue Green Yellow palette is used.; /// if ncolors = 72 and colors=0, a Brown Cyan palette is used.; /// if ncolors = 73 a",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:2000,Energy Efficiency,Green,Green,2000,"0 colors. It is kept for backward compatibility. Better palettes like; /// kBird are recommended.; ///; /// High quality predefined palettes with 255 colors are available when `colors == 0`.; /// The following value of `ncolors` give access to:; ///; /// ~~~ {.cpp}; /// if ncolors = 51 and colors=0, a Deep Sea palette is used.; /// if ncolors = 52 and colors=0, a Grey Scale palette is used.; /// if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; /// if ncolors = 54 and colors=0, a Two-Color Hue palette is used.(dark blue through neutral gray to bright yellow); /// if ncolors = 55 and colors=0, a Rain Bow palette is used.; /// if ncolors = 56 and colors=0, an Inverted Dark Body Radiator palette is used.; /// if ncolors = 57 and colors=0, a monotonically increasing L value palette is used.; /// if ncolors = 58 and colors=0, a Cubehelix palette is used; /// (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); /// if ncolors = 59 and colors=0, a Green Red Violet palette is used.; /// if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; /// if ncolors = 61 and colors=0, an Ocean palette is used.; /// if ncolors = 62 and colors=0, a Color Printable On Grey palette is used.; /// if ncolors = 63 and colors=0, an Alpine palette is used.; /// if ncolors = 64 and colors=0, an Aquamarine palette is used.; /// if ncolors = 65 and colors=0, an Army palette is used.; /// if ncolors = 66 and colors=0, an Atlantic palette is used.; /// if ncolors = 67 and colors=0, an Aurora palette is used.; /// if ncolors = 68 and colors=0, an Avocado palette is used.; /// if ncolors = 69 and colors=0, a Beach palette is used.; /// if ncolors = 70 and colors=0, a Black Body palette is used.; /// if ncolors = 71 and colors=0, a Blue Green Yellow palette is used.; /// if ncolors = 72 and colors=0, a Brown Cyan palette is used.; /// if ncolors = 73 and colors=0, a CMYK palette is used.; /// if ncolors = 74 and colors=0, a Candy pale",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:2787,Energy Efficiency,Green,Green,2787,"L value palette is used.; /// if ncolors = 58 and colors=0, a Cubehelix palette is used; /// (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); /// if ncolors = 59 and colors=0, a Green Red Violet palette is used.; /// if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; /// if ncolors = 61 and colors=0, an Ocean palette is used.; /// if ncolors = 62 and colors=0, a Color Printable On Grey palette is used.; /// if ncolors = 63 and colors=0, an Alpine palette is used.; /// if ncolors = 64 and colors=0, an Aquamarine palette is used.; /// if ncolors = 65 and colors=0, an Army palette is used.; /// if ncolors = 66 and colors=0, an Atlantic palette is used.; /// if ncolors = 67 and colors=0, an Aurora palette is used.; /// if ncolors = 68 and colors=0, an Avocado palette is used.; /// if ncolors = 69 and colors=0, a Beach palette is used.; /// if ncolors = 70 and colors=0, a Black Body palette is used.; /// if ncolors = 71 and colors=0, a Blue Green Yellow palette is used.; /// if ncolors = 72 and colors=0, a Brown Cyan palette is used.; /// if ncolors = 73 and colors=0, a CMYK palette is used.; /// if ncolors = 74 and colors=0, a Candy palette is used.; /// if ncolors = 75 and colors=0, a Cherry palette is used.; /// if ncolors = 76 and colors=0, a Coffee palette is used.; /// if ncolors = 77 and colors=0, a Dark Rain Bow palette is used.; /// if ncolors = 78 and colors=0, a Dark Terrain palette is used.; /// if ncolors = 79 and colors=0, a Fall palette is used.; /// if ncolors = 80 and colors=0, a Fruit Punch palette is used.; /// if ncolors = 81 and colors=0, a Fuchsia palette is used.; /// if ncolors = 82 and colors=0, a Grey Yellow palette is used.; /// if ncolors = 83 and colors=0, a Green Brown Terrain palette is used.; /// if ncolors = 84 and colors=0, a Green Pink palette is used.; /// if ncolors = 85 and colors=0, an Island palette is used.; /// if ncolors = 86 and colors=0, a Lake palette is used.; /// if n",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3548,Energy Efficiency,Green,Green,3548," is used.; /// if ncolors = 68 and colors=0, an Avocado palette is used.; /// if ncolors = 69 and colors=0, a Beach palette is used.; /// if ncolors = 70 and colors=0, a Black Body palette is used.; /// if ncolors = 71 and colors=0, a Blue Green Yellow palette is used.; /// if ncolors = 72 and colors=0, a Brown Cyan palette is used.; /// if ncolors = 73 and colors=0, a CMYK palette is used.; /// if ncolors = 74 and colors=0, a Candy palette is used.; /// if ncolors = 75 and colors=0, a Cherry palette is used.; /// if ncolors = 76 and colors=0, a Coffee palette is used.; /// if ncolors = 77 and colors=0, a Dark Rain Bow palette is used.; /// if ncolors = 78 and colors=0, a Dark Terrain palette is used.; /// if ncolors = 79 and colors=0, a Fall palette is used.; /// if ncolors = 80 and colors=0, a Fruit Punch palette is used.; /// if ncolors = 81 and colors=0, a Fuchsia palette is used.; /// if ncolors = 82 and colors=0, a Grey Yellow palette is used.; /// if ncolors = 83 and colors=0, a Green Brown Terrain palette is used.; /// if ncolors = 84 and colors=0, a Green Pink palette is used.; /// if ncolors = 85 and colors=0, an Island palette is used.; /// if ncolors = 86 and colors=0, a Lake palette is used.; /// if ncolors = 87 and colors=0, a Light Temperature palette is used.; /// if ncolors = 88 and colors=0, a Light Terrain palette is used.; /// if ncolors = 89 and colors=0, a Mint palette is used.; /// if ncolors = 90 and colors=0, a Neon palette is used.; /// if ncolors = 91 and colors=0, a Pastel palette is used.; /// if ncolors = 92 and colors=0, a Pearl palette is used.; /// if ncolors = 93 and colors=0, a Pigeon palette is used.; /// if ncolors = 94 and colors=0, a Plum palette is used.; /// if ncolors = 95 and colors=0, a Red Blue palette is used.; /// if ncolors = 96 and colors=0, a Rose palette is used.; /// if ncolors = 97 and colors=0, a Rust palette is used.; /// if ncolors = 98 and colors=0, a Sandy Terrain palette is used.; /// if ncolors = 99 and col",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3622,Energy Efficiency,Green,Green,3622,"ed.; /// if ncolors = 69 and colors=0, a Beach palette is used.; /// if ncolors = 70 and colors=0, a Black Body palette is used.; /// if ncolors = 71 and colors=0, a Blue Green Yellow palette is used.; /// if ncolors = 72 and colors=0, a Brown Cyan palette is used.; /// if ncolors = 73 and colors=0, a CMYK palette is used.; /// if ncolors = 74 and colors=0, a Candy palette is used.; /// if ncolors = 75 and colors=0, a Cherry palette is used.; /// if ncolors = 76 and colors=0, a Coffee palette is used.; /// if ncolors = 77 and colors=0, a Dark Rain Bow palette is used.; /// if ncolors = 78 and colors=0, a Dark Terrain palette is used.; /// if ncolors = 79 and colors=0, a Fall palette is used.; /// if ncolors = 80 and colors=0, a Fruit Punch palette is used.; /// if ncolors = 81 and colors=0, a Fuchsia palette is used.; /// if ncolors = 82 and colors=0, a Grey Yellow palette is used.; /// if ncolors = 83 and colors=0, a Green Brown Terrain palette is used.; /// if ncolors = 84 and colors=0, a Green Pink palette is used.; /// if ncolors = 85 and colors=0, an Island palette is used.; /// if ncolors = 86 and colors=0, a Lake palette is used.; /// if ncolors = 87 and colors=0, a Light Temperature palette is used.; /// if ncolors = 88 and colors=0, a Light Terrain palette is used.; /// if ncolors = 89 and colors=0, a Mint palette is used.; /// if ncolors = 90 and colors=0, a Neon palette is used.; /// if ncolors = 91 and colors=0, a Pastel palette is used.; /// if ncolors = 92 and colors=0, a Pearl palette is used.; /// if ncolors = 93 and colors=0, a Pigeon palette is used.; /// if ncolors = 94 and colors=0, a Plum palette is used.; /// if ncolors = 95 and colors=0, a Red Blue palette is used.; /// if ncolors = 96 and colors=0, a Rose palette is used.; /// if ncolors = 97 and colors=0, a Rust palette is used.; /// if ncolors = 98 and colors=0, a Sandy Terrain palette is used.; /// if ncolors = 99 and colors=0, a Sienna palette is used.; /// if ncolors = 100 and colors=0, a",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:1222,Security,access,access,1222,"aw(""col"") draws a 2-D histogram with cells; /// represented by a box filled with a color CI function of the cell content.; /// if the cell content is N, the color CI used will be the color number; /// in colors[N],etc. If the maximum cell content is > ncolors, all; /// cell contents are scaled to ncolors.; ///; /// `if ncolors <= 0` a default palette (see below) of 50 colors is; /// defined. The colors defined in this palette are OK for coloring pads, labels.; ///; /// ~~~ {.cpp}; /// index 0->9 : grey colors from light to dark grey; /// index 10->19 : ""brown"" colors; /// index 20->29 : ""blueish"" colors; /// index 30->39 : ""redish"" colors; /// index 40->49 : basic colors; /// ~~~; ///; /// `if ncolors == 1 && colors == 0`, a Rainbow Color map is created; /// with 50 colors. It is kept for backward compatibility. Better palettes like; /// kBird are recommended.; ///; /// High quality predefined palettes with 255 colors are available when `colors == 0`.; /// The following value of `ncolors` give access to:; ///; /// ~~~ {.cpp}; /// if ncolors = 51 and colors=0, a Deep Sea palette is used.; /// if ncolors = 52 and colors=0, a Grey Scale palette is used.; /// if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; /// if ncolors = 54 and colors=0, a Two-Color Hue palette is used.(dark blue through neutral gray to bright yellow); /// if ncolors = 55 and colors=0, a Rain Bow palette is used.; /// if ncolors = 56 and colors=0, an Inverted Dark Body Radiator palette is used.; /// if ncolors = 57 and colors=0, a monotonically increasing L value palette is used.; /// if ncolors = 58 and colors=0, a Cubehelix palette is used; /// (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); /// if ncolors = 59 and colors=0, a Green Red Violet palette is used.; /// if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; /// if ncolors = 61 and colors=0, an Ocean palette is used.; /// if ncolors = 62 and colors=0, a Color Printa",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5534,Security,access,accessed,5534,"colors = 99 and colors=0, a Sienna palette is used.; /// if ncolors = 100 and colors=0, a Solar palette is used.; /// if ncolors = 101 and colors=0, a South West palette is used.; /// if ncolors = 102 and colors=0, a Starry Night palette is used.; /// if ncolors = 103 and colors=0, a Sunset palette is used.; /// if ncolors = 104 and colors=0, a Temperature Map palette is used.; /// if ncolors = 105 and colors=0, a Thermometer palette is used.; /// if ncolors = 106 and colors=0, a Valentine palette is used.; /// if ncolors = 107 and colors=0, a Visible Spectrum palette is used.; /// if ncolors = 108 and colors=0, a Water Melon palette is used.; /// if ncolors = 109 and colors=0, a Cool palette is used.; /// if ncolors = 110 and colors=0, a Copper palette is used.; /// if ncolors = 111 and colors=0, a Gist Earth palette is used.; /// if ncolors = 112 and colors=0, a Viridis palette is used.; /// if ncolors = 113 and colors=0, a Cividis palette is used.; /// ~~~; /// These palettes can also be accessed by names:; /// ~~~ {.cpp}; /// kDeepSea=51, kGreyScale=52, kDarkBodyRadiator=53,; /// kBlueYellow= 54, kRainBow=55, kInvertedDarkBodyRadiator=56,; /// kBird=57, kCubehelix=58, kGreenRedViolet=59,; /// kBlueRedYellow=60, kOcean=61, kColorPrintableOnGrey=62,; /// kAlpine=63, kAquamarine=64, kArmy=65,; /// kAtlantic=66, kAurora=67, kAvocado=68,; /// kBeach=69, kBlackBody=70, kBlueGreenYellow=71,; /// kBrownCyan=72, kCMYK=73, kCandy=74,; /// kCherry=75, kCoffee=76, kDarkRainBow=77,; /// kDarkTerrain=78, kFall=79, kFruitPunch=80,; /// kFuchsia=81, kGreyYellow=82, kGreenBrownTerrain=83,; /// kGreenPink=84, kIsland=85, kLake=86,; /// kLightTemperature=87, kLightTerrain=88, kMint=89,; /// kNeon=90, kPastel=91, kPearl=92,; /// kPigeon=93, kPlum=94, kRedBlue=95,; /// kRose=96, kRust=97, kSandyTerrain=98,; /// kSienna=99, kSolar=100, kSouthWest=101,; /// kStarryNight=102, kSunset=103, kTemperatureMap=104,; /// kThermometer=105, kValentine=106, kVisibleSpectrum=107,; /// kWaterMelon",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3,Energy Efficiency,Green,Green,3,"// Green Red Violet",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:8,Energy Efficiency,Green,Green,8,"// Blue Green Yellow",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3,Energy Efficiency,Green,Green,3,"// Green Brown Terrain",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3,Energy Efficiency,Green,Green,3,"// Green Pink",MatchSource.CODE_COMMENT,core/base/src/TColor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx:499,Modifiability,extend,extends,499,"// @(#)root/base:$Id$; // Author: Timur Pocheptsov 20/3/2012; /*************************************************************************; * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TColorGradient; \ingroup Base; \ingroup GraphicsAtt. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code. Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code.; */",MatchSource.CODE_COMMENT,core/base/src/TColorGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx:610,Modifiability,inherit,inheriting,610,"// @(#)root/base:$Id$; // Author: Timur Pocheptsov 20/3/2012; /*************************************************************************; * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TColorGradient; \ingroup Base; \ingroup GraphicsAtt. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code. Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code.; */",MatchSource.CODE_COMMENT,core/base/src/TColorGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx:546,Usability,simpl,simple,546,"// @(#)root/base:$Id$; // Author: Timur Pocheptsov 20/3/2012; /*************************************************************************; * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TColorGradient; \ingroup Base; \ingroup GraphicsAtt. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code. Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code.; */",MatchSource.CODE_COMMENT,core/base/src/TColorGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx:105,Security,validat,validate,105,"////////////////////////////////////////////////////////////////////////////////; /// There is no way to validate parameters here, so it's up to user; /// to pass correct arguments.",MatchSource.CODE_COMMENT,core/base/src/TColorGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx:105,Security,validat,validate,105,"////////////////////////////////////////////////////////////////////////////////; /// There is no way to validate parameters here, so it's up to user; /// to pass correct arguments.",MatchSource.CODE_COMMENT,core/base/src/TColorGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx:793,Modifiability,portab,portable,793,"// @(#)root/base:$Id$; // Author: Rene Brun 05/01/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TDatime; \ingroup Base. This class stores the date and time with a precision of one second; in an unsigned 32 bit word (950130 124559).; The date is stored with the origin being the 1st January 1995. This class has no support for time zones. The time is assumed; to be in the local time of the machine where the object was created.; As a result, TDatime objects are not portable between machines; operating in different time zones and unsuitable for storing the; date/time of data taking events and the like. If absolute time is; required, use TTimeStamp.; */",MatchSource.CODE_COMMENT,core/base/src/TDatime.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx:190,Energy Efficiency,allocate,allocated,190,"////////////////////////////////////////////////////////////////////////////////; /// Return the date & time as a string (ctime() format).; /// Copy result because it points to a statically allocated string.",MatchSource.CODE_COMMENT,core/base/src/TDatime.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx:255,Safety,safe,safe,255,"////////////////////////////////////////////////////////////////////////////////; /// Return the date & time as a string (ctime() format).; /// Result is copied into out (and out is returned). Make sure; /// out can at least contain 26 characters. Thread safe.",MatchSource.CODE_COMMENT,core/base/src/TDatime.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx:617,Integrability,depend,dependent,617,"////////////////////////////////////////////////////////////////////////////////; /// Convert fDatime from TDatime format to the standard time_t format.; /// If toGMT is true, the time offset of the current local time zone is; /// subtracted from the returned time_t. One use of such a non-standard time_t; /// value is to convert a TDatime object that contains local time to GMT,; /// as in this example:; /// ~~~ {.cpp}; /// TDatime now;; /// now.Set(now.Convert(kTRUE));; /// ~~~; /// Caution: the time_t returned from Convert(kTRUE) is incompatible with; /// regular Unix time - it contains an artificial, locale-dependent offset.",MatchSource.CODE_COMMENT,core/base/src/TDatime.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx:460,Availability,failure,failure,460,"////////////////////////////////////////////////////////////////////////////////; /// Static function that returns the global day number from date. The input is; /// in TDatime format yyyymmdd (as obtained via TDatime::GetDate()).; /// This algorithm is only accurate for dates later than October 1582; /// (earliest date on Gregorian calendar) and it is checked that the date; /// is larger than 15821001 and conversion is correct.; /// In case of conversion failure 0 is returned.; /// No need to use when you know dates are larger than October 1582.",MatchSource.CODE_COMMENT,core/base/src/TDatime.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDatime.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:21,Safety,avoid,avoid,21,"// Use gROOTLocal to avoid triggering undesired initialization of gROOT.; // For example in compiled C++ programs that don't use it directly.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:256,Modifiability,variab,variable,256,"////////////////////////////////////////////////////////////////////////////////; /// Set the current directory to null.; /// This is called from the TContext destructor. Since the destructor is; /// inline, we do not want to have it directly use a global variable.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:116,Deployability,update,update,116,"// A priori, a `TDirectory` object is assumed to not have shared ownership.; // If it is, let's rely on the user to update the bit.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:37,Security,access,access,37,"// We can not use 'cd' as this would access the current thread; // rather than the thread corresponding to that gDirectory.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:19,Deployability,update,update,19,"// Actually do the update of the thread local gDirectory; // using its object specific lock.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:189,Integrability,depend,dependency,189,"////////////////////////////////////////////////////////////////////////////////; /// Fast execution of 'new TBufferFile(TBuffer::kWrite,10000), without having; /// a compile time circular dependency ... alternatively we could (should?); /// introduce yet another abstract interface.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:273,Integrability,interface,interface,273,"////////////////////////////////////////////////////////////////////////////////; /// Fast execution of 'new TBufferFile(TBuffer::kWrite,10000), without having; /// a compile time circular dependency ... alternatively we could (should?); /// introduce yet another abstract interface.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:201,Performance,load,load,201,"////////////////////////////////////////////////////////////////////////////////; /// Clone an object.; /// This function is called when the directory is not a TDirectoryFile.; /// This version has to load the I/O package, hence via Cling.; ///; /// If autoadd is true and if the object class has a; /// DirectoryAutoAdd function, it will be called at the end of the; /// function with the parameter gDirector. This usually means that; /// the object will be appended to the current ROOT directory.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:42,Availability,error,error,42,"// if no default ctor return immediately (error issued by New())",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:15,Modifiability,inherit,inherit,15,"// cl does not inherit from TObject.; // Since this is not supported in this function, the only reason we could reach this code; // is because something is screwed up in the ROOT code.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:165,Performance,load,load,165,"//create a buffer where the object will be streamed; //We are forced to go via the I/O package (ie TBufferFile).; //Invoking TBufferFile via CINT will automatically load the I/O library",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:171,Integrability,rout,routine,171,"// Note in previous implementation every time gDirectory was lookup in; // a thread, if it was set to nullptr it would be reset to gROOT. This; // was unexpected and this routine is not re-introducing this issue.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:512,Availability,Error,Error,512,"////////////////////////////////////////////////////////////////////////////////; /// Find a directory using apath.; /// It apath is null or empty, returns ""this"" directory.; /// Otherwise use apath to find a directory.; /// The absolute path syntax is: `file.root:/dir1/dir2`; ///; /// where file.root is the file and /dir1/dir2 the desired subdirectory; /// in the file. Relative syntax is relative to ""this"" directory. E.g: `../aa`.; /// Returns 0 in case path does not exist.; /// If printError is true, use Error with 'funcname' to issue an error message.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:546,Availability,error,error,546,"////////////////////////////////////////////////////////////////////////////////; /// Find a directory using apath.; /// It apath is null or empty, returns ""this"" directory.; /// Otherwise use apath to find a directory.; /// The absolute path syntax is: `file.root:/dir1/dir2`; ///; /// where file.root is the file and /dir1/dir2 the desired subdirectory; /// in the file. Relative syntax is relative to ""this"" directory. E.g: `../aa`.; /// Returns 0 in case path does not exist.; /// If printError is true, use Error with 'funcname' to issue an error message.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:552,Integrability,message,message,552,"////////////////////////////////////////////////////////////////////////////////; /// Find a directory using apath.; /// It apath is null or empty, returns ""this"" directory.; /// Otherwise use apath to find a directory.; /// The absolute path syntax is: `file.root:/dir1/dir2`; ///; /// where file.root is the file and /dir1/dir2 the desired subdirectory; /// in the file. Relative syntax is relative to ""this"" directory. E.g: `../aa`.; /// Returns 0 in case path does not exist.; /// If printError is true, use Error with 'funcname' to issue an error message.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:107,Energy Efficiency,allocate,allocated,107,"// Delete objects from directory list, this in turn, recursively closes all; // sub-directories (that were allocated on the heap); // if this dir contains subdirs, we must use the slow option for Delete!; // we must avoid ""slow"" as much as possible, in particular Delete(""slow""); // with a large number of objects (eg >10^5) would take for ever.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:216,Safety,avoid,avoid,216,"// Delete objects from directory list, this in turn, recursively closes all; // sub-directories (that were allocated on the heap); // if this dir contains subdirs, we must use the slow option for Delete!; // we must avoid ""slow"" as much as possible, in particular Delete(""slow""); // with a large number of objects (eg >10^5) would take for ever.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:1030,Modifiability,inherit,inherits,1030,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to object identified by namecycle.; ///; /// namecycle has the format name;cycle; /// - name = * is illegal, cycle = * is illegal; /// - cycle = """" or cycle = 9999 ==> apply to a memory object; ///; /// examples:; /// - foo : get object named foo in memory; /// if object is not in memory, try with highest cycle from file; /// - foo;1 : get cycle 1 of foo on file; ///; /// The retrieved object should in principle derive from TObject.; /// If not, the function TDirectory::GetObject should be called.; /// However, this function will still work for a non-TObject, providing that; /// the calling application cast the return type to the correct type (which; /// is the actual type of the object).; ///; /// NOTE:; ///; /// The method GetObject offer better protection and avoid the need; /// for any cast:; /// ~~~ {.cpp}; /// MyClass *obj;; /// directory->GetObject(""some object"",obj);; /// if (obj) { ... the object exist and inherits from MyClass ... }; /// ~~~; ///; /// VERY IMPORTANT NOTE:; ///; /// In case the class of this object derives from TObject but not; /// as a first inheritance, one must use dynamic_cast<>().; /// #### Example 1: Normal case:; /// ~~~ {.cpp}; /// class MyClass : public TObject, public AnotherClass; /// ~~~; /// then on return, one can do:; /// ~~~ {.cpp}; /// MyClass *obj = (MyClass*)directory->Get(""some object of MyClass"");; /// ~~~; /// #### Example 2: Special case:; /// ~~~ {.cpp}; /// class MyClass : public AnotherClass, public TObject; /// ~~~; /// then on return, one must do:; /// ~~~ {.cpp}; /// MyClass *obj = dynamic_cast<MyClass*>(directory->Get(""some object of MyClass""));; /// ~~~; /// Of course, dynamic_cast<> can also be used in the example 1.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:1186,Modifiability,inherit,inheritance,1186,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to object identified by namecycle.; ///; /// namecycle has the format name;cycle; /// - name = * is illegal, cycle = * is illegal; /// - cycle = """" or cycle = 9999 ==> apply to a memory object; ///; /// examples:; /// - foo : get object named foo in memory; /// if object is not in memory, try with highest cycle from file; /// - foo;1 : get cycle 1 of foo on file; ///; /// The retrieved object should in principle derive from TObject.; /// If not, the function TDirectory::GetObject should be called.; /// However, this function will still work for a non-TObject, providing that; /// the calling application cast the return type to the correct type (which; /// is the actual type of the object).; ///; /// NOTE:; ///; /// The method GetObject offer better protection and avoid the need; /// for any cast:; /// ~~~ {.cpp}; /// MyClass *obj;; /// directory->GetObject(""some object"",obj);; /// if (obj) { ... the object exist and inherits from MyClass ... }; /// ~~~; ///; /// VERY IMPORTANT NOTE:; ///; /// In case the class of this object derives from TObject but not; /// as a first inheritance, one must use dynamic_cast<>().; /// #### Example 1: Normal case:; /// ~~~ {.cpp}; /// class MyClass : public TObject, public AnotherClass; /// ~~~; /// then on return, one can do:; /// ~~~ {.cpp}; /// MyClass *obj = (MyClass*)directory->Get(""some object of MyClass"");; /// ~~~; /// #### Example 2: Special case:; /// ~~~ {.cpp}; /// class MyClass : public AnotherClass, public TObject; /// ~~~; /// then on return, one must do:; /// ~~~ {.cpp}; /// MyClass *obj = dynamic_cast<MyClass*>(directory->Get(""some object of MyClass""));; /// ~~~; /// Of course, dynamic_cast<> can also be used in the example 1.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:874,Safety,avoid,avoid,874,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to object identified by namecycle.; ///; /// namecycle has the format name;cycle; /// - name = * is illegal, cycle = * is illegal; /// - cycle = """" or cycle = 9999 ==> apply to a memory object; ///; /// examples:; /// - foo : get object named foo in memory; /// if object is not in memory, try with highest cycle from file; /// - foo;1 : get cycle 1 of foo on file; ///; /// The retrieved object should in principle derive from TObject.; /// If not, the function TDirectory::GetObject should be called.; /// However, this function will still work for a non-TObject, providing that; /// the calling application cast the return type to the correct type (which; /// is the actual type of the object).; ///; /// NOTE:; ///; /// The method GetObject offer better protection and avoid the need; /// for any cast:; /// ~~~ {.cpp}; /// MyClass *obj;; /// directory->GetObject(""some object"",obj);; /// if (obj) { ... the object exist and inherits from MyClass ... }; /// ~~~; ///; /// VERY IMPORTANT NOTE:; ///; /// In case the class of this object derives from TObject but not; /// as a first inheritance, one must use dynamic_cast<>().; /// #### Example 1: Normal case:; /// ~~~ {.cpp}; /// class MyClass : public TObject, public AnotherClass; /// ~~~; /// then on return, one can do:; /// ~~~ {.cpp}; /// MyClass *obj = (MyClass*)directory->Get(""some object of MyClass"");; /// ~~~; /// #### Example 2: Special case:; /// ~~~ {.cpp}; /// class MyClass : public AnotherClass, public TObject; /// ~~~; /// then on return, one must do:; /// ~~~ {.cpp}; /// MyClass *obj = dynamic_cast<MyClass*>(directory->Get(""some object of MyClass""));; /// ~~~; /// Of course, dynamic_cast<> can also be used in the example 1.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:875,Modifiability,inherit,inheriting,875,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to object identified by namecycle if and only if the actual; /// object is a type suitable to be stored as a pointer to a ""expectedClass""; /// If expectedClass is null, no check is performed.; ///; /// namecycle has the format `name;cycle`; /// - name = * is illegal, cycle = * is illegal; /// - cycle = """" or cycle = 9999 ==> apply to a memory object; ///; /// VERY IMPORTANT NOTE:; ///; /// The calling application must cast the returned pointer to; /// the type described by the 2 arguments (i.e. cl):; /// ~~~ {.cpp}; /// MyClass *obj = (MyClass*)directory->GetObjectChecked(""some object of MyClass"",""MyClass""));; /// ~~~; /// Note: We recommend using the method TDirectory::GetObject:; /// ~~~ {.cpp}; /// MyClass *obj = nullptr;; /// directory->GetObject(""some object inheriting from MyClass"",obj);; /// if (obj) { ... we found what we are looking for ... }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:282,Performance,perform,performed,282,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to object identified by namecycle if and only if the actual; /// object is a type suitable to be stored as a pointer to a ""expectedClass""; /// If expectedClass is null, no check is performed.; ///; /// namecycle has the format `name;cycle`; /// - name = * is illegal, cycle = * is illegal; /// - cycle = """" or cycle = 9999 ==> apply to a memory object; ///; /// VERY IMPORTANT NOTE:; ///; /// The calling application must cast the returned pointer to; /// the type described by the 2 arguments (i.e. cl):; /// ~~~ {.cpp}; /// MyClass *obj = (MyClass*)directory->GetObjectChecked(""some object of MyClass"",""MyClass""));; /// ~~~; /// Note: We recommend using the method TDirectory::GetObject:; /// ~~~ {.cpp}; /// MyClass *obj = nullptr;; /// directory->GetObject(""some object inheriting from MyClass"",obj);; /// if (obj) { ... we found what we are looking for ... }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:191,Availability,error,error,191,"////////////////////////////////////////////////////////////////////////////////; /// Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".; ///; /// Returns 0 in case of error or if a sub-directory (hierarchy) with the requested; /// name already exists.; /// returnExistingDirectory returns a pointer to an already existing sub-directory with the same name.; /// Returns a pointer to the created sub-directory or to the top sub-directory of; /// the hierarchy (in the above example, the returned TDirectory * always points; /// to ""a"").; /// In particular, the steps to create first a/b/c and then a/b/d without receiving; /// errors are:; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->cd(""b"");; /// gDirectory->mkdir(""d"");; /// ~~~; /// or; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->mkdir(""b/d"", """", true);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:649,Availability,error,errors,649,"////////////////////////////////////////////////////////////////////////////////; /// Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".; ///; /// Returns 0 in case of error or if a sub-directory (hierarchy) with the requested; /// name already exists.; /// returnExistingDirectory returns a pointer to an already existing sub-directory with the same name.; /// Returns a pointer to the created sub-directory or to the top sub-directory of; /// the hierarchy (in the above example, the returned TDirectory * always points; /// to ""a"").; /// In particular, the steps to create first a/b/c and then a/b/d without receiving; /// errors are:; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->cd(""b"");; /// gDirectory->mkdir(""d"");; /// ~~~; /// or; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->mkdir(""b/d"", """", true);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:148,Deployability,a/b,a/b,148,"////////////////////////////////////////////////////////////////////////////////; /// Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".; ///; /// Returns 0 in case of error or if a sub-directory (hierarchy) with the requested; /// name already exists.; /// returnExistingDirectory returns a pointer to an already existing sub-directory with the same name.; /// Returns a pointer to the created sub-directory or to the top sub-directory of; /// the hierarchy (in the above example, the returned TDirectory * always points; /// to ""a"").; /// In particular, the steps to create first a/b/c and then a/b/d without receiving; /// errors are:; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->cd(""b"");; /// gDirectory->mkdir(""d"");; /// ~~~; /// or; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->mkdir(""b/d"", """", true);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:605,Deployability,a/b,a/b,605,"////////////////////////////////////////////////////////////////////////////////; /// Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".; ///; /// Returns 0 in case of error or if a sub-directory (hierarchy) with the requested; /// name already exists.; /// returnExistingDirectory returns a pointer to an already existing sub-directory with the same name.; /// Returns a pointer to the created sub-directory or to the top sub-directory of; /// the hierarchy (in the above example, the returned TDirectory * always points; /// to ""a"").; /// In particular, the steps to create first a/b/c and then a/b/d without receiving; /// errors are:; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->cd(""b"");; /// gDirectory->mkdir(""d"");; /// ~~~; /// or; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->mkdir(""b/d"", """", true);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:620,Deployability,a/b,a/b,620,"////////////////////////////////////////////////////////////////////////////////; /// Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".; ///; /// Returns 0 in case of error or if a sub-directory (hierarchy) with the requested; /// name already exists.; /// returnExistingDirectory returns a pointer to an already existing sub-directory with the same name.; /// Returns a pointer to the created sub-directory or to the top sub-directory of; /// the hierarchy (in the above example, the returned TDirectory * always points; /// to ""a"").; /// In particular, the steps to create first a/b/c and then a/b/d without receiving; /// errors are:; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->cd(""b"");; /// gDirectory->mkdir(""d"");; /// ~~~; /// or; /// ~~~ {.cpp}; /// TFile * file = new TFile(""afile"",""RECREATE"");; /// file->mkdir(""a"");; /// file->cd(""a"");; /// gDirectory->mkdir(""b/c"");; /// gDirectory->mkdir(""b/d"", """", true);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:486,Integrability,message,message,486,"////////////////////////////////////////////////////////////////////////////////; /// Save object in filename,; /// if filename is `nullptr` or """", a file with ""<objectname>.root"" is created.; /// The name of the key is the object name.; /// By default new file will be created. Using option ""a"", one can append object; /// to the existing ROOT file.; /// If the operation is successful, it returns the number of bytes written to the file; /// otherwise it returns 0.; /// By default a message is printed. Use option ""q"" to not print the message.; /// If filename contains "".json"" extension, JSON representation of the object; /// will be created and saved in the text file. Such file can be used in; /// JavaScript ROOT (https://root.cern/js/) to display object in web browser; /// When creating JSON file, option string may contain compression level from 0 to 3 (default 0)",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:538,Integrability,message,message,538,"////////////////////////////////////////////////////////////////////////////////; /// Save object in filename,; /// if filename is `nullptr` or """", a file with ""<objectname>.root"" is created.; /// The name of the key is the object name.; /// By default new file will be created. Using option ""a"", one can append object; /// to the existing ROOT file.; /// If the operation is successful, it returns the number of bytes written to the file; /// otherwise it returns 0.; /// By default a message is printed. Use option ""q"" to not print the message.; /// If filename contains "".json"" extension, JSON representation of the object; /// will be created and saved in the text file. Such file can be used in; /// JavaScript ROOT (https://root.cern/js/) to display object in web browser; /// When creating JSON file, option string may contain compression level from 0 to 3 (default 0)",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:25,Performance,load,load,25,"// FIXME:; // globalptr->load()->fGDirectories will still contain globalptr, but we cannot; // know whether globalptr->load() has been deleted by another thread in the meantime.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:119,Performance,load,load,119,"// FIXME:; // globalptr->load()->fGDirectories will still contain globalptr, but we cannot; // know whether globalptr->load() has been deleted by another thread in the meantime.",MatchSource.CODE_COMMENT,core/base/src/TDirectory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:514,Modifiability,config,config,514,"// @(#)root/base:$Id: 0daf41ec24086ee7af29fdc2f9f2f848b150dcc8 $; // Author: Fons Rademakers 22/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TEnv; \ingroup Base. The TEnv class reads config files, by default named `.rootrc`.; Three types of config files are read: global, user and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:572,Modifiability,config,config,572,"// @(#)root/base:$Id: 0daf41ec24086ee7af29fdc2f9f2f848b150dcc8 $; // Author: Fons Rademakers 22/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TEnv; \ingroup Base. The TEnv class reads config files, by default named `.rootrc`.; Three types of config files are read: global, user and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:793,Modifiability,variab,variable,793,"// @(#)root/base:$Id: 0daf41ec24086ee7af29fdc2f9f2f848b150dcc8 $; // Author: Fons Rademakers 22/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TEnv; \ingroup Base. The TEnv class reads config files, by default named `.rootrc`.; Three types of config files are read: global, user and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:2042,Modifiability,variab,variables,2042,"and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts comment line. Note that the environment variables (like $ROOTSYS) need to be; surrounded in parentheses in order to be expanded. For the currently defined resources (and their default values) see; `$ROOTSYS/etc/system.rootrc`. Note that the .rootrc config files contain the config for all ROOT; based applications. To add new entries to a TEnv:; ~~~ {.cpp}; TEnv env("".myfile"");; env.SetValue(""myname"",""value"");; env.SaveLevel(kEnvLocal);; ~~~; All new entries will be saved in the file corresponding to the; first SaveLevel() command. If Save() is used, new entries go; into the local file by default.; */",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:2251,Modifiability,config,config,2251,"and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts comment line. Note that the environment variables (like $ROOTSYS) need to be; surrounded in parentheses in order to be expanded. For the currently defined resources (and their default values) see; `$ROOTSYS/etc/system.rootrc`. Note that the .rootrc config files contain the config for all ROOT; based applications. To add new entries to a TEnv:; ~~~ {.cpp}; TEnv env("".myfile"");; env.SetValue(""myname"",""value"");; env.SaveLevel(kEnvLocal);; ~~~; All new entries will be saved in the file corresponding to the; first SaveLevel() command. If Save() is used, new entries go; into the local file by default.; */",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:2276,Modifiability,config,config,2276,"and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts comment line. Note that the environment variables (like $ROOTSYS) need to be; surrounded in parentheses in order to be expanded. For the currently defined resources (and their default values) see; `$ROOTSYS/etc/system.rootrc`. Note that the .rootrc config files contain the config for all ROOT; based applications. To add new entries to a TEnv:; ~~~ {.cpp}; TEnv env("".myfile"");; env.SetValue(""myname"",""value"");; env.SaveLevel(kEnvLocal);; ~~~; All new entries will be saved in the file corresponding to the; first SaveLevel() command. If Save() is used, new entries go; into the local file by default.; */",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:1001,Safety,avoid,avoid,1001,"// @(#)root/base:$Id: 0daf41ec24086ee7af29fdc2f9f2f848b150dcc8 $; // Author: Fons Rademakers 22/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TEnv; \ingroup Base. The TEnv class reads config files, by default named `.rootrc`.; Three types of config files are read: global, user and local files. The; global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); the user file is `$HOME/<name>` and the local file is `./<name>`.; By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; the `$HOME/<name>` resource file will be skipped. This might be useful; in case the home directory resides on an auto-mounted remote file; system and one wants to avoid this file system from being mounted. The format of the `.rootrc` file is similar to the `.Xdefaults` format:; ~~~ {.cpp}; [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; ~~~; Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; `<RootName>` the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; `<ProgName>` the current program name and `<name>` the resource name,; with optionally a type specification. `<value>` can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resource name. E.g.:; ~~~ {.cpp}; Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.ObjStat: 1; ~~~; `<SystemName>` and `<ProgName>` or `<RootName>` may be the wildcard ""*"".; A # in the first column starts",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:445,Modifiability,variab,variable,445,"////////////////////////////////////////////////////////////////////////////////; /// Create a resource table and read the (possibly) three resource files,; /// i.e.\ `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`),; /// `$HOME/<name>` and `$PWD/<name>`.; /// ROOT always reads "".rootrc"" (in TROOT::InitSystem()). You can; /// read additional user defined resource files by creating additional TEnv; /// objects. By setting the shell variable ROOTENV_NO_HOME=1 the reading of; /// the `$HOME/<name>` resource file will be skipped. This might be useful in; /// case the home directory resides on an auto-mounted remote file system; /// and one wants to avoid the file system from being mounted.",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:663,Safety,avoid,avoid,663,"////////////////////////////////////////////////////////////////////////////////; /// Create a resource table and read the (possibly) three resource files,; /// i.e.\ `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`),; /// `$HOME/<name>` and `$PWD/<name>`.; /// ROOT always reads "".rootrc"" (in TROOT::InitSystem()). You can; /// read additional user defined resource files by creating additional TEnv; /// objects. By setting the shell variable ROOTENV_NO_HOME=1 the reading of; /// the `$HOME/<name>` resource file will be skipped. This might be useful in; /// case the home directory resides on an auto-mounted remote file system; /// and one wants to avoid the file system from being mounted.",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:167,Availability,error,error,167,"////////////////////////////////////////////////////////////////////////////////; /// Read and parse the resource file for a certain level.; /// Returns -1 on case of error, 0 in case of success.",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:6,Availability,Error,Error,6,"// no Error() here since we are allowed to try to read from a non-existing; // file (like ./.rootrc, $HOME/.rootrc, etc.)",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx:213,Availability,error,error,213,"////////////////////////////////////////////////////////////////////////////////; /// Write resource records to file fname for a certain level. Use; /// level kEnvAll to write all resources. Returns -1 on case of error,; /// 0 in case of success.",MatchSource.CODE_COMMENT,core/base/src/TEnv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TEnv.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:3,Deployability,Integrat,Integrate,3,"// Integrate with macOS crash reporter.",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:3,Integrability,Integrat,Integrate,3,"// Integrate with macOS crash reporter.",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:15,Availability,error,error,15,"/// Serializes error output, destructed by the gROOT destructor via ReleaseDefaultErrorHandler()",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:68,Deployability,Release,ReleaseDefaultErrorHandler,68,"/// Serializes error output, destructed by the gROOT destructor via ReleaseDefaultErrorHandler()",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:39,Integrability,message,message,39,"// ROOT namespace; /// Print debugging message to stderr and, on Windows, to the system debugger.",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:16,Availability,error,error,16,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:145,Availability,error,error,145,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:54,Integrability,message,message,54,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:84,Safety,abort,abort,84,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:100,Safety,abort,aborts,100,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:304,Safety,abort,abort,304,"/// The default error handler function. It prints the message on stderr and; /// if abort is set it aborts the application. Replaces the minimal error handler; /// of TError.h as part of the gROOT construction. TError's minimal handler is put; /// back in place during the gROOT destruction.; /// @note `abort()` is only called if `abort_bool` is `true` and `level < gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:23,Availability,error,error,23,"// This can also print error messages, so we need to do it outside the lock",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx:29,Integrability,message,messages,29,"// This can also print error messages, so we need to do it outside the lock",MatchSource.CODE_COMMENT,core/base/src/TErrorDefaultHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TErrorDefaultHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:656,Deployability,update,updated,656,"/** \class TExec; \ingroup Base. TExec is a utility class that can be used to execute a C++ command; when some event happens in a pad.; The command in turn can invoke a C++ macro to paint graphics objects; at positions depending on the histogram or graph contents. ### Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in `$ROOTSYS/test/Aclock.cxx`.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; ~~~ {.cpp}; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; ~~~. ### Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this l",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:2847,Energy Efficiency,power,powerful,2847,"object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this list of TExecs. In the code (interpreted or compiled) executed; by the TExec referenced command, one can call the pad service functions; such as TPad::GetEvent, TPad::GetEventX, TPad::GetEventY to find; which type of event and the X,Y position of the mouse.; By default, the list of TExecs is executed. This can be disabled; via the canvas menu ""Option"".; See $ROOTSYS/tutorials/hist/exec2.C for an example.; ~~~ {.cpp}; Root > TFile f(""hsimple.root"");; Root > hpxpy.Draw();; Root > c1.AddExec(""ex2"","".x exec2.C"");; ~~~; When moving the mouse in the canvas, a second canvas shows the; projection along X of the bin corresponding to the Y position; of the mouse. The resulting histogram is fitted with a gaussian.; A ""dynamic"" line shows the current bin position in Y.; This more elaborated example can be used as a starting point; to develop more powerful interactive applications exploiting CINT; as a development engine. The 3 options above can be combined.; */; ////////////////////////////////////////////////////////////////////////////////; /// Exec default constructor.",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:219,Integrability,depend,depending,219,"/** \class TExec; \ingroup Base. TExec is a utility class that can be used to execute a C++ command; when some event happens in a pad.; The command in turn can invoke a C++ macro to paint graphics objects; at positions depending on the histogram or graph contents. ### Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in `$ROOTSYS/test/Aclock.cxx`.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; ~~~ {.cpp}; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; ~~~. ### Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this l",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:736,Performance,Load,Load,736,"/** \class TExec; \ingroup Base. TExec is a utility class that can be used to execute a C++ command; when some event happens in a pad.; The command in turn can invoke a C++ macro to paint graphics objects; at positions depending on the histogram or graph contents. ### Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in `$ROOTSYS/test/Aclock.cxx`.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; ~~~ {.cpp}; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; ~~~. ### Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this l",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:544,Testability,test,test,544,"/** \class TExec; \ingroup Base. TExec is a utility class that can be used to execute a C++ command; when some event happens in a pad.; The command in turn can invoke a C++ macro to paint graphics objects; at positions depending on the histogram or graph contents. ### Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in `$ROOTSYS/test/Aclock.cxx`.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; ~~~ {.cpp}; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; ~~~. ### Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this l",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:751,Testability,test,test,751,"/** \class TExec; \ingroup Base. TExec is a utility class that can be used to execute a C++ command; when some event happens in a pad.; The command in turn can invoke a C++ macro to paint graphics objects; at positions depending on the histogram or graph contents. ### Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in `$ROOTSYS/test/Aclock.cxx`.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; ~~~ {.cpp}; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; ~~~. ### Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this l",MatchSource.CODE_COMMENT,core/base/src/TExec.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:6,Security,hash,hash,6,"// We hash on the UUID",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:257,Availability,error,error,257,"////////////////////////////////////////////////////////////////////////////////; /// Merge all TFileCollection objects in li into this TFileCollection object.; /// Updates counters at the end.; /// Returns the number of merged collections or -1 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:165,Deployability,Update,Updates,165,"////////////////////////////////////////////////////////////////////////////////; /// Merge all TFileCollection objects in li into this TFileCollection object.; /// Updates counters at the end.; /// Returns the number of merged collections or -1 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:271,Availability,avail,available,271,"////////////////////////////////////////////////////////////////////////////////; /// Update accumulated information about the elements of the collection; /// (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; /// bytes when the size info is not available.; /// Also updates the meta data information by summarizing; /// the meta data of the contained objects.; /// Return -1 in case of any failure, 0 if the total size is exact, 1 if; /// incomplete, 2 if complete but (at least partially) estimated.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:416,Availability,failure,failure,416,"////////////////////////////////////////////////////////////////////////////////; /// Update accumulated information about the elements of the collection; /// (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; /// bytes when the size info is not available.; /// Also updates the meta data information by summarizing; /// the meta data of the contained objects.; /// Return -1 in case of any failure, 0 if the total size is exact, 1 if; /// incomplete, 2 if complete but (at least partially) estimated.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update accumulated information about the elements of the collection; /// (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; /// bytes when the size info is not available.; /// Also updates the meta data information by summarizing; /// the meta data of the contained objects.; /// Return -1 in case of any failure, 0 if the total size is exact, 1 if; /// incomplete, 2 if complete but (at least partially) estimated.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:292,Deployability,update,updates,292,"////////////////////////////////////////////////////////////////////////////////; /// Update accumulated information about the elements of the collection; /// (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; /// bytes when the size info is not available.; /// Also updates the meta data information by summarizing; /// the meta data of the contained objects.; /// Return -1 in case of any failure, 0 if the total size is exact, 1 if; /// incomplete, 2 if complete but (at least partially) estimated.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:3,Usability,Clear,Clear,3,"// Clear internal meta information which is going to be rebuilt in this; // function",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx:388,Deployability,Update,Update,388,"////////////////////////////////////////////////////////////////////////////////; /// Add's a meta data object to the file collection object. The object will be; /// adopted by the TFileCollection and should not be deleted by the user.; /// Typically objects of class TFileInfoMeta or derivatives should be added,; /// but any class is accepted.; ///; /// NB : a call to TFileCollection::Update will remove these objects unless the; /// bit TFileInfoMeta::kExternal is set.; /// Returns kTRUE if successful, kFALSE otherwise.",MatchSource.CODE_COMMENT,core/base/src/TFileCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileInfo.cxx:335,Security,hash,hashed,335,"////////////////////////////////////////////////////////////////////////////////; /// Set the UUID to the value associated to the string 'uuid'. This is; /// useful to set the UUID to the one of the ROOT file during verification.; ///; /// NB: we do not change the name in here, because this would screw up lists; /// of these objects hashed on the name. Those lists need to be rebuild.; /// TFileCollection does that in RemoveDuplicates.",MatchSource.CODE_COMMENT,core/base/src/TFileInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileInfo.cxx:152,Availability,error,error,152,"////////////////////////////////////////////////////////////////////////////////; /// Remove URL at given position. Returns kTRUE on success, kFALSE on error.",MatchSource.CODE_COMMENT,core/base/src/TFileInfo.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileInfo.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:1160,Energy Efficiency,efficient,efficient,1160,"Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TFolder; \ingroup Base. \legacy{TFolder}. A TFolder object is a collection of objects and folders.; Folders have a name and a title and are identified in the folder hierarchy; by a ""Unix-like"" naming mechanism. The root of all folders is //root.; New folders can be dynamically added or removed to/from a folder.; The folder hierarchy can be visualized via the TBrowser. \image html base_browser.png. The Root folders hierarchy can be seen as a whiteboard where objects; are posted. Other classes/tasks can access these objects by specifying; only a string pathname. This whiteboard facility greatly improves the; modularity of an application, minimizing the class relationship problem; that penalizes large applications. Pointers are efficient to communicate between classes.; However, one has interest to minimize direct coupling between classes; in the form of direct pointers. One better uses the naming and search; service provided by the Root folders hierarchy. This makes the classes; loosely coupled and also greatly facilitates I/O operations.; In a client/server environment, this mechanism facilitates the access; to any kind of object in //root stores running on different processes. A TFolder is created by invoking the TFolder constructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted, its reference from the parent folder and; possible other folders is deleted. If a folder has been declared the owner of its objects/folders via; TFolder::SetOwner, then th",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:1248,Modifiability,coupling,coupling,1248," $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TFolder; \ingroup Base. \legacy{TFolder}. A TFolder object is a collection of objects and folders.; Folders have a name and a title and are identified in the folder hierarchy; by a ""Unix-like"" naming mechanism. The root of all folders is //root.; New folders can be dynamically added or removed to/from a folder.; The folder hierarchy can be visualized via the TBrowser. \image html base_browser.png. The Root folders hierarchy can be seen as a whiteboard where objects; are posted. Other classes/tasks can access these objects by specifying; only a string pathname. This whiteboard facility greatly improves the; modularity of an application, minimizing the class relationship problem; that penalizes large applications. Pointers are efficient to communicate between classes.; However, one has interest to minimize direct coupling between classes; in the form of direct pointers. One better uses the naming and search; service provided by the Root folders hierarchy. This makes the classes; loosely coupled and also greatly facilitates I/O operations.; In a client/server environment, this mechanism facilitates the access; to any kind of object in //root stores running on different processes. A TFolder is created by invoking the TFolder constructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted, its reference from the parent folder and; possible other folders is deleted. If a folder has been declared the owner of its objects/folders via; TFolder::SetOwner, then the contained objects are deleted when the; folder is deleted. By default, a fold",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:3603,Modifiability,variab,variable,3603,"nstructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted, its reference from the parent folder and; possible other folders is deleted. If a folder has been declared the owner of its objects/folders via; TFolder::SetOwner, then the contained objects are deleted when the; folder is deleted. By default, a folder does not own its contained objects. NOTE that folder ownership can be set; - via TFolder::SetOwner; - or via TCollection::SetOwner on the collection specified to TFolder::AddFolder. Standard Root objects are automatically added to the folder hierarchy.; For example, the following folders exist:; //root/Files with the list of currently connected Root files; //root/Classes with the list of active classes; //root/Geometries with active geometries; //root/Canvases with the list of active canvases; //root/Styles with the list of graphics styles; //root/Colors with the list of active colors. For example, if a file ""myFile.root"" is added to the list of files, one can; retrieve a pointer to the corresponding TFile object with a statement like:; ~~~ {.cpp}; TFile *myFile = (TFile*)gROOT->FindObject(""//root/Files/myFile.root"");; ~~~; The above statement can be abbreviated to:; ~~~ {.cpp}; TFile *myFile = (TFile*)gROOT->FindObject(""/Files/myFile.root"");; ~~~; or even to:; ~~~ {.cpp}; TFile *myFile = (TFile*)gROOT->FindObjectAny(""myFile.root"");; ~~~; In this last case, the TROOT::FindObjectAny function will scan the folder hierarchy; starting at //root and will return the first object named ""myFile.root"". Because a string-based search mechanism is expensive, it is recommended; to save the pointer to the object as a class member or local variable; if this pointer is used frequently or inside loops.; */",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:932,Security,access,access,932,"// @(#)root/base:$Id$; // Author: Rene Brun 02/09/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TFolder; \ingroup Base. \legacy{TFolder}. A TFolder object is a collection of objects and folders.; Folders have a name and a title and are identified in the folder hierarchy; by a ""Unix-like"" naming mechanism. The root of all folders is //root.; New folders can be dynamically added or removed to/from a folder.; The folder hierarchy can be visualized via the TBrowser. \image html base_browser.png. The Root folders hierarchy can be seen as a whiteboard where objects; are posted. Other classes/tasks can access these objects by specifying; only a string pathname. This whiteboard facility greatly improves the; modularity of an application, minimizing the class relationship problem; that penalizes large applications. Pointers are efficient to communicate between classes.; However, one has interest to minimize direct coupling between classes; in the form of direct pointers. One better uses the naming and search; service provided by the Root folders hierarchy. This makes the classes; loosely coupled and also greatly facilitates I/O operations.; In a client/server environment, this mechanism facilitates the access; to any kind of object in //root stores running on different processes. A TFolder is created by invoking the TFolder constructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:1542,Security,access,access,1542," a title and are identified in the folder hierarchy; by a ""Unix-like"" naming mechanism. The root of all folders is //root.; New folders can be dynamically added or removed to/from a folder.; The folder hierarchy can be visualized via the TBrowser. \image html base_browser.png. The Root folders hierarchy can be seen as a whiteboard where objects; are posted. Other classes/tasks can access these objects by specifying; only a string pathname. This whiteboard facility greatly improves the; modularity of an application, minimizing the class relationship problem; that penalizes large applications. Pointers are efficient to communicate between classes.; However, one has interest to minimize direct coupling between classes; in the form of direct pointers. One better uses the naming and search; service provided by the Root folders hierarchy. This makes the classes; loosely coupled and also greatly facilitates I/O operations.; In a client/server environment, this mechanism facilitates the access; to any kind of object in //root stores running on different processes. A TFolder is created by invoking the TFolder constructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted, its reference from the parent folder and; possible other folders is deleted. If a folder has been declared the owner of its objects/folders via; TFolder::SetOwner, then the contained objects are deleted when the; folder is deleted. By default, a folder does not own its contained objects. NOTE that folder ownership can be set; - via TFolder::SetOwner; - or via TCollection::SetOwner on the collection specified to TFolder::AddFolder. Standard Root objects are automatically added to the folder hierarchy.; For example, the following folders exis",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:24,Modifiability,Inherit,InheritsFrom,24,"// For a TClass object, InheritsFrom does not check the inheritance of; // the object but the inheritance of the class described by the object,; // so we need to explicitly call IsA",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:56,Modifiability,inherit,inheritance,56,"// For a TClass object, InheritsFrom does not check the inheritance of; // the object but the inheritance of the class described by the object,; // so we need to explicitly call IsA",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:94,Modifiability,inherit,inheritance,94,"// For a TClass object, InheritsFrom does not check the inheritance of; // the object but the inheritance of the class described by the object,; // so we need to explicitly call IsA",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:41,Modifiability,Inherit,InheritsFrom,41,"// For any other object IsA is called by InheritsFrom",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:12,Modifiability,Inherit,InheritsFrom,12,"//if (!obj->InheritsFrom(TFolder::Class())) continue;",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:268,Usability,Clear,Clear,268,"////////////////////////////////////////////////////////////////////////////////; /// Set ownership.; /// If the folder is declared owner, when the folder is deleted, all; /// the objects added via TFolder::Add are deleted via TObject::Delete,; /// otherwise TObject::Clear is called.; ///; /// NOTE that folder ownership can be set:; /// - via TFolder::SetOwner; /// - or via TCollection::SetOwner on the collection specified to TFolder::AddFolder",MatchSource.CODE_COMMENT,core/base/src/TFolder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TInetAddress.cxx:492,Integrability,Protocol,Protocol,492,"// @(#)root/base:$Id$; // Author: Fons Rademakers 16/12/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TInetAddress; \ingroup Base. This class represents an Internet Protocol (IP) address.; */",MatchSource.CODE_COMMENT,core/base/src/TInetAddress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TInetAddress.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TInetAddress.cxx:282,Energy Efficiency,allocate,allocated,282,"////////////////////////////////////////////////////////////////////////////////; /// Returns the raw IP address in host byte order. The highest; /// order byte position is in addr[0]. To be prepared for 64-bit; /// IP addresses an array of bytes is returned.; /// User must delete allocated memory.",MatchSource.CODE_COMMENT,core/base/src/TInetAddress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TInetAddress.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TListOfTypes.cxx:57,Availability,avail,available,57,"// Is this a scope?; // We look into the list of classes available,; // the ones in the dictionaries and the protoclasses.",MatchSource.CODE_COMMENT,core/base/src/TListOfTypes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TListOfTypes.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TListOfTypes.cxx:6,Performance,perform,perform,6,"// We perform now a lookup",MatchSource.CODE_COMMENT,core/base/src/TListOfTypes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TListOfTypes.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:884,Deployability,update,updated,884,"// @(#)root/base:$Id$; // Author: Rene Brun 16/08/2005; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMacro; \ingroup Base. Class supporting a collection of lines with C++ code.; A TMacro can be executed, saved to a ROOT file, edited, etc. A macro can be built line by line by calling the AddLine function.; or it can be created directly from a file via the special constructor; when the first argument is a file name. A macro can be executed via the Exec function.; Arguments can be specified when calling Exec. A macro can be drawn in a pad. When the pad is updated, the macro is; automatically executed. The code in the macro can be saved via the SaveSource function.; If the macro is in the list of primitives of a pad/canvas, the macro; will be saved in the script generated by TCanvas::SaveSource. A macro can be written to a ROOT file via TObject::Write. Examples:; ~~~ {.cpp}; TMacro m(""Peaks.C""); //macro m with name ""Peaks"" is created; //from file Peaks.C; m.Exec(); //macro executed with default arguments; m.Exec(""4""); //macro executed with argument; m.SaveSource(""newPeaks.C"");; TFile f(""mymacros.root"",""recreate"");; m.Write(); //macro saved to file with name ""Peaks""; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:170,Integrability,depend,depending,170,"////////////////////////////////////////////////////////////////////////////////; /// When clicking in the browser, the following action is performed; /// on this macro, depending the content of the variable TMacro.Browse.; /// TMacro.Browse can be set in the system.rootrc or .rootrc file like:; /// ~~~ {.cpp}; /// TMacro.Browse : Action; /// ~~~; /// or set via gEnv->SetValue, eg; /// ~~~ {.cpp}; /// gEnv->SetValue(""TMacro.Browse"",""Print"");; /// ~~~; /// By default TMacro.Browse=""""; /// -if TMacro.Browse ="""" the macro is executed; /// -if TMacro.Browse =""Print"" the macro is printed in stdout; /// -if TMacro.Browse is of the form ""mymacro.C""; /// the macro void mymacro.C(TMacro *m) is called where m=this macro; /// An example of macro.C saving the macro into a file and viewing it; /// with emacs is shown below:; /// ~~~ {.cpp}; /// void mymacro(TMacro *m) {; /// m->SaveSource(""xx.log"");; /// gSystem->Exec(""emacs xx.log&"");; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:199,Modifiability,variab,variable,199,"////////////////////////////////////////////////////////////////////////////////; /// When clicking in the browser, the following action is performed; /// on this macro, depending the content of the variable TMacro.Browse.; /// TMacro.Browse can be set in the system.rootrc or .rootrc file like:; /// ~~~ {.cpp}; /// TMacro.Browse : Action; /// ~~~; /// or set via gEnv->SetValue, eg; /// ~~~ {.cpp}; /// gEnv->SetValue(""TMacro.Browse"",""Print"");; /// ~~~; /// By default TMacro.Browse=""""; /// -if TMacro.Browse ="""" the macro is executed; /// -if TMacro.Browse =""Print"" the macro is printed in stdout; /// -if TMacro.Browse is of the form ""mymacro.C""; /// the macro void mymacro.C(TMacro *m) is called where m=this macro; /// An example of macro.C saving the macro into a file and viewing it; /// with emacs is shown below:; /// ~~~ {.cpp}; /// void mymacro(TMacro *m) {; /// m->SaveSource(""xx.log"");; /// gSystem->Exec(""emacs xx.log&"");; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:140,Performance,perform,performed,140,"////////////////////////////////////////////////////////////////////////////////; /// When clicking in the browser, the following action is performed; /// on this macro, depending the content of the variable TMacro.Browse.; /// TMacro.Browse can be set in the system.rootrc or .rootrc file like:; /// ~~~ {.cpp}; /// TMacro.Browse : Action; /// ~~~; /// or set via gEnv->SetValue, eg; /// ~~~ {.cpp}; /// gEnv->SetValue(""TMacro.Browse"",""Print"");; /// ~~~; /// By default TMacro.Browse=""""; /// -if TMacro.Browse ="""" the macro is executed; /// -if TMacro.Browse =""Print"" the macro is printed in stdout; /// -if TMacro.Browse is of the form ""mymacro.C""; /// the macro void mymacro.C(TMacro *m) is called where m=this macro; /// An example of macro.C saving the macro into a file and viewing it; /// with emacs is shown below:; /// ~~~ {.cpp}; /// void mymacro(TMacro *m) {; /// m->SaveSource(""xx.log"");; /// gSystem->Exec(""emacs xx.log&"");; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:893,Testability,log,log,893,"////////////////////////////////////////////////////////////////////////////////; /// When clicking in the browser, the following action is performed; /// on this macro, depending the content of the variable TMacro.Browse.; /// TMacro.Browse can be set in the system.rootrc or .rootrc file like:; /// ~~~ {.cpp}; /// TMacro.Browse : Action; /// ~~~; /// or set via gEnv->SetValue, eg; /// ~~~ {.cpp}; /// gEnv->SetValue(""TMacro.Browse"",""Print"");; /// ~~~; /// By default TMacro.Browse=""""; /// -if TMacro.Browse ="""" the macro is executed; /// -if TMacro.Browse =""Print"" the macro is printed in stdout; /// -if TMacro.Browse is of the form ""mymacro.C""; /// the macro void mymacro.C(TMacro *m) is called where m=this macro; /// An example of macro.C saving the macro into a file and viewing it; /// with emacs is shown below:; /// ~~~ {.cpp}; /// void mymacro(TMacro *m) {; /// m->SaveSource(""xx.log"");; /// gSystem->Exec(""emacs xx.log&"");; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:929,Testability,log,log,929,"////////////////////////////////////////////////////////////////////////////////; /// When clicking in the browser, the following action is performed; /// on this macro, depending the content of the variable TMacro.Browse.; /// TMacro.Browse can be set in the system.rootrc or .rootrc file like:; /// ~~~ {.cpp}; /// TMacro.Browse : Action; /// ~~~; /// or set via gEnv->SetValue, eg; /// ~~~ {.cpp}; /// gEnv->SetValue(""TMacro.Browse"",""Print"");; /// ~~~; /// By default TMacro.Browse=""""; /// -if TMacro.Browse ="""" the macro is executed; /// -if TMacro.Browse =""Print"" the macro is printed in stdout; /// -if TMacro.Browse is of the form ""mymacro.C""; /// the macro void mymacro.C(TMacro *m) is called where m=this macro; /// An example of macro.C saving the macro into a file and viewing it; /// with emacs is shown below:; /// ~~~ {.cpp}; /// void mymacro(TMacro *m) {; /// m->SaveSource(""xx.log"");; /// gSystem->Exec(""emacs xx.log&"");; /// }; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:207,Availability,error,error,207,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of the current content. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:94,Security,checksum,checksum,94,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of the current content. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load the macro into the interpreter.; /// Return true in case the loading was successful.",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:152,Performance,load,loading,152,"////////////////////////////////////////////////////////////////////////////////; /// Load the macro into the interpreter.; /// Return true in case the loading was successful.",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:193,Availability,error,error,193,"////////////////////////////////////////////////////////////////////////////////; /// Execute this macro with params, if params is 0, default parameters; /// (set via SetParams) are used.; /// error is set to an TInterpreter::EErrorCode by TApplication::ProcessLine().; /// Returns the result of the macro (return value or value of the last; /// expression), cast to a Long_t.",MatchSource.CODE_COMMENT,core/base/src/TMacro.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMathBase.cxx:562,Availability,avail,available,562,"// @(#)root/base:$Id$; // Authors: Rene Brun 08/02/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** TMath Base functions; \ingroup Base. Define the functions Min, Max, Abs, Sign, Range for all types.; NB: These functions are unfortunately not available in a portable; way in std::. More functions are defined in TMath.h. TMathBase.h is designed to be; a stable file and used in place of TMath.h in the ROOT miniCore.; */",MatchSource.CODE_COMMENT,core/base/src/TMathBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMathBase.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMathBase.cxx:577,Modifiability,portab,portable,577,"// @(#)root/base:$Id$; // Authors: Rene Brun 08/02/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** TMath Base functions; \ingroup Base. Define the functions Min, Max, Abs, Sign, Range for all types.; NB: These functions are unfortunately not available in a portable; way in std::. More functions are defined in TMath.h. TMathBase.h is designed to be; a stable file and used in place of TMath.h in the ROOT miniCore.; */",MatchSource.CODE_COMMENT,core/base/src/TMathBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMathBase.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:696,Availability,avail,available,696,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:954,Deployability,Update,Update,954,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:480,Integrability,message,message-digest,480,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:889,Integrability,message,message,889,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:720,Security,Secur,Security,720,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:755,Testability,test,tested,755,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:119,Safety,avoid,avoids,119,"////////////////////////////////////////////////////////////////////////////////; /// MD5 copy ctor. Special copy ctor avoids copying unnecessary; /// temp arrays when finalized.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:139,Safety,avoid,avoids,139,"////////////////////////////////////////////////////////////////////////////////; /// MD5 assignment operator. Special assignment operator avoids; /// copying unnecessary temp arrays when finalized.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update TMD5 object to reflect the concatenation of another buffer full; /// of bytes.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:3,Deployability,Update,Update,3,"// Update bitcount",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:116,Integrability,message,message-digest,116,"////////////////////////////////////////////////////////////////////////////////; /// MD5 finalization, ends an MD5 message-digest operation, writing the; /// the message digest and zeroizing the context.; /// Returns digest.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:163,Integrability,message,message,163,"////////////////////////////////////////////////////////////////////////////////; /// MD5 finalization, ends an MD5 message-digest operation, writing the; /// the message digest and zeroizing the context.; /// Returns digest.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:116,Integrability,message,message-digest,116,"////////////////////////////////////////////////////////////////////////////////; /// MD5 finalization, ends an MD5 message-digest operation, writing the; /// the message digest and zeroizing the context.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:163,Integrability,message,message,163,"////////////////////////////////////////////////////////////////////////////////; /// MD5 finalization, ends an MD5 message-digest operation, writing the; /// the message digest and zeroizing the context.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:93,Integrability,message,message,93,"////////////////////////////////////////////////////////////////////////////////; /// Return message digest as string. Returns """" in case Final() has; /// not yet been called.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:35,Performance,optimiz,optimized,35,"// The four core functions - F1 is optimized somewhat; //#define F1(x, y, z) (x & y | ~x & z)",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:208,Deployability,Update,Update,208,"////////////////////////////////////////////////////////////////////////////////; /// The core of the MD5 algorithm, this alters an existing MD5 hash to; /// reflect the addition of 16 longwords of new data. Update() blocks; /// the data and converts bytes into longwords for this routine.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:281,Integrability,rout,routine,281,"////////////////////////////////////////////////////////////////////////////////; /// The core of the MD5 algorithm, this alters an existing MD5 hash to; /// reflect the addition of 16 longwords of new data. Update() blocks; /// the data and converts bytes into longwords for this routine.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:145,Security,hash,hash,145,"////////////////////////////////////////////////////////////////////////////////; /// The core of the MD5 algorithm, this alters an existing MD5 hash to; /// reflect the addition of 16 longwords of new data. Update() blocks; /// the data and converts bytes into longwords for this routine.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:98,Integrability,message,message,98,"////////////////////////////////////////////////////////////////////////////////; /// Compare two message digests for equality.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:312,Availability,error,error,312,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum stored in ASCII in specified file. Use to read files; /// created via WriteChecksum(). The returned TMD5 object must be deleted; /// by the user. Returns 0 in case the file cannot be opened or in case of; /// error. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:94,Security,checksum,checksum,94,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum stored in ASCII in specified file. Use to read files; /// created via WriteChecksum(). The returned TMD5 object must be deleted; /// by the user. Returns 0 in case the file cannot be opened or in case of; /// error. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:286,Availability,error,error,286,"////////////////////////////////////////////////////////////////////////////////; /// Writes checksum in ASCII format to specified file. This file can; /// directly be read by ReadChecksum(). The md5 must have been finalized.; /// Returns -1 in case file cannot be opened or in case of error,; /// 0 otherwise. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:93,Security,checksum,checksum,93,"////////////////////////////////////////////////////////////////////////////////; /// Writes checksum in ASCII format to specified file. This file can; /// directly be read by ReadChecksum(). The md5 must have been finalized.; /// Returns -1 in case file cannot be opened or in case of error,; /// 0 otherwise. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:243,Availability,error,error,243,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case the file does not exists; /// or in case of error. This function preserves the modtime of the file; /// so it can be safely used in conjunction with methods that keep track; /// of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:316,Safety,safe,safely,316,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case the file does not exists; /// or in case of error. This function preserves the modtime of the file; /// so it can be safely used in conjunction with methods that keep track; /// of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:94,Security,checksum,checksum,94,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case the file does not exists; /// or in case of error. This function preserves the modtime of the file; /// so it can be safely used in conjunction with methods that keep track; /// of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:168,Availability,error,error,168,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file in digest argument. Returns -1 in; /// case of error, 0 otherwise. This method preserves the modtime of the; /// file so it can be safely used in conjunction with methods that keep; /// track of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:252,Safety,safe,safely,252,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file in digest argument. Returns -1 in; /// case of error, 0 otherwise. This method preserves the modtime of the; /// file so it can be safely used in conjunction with methods that keep; /// track of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:94,Security,checksum,checksum,94,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file in digest argument. Returns -1 in; /// case of error, 0 otherwise. This method preserves the modtime of the; /// file so it can be safely used in conjunction with methods that keep; /// track of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TMD5.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:486,Security,access,accessing,486,"// @(#)root/base:$Id$; // Author: Fons Rademakers 15/07/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMemberInspector; \ingroup Base. Abstract base class for accessing the data-members of a class.; Classes derived from this class can be given as argument to the; ShowMembers() methods of ROOT classes. This feature facilitates; the writing of class browsers and inspectors.; */",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:253,Availability,error,error,253,"// Call ShowMember() on obj.; // This could be faster if we implemented this either as a templated; // function or by rootcint-generated code using the typeid (i.e. the; // difference is a lookup in a TList instead of in a map).; // To avoid a spurious error message in case the data member is; // transient and does not have a dictionary we check first.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:259,Integrability,message,message,259,"// Call ShowMember() on obj.; // This could be faster if we implemented this either as a templated; // function or by rootcint-generated code using the typeid (i.e. the; // difference is a lookup in a TList instead of in a map).; // To avoid a spurious error message in case the data member is; // transient and does not have a dictionary we check first.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:236,Safety,avoid,avoid,236,"// Call ShowMember() on obj.; // This could be faster if we implemented this either as a templated; // function or by rootcint-generated code using the typeid (i.e. the; // difference is a lookup in a TList instead of in a map).; // To avoid a spurious error message in case the data member is; // transient and does not have a dictionary we check first.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:26,Availability,error,error,26,"// This might be worth an error message",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:32,Integrability,message,message,32,"// This might be worth an error message",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:3,Integrability,Rout,Routine,3,"// Routine driving the visiting of the class information/data members.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:3,Integrability,Rout,Routine,3,"// Routine driving the visiting of the class information/data members.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:3,Integrability,Rout,Routine,3,"// Routine driving the visiting of the class information/data members.",MatchSource.CODE_COMMENT,core/base/src/TMemberInspector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:972,Availability,Error,Errors,972,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:798,Deployability,install,install,798,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:462,Integrability,message,messages,462,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:566,Integrability,message,messages,566,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:686,Integrability,message,message,686,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:739,Integrability,message,message,739,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:781,Integrability,message,message,781,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:820,Integrability,message,message,820,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:850,Integrability,message,message,850,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:946,Integrability,message,message,946,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:994,Integrability,message,message,994,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:1045,Integrability,message,message,1045,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:1093,Integrability,message,message,1093,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:725,Security,access,access,725,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:936,Testability,log,logged,936,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:984,Testability,log,logged,984,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:1035,Testability,log,logged,1035,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:1083,Testability,log,logged,1083,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:99,Integrability,message,message,99,"////////////////////////////////////////////////////////////////////////////////; /// Create a new message handler for class cl and add it to the list; /// of message handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:159,Integrability,message,message,159,"////////////////////////////////////////////////////////////////////////////////; /// Create a new message handler for class cl and add it to the list; /// of message handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:99,Integrability,message,message,99,"////////////////////////////////////////////////////////////////////////////////; /// Create a new message handler for class named cl and add it to the list; /// of message handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:165,Integrability,message,message,165,"////////////////////////////////////////////////////////////////////////////////; /// Create a new message handler for class named cl and add it to the list; /// of message handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:99,Integrability,message,message,99,"////////////////////////////////////////////////////////////////////////////////; /// Clean up the message handler.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:95,Integrability,message,message,95,"////////////////////////////////////////////////////////////////////////////////; /// Add this message handler to the list of messages handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:126,Integrability,message,messages,126,"////////////////////////////////////////////////////////////////////////////////; /// Add this message handler to the list of messages handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:38,Integrability,message,message,38,"// don't emit signal when the default message handler is added; // as this happens in the TROOT ctor and the TQObject stuff is; // not yet properly initialized on some platforms",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:105,Integrability,message,message,105,"////////////////////////////////////////////////////////////////////////////////; /// Return counter for message with ID=messid.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:109,Integrability,message,messages,109,"////////////////////////////////////////////////////////////////////////////////; /// Return total number of messages.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:92,Integrability,message,message,92,"////////////////////////////////////////////////////////////////////////////////; /// Store message origin, keep statistics and call Notify().",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:12,Integrability,message,message,12,"// check if message must be managed by this message handler",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:44,Integrability,message,message,44,"// check if message must be managed by this message handler",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:9,Integrability,message,message,9,"// first message",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:20,Integrability,message,message,20,"// already existing message",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:7,Integrability,message,message,7,"// new message",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:54,Integrability,message,message,54,"// case of default handler; // encode class number in message id",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:112,Integrability,message,message,112,"////////////////////////////////////////////////////////////////////////////////; /// Print statistics for this message handler.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:98,Integrability,message,message,98,"////////////////////////////////////////////////////////////////////////////////; /// Remove this message handler from the list of messages handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:131,Integrability,message,messages,131,"////////////////////////////////////////////////////////////////////////////////; /// Remove this message handler from the list of messages handlers.",MatchSource.CODE_COMMENT,core/base/src/TMessageHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TNamed.cxx:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,core/base/src/TNamed.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TNamed.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:608,Availability,error,error,608,"// @(#)root/base:$Id$; // Author: Rene Brun 26/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObject; \ingroup Base. Mother of all ROOT objects. The TObject class provides default behaviour and protocol for all; objects in the ROOT system. It provides protocol for object I/O,; error handling, sorting, inspection, printing, drawing, etc.; Every object which inherits from TObject can be stored in the; ROOT collection classes. TObject's bits can be used as flags, bits 0 - 13 and 24-31 are; reserved as global bits while bits 14 - 23 can be used in different; class hierarchies (watch out for overlaps).; */",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:524,Integrability,protocol,protocol,524,"// @(#)root/base:$Id$; // Author: Rene Brun 26/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObject; \ingroup Base. Mother of all ROOT objects. The TObject class provides default behaviour and protocol for all; objects in the ROOT system. It provides protocol for object I/O,; error handling, sorting, inspection, printing, drawing, etc.; Every object which inherits from TObject can be stored in the; ROOT collection classes. TObject's bits can be used as flags, bits 0 - 13 and 24-31 are; reserved as global bits while bits 14 - 23 can be used in different; class hierarchies (watch out for overlaps).; */",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:582,Integrability,protocol,protocol,582,"// @(#)root/base:$Id$; // Author: Rene Brun 26/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObject; \ingroup Base. Mother of all ROOT objects. The TObject class provides default behaviour and protocol for all; objects in the ROOT system. It provides protocol for object I/O,; error handling, sorting, inspection, printing, drawing, etc.; Every object which inherits from TObject can be stored in the; ROOT collection classes. TObject's bits can be used as flags, bits 0 - 13 and 24-31 are; reserved as global bits while bits 14 - 23 can be used in different; class hierarchies (watch out for overlaps).; */",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:689,Modifiability,inherit,inherits,689,"// @(#)root/base:$Id$; // Author: Rene Brun 26/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObject; \ingroup Base. Mother of all ROOT objects. The TObject class provides default behaviour and protocol for all; objects in the ROOT system. It provides protocol for object I/O,; error handling, sorting, inspection, printing, drawing, etc.; Every object which inherits from TObject can be stored in the; ROOT collection classes. TObject's bits can be used as flags, bits 0 - 13 and 24-31 are; reserved as global bits while bits 14 - 23 can be used in different; class hierarchies (watch out for overlaps).; */",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:68,Safety,Detect,Detect,68,"// Return true if delete changes/poisons/taints the memory.; //; // Detect whether operator delete taints the memory. If it does, we can not rely; // on TestBit(kNotDeleted) to check if the memory has been deleted (but in case,; // like TClonesArray, where we know the destructor will be called but not operator; // delete, we can still use it to detect the cases where the destructor was called.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:347,Safety,detect,detect,347,"// Return true if delete changes/poisons/taints the memory.; //; // Detect whether operator delete taints the memory. If it does, we can not rely; // on TestBit(kNotDeleted) to check if the memory has been deleted (but in case,; // like TClonesArray, where we know the destructor will be called but not operator; // delete, we can still use it to detect the cases where the destructor was called.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:153,Testability,Test,TestBit,153,"// Return true if delete changes/poisons/taints the memory.; //; // Detect whether operator delete taints the memory. If it does, we can not rely; // on TestBit(kNotDeleted) to check if the memory has been deleted (but in case,; // like TClonesArray, where we know the destructor will be called but not operator; // delete, we can still use it to detect the cases where the destructor was called.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:17,Availability,error,error,17,"// Not using the error logger, as there routine is meant to be called; // during library initialization/loading.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:40,Integrability,rout,routine,40,"// Not using the error logger, as there routine is meant to be called; // during library initialization/loading.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:104,Performance,load,loading,104,"// Not using the error logger, as there routine is meant to be called; // during library initialization/loading.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:23,Testability,log,logger,23,"// Not using the error logger, as there routine is meant to be called; // during library initialization/loading.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:353,Availability,error,error,353,"// the 'if' part is that surrounded by the debug code.; // Intentionally accessing the deleted memory to check whether it has been changed as; // a consequence (side effect) of executing operator delete. If there no change, we; // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:433,Availability,fault,fault,433,"// the 'if' part is that surrounded by the debug code.; // Intentionally accessing the deleted memory to check whether it has been changed as; // a consequence (side effect) of executing operator delete. If there no change, we; // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:372,Integrability,message,message,372,"// the 'if' part is that surrounded by the debug code.; // Intentionally accessing the deleted memory to check whether it has been changed as; // a consequence (side effect) of executing operator delete. If there no change, we; // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:329,Safety,detect,detect,329,"// the 'if' part is that surrounded by the debug code.; // Intentionally accessing the deleted memory to check whether it has been changed as; // a consequence (side effect) of executing operator delete. If there no change, we; // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:73,Security,access,accessing,73,"// the 'if' part is that surrounded by the debug code.; // Intentionally accessing the deleted memory to check whether it has been changed as; // a consequence (side effect) of executing operator delete. If there no change, we; // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:102,Availability,error,errorswhen,102,"// on Windows, even __declspec(no_sanitize_address) does not prevent catching; // heap-use-after-free errorswhen using the /fsanitize=address compiler flag; // so don't even try",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:58,Testability,Test,TestBit,58,"// operator delete tainted the memory, we can not rely on TestBit(kNotDeleted)",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:3,Testability,test,test,3,"// test uses fBits so don't move next line",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:8,Testability,Test,TestBit,8,"// if (!TestBit(kNotDeleted)); // Fatal(""~TObject"", ""object deleted twice"");",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:197,Integrability,depend,dependency,197,"////////////////////////////////////////////////////////////////////////////////; /// Private helper function which will dispatch to; /// TObjectTable::AddObj.; /// Included here to avoid circular dependency between header files.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:182,Safety,avoid,avoid,182,"////////////////////////////////////////////////////////////////////////////////; /// Private helper function which will dispatch to; /// TObjectTable::AddObj.; /// Included here to avoid circular dependency between header files.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:214,Energy Efficiency,allocate,allocated,214,"////////////////////////////////////////////////////////////////////////////////; /// Delete this object. Typically called as a command via the interpreter.; /// Normally use ""delete"" operator when object has been allocated on the heap.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:97,Modifiability,inherit,inheritance,97,"////////////////////////////////////////////////////////////////////////////////; /// Draw class inheritance tree of the class to which this object belongs.; /// If a class B inherits from a class A, description of B is drawn; /// on the right side of description of A.; /// Member functions overridden by B are shown in class A with a blue line; /// crossing-out the corresponding member function.; /// The following picture is the class inheritance tree of class TPaveLabel:; ///; /// \image html base_object.png",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:175,Modifiability,inherit,inherits,175,"////////////////////////////////////////////////////////////////////////////////; /// Draw class inheritance tree of the class to which this object belongs.; /// If a class B inherits from a class A, description of B is drawn; /// on the right side of description of A.; /// Member functions overridden by B are shown in class A with a blue line; /// crossing-out the corresponding member function.; /// The following picture is the class inheritance tree of class TPaveLabel:; ///; /// \image html base_object.png",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:439,Modifiability,inherit,inheritance,439,"////////////////////////////////////////////////////////////////////////////////; /// Draw class inheritance tree of the class to which this object belongs.; /// If a class B inherits from a class A, description of B is drawn; /// on the right side of description of A.; /// Member functions overridden by B are shown in class A with a blue line; /// crossing-out the corresponding member function.; /// The following picture is the class inheritance tree of class TPaveLabel:; ///; /// \image html base_object.png",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:613,Availability,Error,Error,613,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:145,Integrability,rout,routine,145,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:93,Security,hash,hash,93,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:499,Security,Hash,Hash,499,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:738,Security,Hash,Hash,738,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:542,Testability,log,logarithmic,542,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:110,Modifiability,inherit,inherits,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if object inherits from class ""classname"".",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:110,Modifiability,inherit,inherits,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if object inherits from TClass cl.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:396,Performance,load,load,396,"////////////////////////////////////////////////////////////////////////////////; /// This method must be overridden to handle object notification (the base implementation is no-op).; ///; /// Different objects in ROOT use the `Notify` method for different purposes, in coordination; /// with other objects that call this method at the appropriate time.; ///; /// For example, `TLeaf` uses it to load class information; `TBranchRef` to load contents of; /// referenced branches `TBranchRef`; most notably, based on `Notify`, `TChain` implements a; /// callback mechanism to inform interested parties when it switches to a new sub-tree.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:436,Performance,load,load,436,"////////////////////////////////////////////////////////////////////////////////; /// This method must be overridden to handle object notification (the base implementation is no-op).; ///; /// Different objects in ROOT use the `Notify` method for different purposes, in coordination; /// with other objects that call this method at the appropriate time.; ///; /// For example, `TLeaf` uses it to load class information; `TBranchRef` to load contents of; /// referenced branches `TBranchRef`; most notably, based on `Notify`, `TChain` implements a; /// callback mechanism to inform interested parties when it switches to a new sub-tree.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:968,Availability,avail,available,968,"////////////////////////////////////////////////////////////////////////////////; /// Save this object in the file specified by filename.; ///; /// - if ""filename"" contains "".root"" the object is saved in filename as root; /// binary file.; ///; /// - if ""filename"" contains "".xml"" the object is saved in filename as a xml; /// ascii file.; ///; /// - if ""filename"" contains "".cc"" the object is saved in filename as C code; /// independant from ROOT. The code is generated via SavePrimitive().; /// Specific code should be implemented in each object to handle this; /// option. Like in TF1::SavePrimitive().; ///; /// - otherwise the object is written to filename as a CINT/C++ script. The; /// C++ code to rebuild this object is generated via SavePrimitive(). The; /// ""option"" parameter is passed to SavePrimitive. By default it is an empty; /// string. It can be used to specify the Draw option in the code generated; /// by SavePrimitive.; ///; /// The function is available via the object context menu.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:1697,Energy Efficiency,reduce,reduces,1697,"ed to; /// hold the compressed buffer.; ///; /// - Reservation of the corresponding space in the file by looking; /// in the TFree list of free blocks of the file.; ///; /// - The buffer is written to the file.; ///; /// Bufsize can be given to force a given buffer size to write this object.; /// By default, the buffersize will be taken from the average buffer size; /// of all objects written to the current file so far.; ///; /// If a name is specified, it will be the name of the key.; /// If name is not given, the name of the key will be the name as returned; /// by GetName().; ///; /// The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete; /// Using the kOverwrite option a previous key with the same name is; /// overwritten. The previous key is deleted before writing the new object.; /// Using the kWriteDelete option a previous key with the same name is; /// deleted only after the new object has been written. This option; /// is safer than kOverwrite but it is slower.; /// NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile--; /// the space is simply freed up to be overwritten; in the case of a TTree,; /// it is more complicated. If one opens a TTree, appends some entries,; /// then writes it out, the behaviour is effectively the same. If, however,; /// one creates a new TTree and writes it out in this way,; /// only the metadata is replaced, effectively making the old data invisible; /// without deleting it. TTree::Delete() can be used to mark all disk space; /// occupied by a TTree as free before overwriting its metadata this way.; /// The kSingleKey option is only used by TCollection::Write() to write; /// a container with a single key instead of each object in the container; /// with its own key.; ///; /// An object is read from the file into memory via TKey::Read() or; /// via TObject::Read().; ///; /// The function returns the total number of bytes written to the file.; /// It returns 0 if the object cannot be written.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:1610,Safety,safe,safer,1610," a second buffer is created to; /// hold the compressed buffer.; ///; /// - Reservation of the corresponding space in the file by looking; /// in the TFree list of free blocks of the file.; ///; /// - The buffer is written to the file.; ///; /// Bufsize can be given to force a given buffer size to write this object.; /// By default, the buffersize will be taken from the average buffer size; /// of all objects written to the current file so far.; ///; /// If a name is specified, it will be the name of the key.; /// If name is not given, the name of the key will be the name as returned; /// by GetName().; ///; /// The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete; /// Using the kOverwrite option a previous key with the same name is; /// overwritten. The previous key is deleted before writing the new object.; /// Using the kWriteDelete option a previous key with the same name is; /// deleted only after the new object has been written. This option; /// is safer than kOverwrite but it is slower.; /// NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile--; /// the space is simply freed up to be overwritten; in the case of a TTree,; /// it is more complicated. If one opens a TTree, appends some entries,; /// then writes it out, the behaviour is effectively the same. If, however,; /// one creates a new TTree and writes it out in this way,; /// only the metadata is replaced, effectively making the old data invisible; /// without deleting it. TTree::Delete() can be used to mark all disk space; /// occupied by a TTree as free before overwriting its metadata this way.; /// The kSingleKey option is only used by TCollection::Write() to write; /// a container with a single key instead of each object in the container; /// with its own key.; ///; /// An object is read from the file into memory via TKey::Read() or; /// via TObject::Read().; ///; /// The function returns the total number of bytes written to the file.; /// It returns 0 if the o",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:1745,Usability,simpl,simply,1745,"ed to; /// hold the compressed buffer.; ///; /// - Reservation of the corresponding space in the file by looking; /// in the TFree list of free blocks of the file.; ///; /// - The buffer is written to the file.; ///; /// Bufsize can be given to force a given buffer size to write this object.; /// By default, the buffersize will be taken from the average buffer size; /// of all objects written to the current file so far.; ///; /// If a name is specified, it will be the name of the key.; /// If name is not given, the name of the key will be the name as returned; /// by GetName().; ///; /// The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete; /// Using the kOverwrite option a previous key with the same name is; /// overwritten. The previous key is deleted before writing the new object.; /// Using the kWriteDelete option a previous key with the same name is; /// deleted only after the new object has been written. This option; /// is safer than kOverwrite but it is slower.; /// NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile--; /// the space is simply freed up to be overwritten; in the case of a TTree,; /// it is more complicated. If one opens a TTree, appends some entries,; /// then writes it out, the behaviour is effectively the same. If, however,; /// one creates a new TTree and writes it out in this way,; /// only the metadata is replaced, effectively making the old data invisible; /// without deleting it. TTree::Delete() can be used to mark all disk space; /// occupied by a TTree as free before overwriting its metadata this way.; /// The kSingleKey option is only used by TCollection::Write() to write; /// a container with a single key instead of each object in the container; /// with its own key.; ///; /// An object is read from the file into memory via TKey::Read() or; /// via TObject::Read().; ///; /// The function returns the total number of bytes written to the file.; /// It returns 0 if the object cannot be written.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:41,Energy Efficiency,allocate,allocated,41,"// Record how this instance was actually allocated.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:33,Safety,avoid,avoid,33,"// Can not read TFile.h here and avoid going through the interpreter by; // simply hard-coding this value.; // This **must** be equal to TFile::k630forwardCompatibility",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:76,Usability,simpl,simply,76,"// Can not read TFile.h here and avoid going through the interpreter by; // simply hard-coding this value.; // This **must** be equal to TFile::k630forwardCompatibility",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:99,Availability,Error,ErrorHandler,99,"////////////////////////////////////////////////////////////////////////////////; /// Interface to ErrorHandler (protected).",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface to ErrorHandler (protected).",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:97,Integrability,message,message,97,"////////////////////////////////////////////////////////////////////////////////; /// Issue info message. Use ""location"" to specify the method where the; /// warning occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:100,Integrability,message,message,100,"////////////////////////////////////////////////////////////////////////////////; /// Issue warning message. Use ""location"" to specify the method where the; /// warning occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:92,Availability,error,error,92,"////////////////////////////////////////////////////////////////////////////////; /// Issue error message. Use ""location"" to specify the method where the; /// error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:159,Availability,error,error,159,"////////////////////////////////////////////////////////////////////////////////; /// Issue error message. Use ""location"" to specify the method where the; /// error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:98,Integrability,message,message,98,"////////////////////////////////////////////////////////////////////////////////; /// Issue error message. Use ""location"" to specify the method where the; /// error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:99,Availability,error,error,99,"////////////////////////////////////////////////////////////////////////////////; /// Issue system error message. Use ""location"" to specify the method where; /// the system error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:173,Availability,error,error,173,"////////////////////////////////////////////////////////////////////////////////; /// Issue system error message. Use ""location"" to specify the method where; /// the system error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:105,Integrability,message,message,105,"////////////////////////////////////////////////////////////////////////////////; /// Issue system error message. Use ""location"" to specify the method where; /// the system error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:98,Availability,error,error,98,"////////////////////////////////////////////////////////////////////////////////; /// Issue fatal error message. Use ""location"" to specify the method where the; /// fatal error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:171,Availability,error,error,171,"////////////////////////////////////////////////////////////////////////////////; /// Issue fatal error message. Use ""location"" to specify the method where the; /// fatal error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:104,Integrability,message,message,104,"////////////////////////////////////////////////////////////////////////////////; /// Issue fatal error message. Use ""location"" to specify the method where the; /// fatal error occurred. Accepts standard printf formatting arguments.",MatchSource.CODE_COMMENT,core/base/src/TObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObjString.cxx:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,core/base/src/TObjString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObjString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3476,Integrability,depend,dependencies,3476," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:485,Modifiability,plugin,plugin,485,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:537,Modifiability,plugin,plugin,537,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:556,Modifiability,plugin,plugin,556,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:583,Modifiability,plugin,plugin,583,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:647,Modifiability,extend,extend,647,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:758,Modifiability,extend,extend,758,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:841,Modifiability,plugin,plugin,841,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1017,Modifiability,Plugin,Plugin,1017,"/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now depre",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1072,Modifiability,plugin,plugin,1072,"/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now depre",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1111,Modifiability,plugin,plugins,1111,"Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1135,Modifiability,plugin,plugin,1135,"Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1296,Modifiability,plugin,plugin,1296,"*; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in fro",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1459,Modifiability,Plugin,PluginClass,1459,"nager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when the",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1964,Modifiability,Plugin,Plugin,1964,"ading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2132,Modifiability,Plugin,Plugin,2132,"op plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TS",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2196,Modifiability,Plugin,Plugin,2196,"SYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServ",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2259,Modifiability,Plugin,Plugin,2259," by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of curre",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2346,Modifiability,Plugin,Plugin,2346,"rs in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2377,Modifiability,extend,extends,2377,"e names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-c",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2461,Modifiability,plugin,plugin,2461,"e names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-c",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2477,Modifiability,extend,extend,2477,"e names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-c",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2739,Modifiability,plugin,plugin,2739," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2919,Modifiability,plugin,plugins,2919," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:2969,Modifiability,plugin,plugins,2969," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3009,Modifiability,Plugin,Plugin,3009," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3365,Modifiability,plugin,plugin,3365," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3515,Modifiability,plugin,plugin,3515," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3541,Modifiability,extend,extend,3541," have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined via resources in the .rootrc; file. Although now deprecated this method still works for backward; compatibility, e.g.:; ~~~ {.cpp}; Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""<constructor>""; +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""<constructor>""; Plugin.TVirtualFitter: * TFitter Minuit ""TFitter(Int_t)""; ~~~; Where the + in front of Plugin.TSQLServer says that it extends the; existing definition of TSQLServer, useful when there is more than; one plugin that can extend the same base class. The ""<constructor>""; should be the constructor or a static method that generates an; instance of the specified class. Global methods should start with; ""::"" in their name, like ""::CreateFitter()"".; Instead of being a shared library a plugin can also be a CINT; script, so instead of libDialog.so one can have Dialog.C.; The * is a placeholder in case there is no need for a URI to; differentiate between different plugins for the same base class.; For the default plugins see $ROOTSYS/etc/system.rootrc. Plugin handlers can also be registered at run time, e.g.:; ~~~ {.cpp}; gPluginMgr->AddHandler(""TSQLServer"", ""^sqlite:"",; ""TSQLiteServer"", ""RSQLite"",; ""TSQLiteServer(const char*,const char*,const char*)"");; ~~~; A list of currently defined handlers can be printed using:; ~~~ {.cpp}; gPluginMgr->Print(); // use option=""a"" to see ctors; ~~~; The use of the plugin library manager removes all textual references; to hard-coded class and library names and the resulting dependencies; in the base classes. The plugin manager is used to extend a.o.; TFile, TSQLServer, TGrid, etc. functionality.; */",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:602,Performance,load,load,602,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:832,Performance,load,load,832,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:916,Performance,load,loading,916,"// @(#)root/base:$Id$; // Author: Fons Rademakers 26/1/2002; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPluginManager; \ingroup Base. This class implements a plugin library manager. It keeps track of a list of plugin handlers. A plugin handler knows which plugin; library to load to get a specific class that is used to extend the; functionality of a specific base class and how to create an object; of this class. For example, to extend the base class TFile to be; able to read SQLite files one needs to load the plugin library; libRSQLite.so which defines the TRSQLiteServer class. This loading; should be triggered when a given URI contains a regular expression; defined by the handler. Plugin handlers can be defined via macros in a list of plugin; directories. With $ROOTSYS/etc/plugins the default top plugin; directory specified in $ROOTSYS/etc/system.rootrc. Additional; directories can be specified by adding them to the end of the list.; Macros for identical plugin handlers in later directories will; override previous ones (the inverse of normal search path behavior).; The macros must have names like `<BaseClass>/PX0_<PluginClass>.C`,; e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping.; If the BaseClass is in a namespace the directory must have the name; NameSpace@@BaseClass as `:` is a reserved pathname character on some; operating systems. Macros not beginning with 'P' and ending with "".C""; are ignored. These macros typically look like:; ~~~ {.cpp}; void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; ~~~; Plugin handlers can also be defined v",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:8,Modifiability,plugin,plugin,8,"// main plugin manager created in TROOT",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:95,Modifiability,plugin,plugin,95,"////////////////////////////////////////////////////////////////////////////////; /// Create a plugin handler. Called by TPluginManager.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:94,Modifiability,plugin,plugin,94,"////////////////////////////////////////////////////////////////////////////////; /// Cleanup plugin handler object.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3,Performance,cache,cache,3,"// cache argument types for fast comparison",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:99,Modifiability,plugin,plugin,99,"////////////////////////////////////////////////////////////////////////////////; /// Check if the plugin library for this handler exits. Returns 0; /// when it exists and -1 in case the plugin does not exist.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:187,Modifiability,plugin,plugin,187,"////////////////////////////////////////////////////////////////////////////////; /// Check if the plugin library for this handler exits. Returns 0; /// when it exists and -1 in case the plugin does not exist.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:228,Availability,error,error,228,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Sets status to 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:95,Modifiability,plugin,plugin,95,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Sets status to 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Sets status to 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:159,Performance,load,loading,159,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Sets status to 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:25,Integrability,depend,dependent,25,"// first call also loads dependent libraries declared via the rootmap file",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:19,Performance,load,loads,19,"// first call also loads dependent libraries declared via the rootmap file",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:221,Availability,error,error,221,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Returns 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:95,Modifiability,plugin,plugin,95,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Returns 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Returns 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:152,Performance,load,loading,152,"////////////////////////////////////////////////////////////////////////////////; /// Load the plugin library for this handler. Returns 0 on successful loading; /// and -1 in case the library does not exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:37,Energy Efficiency,reduce,reduce,37,"// call once and cache the result to reduce lock contention",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:17,Performance,cache,cache,17,"// call once and cache the result to reduce lock contention",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:108,Safety,avoid,avoid,108,"// Not initialized yet.; // SetupCallEnv is likely to require/take the interpreter lock.; // Grab it now to avoid dead-lock. In particular TPluginHandler::ExecPluginImpl; // takes the gInterpreterMutex and *then* call (indirectly) code that; // take the lock in fHandlers.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:107,Modifiability,plugin,plugin,107,"////////////////////////////////////////////////////////////////////////////////; /// Print info about the plugin handler. If option is ""a"" print; /// also the ctor's that will be used.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:99,Modifiability,plugin,plugin,99,"////////////////////////////////////////////////////////////////////////////////; /// Clean up the plugin manager.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:91,Modifiability,plugin,plugin,91,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified in config file, like:; /// ~~~ {.cpp}; /// Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""TMySQLServer(...)""; /// +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""TPgSQLServer(...)""; /// ~~~; /// The + allows the extension of an already defined resource (see TEnv).",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:120,Modifiability,config,config,120,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified in config file, like:; /// ~~~ {.cpp}; /// Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""TMySQLServer(...)""; /// +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""TPgSQLServer(...)""; /// ~~~; /// The + allows the extension of an already defined resource (see TEnv).",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:160,Modifiability,Plugin,Plugin,160,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified in config file, like:; /// ~~~ {.cpp}; /// Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""TMySQLServer(...)""; /// +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""TPgSQLServer(...)""; /// ~~~; /// The + allows the extension of an already defined resource (see TEnv).",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:232,Modifiability,Plugin,Plugin,232,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified in config file, like:; /// ~~~ {.cpp}; /// Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""TMySQLServer(...)""; /// +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""TPgSQLServer(...)""; /// ~~~; /// The + allows the extension of an already defined resource (see TEnv).",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified in config file, like:; /// ~~~ {.cpp}; /// Plugin.TSQLServer: ^mysql: TMySQLServer MySQL ""TMySQLServer(...)""; /// +Plugin.TSQLServer: ^pgsql: TPgSQLServer PgSQL ""TPgSQLServer(...)""; /// ~~~; /// The + allows the extension of an already defined resource (see TEnv).",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:58,Modifiability,Plugin,Plugin,58,"// use s, i.e. skip possible OS and application prefix to Plugin.; // so that GetValue() takes properly care of returning the value; // for the specified OS and/or application",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:95,Modifiability,plugin,plugin,95,"////////////////////////////////////////////////////////////////////////////////; /// Load all plugin macros from the specified path/base directory.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load all plugin macros from the specified path/base directory.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:3,Performance,load,load,3,"// load macros in alphabetical order",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1274,Availability,down,downloading,1274,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1223,Integrability,depend,dependency,1223,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:91,Modifiability,plugin,plugin,91,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:141,Modifiability,plugin,plugin,141,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:184,Modifiability,plugin,plugins,184,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:212,Modifiability,plugin,plugin,212,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:332,Modifiability,Plugin,PluginClass,332,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:689,Modifiability,plugin,plugin,689,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:1298,Modifiability,plugin,plugin,1298,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:732,Performance,load,loaded,732,"////////////////////////////////////////////////////////////////////////////////; /// Load plugin handlers specified via macros in a list of plugin; /// directories. The `$ROOTSYS/etc/plugins` is the default top plugin directory; /// specified in `$ROOTSYS/etc/system.rootrc`. The macros must have names; /// like `<BaseClass>/PX0_<PluginClass>.C`, e.g. //`TSQLServer/P20_TMySQLServer.C`,; /// to allow easy sorting and grouping. If the BaseClass is in a namespace; /// the directory must have the name NameSpace@@BaseClass as : is a reserved; /// pathname character on some operating systems. Macros not beginning with; /// 'P' and ending with "".C"" are ignored. If base is specified only plugin; /// macros for that base class are loaded. The macros typically; /// should look like:; /// ~~~ {.cpp}; /// void P10_TDCacheFile(); /// {; /// gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; /// ""DCache"", ""TDCacheFile(const char*,Option_t*,const char*,Int_t)"");; /// }; /// ~~~; /// In general these macros should not cause side effects, by changing global; /// ROOT state via, e.g. gSystem calls, etc. However, in specific cases; /// this might be useful, e.g. adding a library search path, adding a specific; /// dependency, check on some OS or ROOT capability or downloading; /// of the plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:81,Modifiability,plugin,plugin,81,"// While waiting for the lock, another thread may; // have process the requested plugin.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:90,Modifiability,plugin,plugin,90,"////////////////////////////////////////////////////////////////////////////////; /// Add plugin handler to the list of handlers. If there is already a; /// handler defined for the same base and regexp it will be replaced.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:210,Modifiability,plugin,plugin,210,"////////////////////////////////////////////////////////////////////////////////; /// Returns the handler if there exists a handler for the specified URI.; /// The uri can be 0 in which case the first matching plugin handler; /// will be returned. Returns 0 in case handler is not found.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:111,Modifiability,plugin,plugin,111,"////////////////////////////////////////////////////////////////////////////////; /// Print list of registered plugin handlers. If option is ""a"" print; /// also the ctor's that will be used.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:123,Modifiability,plugin,plugin,123,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified directory the plugin macros. If plugin is specified; /// and if it is a base class all macros for that base will be written. If it; /// is a plugin class name, only that one macro will be written. If plugin; /// is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:141,Modifiability,plugin,plugin,141,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified directory the plugin macros. If plugin is specified; /// and if it is a base class all macros for that base will be written. If it; /// is a plugin class name, only that one macro will be written. If plugin; /// is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:250,Modifiability,plugin,plugin,250,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified directory the plugin macros. If plugin is specified; /// and if it is a base class all macros for that base will be written. If it; /// is a plugin class name, only that one macro will be written. If plugin; /// is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:309,Modifiability,plugin,plugin,309,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified directory the plugin macros. If plugin is specified; /// and if it is a base class all macros for that base will be written. If it; /// is a plugin class name, only that one macro will be written. If plugin; /// is 0 all macros are written. Returns -1 if dir does not exist, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:121,Modifiability,config,config,121,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified environment config file the plugin records. If; /// plugin is specified and if it is a base class all records for that; /// base will be written. If it is a plugin class name, only that one; /// record will be written. If plugin is 0 all macros are written.; /// If envFile is 0 or """" the records are written to stdout.; /// Returns -1 if envFile cannot be created or opened, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:137,Modifiability,plugin,plugin,137,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified environment config file the plugin records. If; /// plugin is specified and if it is a base class all records for that; /// base will be written. If it is a plugin class name, only that one; /// record will be written. If plugin is 0 all macros are written.; /// If envFile is 0 or """" the records are written to stdout.; /// Returns -1 if envFile cannot be created or opened, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:161,Modifiability,plugin,plugin,161,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified environment config file the plugin records. If; /// plugin is specified and if it is a base class all records for that; /// base will be written. If it is a plugin class name, only that one; /// record will be written. If plugin is 0 all macros are written.; /// If envFile is 0 or """" the records are written to stdout.; /// Returns -1 if envFile cannot be created or opened, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:266,Modifiability,plugin,plugin,266,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified environment config file the plugin records. If; /// plugin is specified and if it is a base class all records for that; /// base will be written. If it is a plugin class name, only that one; /// record will be written. If plugin is 0 all macros are written.; /// If envFile is 0 or """" the records are written to stdout.; /// Returns -1 if envFile cannot be created or opened, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:331,Modifiability,plugin,plugin,331,"////////////////////////////////////////////////////////////////////////////////; /// Write in the specified environment config file the plugin records. If; /// plugin is specified and if it is a base class all records for that; /// base will be written. If it is a plugin class name, only that one; /// record will be written. If plugin is 0 all macros are written.; /// If envFile is 0 or """" the records are written to stdout.; /// Returns -1 if envFile cannot be created or opened, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPluginManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:456,Integrability,Wrap,Wrapper,456,"// @(#)root/base:$Id$; // Author: Eddy Offermann 24/06/05; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /* \class TPRegexp; \ingroup Base. C++ Wrapper for the ""Perl Compatible Regular Expressions"" library; The PCRE lib can be found at: http://www.pcre.org/. Extensive documentation about Regular expressions in Perl can be; found at : http://perldoc.perl.org/perlre.html; */",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:1051,Availability,avail,available,1051,"////////////////////////////////////////////////////////////////////////////////; /// Translate Perl modifier flags into pcre flags.; /// The supported modStr characters are: g, i, m, o, s, x, and the; /// special d for debug. The meaning of the letters is:; /// - m; /// Treat string as multiple lines. That is, change ""^"" and ""$"" from; /// matching the start or end of the string to matching the start or; /// end of any line anywhere within the string.; /// - s; /// Treat string as single line. That is, change ""."" to match any; /// character whatsoever, even a newline, which normally it would not match.; /// Used together, as /ms, they let the ""."" match any character whatsoever,; /// while still allowing ""^"" and ""$"" to match, respectively, just after and; /// just before newlines within the string.; /// - i; /// Do case-insensitive pattern matching.; /// - x; /// Extend your pattern's legibility by permitting whitespace and comments.; /// - p; /// Preserve the string matched such that ${^PREMATCH}, ${^MATCH},; /// and ${^POSTMATCH} are available for use after matching.; /// - g and c; /// Global matching, and keep the Current position after failed matching.; /// Unlike i, m, s and x, these two flags affect the way the regex is used; /// rather than the regex itself. See Using regular expressions in Perl in; /// perlretut for further explanation of the g and c modifiers.; /// For more detail see: http://perldoc.perl.org/perlre.html#Modifiers.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:875,Modifiability,Extend,Extend,875,"////////////////////////////////////////////////////////////////////////////////; /// Translate Perl modifier flags into pcre flags.; /// The supported modStr characters are: g, i, m, o, s, x, and the; /// special d for debug. The meaning of the letters is:; /// - m; /// Treat string as multiple lines. That is, change ""^"" and ""$"" from; /// matching the start or end of the string to matching the start or; /// end of any line anywhere within the string.; /// - s; /// Treat string as single line. That is, change ""."" to match any; /// character whatsoever, even a newline, which normally it would not match.; /// Used together, as /ms, they let the ""."" match any character whatsoever,; /// while still allowing ""^"" and ""$"" to match, respectively, just after and; /// just before newlines within the string.; /// - i; /// Do case-insensitive pattern matching.; /// - x; /// Extend your pattern's legibility by permitting whitespace and comments.; /// - p; /// Preserve the string matched such that ${^PREMATCH}, ${^MATCH},; /// and ${^POSTMATCH} are available for use after matching.; /// - g and c; /// Global matching, and keep the Current position after failed matching.; /// Unlike i, m, s and x, these two flags affect the way the regex is used; /// rather than the regex itself. See Using regular expressions in Perl in; /// perlretut for further explanation of the g and c modifiers.; /// For more detail see: http://perldoc.perl.org/perlre.html#Modifiers.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:115,Performance,optimiz,optimizer,115,"////////////////////////////////////////////////////////////////////////////////; /// Send the pattern through the optimizer.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform the actual matching - protected method.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:317,Integrability,rout,routine,317,"////////////////////////////////////////////////////////////////////////////////; /// The number of matches is returned, this equals the full match +; /// sub-pattern matches.; /// nMaxMatch is the maximum allowed number of matches.; /// pos contains the string indices of the matches. Its usage is; /// shown in the routine MatchS.; /// For meaning of mods see ParseMods().",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform pattern substitution with optional back-ref replacement; /// - protected method.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:171,Availability,error,error,171,"////////////////////////////////////////////////////////////////////////////////; /// Get value of static flag controlling whether exception should be thrown upon an; /// error during regular expression compilation by the PCRE engine.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:162,Availability,error,error,162,"////////////////////////////////////////////////////////////////////////////////; /// Set static flag controlling whether exception should be thrown upon an; /// error during regular expression compilation by the PCRE engine.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:23,Integrability,Wrap,Wrapper,23,"/** \class TPMERegexp. Wrapper for PCRE library (Perl Compatible Regular Expressions).; Based on PME - PCRE Made Easy by Zachary Hansen. Supports main Perl operations using regular expressions (Match,; Substitute and Split). To retrieve the results one can simply use; operator[] returning a TString. See $ROOTSYS/tutorials/regexp_pme.C for examples.; */",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:257,Usability,simpl,simply,257,"/** \class TPMERegexp. Wrapper for PCRE library (Perl Compatible Regular Expressions).; Based on PME - PCRE Made Easy by Zachary Hansen. Supports main Perl operations using regular expressions (Match,; Substitute and Split). To retrieve the results one can simply use; operator[] returning a TString. See $ROOTSYS/tutorials/regexp_pme.C for examples.; */",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:161,Performance,perform,performed,161,"////////////////////////////////////////////////////////////////////////////////; /// Substitute matching part of s with r, dollar back-ref; /// substitution is performed if doDollarSubst is true (default).; /// Returns the number of substitutions made.; ///; /// After the substitution, another pass is made over the resulting; /// string and the following special tokens are interpreted:; /// - `\l` lowercase next char,; /// - `\u` uppercase next char,; /// - `\L` lowercase till `\E`,; /// - `\U` uppercase till `\E`, and; /// - `\E` end case modification.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx:170,Availability,avail,available,170,"////////////////////////////////////////////////////////////////////////////////; /// Get the next token, it is stored in this TString.; /// Returns true if new token is available, false otherwise.",MatchSource.CODE_COMMENT,core/base/src/TPRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:1243,Security,access,accessible,1243,"// @(#)root/cont:$Id$; // Author: Rene Brun 28/09/2001; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TProcessID; \ingroup Base. A TProcessID identifies a ROOT job in a unique way in time and space.; The TProcessID title consists of a TUUID object which provides a globally; unique identifier (for more see TUUID.h). A TProcessID is automatically created by the TROOT constructor.; When a TFile contains referenced objects (see TRef), the TProcessID; object is written to the file.; If a file has been written in multiple sessions (same machine or not),; a TProcessID is written for each session.; These objects are used by the class TRef to uniquely identified; any TObject pointed by a TRef. When a referenced object is read from a file (its bit kIsReferenced is set),; this object is entered into the objects table of the corresponding TProcessID.; Each TFile has a list of TProcessIDs (see TFile::fProcessIDs) also; accessible via TProcessID::fgPIDs (for all files).; When this object is deleted, it is removed from the table via the cleanup; mechanism invoked by the TObject destructor. Each TProcessID has a table (TObjArray *fObjects) that keeps track; of all referenced objects. If a referenced object has a fUniqueID set,; a pointer to this unique object may be found via fObjects->At(fUniqueID).; In the same way, when a TRef::GetObject is called, GetObject uses; its own fUniqueID to find the pointer to the referenced object.; See TProcessID::GetObjectWithID and PutObjectWithID. When a referenced object is deleted, its slot in fObjects is set to null.; //; See also TProcessUUID: a specialized TProcessID to manage the single list; of TUUIDs.; */",MatchSource.CODE_COMMENT,core/base/src/TProcessID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:93,Security,hash,hash,93,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.",MatchSource.CODE_COMMENT,core/base/src/TProcessID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:110,Deployability,update,update,110,"// We use operator() rather than Add() because; // if the address has already been registered, we want to; // update it's uniqueID (this can easily happen when the; // referenced object have been stored in a TClonesArray.",MatchSource.CODE_COMMENT,core/base/src/TProcessID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:234,Integrability,message,message,234,"// Only attempt to remove from the map the items that are already; // registered (because they are associated with a TProcessID with index; // greater than 255. Attempting to remove an item that is not in the map; // issues a Warning message.",MatchSource.CODE_COMMENT,core/base/src/TProcessID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:3,Safety,Avoid,Avoid,3,"// Avoid recalculation of fLast (compared to ->RemoveAt(uid))",MatchSource.CODE_COMMENT,core/base/src/TProcessID.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:973,Availability,down,downwards,973,"// @(#)root/base:$Id$; // Author: Valeriy Onuchin 04/27/2004; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the nu",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2467,Deployability,update,update,2467,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2521,Deployability,update,update,2521,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3050,Performance,perform,performing,3050,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:725,Usability,undo,undo,725,"// @(#)root/base:$Id$; // Author: Valeriy Onuchin 04/27/2004; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the nu",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:912,Usability,undo,undo,912,"// @(#)root/base:$Id$; // Author: Valeriy Onuchin 04/27/2004; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the nu",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:1001,Usability,undo,undo,1001,"// @(#)root/base:$Id$; // Author: Valeriy Onuchin 04/27/2004; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the nu",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:1466,Usability,undo,undo,1466,"**********************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands togeth",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:1490,Usability,undo,undo,1490,"**********************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands togeth",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:1517,Usability,undo,undo,1517,"**********************************/; /** \class TQCommand; \ingroup Base. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands togeth",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:1793,Usability,undo,undo,1793,"s long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in dire",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2009,Usability,undo,undo,2009,"and in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed ",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2054,Usability,undo,undo,2054,"and in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed ",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2093,Usability,undo,undo,2093,"and in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed ",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2199,Usability,Undo,Undo,2199,"~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; his",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2282,Usability,Undo,Undo,2282,"llColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invok",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2301,Usability,undo,undo,2301,"llColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invok",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2406,Usability,undo,undo,2406," object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is ",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2838,Usability,Undo,Undo,2838,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2904,Usability,Undo,Undo,2904,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2948,Usability,undo,undo,2948,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3061,Usability,undo,undo,3061,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3334,Usability,Undo,Undo,3334,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3342,Usability,undo,undo,3342,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3382,Usability,Undo,Undo,3382,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3391,Usability,undo,undo,3391,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:243,Usability,undo,undo,243,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:272,Usability,undo,undo,272,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:367,Usability,undo,undo,367,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:429,Usability,undo,undo,429,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:617,Usability,undo,undo,617,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:667,Usability,undo,undo,667,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:214,Usability,undo,undo,214,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. obj - an object; /// 2. redo - method or function to do/redo operation; /// 3. undo - method or function to undo operation; ///; /// Comments:; /// to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; ///; /// undo method can be same as redo one. In that case ""undo""; /// can parameter be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:243,Usability,undo,undo,243,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. obj - an object; /// 2. redo - method or function to do/redo operation; /// 3. undo - method or function to undo operation; ///; /// Comments:; /// to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; ///; /// undo method can be same as redo one. In that case ""undo""; /// can parameter be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:321,Usability,undo,undo,321,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. obj - an object; /// 2. redo - method or function to do/redo operation; /// 3. undo - method or function to undo operation; ///; /// Comments:; /// to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; ///; /// undo method can be same as redo one. In that case ""undo""; /// can parameter be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:506,Usability,undo,undo,506,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. obj - an object; /// 2. redo - method or function to do/redo operation; /// 3. undo - method or function to undo operation; ///; /// Comments:; /// to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; ///; /// undo method can be same as redo one. In that case ""undo""; /// can parameter be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:557,Usability,undo,undo,557,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. obj - an object; /// 2. redo - method or function to do/redo operation; /// 3. undo - method or function to undo operation; ///; /// Comments:; /// to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; ///; /// undo method can be same as redo one. In that case ""undo""; /// can parameter be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:123,Usability,undo,undo,123,"////////////////////////////////////////////////////////////////////////////////; /// Return a command which is doing redo/undo action.; ///; /// This static method allows to set undo parameters dynamically, i.e.; /// during execution of Redo function.; ///; /// Example:; /// For redo actions like TGTextEdit::DelChar() it is not possible to; /// know ahead what character will be deleted.; /// To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; /// one needs to call TQCommand::SetUndoArgs(1, character) from; /// inside of TGTextEdit::DelChar() method, i.e.; /// ~~~ {.cpp}; /// TQCommand::GetCommand()->SetUndoArgs(1, somechar);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:179,Usability,undo,undo,179,"////////////////////////////////////////////////////////////////////////////////; /// Return a command which is doing redo/undo action.; ///; /// This static method allows to set undo parameters dynamically, i.e.; /// during execution of Redo function.; ///; /// Example:; /// For redo actions like TGTextEdit::DelChar() it is not possible to; /// know ahead what character will be deleted.; /// To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; /// one needs to call TQCommand::SetUndoArgs(1, character) from; /// inside of TGTextEdit::DelChar() method, i.e.; /// ~~~ {.cpp}; /// TQCommand::GetCommand()->SetUndoArgs(1, somechar);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:417,Usability,undo,undo,417,"////////////////////////////////////////////////////////////////////////////////; /// Return a command which is doing redo/undo action.; ///; /// This static method allows to set undo parameters dynamically, i.e.; /// during execution of Redo function.; ///; /// Example:; /// For redo actions like TGTextEdit::DelChar() it is not possible to; /// know ahead what character will be deleted.; /// To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; /// one needs to call TQCommand::SetUndoArgs(1, character) from; /// inside of TGTextEdit::DelChar() method, i.e.; /// ~~~ {.cpp}; /// TQCommand::GetCommand()->SetUndoArgs(1, somechar);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:409,Testability,log,logical,409,"////////////////////////////////////////////////////////////////////////////////; /// Add command to the list of merged commands.; /// This make it possible to group complex actions together so an end user; /// can undo and redo them with one command. Execution of TQUndoManager::Undo(),; /// TQUndoManager::Redo() methods only invokes the top level command as a whole.; ///; /// Merge method is analogous to logical join operation.; ///; /// Note: Merge method invokes redo action.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:215,Usability,undo,undo,215,"////////////////////////////////////////////////////////////////////////////////; /// Add command to the list of merged commands.; /// This make it possible to group complex actions together so an end user; /// can undo and redo them with one command. Execution of TQUndoManager::Undo(),; /// TQUndoManager::Redo() methods only invokes the top level command as a whole.; ///; /// Merge method is analogous to logical join operation.; ///; /// Note: Merge method invokes redo action.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:280,Usability,Undo,Undo,280,"////////////////////////////////////////////////////////////////////////////////; /// Add command to the list of merged commands.; /// This make it possible to group complex actions together so an end user; /// can undo and redo them with one command. Execution of TQUndoManager::Undo(),; /// TQUndoManager::Redo() methods only invokes the top level command as a whole.; ///; /// Merge method is analogous to logical join operation.; ///; /// Note: Merge method invokes redo action.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:305,Usability,undo,undo,305,"////////////////////////////////////////////////////////////////////////////////; /// Add command to the list of merged commands.; ///; /// Option string can contain substrings:; /// - ""compress"" - try to compress input command; /// - ""radd"" - execute redo action of input command; /// - ""uadd"" - execute undo action of input command",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:310,Modifiability,inherit,inherited,310,"////////////////////////////////////////////////////////////////////////////////; /// Compress command. Compression is analogous to arithmetic ""addition operation"".; ///; /// Note:; /// - The compressed command will be deleted.; /// - Execution Compress method invokes Redo action with new redo arguments; /// inherited from compressed command.; ///; /// More complicated commands might want to override this function.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:194,Usability,Undo,Undo,194,"////////////////////////////////////////////////////////////////////////////////; /// Equal comparison. The commands are equal if they are; /// applied to the same object and have the same Redo/Undo actions; ///; /// More complicated commands might want to override this function.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:134,Usability,Undo,Undo,134,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE is command if Redo is the same as Undo function; /// and is the setter action.; ///; /// By default, all functions with names like ""SetXXX"" or ""setXXX""; /// considered as setters. Another type of setters are Move, Resize operations; ///; /// More complicated commands might want to override this function.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:102,Usability,undo,undo,102,"////////////////////////////////////////////////////////////////////////////////; /// Set do/redo and undo parameters. The format is; /// SetArgs(number_of_params, redo_params, undo_params); ///; /// Example:; /// ~~~ {.cpp}; /// move_command->SetArgs(2, 100, 100, 200, 200);; /// ~~~; /// 2 params, (100,100) - do/redo position, (200,200) - undo position",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:342,Usability,undo,undo,342,"////////////////////////////////////////////////////////////////////////////////; /// Set do/redo and undo parameters. The format is; /// SetArgs(number_of_params, redo_params, undo_params); ///; /// Example:; /// ~~~ {.cpp}; /// move_command->SetArgs(2, 100, 100, 200, 200);; /// ~~~; /// 2 params, (100,100) - do/redo position, (200,200) - undo position",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:90,Usability,undo,undo,90,"////////////////////////////////////////////////////////////////////////////////; /// Set undo parameters. The format is; /// SetUndoArgs(number_of_params, params); ///; /// Example:; /// ~~~ {.cpp}; /// move_command->SetUndoArgs(2, 200, 200);; /// ~~~",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:103,Usability,Undo,Undo,103,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if Undo action is possible, kFALSE if it's not.; /// By default, only single trial undo action is possible.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:183,Usability,undo,undo,183,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if Undo action is possible, kFALSE if it's not.; /// By default, only single trial undo action is possible.",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:170,Usability,Undo,UndoName,170,"////////////////////////////////////////////////////////////////////////////////; /// Returns command description.; /// By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)""",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:106,Usability,undo,undo,106,"////////////////////////////////////////////////////////////////////////////////; /// Returns the name of undo command",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:116,Usability,undo,undo,116,"////////////////////////////////////////////////////////////////////////////////; /// Returns a pointer to array of undo arguments",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:106,Usability,undo,undo,106,"////////////////////////////////////////////////////////////////////////////////; /// Returns a number of undo arguments",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:114,Usability,undo,undo,114,"////////////////////////////////////////////////////////////////////////////////; /// Returns an object for which undo redo actions are applied",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:117,Usability,undo,undo,117,"////////////////////////////////////////////////////////////////////////////////; /// Returns a number of sequential undo or redo operations",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:120,Usability,undo,undo,120,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if neither redo nor undo action specified",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:86,Usability,Undo,Undo,86,"////////////////////////////////////////////////////////////////////////////////; /// Undo action is in progress",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:53,Usability,undo,undo,53,"/** \class TQUndoManager; Recorder of operations for undo and redo; */; ////////////////////////////////////////////////////////////////////////////////; /// Constructor",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:92,Testability,log,logging,92,"////////////////////////////////////////////////////////////////////////////////; /// Start logging. Delete all previous log records; /// Note: logging is not implemented yet",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:121,Testability,log,log,121,"////////////////////////////////////////////////////////////////////////////////; /// Start logging. Delete all previous log records; /// Note: logging is not implemented yet",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:144,Testability,log,logging,144,"////////////////////////////////////////////////////////////////////////////////; /// Start logging. Delete all previous log records; /// Note: logging is not implemented yet",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:3,Usability,undo,undo,3,"// undo/redo in progress",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs undo action. Move cursor position backward in history stack",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:95,Usability,undo,undo,95,"////////////////////////////////////////////////////////////////////////////////; /// Performs undo action. Move cursor position backward in history stack",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs redo action. Move cursor position forward in history stack",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:103,Usability,undo,undo,103,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if undo action is possible",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:103,Testability,log,logging,103,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if logging is ON",MatchSource.CODE_COMMENT,core/base/src/TQCommand.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQConnection.cxx:133,Modifiability,variab,variable,133,"////////////////////////////////////////////////////////////////////////////////; /// Apply slot-method to the fReceiver object with variable; /// number of argument values.",MatchSource.CODE_COMMENT,core/base/src/TQConnection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQConnection.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:1421,Energy Efficiency,power,powerfull,1421,"// @(#)root/base:$Id: 5d6810ad46b864564f576f88aa9b154789d91d48 $; // Author: Valeriy Onuchin & Fons Rademakers 15/10/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQObject; \ingroup Base. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. ### Signals. ~~~ {.cpp}; Destroyed(); ~~~; Signal emitted when object is destroyed.; This signal could be connected to some garbage-collector object. ~~~ {.cpp}; ChangedBy(const char *method_name); ~~~; This signal is emitted when some important data members of; the object were changed. method_name parameter can be used; as an identifier of the modifier method. ~~~ {.cpp}; Message(const char *msg); ~~~. General purpose message signal; */",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:1841,Integrability,Message,Message,1841,"// @(#)root/base:$Id: 5d6810ad46b864564f576f88aa9b154789d91d48 $; // Author: Valeriy Onuchin & Fons Rademakers 15/10/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQObject; \ingroup Base. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. ### Signals. ~~~ {.cpp}; Destroyed(); ~~~; Signal emitted when object is destroyed.; This signal could be connected to some garbage-collector object. ~~~ {.cpp}; ChangedBy(const char *method_name); ~~~; This signal is emitted when some important data members of; the object were changed. method_name parameter can be used; as an identifier of the modifier method. ~~~ {.cpp}; Message(const char *msg); ~~~. General purpose message signal; */",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:1888,Integrability,message,message,1888,"// @(#)root/base:$Id: 5d6810ad46b864564f576f88aa9b154789d91d48 $; // Author: Valeriy Onuchin & Fons Rademakers 15/10/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TQObject; \ingroup Base. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. ### Signals. ~~~ {.cpp}; Destroyed(); ~~~; Signal emitted when object is destroyed.; This signal could be connected to some garbage-collector object. ~~~ {.cpp}; ChangedBy(const char *method_name); ~~~; This signal is emitted when some important data members of; the object were changed. method_name parameter can be used; as an identifier of the modifier method. ~~~ {.cpp}; Message(const char *msg); ~~~. General purpose message signal; */",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:66,Security,access,access,66,"// A pointer to the object that sent the last signal.; // Getting access to the sender might be practical; // when many signals are connected to a single slot.",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:167,Availability,error,error,167,"////////////////////////////////////////////////////////////////////////////////; /// Checking of consistency of sender/receiver methods/arguments.; /// Returns -1 on error, otherwise number or arguments of signal function.; /// Static method.",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:3,Safety,avoid,avoid,3,"// avoid zero strings; // if delegation object TQObjSender is used get the real sender class",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:3,Safety,avoid,avoid,3,"// avoid zero strings",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:215,Energy Efficiency,allocate,allocated,215,"////////////////////////////////////////////////////////////////////////////////; /// TQObject Constructor.; /// Comment:; /// - In order to minimize memory allocation fListOfSignals and; /// fListOfConnections are allocated only if it is neccesary; /// - When fListOfSignals/fListOfConnections are empty they will; /// be deleted",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:200,Performance,perform,performed,200,"////////////////////////////////////////////////////////////////////////////////; /// Collect class signal lists from class cls and all its; /// base-classes.; ///; /// The recursive traversal is not performed for classes not; /// deriving from TQClass.",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:3,Deployability,update,update,3,"// update list of signal lists",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:20,Deployability,update,update,20,"// slot_name != 0 , update signal list",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:20,Deployability,update,update,20,"// slot_name != 0 , update signal list",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:108,Usability,simpl,simplifies,108,"////////////////////////////////////////////////////////////////////////////////; /// Global function which simplifies making connection in interpreted ROOT session; ///; /// ConnectCINT - connects to interpreter(CINT) command",MatchSource.CODE_COMMENT,core/base/src/TQObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:1909,Deployability,update,updated,1909,"n the tree/graph is written to the output buffer to avoid circular; dependencies. However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects. When a TRef is used to point to a TObject *robj, for example in a class with; ~~~ {.cpp}; TRef fRef;; ~~~; one can do:; ~~~ {.cpp}; fRef = robj; //to set the pointer; ~~~; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be auto-loaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. ## How does it work. A TRef is itself a TObject with an additional transient pointer fPID.; When the statement fRef = robj is executed, the following actions happen:. - The pointer fPID is set to the current TProcessID.; - The current ObjectNumber (see below) is incremented by one.; - robj::fUniqueID is set to ObjectNumber.; - In the fPID object, the element fObjects[ObjectNumber] is set to robj; - ref::fUniqueID is also set to ObjectNumber. After having set fRef, one can immediately return the value of robj; using fRef.GetObject(). This function returns directly fObjects[fUniqueID]; from the fPID object. When the TRef is written, the process id number pidf of fPID is written; in addition to the TObject part of TRef (fBits,fUniqueID). When the TRef is read, its pointer fPID is set to the value; stored in the TObjArray of TFile::fProcessIDs (fProcessIDs[pidf]).; The pidf is stored as a UShort_t limiting a file to 65535 dist",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:981,Integrability,depend,dependencies,981,"// @(#)root/cont:$Id$; // Author: Rene Brun 28/09/2001; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TRef; \ingroup Base. Persistent Reference link to a TObject; A TRef is a lightweight object pointing to any TObject.; This object can be used instead of normal C++ pointers in case. - the referenced object R and the pointer P are not written to the same file; - P is read before R; - R and P are written to different Tree branches. When a top level object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies. However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects. When a TRef is used to point to a TObject *robj, for example in a class with; ~~~ {.cpp}; TRef fRef;; ~~~; one can do:; ~~~ {.cpp}; fRef = robj; //to set the pointer; ~~~; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be auto-loaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. ## How does it work. A T",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:1757,Performance,load,loaded,1757,"vel object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies. However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects. When a TRef is used to point to a TObject *robj, for example in a class with; ~~~ {.cpp}; TRef fRef;; ~~~; one can do:; ~~~ {.cpp}; fRef = robj; //to set the pointer; ~~~; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be auto-loaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. ## How does it work. A TRef is itself a TObject with an additional transient pointer fPID.; When the statement fRef = robj is executed, the following actions happen:. - The pointer fPID is set to the current TProcessID.; - The current ObjectNumber (see below) is incremented by one.; - robj::fUniqueID is set to ObjectNumber.; - In the fPID object, the element fObjects[ObjectNumber] is set to robj; - ref::fUniqueID is also set to ObjectNumber. After having set fRef, one can immediately return the value of robj; using fRef.GetObject(). This function returns directly fObjects[fUniqueID]; from the fPID object. When the TRef is written, the process id number pidf of fPID is written; in addition to the TObject part of TRef (fBits,fUniqueID). When the TRef is read, its pointer fPID is set to",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:6573,Performance,Load,LoadHits,6573,"l class, do:; ~~~ {.cpp}; TRef fRef; //EXEC:execName. points to something; ~~~; When the special keyword ""EXEC:"" is found in the comment field of the member,; the next string is assumed to be the name of a TExec object.; When a file is connected, the dictionary of the classes on the file; is read in memory (see TFile::ReadStreamerInfo). When the TStreamerElement; object is read, a TExec object is automatically created with the name; specified after the keyword ""EXEC:"" in case a TExec with a same name does; not already exist. The action to be executed via this TExec can be specified with:. - a call to the TExec constructor, if the constructor is called before; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; ~~~ {.cpp}; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand);; ~~~; where actionCommand is a string containing a C++ instruction. Examples:; ~~~ {.cpp}; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on dem",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:6817,Performance,load,load,6817,"y of the classes on the file; is read in memory (see TFile::ReadStreamerInfo). When the TStreamerElement; object is read, a TExec object is automatically created with the name; specified after the keyword ""EXEC:"" in case a TExec with a same name does; not already exist. The action to be executed via this TExec can be specified with:. - a call to the TExec constructor, if the constructor is called before; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; ~~~ {.cpp}; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand);; ~~~; where actionCommand is a string containing a C++ instruction. Examples:; ~~~ {.cpp}; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram; ~~~; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter. An e",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:965,Safety,avoid,avoid,965,"// @(#)root/cont:$Id$; // Author: Rene Brun 28/09/2001; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TRef; \ingroup Base. Persistent Reference link to a TObject; A TRef is a lightweight object pointing to any TObject.; This object can be used instead of normal C++ pointers in case. - the referenced object R and the pointer P are not written to the same file; - P is read before R; - R and P are written to different Tree branches. When a top level object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies. However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects. When a TRef is used to point to a TObject *robj, for example in a class with; ~~~ {.cpp}; TRef fRef;; ~~~; one can do:; ~~~ {.cpp}; fRef = robj; //to set the pointer; ~~~; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be auto-loaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. ## How does it work. A T",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:4547,Safety,avoid,avoid,4547,"ject::Streamer, the pidf is read.; At this point, robj is entered into the table of objects of the TProcessID; corresponding to pidf. ### WARNING1:; If MyClass is the class of the referenced object, The TObject; part of MyClass must be Streamed. One should not; call MyClass::Class()->IgnoreTObjectStreamer(). ### WARNING2:; A TRef cannot point to another TRef. ## ObjectNumber. When an object is referenced (see TRef assignment operator or TRefArray::Add); a unique identifier is computed and stored in both the fUniqueID of the; referenced and referencing object. This uniqueID is computed by incrementing; by one the static global in TProcessID::fgNumber. fUniqueID is some sort of; serial object number in the current session. One can retrieve at any time; the current value of fgNumber by calling the static function TProcessID::GetObjectCount; or set this number via TProcessID::SetObjectCount. To avoid a growing table of fObjects in TProcessID, in case, for example,; one processes many events in a loop, it might be necessary to reset the; ObjectNumber at the end of processing of one event. See an example; in $ROOTSYS/test/Event.cxx (look at function Build). The value of ObjectNumber (say saveNumber=TProcessID::GetObjectCount()) may be; saved at the beginning of one event and reset to this original value; at the end of the event via TProcessID::SetObjectCount(saveNumber). These; actions may be stacked. ## Action on Demand. The normal behaviour of a TRef has been described above. In addition,; TRef supports also ""Actions on Demand"". It may happen that the object; referenced is not yet in memory, on a separate file or not yet computed.; In this case TRef is able to automatically execute an action:. - call to a compiled function (static function of member function); - call to an interpreted function; - execution of a C++ script. How to select this option?; In the definition of the TRef data member in the original class, do:; ~~~ {.cpp}; TRef fRef; //EXEC:execName. points to s",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:8758,Safety,detect,detected,8758,"tically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on the ROOT Web site and returns the object h6; to TRef::GetObject. Note that if the definition of the TRef fWebHistogram had been:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram(); ~~~; then, the compiled or interpreted function GetWebHistogram() would have; been called instead of the C++ script GetWebHistogram.C. ## Special case of a TRef pointing to an object with a TUUID. If the referenced object has a TUUID, its bit kHasUUID has been set.; This case is detected by the TRef assignment operator.; (For example, TFile and TDirectory have a TUUID); The TRef fPID points directly to the single object TProcessUUID (deriving; from TProcessID) and managing the list of TUUIDs for a process.; The TRef kHasUUID bit is set and its fUniqueID is set to the fUniqueID; of the referenced object. When the TRef is streamed to a buffer, the corresponding TUUID is also; streamed with the TRef. When a TRef is read from a buffer, the corresponding; TUUID is also read and entered into the global list of TUUIDs (if not; already there). The TRef fUniqueID is set to the UUIDNumber.; see TProcessUUID for more details. ## Array of TRef. The special class TRefArray should be used to store multiple references.; A TRefArray has one single pointer fPID for all objects in the array.; It has a dynamic compact table of fUniqueIDs. Use a TRefArray rather; then a collection of TRefs if all TRefs stem from the same process. Example:. Suppose a TObjArray *mytracks containing a list of Tr",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:7131,Security,access,access,7131," call to the TExec constructor, if the constructor is called before; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; ~~~ {.cpp}; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand);; ~~~; where actionCommand is a string containing a C++ instruction. Examples:; ~~~ {.cpp}; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram; ~~~; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() exec",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:7288,Security,access,accessing,7288,"n at any time.; One can compute a pointer to an existing TExec with a name with:; ~~~ {.cpp}; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand);; ~~~; where actionCommand is a string containing a C++ instruction. Examples:; ~~~ {.cpp}; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram; ~~~; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on th",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:4772,Testability,test,test,4772,"ding to pidf. ### WARNING1:; If MyClass is the class of the referenced object, The TObject; part of MyClass must be Streamed. One should not; call MyClass::Class()->IgnoreTObjectStreamer(). ### WARNING2:; A TRef cannot point to another TRef. ## ObjectNumber. When an object is referenced (see TRef assignment operator or TRefArray::Add); a unique identifier is computed and stored in both the fUniqueID of the; referenced and referencing object. This uniqueID is computed by incrementing; by one the static global in TProcessID::fgNumber. fUniqueID is some sort of; serial object number in the current session. One can retrieve at any time; the current value of fgNumber by calling the static function TProcessID::GetObjectCount; or set this number via TProcessID::SetObjectCount. To avoid a growing table of fObjects in TProcessID, in case, for example,; one processes many events in a loop, it might be necessary to reset the; ObjectNumber at the end of processing of one event. See an example; in $ROOTSYS/test/Event.cxx (look at function Build). The value of ObjectNumber (say saveNumber=TProcessID::GetObjectCount()) may be; saved at the beginning of one event and reset to this original value; at the end of the event via TProcessID::SetObjectCount(saveNumber). These; actions may be stacked. ## Action on Demand. The normal behaviour of a TRef has been described above. In addition,; TRef supports also ""Actions on Demand"". It may happen that the object; referenced is not yet in memory, on a separate file or not yet computed.; In this case TRef is able to automatically execute an action:. - call to a compiled function (static function of member function); - call to an interpreted function; - execution of a C++ script. How to select this option?; In the definition of the TRef data member in the original class, do:; ~~~ {.cpp}; TRef fRef; //EXEC:execName. points to something; ~~~; When the special keyword ""EXEC:"" is found in the comment field of the member,; the next string is assumed",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:7603,Testability,test,test,7603,")"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram; ~~~; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on the ROOT Web site and returns the object h6; to TRef::GetObject. Note that if the definition of the TRef fWebHistogram had been:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram(); ~~~; then, the compiled or interpreted function GetWebHistogram() would have; been called instead of the",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:1816,Usability,simpl,simply,1816,"vel object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies. However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects. When a TRef is used to point to a TObject *robj, for example in a class with; ~~~ {.cpp}; TRef fRef;; ~~~; one can do:; ~~~ {.cpp}; fRef = robj; //to set the pointer; ~~~; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be auto-loaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. ## How does it work. A TRef is itself a TObject with an additional transient pointer fPID.; When the statement fRef = robj is executed, the following actions happen:. - The pointer fPID is set to the current TProcessID.; - The current ObjectNumber (see below) is incremented by one.; - robj::fUniqueID is set to ObjectNumber.; - In the fPID object, the element fObjects[ObjectNumber] is set to robj; - ref::fUniqueID is also set to ObjectNumber. After having set fRef, one can immediately return the value of robj; using fRef.GetObject(). This function returns directly fObjects[fUniqueID]; from the fPID object. When the TRef is written, the process id number pidf of fPID is written; in addition to the TObject part of TRef (fBits,fUniqueID). When the TRef is read, its pointer fPID is set to",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:27,Performance,load,loaded,27,"//well may be the Exec has loaded the object",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:333,Security,access,access,333,"////////////////////////////////////////////////////////////////////////////////; /// Static function to set the object found on the Action on Demand function.; /// This function may be called by the user in the function called; /// when a ""EXEC:"" keyword is specified in the data member field of the TRef.; /// The function can get access to the dereferencing TRef (i.e. this)using; /// the static function GetStaticObject().",MatchSource.CODE_COMMENT,core/base/src/TRef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRefCnt.cxx:78,Availability,down,down,78,"// This definition is compiled in case nothing else is,; // in order to quiet down some fussy librarians",MatchSource.CODE_COMMENT,core/base/src/TRefCnt.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRefCnt.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRegexp.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// This routine transforms a wildcarding regular expression into; /// a general regular expression used for pattern matching.; /// When using wildcards the regular expression is assumed to be; /// preceded by a ""^"" (BOL) and terminated by a ""$"" (EOL). Also, all; /// ""*""'s and ""?""'s (closures) are assumed to be preceded by a ""."" (i.e. any; /// character, except ""/""'s) and all .'s are escaped (so *.ps is different; /// from *.eps). The special treatment of ""/"" allows the easy matching of; /// pathnames, e.g. ""*.root"" will match ""aap.root"", but not ""pipo/aap.root"".",MatchSource.CODE_COMMENT,core/base/src/TRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRegexp.cxx:3,Deployability,Update,Update,3,"// Update start-of-search index",MatchSource.CODE_COMMENT,core/base/src/TRegexp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRegexp.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRemoteObject.cxx:496,Integrability,protocol,protocol,496,"// @(#)root/base:$Id$; // Author: Bertrand Bellenot 19/06/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TRemoteObject; \ingroup Base. The TRemoteObject class provides protocol for browsing ROOT objects; from a remote ROOT session. It contains information on the real remote object as:. - Object Properties (i.e. file stat if the object is a TSystemFile); - Object Name; - Class Name; - TKey Object Name (if the remote object is a TKey); - TKey Class Name (if the remote object is a TKey); - Remote object address; */",MatchSource.CODE_COMMENT,core/base/src/TRemoteObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRemoteObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRemoteObject.cxx:115,Deployability,continuous,continuous,115,"// Collections to keep track of all browser objects that have been; // generated. It's main goal is to prevent the continuous; // allocations of new objects with the same names during browsing.",MatchSource.CODE_COMMENT,core/base/src/TRemoteObject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRemoteObject.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:569,Security,access,accessible,569,"// @(#)root/base:$Id$; // Author: Rene Brun 08/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TROOT; \ingroup Base. ROOT top level object description. The TROOT object is the entry point to the ROOT system.; The single instance of TROOT is accessible via the global gROOT.; Using the gROOT pointer one has access to basically every object; created in a ROOT based program. The TROOT object is essentially a; container of several lists pointing to the main ROOT objects. The following lists are accessible from gROOT object:. ~~~ {.cpp}; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers; ~~~. The TROOT class provides also many useful services:; - Get pointer to an object in any of the lists above; - Time utilities TROOT::Time. The ROOT object must be created as a static object. An example; of a main program creating an interactive version is shown below:. ### Example of a main program. ~~~ {.cpp}; #include ""TRint.h"". int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);. // Init Intrinsics, build all windows, and enter event loop; theApp->Run();. return(0);; }; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:635,Security,access,access,635,"// @(#)root/base:$Id$; // Author: Rene Brun 08/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TROOT; \ingroup Base. ROOT top level object description. The TROOT object is the entry point to the ROOT system.; The single instance of TROOT is accessible via the global gROOT.; Using the gROOT pointer one has access to basically every object; created in a ROOT based program. The TROOT object is essentially a; container of several lists pointing to the main ROOT objects. The following lists are accessible from gROOT object:. ~~~ {.cpp}; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers; ~~~. The TROOT class provides also many useful services:; - Get pointer to an object in any of the lists above; - Time utilities TROOT::Time. The ROOT object must be created as a static object. An example; of a main program creating an interactive version is shown below:. ### Example of a main program. ~~~ {.cpp}; #include ""TRint.h"". int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);. // Init Intrinsics, build all windows, and enter event loop; theApp->Run();. return(0);; }; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:823,Security,access,accessible,823,"// @(#)root/base:$Id$; // Author: Rene Brun 08/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TROOT; \ingroup Base. ROOT top level object description. The TROOT object is the entry point to the ROOT system.; The single instance of TROOT is accessible via the global gROOT.; Using the gROOT pointer one has access to basically every object; created in a ROOT based program. The TROOT object is essentially a; container of several lists pointing to the main ROOT objects. The following lists are accessible from gROOT object:. ~~~ {.cpp}; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers; ~~~. The TROOT class provides also many useful services:; - Get pointer to an object in any of the lists above; - Time utilities TROOT::Time. The ROOT object must be created as a static object. An example; of a main program creating an interactive version is shown below:. ### Example of a main program. ~~~ {.cpp}; #include ""TRint.h"". int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);. // Init Intrinsics, build all windows, and enter event loop; theApp->Run();. return(0);; }; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:27,Performance,concurren,concurrent,27,"// Mutex for protection of concurrent gROOT access",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:44,Security,access,access,44,"// Mutex for protection of concurrent gROOT access",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:7,Security,access,accessing,7,"// For accessing TThread::Tsd indirectly.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:31,Integrability,rout,routines,31,"//-------- Names of next three routines are a small homage to CMZ --------------; ////////////////////////////////////////////////////////////////////////////////; /// Return version id as an integer, i.e. ""2.22/04"" -> 22204.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:51,Performance,load,load,51,"// Additional code to be given to cling at library load",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:294,Energy Efficiency,schedul,scheduled,294,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:346,Energy Efficiency,schedul,schedule,346,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1092,Energy Efficiency,schedul,schedule,1092,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1299,Energy Efficiency,allocate,allocate,1299,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:10,Integrability,wrap,wrapper,10,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:253,Modifiability,variab,variable,253,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:189,Performance,load,loaded,189,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:576,Performance,load,loading,576,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Usability,Simpl,Simple,3,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1076,Performance,load,loading,1076,"// The global gROOT is defined to be a function (ROOT::GetROOT()); // which itself is dereferencing a function pointer.; // Initially this function pointer's value is & GetROOT1 whose role is to; // create and initialize the TROOT object itself.; // At the very end of the TROOT constructor the value of the function pointer; // is switch to & GetROOT2 whose role is to initialize the interpreter.; // This mechanism was primarily intended to fix the issues with order in which; // global TROOT and LLVM globals are initialized. TROOT was initializing; // Cling, but Cling could not be used yet due to LLVM globals not being; // Initialized yet. The solution is to delay initializing the interpreter in; // TROOT till after main() when all LLVM globals are initialized.; // Technically, the mechanism used actually delay the interpreter; // initialization until the first use of gROOT *after* the end of the; // TROOT constructor.; // So to delay until after the start of main, we also made sure that none; // of the ROOT code (mostly the dictionary code) used during library loading; // is using gROOT (directly or indirectly).; // In practice, the initialization of the interpreter is now delayed until; // the first use gROOT (or gInterpreter) after the start of main (but user; // could easily break this by using gROOT in their library initialization; // code).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Performance,Load,Load,3,"// Load and init threads library",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:166,Performance,multi-thread,multi-threading,166,"//////////////////////////////////////////////////////////////////////////////; /// Globally enables the parallel branch processing, which is a case of; /// implicit multi-threading (IMT) in ROOT, activating the required locks.; /// This IMT use case, implemented in TTree::GetEntry, spawns a task for; /// each branch of the tree. Therefore, a task takes care of the reading,; /// decompression and deserialisation of a given branch.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:147,Performance,load,load,147,"////////////////////////////////////////////////////////////////////////////////; /// Keeps track of the status of ImplicitMT w/o resorting to the load of; /// libImt",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:740,Modifiability,plug-in,plug-ins,740,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:821,Modifiability,variab,variable,821,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:209,Performance,concurren,concurrent,209,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:381,Performance,concurren,concurrent,381,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:572,Performance,concurren,concurrent,572,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:649,Performance,concurren,concurrent,649,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:713,Performance,concurren,concurrent,713,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:724,Performance,load,loading,724,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:152,Safety,safe,safe,152,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:196,Safety,safe,safe,196,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:916,Safety,safe,safe,916,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1091,Safety,safe,safe,1091,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1273,Safety,safe,safe,1273,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1350,Safety,safe,safety,1350,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:374,Availability,avail,available,374,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1471,Energy Efficiency,schedul,scheduler,1471,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1747,Energy Efficiency,schedul,scheduling,1747,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1436,Modifiability,config,configured,1436,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1619,Modifiability,variab,variable,1619,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:461,Performance,multi-thread,multi-threading,461,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:865,Performance,perform,performs,865,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1264,Performance,multi-thread,multi-threading,1264,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1849,Performance,multi-thread,multi-threading,1849,"////////////////////////////////////////////////////////////////////////////////; /// @param[in] numthreads Number of threads to use. If not specified or; /// set to zero, the number of threads is automatically; /// decided by the implementation. Any other value is; /// used as a hint.; ///; /// ROOT must be built with the compilation flag `imt=ON` for this feature to be available.; /// The following objects and methods automatically take advantage of; /// multi-threading if a call to `EnableImplicitMT` has been made before usage:; ///; /// - RDataFrame internally runs the event-loop by parallelizing over clusters of entries; /// - TTree::GetEntry reads multiple branches in parallel; /// - TTree::FlushBaskets writes multiple baskets to disk in parallel; /// - TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; /// - THx::Fit performs in parallel the evaluation of the objective function over the data; /// - TMVA::DNN trains the deep neural networks in parallel; /// - TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel; ///; /// EnableImplicitMT calls in turn EnableThreadSafety.; /// The 'numthreads' parameter allows to control the number of threads to; /// be used by the implicit multi-threading. However, this parameter is just; /// a hint for ROOT: it will try to satisfy the request if the execution; /// scenario allows it. For example, if ROOT is configured to use an external; /// scheduler, setting a value for 'numthreads' might not have any effect.; /// The maximum number of threads can be influenced by the environment; /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; /// the maximum number of active threads to 2, if the scheduling library; /// (such as tbb) ""permits"".; ///; /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:108,Performance,multi-thread,multi-threading,108,"////////////////////////////////////////////////////////////////////////////////; /// Disables the implicit multi-threading in ROOT (see EnableImplicitMT).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:115,Performance,multi-thread,multi-threading,115,"////////////////////////////////////////////////////////////////////////////////; /// Returns true if the implicit multi-threading in ROOT is enabled.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:195,Modifiability,variab,variable,195,"// Global debug flag (set to > 0 to get debug output).; // Can be set either via the interpreter (gDebug is exported to CINT),; // via the rootrc resource ""Root.Debug"", via the shell environment variable; // ROOTDEBUG, or via the debugger.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1114,Integrability,depend,dependencies,1114,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the ROOT system. The creation of the TROOT object initializes; /// the ROOT system. It must be the first ROOT related action that is; /// performed by a program. The TROOT object must be created on the stack; /// (can not be called via new since ""operator new"" is protected). The; /// TROOT object is either created as a global object (outside the main(); /// program), or it is one of the first objects created in main().; /// Make sure that the TROOT object stays in scope for as long as ROOT; /// related actions are performed. TROOT is a so called singleton so; /// only one instance of it can be created. The single TROOT object can; /// always be accessed via the global pointer gROOT.; /// The name and title arguments can be used to identify the running; /// application. The initfunc argument can contain an array of; /// function pointers (last element must be 0). These functions are; /// executed at the end of the constructor. This way one can easily; /// extend the ROOT system without adding permanent dependencies; /// (e.g. the graphics system is initialized via such a function).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1066,Modifiability,extend,extend,1066,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the ROOT system. The creation of the TROOT object initializes; /// the ROOT system. It must be the first ROOT related action that is; /// performed by a program. The TROOT object must be created on the stack; /// (can not be called via new since ""operator new"" is protected). The; /// TROOT object is either created as a global object (outside the main(); /// program), or it is one of the first objects created in main().; /// Make sure that the TROOT object stays in scope for as long as ROOT; /// related actions are performed. TROOT is a so called singleton so; /// only one instance of it can be created. The single TROOT object can; /// always be accessed via the global pointer gROOT.; /// The name and title arguments can be used to identify the running; /// application. The initfunc argument can contain an array of; /// function pointers (last element must be 0). These functions are; /// executed at the end of the constructor. This way one can easily; /// extend the ROOT system without adding permanent dependencies; /// (e.g. the graphics system is initialized via such a function).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:235,Performance,perform,performed,235,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the ROOT system. The creation of the TROOT object initializes; /// the ROOT system. It must be the first ROOT related action that is; /// performed by a program. The TROOT object must be created on the stack; /// (can not be called via new since ""operator new"" is protected). The; /// TROOT object is either created as a global object (outside the main(); /// program), or it is one of the first objects created in main().; /// Make sure that the TROOT object stays in scope for as long as ROOT; /// related actions are performed. TROOT is a so called singleton so; /// only one instance of it can be created. The single TROOT object can; /// always be accessed via the global pointer gROOT.; /// The name and title arguments can be used to identify the running; /// application. The initfunc argument can contain an array of; /// function pointers (last element must be 0). These functions are; /// executed at the end of the constructor. This way one can easily; /// extend the ROOT system without adding permanent dependencies; /// (e.g. the graphics system is initialized via such a function).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:617,Performance,perform,performed,617,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the ROOT system. The creation of the TROOT object initializes; /// the ROOT system. It must be the first ROOT related action that is; /// performed by a program. The TROOT object must be created on the stack; /// (can not be called via new since ""operator new"" is protected). The; /// TROOT object is either created as a global object (outside the main(); /// program), or it is one of the first objects created in main().; /// Make sure that the TROOT object stays in scope for as long as ROOT; /// related actions are performed. TROOT is a so called singleton so; /// only one instance of it can be created. The single TROOT object can; /// always be accessed via the global pointer gROOT.; /// The name and title arguments can be used to identify the running; /// application. The initfunc argument can contain an array of; /// function pointers (last element must be 0). These functions are; /// executed at the end of the constructor. This way one can easily; /// extend the ROOT system without adding permanent dependencies; /// (e.g. the graphics system is initialized via such a function).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:750,Security,access,accessed,750,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the ROOT system. The creation of the TROOT object initializes; /// the ROOT system. It must be the first ROOT related action that is; /// performed by a program. The TROOT object must be created on the stack; /// (can not be called via new since ""operator new"" is protected). The; /// TROOT object is either created as a global object (outside the main(); /// program), or it is one of the first objects created in main().; /// Make sure that the TROOT object stays in scope for as long as ROOT; /// related actions are performed. TROOT is a so called singleton so; /// only one instance of it can be created. The single TROOT object can; /// always be accessed via the global pointer gROOT.; /// The name and title arguments can be used to identify the running; /// application. The initfunc argument can contain an array of; /// function pointers (last element must be 0). These functions are; /// executed at the end of the constructor. This way one can easily; /// extend the ROOT system without adding permanent dependencies; /// (e.g. the graphics system is initialized via such a function).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:31,Integrability,interface,interface,31,"// Initialize Operating System interface",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:14,Integrability,interface,interface,14,"// Initialize interface to CINT C++ interpreter",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:37,Availability,avail,available,37,"// usedToIdentifyRootClingByDlSym is available when TROOT is part of; // rootcling.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:14,Modifiability,plugin,plugin,14,"// initialize plugin manager early",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:20,Integrability,Message,MessageHandler,20,"// Create a default MessageHandler",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:32,Safety,avoid,avoid,32,"// Turn-off the global mutex to avoid recreating mutexes that have; // already been deleted during the destruction phase",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:15,Availability,error,error,15,"// Return when error occurred in TCling, i.e. when setup file(s) are; // out of date",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:64,Safety,Safe,SafeDelete,64,"// FIXME: Causes rootcling to deadlock, debug and uncomment; // SafeDelete(fRootFolder);",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:7,Security,secur,security,7,"// and security contexts",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:84,Safety,Safe,SafeDelete,84,"// FIXME: Causes segfault in rootcling, debug and uncomment; // fClasses->Delete(); SafeDelete(fClasses); // TClass'es must be deleted last",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:295,Integrability,depend,dependent,295,"// On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; // initialization order is (by default?) is 'wrong' and so we can't; // delete the interpreter now .. because any of the static in the; // interpreter's library have already been deleted.; // On the link line, we must list the most dependent .o file; // and end with the least dependent (LLVM libraries), unfortunately,; // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; // in the same order (hence doing libCore's before LLVM's and; // vice et versa for both the destructor. We worked around the; // initialization order by delay the TROOT creation until first use.; // We can not do the same for destruction as we have no way of knowing; // the last access ...; // So for now, let's avoid delete TCling except in the special build; // checking the completeness of the termination deletion.; // TODO: Should we do more cleanup here than just call delete?; // Segfaults rootcling in some cases, debug and uncomment:; //; // delete fInterpreter;; // We cannot delete fCleanups because of the logic in atexit which needs it.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:340,Integrability,depend,dependent,340,"// On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; // initialization order is (by default?) is 'wrong' and so we can't; // delete the interpreter now .. because any of the static in the; // interpreter's library have already been deleted.; // On the link line, we must list the most dependent .o file; // and end with the least dependent (LLVM libraries), unfortunately,; // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; // in the same order (hence doing libCore's before LLVM's and; // vice et versa for both the destructor. We worked around the; // initialization order by delay the TROOT creation until first use.; // We can not do the same for destruction as we have no way of knowing; // the last access ...; // So for now, let's avoid delete TCling except in the special build; // checking the completeness of the termination deletion.; // TODO: Should we do more cleanup here than just call delete?; // Segfaults rootcling in some cases, debug and uncomment:; //; // delete fInterpreter;; // We cannot delete fCleanups because of the logic in atexit which needs it.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:768,Safety,avoid,avoid,768,"// On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; // initialization order is (by default?) is 'wrong' and so we can't; // delete the interpreter now .. because any of the static in the; // interpreter's library have already been deleted.; // On the link line, we must list the most dependent .o file; // and end with the least dependent (LLVM libraries), unfortunately,; // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; // in the same order (hence doing libCore's before LLVM's and; // vice et versa for both the destructor. We worked around the; // initialization order by delay the TROOT creation until first use.; // We can not do the same for destruction as we have no way of knowing; // the last access ...; // So for now, let's avoid delete TCling except in the special build; // checking the completeness of the termination deletion.; // TODO: Should we do more cleanup here than just call delete?; // Segfaults rootcling in some cases, debug and uncomment:; //; // delete fInterpreter;; // We cannot delete fCleanups because of the logic in atexit which needs it.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:735,Security,access,access,735,"// On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; // initialization order is (by default?) is 'wrong' and so we can't; // delete the interpreter now .. because any of the static in the; // interpreter's library have already been deleted.; // On the link line, we must list the most dependent .o file; // and end with the least dependent (LLVM libraries), unfortunately,; // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; // in the same order (hence doing libCore's before LLVM's and; // vice et versa for both the destructor. We worked around the; // initialization order by delay the TROOT creation until first use.; // We can not do the same for destruction as we have no way of knowing; // the last access ...; // So for now, let's avoid delete TCling except in the special build; // checking the completeness of the termination deletion.; // TODO: Should we do more cleanup here than just call delete?; // Segfaults rootcling in some cases, debug and uncomment:; //; // delete fInterpreter;; // We cannot delete fCleanups because of the logic in atexit which needs it.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1074,Testability,log,logic,1074,"// On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; // initialization order is (by default?) is 'wrong' and so we can't; // delete the interpreter now .. because any of the static in the; // interpreter's library have already been deleted.; // On the link line, we must list the most dependent .o file; // and end with the least dependent (LLVM libraries), unfortunately,; // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; // in the same order (hence doing libCore's before LLVM's and; // vice et versa for both the destructor. We worked around the; // initialization order by delay the TROOT creation until first use.; // We can not do the same for destruction as we have no way of knowing; // the last access ...; // So for now, let's avoid delete TCling except in the special build; // checking the completeness of the termination deletion.; // TODO: Should we do more cleanup here than just call delete?; // Segfaults rootcling in some cases, debug and uncomment:; //; // delete fInterpreter;; // We cannot delete fCleanups because of the logic in atexit which needs it.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:37,Availability,avail,available,37,"// usedToIdentifyRootClingByDlSym is available when TROOT is part of rootcling.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:140,Integrability,rout,routine,140,"////////////////////////////////////////////////////////////////////////////////; /// Add a class to the list and map of classes.; /// This routine is deprecated, use TClass::AddClass directly.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:192,Performance,load,loaded,192,"////////////////////////////////////////////////////////////////////////////////; /// Add a class generator. This generator will be called by TClass::GetClass; /// in case its does not find a loaded rootcint dictionary to request the; /// creation of a TClass object.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:98,Deployability,update,update,98,"// Routine to close a list of files using the 'slow' techniques; // that also for the deletion ot update the list itself.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Integrability,Rout,Routine,3,"// Routine to close a list of files using the 'slow' techniques; // that also for the deletion ot update the list itself.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:409,Usability,Clear,Clear,409,"// In order for the iterator to stay valid, we must; // prevent the removal of the object (dir) from the list; // (which is done in TFile::Close). We can also can not; // just move to the next iterator since the Close might; // also (indirectly) remove that file.; // So we SetObject to a harmless value, so that 'dir'; // is not seen as part of the list.; // We will later, remove all the object (see files->Clear()",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:90,Usability,Clear,Clear,90,"// this must not be zero otherwise things go wrong.; // See related comment at the files->Clear(""nodelete"");",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:168,Safety,avoid,avoid,168,"// Now were done, clear the list but do not delete the objects as; // they have been moved to the list of closed objects and must be; // deleted from there in order to avoid a double delete from a; // use objects (on the interpreter stack).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:18,Usability,clear,clear,18,"// Now were done, clear the list but do not delete the objects as; // they have been moved to the list of closed objects and must be; // deleted from there in order to avoid a double delete from a; // use objects (on the interpreter stack).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Integrability,Rout,Routine,3,"// Routine to delete the content of list of files using the 'slow' techniques",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:409,Usability,Clear,Clear,409,"// In order for the iterator to stay valid, we must; // prevent the removal of the object (dir) from the list; // (which is done in TFile::Close). We can also can not; // just move to the next iterator since the Close might; // also (indirectly) remove that file.; // So we SetObject to a harmless value, so that 'dir'; // is not seen as part of the list.; // We will later, remove all the object (see files->Clear()",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:90,Usability,Clear,Clear,90,"// this must not be zero otherwise things go wrong.; // See related comment at the files->Clear(""nodelete"");",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:409,Usability,Clear,Clear,409,"// In order for the iterator to stay valid, we must; // prevent the removal of the object (dir) from the list; // (which is done in TFile::Close). We can also can not; // just move to the next iterator since the Close might; // also (indirectly) remove that file.; // So we SetObject to a harmless value, so that 'dir'; // is not seen as part of the list.; // We will later, remove all the object (see files->Clear()",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:18,Usability,clear,clear,18,"// Now were done, clear the list",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:92,Availability,down,down,92,"// Now delete the objects still 'held' by the TFiles so that it; // is done before the tear down of the libraries.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:16,Usability,simpl,simpler,16,"// Now a set of simpler things to delete. See the same ordering in; // TROOT::~TROOT",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:18,Modifiability,variab,variable,18,"// Is it a global variable?",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:325,Performance,load,loading,325,"// Example of inputs are; // vector<int> (*); // vector<Int_t>; // vector<long long>; // vector<Long_64_t> (*); // vector<int, allocator<int> >; // vector<Int_t, allocator<int> >; //; // One of the possibly expensive operation is the resolving of the typedef; // which can provoke the parsing of the header files (and/or the loading; // of clang pcms information).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Performance,load,load,3,/* load */,MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:255,Performance,load,load,255,"// If 2 threads gets here at the same time, the static initialization ""lock""; // will stall one of them until ProcessLine is finished and both will return the; // correct answer.; // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`; // and restart after this thread has finished the initialization (i.e. a rare case),; // the only penalty we pay is a spurious 2nd lookup for an unknown function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:111,Modifiability,variab,variable,111,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to global variable by name. If load is true force; /// reading of all currently defined globals from CINT (more expensive).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:132,Performance,load,load,132,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to global variable by name. If load is true force; /// reading of all currently defined globals from CINT (more expensive).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:111,Modifiability,variab,variable,111,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to global variable with address addr.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Performance,load,load,3,/* load */,MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:95,Integrability,rout,routine,95,"////////////////////////////////////////////////////////////////////////////////; /// Internal routine returning, and creating if necessary, the list; /// of global function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:250,Performance,load,load,250,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to global function by name.; /// If params != 0 it will also resolve overloading other it returns the first; /// name match.; /// If params == 0 and load is true force reading of all currently defined; /// global functions from Cling.; /// The param string must be of the form: ""3189,\""aap\"",1.3"".",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:185,Performance,load,load,185,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to global function by name. If proto != 0; /// it will also resolve overloading. If load is true force reading; /// of all currently defined global functions from CINT (more expensive).; /// The proto string must be of the form: ""int, char*, float"".",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Testability,Test,Test,3,"// Test again just in case, another thread did the work while we were; // waiting.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:233,Deployability,update,update,233,"////////////////////////////////////////////////////////////////////////////////; /// Return list containing the TGlobals currently defined.; /// Since globals are created and deleted during execution of the; /// program, we need to update the list of globals every time we; /// execute this method. However, when calling this function in; /// a (tight) loop where no interpreter symbols will be created; /// you can set load=kFALSE (default).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:421,Performance,load,load,421,"////////////////////////////////////////////////////////////////////////////////; /// Return list containing the TGlobals currently defined.; /// Since globals are created and deleted during execution of the; /// program, we need to update the list of globals every time we; /// execute this method. However, when calling this function in; /// a (tight) loop where no interpreter symbols will be created; /// you can set load=kFALSE (default).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:237,Deployability,update,update,237,"////////////////////////////////////////////////////////////////////////////////; /// Return list containing the TFunctions currently defined.; /// Since functions are created and deleted during execution of the; /// program, we need to update the list of functions every time we; /// execute this method. However, when calling this function in; /// a (tight) loop where no interpreter symbols will be created; /// you can set load=kFALSE (default).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:427,Performance,load,load,427,"////////////////////////////////////////////////////////////////////////////////; /// Return list containing the TFunctions currently defined.; /// Since functions are created and deleted during execution of the; /// program, we need to update the list of functions every time we; /// execute this method. However, when calling this function in; /// a (tight) loop where no interpreter symbols will be created; /// you can set load=kFALSE (default).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:28,Performance,load,load,28,"// A thread that calls with load==true and a thread that calls with load==false; // will conflict here (the load==true will be updating the list while the; // other is reading it). To solve the problem, we could use a read-write lock; // inside the list itself.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:68,Performance,load,load,68,"// A thread that calls with load==true and a thread that calls with load==false; // will conflict here (the load==true will be updating the list while the; // other is reading it). To solve the problem, we could use a read-write lock; // inside the list itself.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:108,Performance,load,load,108,"// A thread that calls with load==true and a thread that calls with load==false; // will conflict here (the load==true will be updating the list while the; // other is reading it). To solve the problem, we could use a read-write lock; // inside the list itself.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:115,Security,access,access,115,"////////////////////////////////////////////////////////////////////////////////; /// Return a dynamic list giving access to all TDataTypes (typedefs); /// currently defined.; ///; /// The list is populated on demand. Calling; /// ~~~ {.cpp}; /// gROOT->GetListOfTypes()->FindObject(nameoftype);; /// ~~~; /// will return the TDataType corresponding to 'nameoftype'. If the; /// TDataType is not already in the list itself and the type does exist,; /// a new TDataType will be created and added to the list.; ///; /// Calling; /// ~~~ {.cpp}; /// gROOT->GetListOfTypes()->ls(); // or Print(); /// ~~~; /// list only the typedefs that have been previously accessed through the; /// list (plus the builtins types).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:655,Security,access,accessed,655,"////////////////////////////////////////////////////////////////////////////////; /// Return a dynamic list giving access to all TDataTypes (typedefs); /// currently defined.; ///; /// The list is populated on demand. Calling; /// ~~~ {.cpp}; /// gROOT->GetListOfTypes()->FindObject(nameoftype);; /// ~~~; /// will return the TDataType corresponding to 'nameoftype'. If the; /// TDataType is not already in the list itself and the type does exist,; /// a new TDataType will be created and added to the list.; ///; /// Calling; /// ~~~ {.cpp}; /// gROOT->GetListOfTypes()->ls(); // or Print(); /// ~~~; /// list only the typedefs that have been previously accessed through the; /// list (plus the builtins types).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Performance,load,load,3,/* load */,MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:30,Availability,avail,available,30,"// Check whether the class is available for auto-loading first:",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:49,Performance,load,loading,49,"// Check whether the class is available for auto-loading first:",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:302,Safety,detect,detected,302,"// ""C:\dir"" becomes ""C:::dir"".; // fname corresponds to whatever is stated after #include and; // a full path name usually means that it's not a regular #include; // but e.g. a "".L"", so we can assume that this is not a header of; // a class in a namespace (a global-namespace class would have been; // detected already before).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:16,Availability,error,error,16,"// to a void an error with VisualC++",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:114,Integrability,interface,interface,114,"////////////////////////////////////////////////////////////////////////////////; /// Initialize operating system interface.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:137,Availability,avail,available,137,"// The old ""Root.ZipMode"" had a discrepancy between documentation vs actual meaning.; // Also, a value with the meaning ""default"" wasn't available. To solved this,; // ""Root.ZipMode"" was replaced by ""Root.CompressionAlgorithm"". Warn about usage of; // the old value, if it's set to 0, but silently translate the setting to; // ""Root.CompressionAlgorithm"" for values > 1.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load and initialize thread library.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:37,Availability,avail,available,37,"// usedToIdentifyRootClingByDlSym is available when TROOT is part of; // rootcling.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:9,Availability,error,error,9,"// reset error message",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:15,Integrability,message,message,15,"// reset error message",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Energy Efficiency,Schedul,Schedule,3,"// Schedule the destruction of TROOT.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:161,Performance,load,load,161,"////////////////////////////////////////////////////////////////////////////////; /// Helper function used by TClass::GetClass().; /// This function attempts to load the dictionary for 'classname'; /// either from the TClassTable or from the list of generator.; /// If silent is 'true', do not warn about missing dictionary for the class.; /// (typically used for class that are used only for transient members); ///; /// The 'requestedname' is expected to be already normalized.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:646,Availability,error,error,646,"////////////////////////////////////////////////////////////////////////////////; /// Check if class ""classname"" is known to the interpreter (in fact,; /// this check is not needed anymore, so classname is ignored). If; /// not it will load library ""libname"". If the library couldn't be found with original; /// libname and if the name was not prefixed with lib, try to prefix with ""lib"" and search again.; /// If DynamicPathName still couldn't find the library, return -1.; /// If check is true it will only check if libname exists and is; /// readable.; /// Returns 0 on successful loading, -1 in case libname does not; /// exist or in case of error and -2 in case of version mismatch.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:236,Performance,load,load,236,"////////////////////////////////////////////////////////////////////////////////; /// Check if class ""classname"" is known to the interpreter (in fact,; /// this check is not needed anymore, so classname is ignored). If; /// not it will load library ""libname"". If the library couldn't be found with original; /// libname and if the name was not prefixed with lib, try to prefix with ""lib"" and search again.; /// If DynamicPathName still couldn't find the library, return -1.; /// If check is true it will only check if libname exists and is; /// readable.; /// Returns 0 on successful loading, -1 in case libname does not; /// exist or in case of error and -2 in case of version mismatch.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:584,Performance,load,loading,584,"////////////////////////////////////////////////////////////////////////////////; /// Check if class ""classname"" is known to the interpreter (in fact,; /// this check is not needed anymore, so classname is ignored). If; /// not it will load library ""libname"". If the library couldn't be found with original; /// libname and if the name was not prefixed with lib, try to prefix with ""lib"" and search again.; /// If DynamicPathName still couldn't find the library, return -1.; /// If check is true it will only check if libname exists and is; /// readable.; /// Returns 0 on successful loading, -1 in case libname does not; /// exist or in case of error and -2 in case of version mismatch.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:29,Performance,load,load,29,"// If check == false, try to load the library",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:12,Performance,Load,Load,12,"// TSystem::Load returns 1 when the library was already loaded, return success in this case.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:56,Performance,load,loaded,56,"// TSystem::Load returns 1 when the library was already loaded, return success in this case.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:355,Availability,error,error,355,"////////////////////////////////////////////////////////////////////////////////; /// Load a macro in the interpreter's memory. Equivalent to the command line; /// command "".L filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If check is true it will only check if filename exists and is; /// readable.; /// Returns 0 on successful loading and -1 in case filename does not; /// exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:585,Availability,error,error,585,"////////////////////////////////////////////////////////////////////////////////; /// Load a macro in the interpreter's memory. Equivalent to the command line; /// command "".L filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If check is true it will only check if filename exists and is; /// readable.; /// Returns 0 on successful loading and -1 in case filename does not; /// exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load a macro in the interpreter's memory. Equivalent to the command line; /// command "".L filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If check is true it will only check if filename exists and is; /// readable.; /// Returns 0 on successful loading and -1 in case filename does not; /// exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:519,Performance,load,loading,519,"////////////////////////////////////////////////////////////////////////////////; /// Load a macro in the interpreter's memory. Equivalent to the command line; /// command "".L filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If check is true it will only check if filename exists and is; /// readable.; /// Returns 0 on successful loading and -1 in case filename does not; /// exist or in case of error.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:357,Availability,error,error,357,"////////////////////////////////////////////////////////////////////////////////; /// Execute a macro in the interpreter. Equivalent to the command line; /// command "".x filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]][(args)].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If padUpdate is true (default) update the current pad.; /// Returns the macro return value.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:446,Deployability,update,update,446,"////////////////////////////////////////////////////////////////////////////////; /// Execute a macro in the interpreter. Equivalent to the command line; /// command "".x filename"". If the filename has ""+"" or ""++"" appended; /// the macro will be compiled by ACLiC. The filename must have the format:; /// [path/]macro.C[+|++[g|O]][(args)].; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// If padUpdate is true (default) update the current pad.; /// Returns the macro return value.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:94,Integrability,message,message,94,"////////////////////////////////////////////////////////////////////////////////; /// Process message id called by obj.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:432,Availability,error,error,432,"////////////////////////////////////////////////////////////////////////////////; /// Process interpreter command via TApplication::ProcessLine().; /// On Win32 the line will be processed asynchronously by sending; /// it to the CINT interpreter thread. For explicit synchronous processing; /// use ProcessLineSync(). On non-Win32 platforms there is no difference; /// between ProcessLine() and ProcessLineSync().; /// The possible error codes are defined by TInterpreter::EErrorCode. In; /// particular, error will equal to TInterpreter::kProcessing until the; /// CINT interpreted thread has finished executing the line.; /// Returns the result of the command, cast to a Longptr_t.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:505,Availability,error,error,505,"////////////////////////////////////////////////////////////////////////////////; /// Process interpreter command via TApplication::ProcessLine().; /// On Win32 the line will be processed asynchronously by sending; /// it to the CINT interpreter thread. For explicit synchronous processing; /// use ProcessLineSync(). On non-Win32 platforms there is no difference; /// between ProcessLine() and ProcessLineSync().; /// The possible error codes are defined by TInterpreter::EErrorCode. In; /// particular, error will equal to TInterpreter::kProcessing until the; /// CINT interpreted thread has finished executing the line.; /// Returns the result of the command, cast to a Longptr_t.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:419,Availability,error,error,419,"////////////////////////////////////////////////////////////////////////////////; /// Process interpreter command via TApplication::ProcessLine().; /// On Win32 the line will be processed synchronously (i.e. it will; /// only return when the CINT interpreter thread has finished executing; /// the line). On non-Win32 platforms there is no difference between; /// ProcessLine() and ProcessLineSync().; /// The possible error codes are defined by TInterpreter::EErrorCode.; /// Returns the result of the command, cast to a Longptr_t.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:285,Availability,error,error,285,"////////////////////////////////////////////////////////////////////////////////; /// Process interpreter command directly via CINT interpreter.; /// Only executable statements are allowed (no variable declarations),; /// In all other cases use TROOT::ProcessLine().; /// The possible error codes are defined by TInterpreter::EErrorCode.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:193,Modifiability,variab,variable,193,"////////////////////////////////////////////////////////////////////////////////; /// Process interpreter command directly via CINT interpreter.; /// Only executable statements are allowed (no variable declarations),; /// In all other cases use TROOT::ProcessLine().; /// The possible error codes are defined by TInterpreter::EErrorCode.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:15,Security,hash,hash,15,"// read commit hash",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:122,Deployability,release,release,122,"////////////////////////////////////////////////////////////////////////////////; /// Deprecated (will be removed in next release).",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:289,Deployability,update,update,289,"////////////////////////////////////////////////////////////////////////////////; /// Refresh all browsers. Call this method when some command line; /// command or script has changed the browser contents. Not needed; /// for objects that have the kMustCleanup bit set. Most useful to; /// update browsers that show the file system or other objects external; /// to the running ROOT session.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1825,Availability,down,down,1825,"led if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (whichever comes first). We do *not*; // want the files to be closed whenever a library is unloaded via; // dlclose. To avoid this, we add the function (CallCloseFiles); // from the dictionary indirectly (via ROOT::RegisterModule). In; // this case the function will only only be called either when; // libCore is 'dlclose'd or right after the end of main.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:797,Integrability,rout,routine,797,"// First a side track to insure proper end of process behavior.; // Register for each loaded dictionary (and thus for each library),; // that we need to Close the ROOT files as soon as this library; // might start being unloaded after main.; //; // By calling atexit here (rather than directly from within the; // library) we make sure that this is not called if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (w",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:86,Performance,load,loaded,86,"// First a side track to insure proper end of process behavior.; // Register for each loaded dictionary (and thus for each library),; // that we need to Close the ROOT files as soon as this library; // might start being unloaded after main.; //; // By calling atexit here (rather than directly from within the; // library) we make sure that this is not called if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (w",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:556,Performance,load,loaded,556,"// First a side track to insure proper end of process behavior.; // Register for each loaded dictionary (and thus for each library),; // that we need to Close the ROOT files as soon as this library; // might start being unloaded after main.; //; // By calling atexit here (rather than directly from within the; // library) we make sure that this is not called if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (w",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:657,Performance,load,loaded,657,"// First a side track to insure proper end of process behavior.; // Register for each loaded dictionary (and thus for each library),; // that we need to Close the ROOT files as soon as this library; // might start being unloaded after main.; //; // By calling atexit here (rather than directly from within the; // library) we make sure that this is not called if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (w",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1316,Performance,load,load,1316,"lled if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (whichever comes first). We do *not*; // want the files to be closed whenever a library is unloaded via; // dlclose. To avoid this, we add the function (CallCloseFiles); // from the dictionary indirectly (via ROOT::RegisterModule). In; // this case the function will only only be called either when; // libCore is 'dlclose'd or right after the end of main.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:2119,Safety,avoid,avoid,2119,"led if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (whichever comes first). We do *not*; // want the files to be closed whenever a library is unloaded via; // dlclose. To avoid this, we add the function (CallCloseFiles); // from the dictionary indirectly (via ROOT::RegisterModule). In; // this case the function will only only be called either when; // libCore is 'dlclose'd or right after the end of main.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:145,Integrability,rout,routine,145,"////////////////////////////////////////////////////////////////////////////////; /// Remove a class from the list and map of classes.; /// This routine is deprecated, use TClass::RemoveClass directly.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:244,Performance,load,loaded,244,"////////////////////////////////////////////////////////////////////////////////; /// Delete all global interpreter objects created since the last call to Reset; ///; /// If option=""a"" is set reset to startup context (i.e. unload also; /// all loaded files, classes, structs, typedefs, etc.).; ///; /// This function is typically used at the beginning (or end) of an unnamed macro; /// to clean the environment.; ///; /// IMPORTANT WARNING:; /// Do not use this call from within any function (neither compiled nor; /// interpreted. This should only be used from a unnamed macro; /// (which starts with a { (curly braces) ). For example, using TROOT::Reset; /// from within an interpreted function will lead to the unloading of the; /// dictionary and source file, including the one defining the function being; /// executed.; ///",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:93,Modifiability,extend,extend,93,"////////////////////////////////////////////////////////////////////////////////; /// Set or extend the macro search path. Static utility function.; /// If newpath=0 or """" reset to value specified in the rootrc file.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:267,Availability,avail,available,267,"////////////////////////////////////////////////////////////////////////////////; /// Set batch mode for ROOT; /// If the argument evaluates to `true`, the session does not use interactive graphics.; /// If web graphics runs in server mode, the web widgets are still available via URL",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:981,Availability,avail,available,981,"////////////////////////////////////////////////////////////////////////////////; /// \brief Specify where web graphics shall be rendered; ///; /// The input parameter `webdisplay` defines where web graphics is rendered.; /// `webdisplay` parameter may contain:; ///; /// - ""firefox"": select Mozilla Firefox browser for interactive web display; /// - ""chrome"": select Google Chrome browser for interactive web display; /// - ""edge"": select Microsoft Edge browser for interactive web display; /// - ""native"": select one of the natively-supported web browsers firefox/chrome/edge for interactive web display; /// - ""qt5"": uses QWebEngine from Qt5, no real http server started (requires `qt5web` component build for ROOT); /// - ""qt6"": uses QWebEngine from Qt6, no real http server started (requires `qt6web` component build for ROOT); /// - ""cef"": uses Chromium Embeded Framework, no real http server started (requires `cefweb` component build for ROOT); /// - ""local"": select on of available local (without http server) engines like qt5/qt6/cef; /// - ""default"": system default web browser, invoked with `xdg-open` on Linux, `start` on Mac or `open` on Windows; /// - ""on"": try ""local"", then ""native"", then ""default"" option; /// - ""off"": turns off the web display and comes back to normal graphics in; /// interactive mode.; /// - ""server:port"": turns the web display into server mode with specified port. Web widgets will not be displayed,; /// only text message with window URL will be printed on standard output",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1455,Integrability,message,message,1455,"////////////////////////////////////////////////////////////////////////////////; /// \brief Specify where web graphics shall be rendered; ///; /// The input parameter `webdisplay` defines where web graphics is rendered.; /// `webdisplay` parameter may contain:; ///; /// - ""firefox"": select Mozilla Firefox browser for interactive web display; /// - ""chrome"": select Google Chrome browser for interactive web display; /// - ""edge"": select Microsoft Edge browser for interactive web display; /// - ""native"": select one of the natively-supported web browsers firefox/chrome/edge for interactive web display; /// - ""qt5"": uses QWebEngine from Qt5, no real http server started (requires `qt5web` component build for ROOT); /// - ""qt6"": uses QWebEngine from Qt6, no real http server started (requires `qt6web` component build for ROOT); /// - ""cef"": uses Chromium Embeded Framework, no real http server started (requires `cefweb` component build for ROOT); /// - ""local"": select on of available local (without http server) engines like qt5/qt6/cef; /// - ""default"": system default web browser, invoked with `xdg-open` on Linux, `start` on Mac or `open` on Windows; /// - ""on"": try ""local"", then ""native"", then ""default"" option; /// - ""off"": turns off the web display and comes back to normal graphics in; /// interactive mode.; /// - ""server:port"": turns the web display into server mode with specified port. Web widgets will not be displayed,; /// only text message with window URL will be printed on standard output",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:38,Modifiability,config,configured,38,"// restore canvas and browser classes configured at the moment when gROOT->SetWebDisplay() was called for the first time; // This is necessary when SetWebDisplay() called several times and therefore current settings may differ",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:131,Integrability,inject,inject,131,"////////////////////////////////////////////////////////////////////////////////; /// INTERNAL function!; /// Used by rootcling to inject interpreter arguments through a C-interface layer.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:172,Integrability,interface,interface,172,"////////////////////////////////////////////////////////////////////////////////; /// INTERNAL function!; /// Used by rootcling to inject interpreter arguments through a C-interface layer.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:131,Security,inject,inject,131,"////////////////////////////////////////////////////////////////////////////////; /// INTERNAL function!; /// Used by rootcling to inject interpreter arguments through a C-interface layer.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:119,Deployability,install,installation,119,"////////////////////////////////////////////////////////////////////////////////; /// Get the rootsys directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Safety,Avoid,Avoid,3,"// Avoid returning a reference to a temporary because of the conversion; // between std::string and TString.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:118,Deployability,install,installation,118,"////////////////////////////////////////////////////////////////////////////////; /// Get the binary directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:119,Deployability,install,installation,119,"////////////////////////////////////////////////////////////////////////////////; /// Get the library directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:128,Deployability,install,installation,128,"////////////////////////////////////////////////////////////////////////////////; /// Get the shared libraries directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:119,Deployability,install,installation,119,"////////////////////////////////////////////////////////////////////////////////; /// Get the include directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Safety,Avoid,Avoid,3,"// Avoid returning a reference to a temporary because of the conversion; // between std::string and TString.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:121,Deployability,install,installation,121,"////////////////////////////////////////////////////////////////////////////////; /// Get the sysconfig directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Safety,Avoid,Avoid,3,"// Avoid returning a reference to a temporary because of the conversion; // between std::string and TString.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:116,Deployability,install,installation,116,"////////////////////////////////////////////////////////////////////////////////; /// Get the data directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:125,Deployability,install,installation,125,"////////////////////////////////////////////////////////////////////////////////; /// Get the documentation directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:117,Deployability,install,installation,117,"////////////////////////////////////////////////////////////////////////////////; /// Get the macro directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:121,Deployability,install,installation,121,"////////////////////////////////////////////////////////////////////////////////; /// Get the tutorials directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:91,Availability,down,down,91,"////////////////////////////////////////////////////////////////////////////////; /// Shut down ROOT.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:118,Deployability,install,installation,118,"////////////////////////////////////////////////////////////////////////////////; /// Get the source directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:111,Deployability,install,installation,111,"////////////////////////////////////////////////////////////////////////////////; /// Get the icon path in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:117,Deployability,install,installation,117,"////////////////////////////////////////////////////////////////////////////////; /// Get the fonts directory in the installation. Static utility function.",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:121,Deployability,install,installation,121,"////////////////////////////////////////////////////////////////////////////////; /// Get the tutorials directory in the installation. Static utility function.; /// Backward compatibility function - do not use for new code",MatchSource.CODE_COMMENT,core/base/src/TROOT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStopwatch.cxx:86,Usability,Resume,Resume,86,"////////////////////////////////////////////////////////////////////////////////; /// Resume a stopped stopwatch. The stopwatch continues counting from the last; /// Start() onwards (this is like the laptimer function).",MatchSource.CODE_COMMENT,core/base/src/TStopwatch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStopwatch.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:917,Deployability,toggle,toggle,917,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/07/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TStorage; \ingroup Base. Storage manager. The storage manager works best in conjunction with; the custom ROOT new and delete operators defined in the file; NewDelete.cxx (libNew.so). Only when using the custom allocation; operators will memory usage statistics be gathered using the; TStorage EnterStat(), RemoveStat(), etc. functions.; Memory checking is by default enabled (when using libNew.so) and; usage statistics is gathered. Using the resource (in .rootrc):; Root.MemStat one can toggle statistics gathering on or off. More; specifically on can trap the allocation of a block of memory of a; certain size. This can be specified using the resource:; Root.MemStat.size, using the resource Root.MemStat.cnt one can; specify after how many allocations of this size the trap should; occur. Set the compile option R__NOSTATS to de-activate all memory checking; and statistics gathering in the system.; */",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate a block of memory, that later can be resized using; /// TStorage::ReAlloc().",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:89,Energy Efficiency,allocate,allocate,89,"////////////////////////////////////////////////////////////////////////////////; /// De-allocate block of memory, that was allocated via TStorage::Alloc().",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:124,Energy Efficiency,allocate,allocated,124,"////////////////////////////////////////////////////////////////////////////////; /// De-allocate block of memory, that was allocated via TStorage::Alloc().",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:94,Energy Efficiency,allocate,allocate,94,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate a TObject on the heap (via TObject::operator new()).; /// Directly after this routine one can call (in the TObject ctor); /// TStorage::FilledByObjectAlloc() to find out if the just created object is on; /// the heap. This technique is necessary as there is one stack per thread; /// and we can not rely on comparison with the current stack memory position.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:181,Integrability,rout,routine,181,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate a TObject on the heap (via TObject::operator new()).; /// Directly after this routine one can call (in the TObject ctor); /// TStorage::FilledByObjectAlloc() to find out if the just created object is on; /// the heap. This technique is necessary as there is one stack per thread; /// and we can not rely on comparison with the current stack memory position.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:94,Energy Efficiency,allocate,allocate,94,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate array of TObject on the heap (via TObject::operator new[]()).; /// Unlike the 'singular' ObjectAlloc, we do not mark those object has being; /// allocated on the heap as they can not be individually deleted.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:248,Energy Efficiency,allocate,allocated,248,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate array of TObject on the heap (via TObject::operator new[]()).; /// Unlike the 'singular' ObjectAlloc, we do not mark those object has being; /// allocated on the heap as they can not be individually deleted.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:94,Energy Efficiency,allocate,allocate,94,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); /// in position vp. vp is already allocated (maybe on heap, maybe on; /// stack) so just return.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx:202,Energy Efficiency,allocate,allocated,202,"////////////////////////////////////////////////////////////////////////////////; /// Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); /// in position vp. vp is already allocated (maybe on heap, maybe on; /// stack) so just return.",MatchSource.CODE_COMMENT,core/base/src/TStorage.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStorage.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:651,Performance,Optimiz,Optimization,651,"// @(#)root/base:$Id$; // Author: Fons Rademakers 04/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TString; \ingroup Base. Basic string class. Cannot be stored in a TCollection... use TObjString instead. The underlying string is stored as a char* that can be accessed via; TString::Data().; TString provides Short String Optimization (SSO) so that short; strings (<15 on 64-bit and <11 on 32-bit) are contained in the; TString internal data structure without the need for mallocing the; required space. Substring operations are provided by the TSubString class, which; holds a reference to the original string and its data, along with; the offset and length of the substring. To retrieve the substring; as a TString, construct a TString from it, eg:; ~~~ {.cpp}; root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello""; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:589,Security,access,accessed,589,"// @(#)root/base:$Id$; // Author: Fons Rademakers 04/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TString; \ingroup Base. Basic string class. Cannot be stored in a TCollection... use TObjString instead. The underlying string is stored as a char* that can be accessed via; TString::Data().; TString provides Short String Optimization (SSO) so that short; strings (<15 on 64-bit and <11 on 32-bit) are contained in the; TString internal data structure without the need for mallocing the; required space. Substring operations are provided by the TSubString class, which; holds a reference to the original string and its data, along with; the offset and length of the substring. To retrieve the substring; as a TString, construct a TString from it, eg:; ~~~ {.cpp}; root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello""; ~~~; */",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:34,Safety,avoid,avoid,34,"// Amount to shift hash values to avoid clustering",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:19,Security,hash,hash,19,"// Amount to shift hash values to avoid clustering",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:258,Modifiability,variab,variable,258,"////////////////////////////////////////////////////////////////////////////////; //; // In what follows, fCap is the length of the underlying representation; // vector. Hence, the capacity for a null terminated string held in this; // vector is fCap-1. The variable fSize is the length of the held; // string, excluding the terminating null.; //; // The algorithms make no assumptions about whether internal strings; // hold embedded nulls. However, they do assume that any string; // passed in as an argument that does not have a length count is null; // terminated and therefore has no embedded nulls.; //; // The internal string is always null terminated.; ////////////////////////////////////////////////////////////////////////////////; /// TString default ctor.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:297,Energy Efficiency,allocate,allocated,297,"////////////////////////////////////////////////////////////////////////////////; /// Private member function returning an empty string representation of; /// size capacity and containing nchar characters.; /// \warning If nchar > MaxSize(), then Fatal() is raised and only MaxSize() elements are allocated",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:102,Security,Hash,Hash,102,"////////////////////////////////////////////////////////////////////////////////; /// Utility used by Hash().",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:110,Security,hash,hash,110,"////////////////////////////////////////////////////////////////////////////////; /// Return a case-sensitive hash value (endian independent).",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:110,Security,hash,hash,110,"////////////////////////////////////////////////////////////////////////////////; /// Return a case-sensitive hash value (endian independent).",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:112,Security,hash,hash,112,"////////////////////////////////////////////////////////////////////////////////; /// Return a case-insensitive hash value (endian independent).",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:93,Security,hash,hash,93,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:129,Performance,optimiz,optimized,129,"// MurmurHash3 - a blazingly fast public domain hash!; // See http://code.google.com/p/smhasher/; // There are two versions, one optimized for 32 bit and one for 64 bit.; // They give different hash results!; // We use only the 64 bit version which also works on 32 bit.; //-----------------------------------------------------------------------------; // MurmurHash3 was written by Austin Appleby, and is placed in the public; // domain. The author hereby disclaims copyright to this source code.; // Note - The x86 and x64 versions do _not_ produce the same results, as the; // algorithms are optimized for their respective platforms. You can still; // compile and run any of them on any platform, but your performance with the; // non-native version will be less than optimal.; //-----------------------------------------------------------------------------; // Platform-specific functions and macros; // From MurmurHash.h:",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:595,Performance,optimiz,optimized,595,"// MurmurHash3 - a blazingly fast public domain hash!; // See http://code.google.com/p/smhasher/; // There are two versions, one optimized for 32 bit and one for 64 bit.; // They give different hash results!; // We use only the 64 bit version which also works on 32 bit.; //-----------------------------------------------------------------------------; // MurmurHash3 was written by Austin Appleby, and is placed in the public; // domain. The author hereby disclaims copyright to this source code.; // Note - The x86 and x64 versions do _not_ produce the same results, as the; // algorithms are optimized for their respective platforms. You can still; // compile and run any of them on any platform, but your performance with the; // non-native version will be less than optimal.; //-----------------------------------------------------------------------------; // Platform-specific functions and macros; // From MurmurHash.h:",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:709,Performance,perform,performance,709,"// MurmurHash3 - a blazingly fast public domain hash!; // See http://code.google.com/p/smhasher/; // There are two versions, one optimized for 32 bit and one for 64 bit.; // They give different hash results!; // We use only the 64 bit version which also works on 32 bit.; //-----------------------------------------------------------------------------; // MurmurHash3 was written by Austin Appleby, and is placed in the public; // domain. The author hereby disclaims copyright to this source code.; // Note - The x86 and x64 versions do _not_ produce the same results, as the; // algorithms are optimized for their respective platforms. You can still; // compile and run any of them on any platform, but your performance with the; // non-native version will be less than optimal.; //-----------------------------------------------------------------------------; // Platform-specific functions and macros; // From MurmurHash.h:",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:48,Security,hash,hash,48,"// MurmurHash3 - a blazingly fast public domain hash!; // See http://code.google.com/p/smhasher/; // There are two versions, one optimized for 32 bit and one for 64 bit.; // They give different hash results!; // We use only the 64 bit version which also works on 32 bit.; //-----------------------------------------------------------------------------; // MurmurHash3 was written by Austin Appleby, and is placed in the public; // domain. The author hereby disclaims copyright to this source code.; // Note - The x86 and x64 versions do _not_ produce the same results, as the; // algorithms are optimized for their respective platforms. You can still; // compile and run any of them on any platform, but your performance with the; // non-native version will be less than optimal.; //-----------------------------------------------------------------------------; // Platform-specific functions and macros; // From MurmurHash.h:",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:194,Security,hash,hash,194,"// MurmurHash3 - a blazingly fast public domain hash!; // See http://code.google.com/p/smhasher/; // There are two versions, one optimized for 32 bit and one for 64 bit.; // They give different hash results!; // We use only the 64 bit version which also works on 32 bit.; //-----------------------------------------------------------------------------; // MurmurHash3 was written by Austin Appleby, and is placed in the public; // domain. The author hereby disclaims copyright to this source code.; // Note - The x86 and x64 versions do _not_ produce the same results, as the; // algorithms are optimized for their respective platforms. You can still; // compile and run any of them on any platform, but your performance with the; // non-native version will be less than optimal.; //-----------------------------------------------------------------------------; // Platform-specific functions and macros; // From MurmurHash.h:",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:122,Security,hash,hash,122,"/////////////////////////////////////////////////////////////////////////////; /// Finalization mix - force all bits of a hash block to avalanche",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:104,Security,hash,hashed,104,"/////////////////////////////////////////////////////////////////////////////; /// ""key"" is input to be hashed.; /// ""len"" is the number of bytes to hash starting at ""key"".; /// ""seed"" is a hash seed, ""out"" is a buffer (128 bytes) that will receive; /// the results.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:149,Security,hash,hash,149,"/////////////////////////////////////////////////////////////////////////////; /// ""key"" is input to be hashed.; /// ""len"" is the number of bytes to hash starting at ""key"".; /// ""seed"" is a hash seed, ""out"" is a buffer (128 bytes) that will receive; /// the results.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:190,Security,hash,hash,190,"/////////////////////////////////////////////////////////////////////////////; /// ""key"" is input to be hashed.; /// ""len"" is the number of bytes to hash starting at ""key"".; /// ""seed"" is a hash seed, ""out"" is a buffer (128 bytes) that will receive; /// the results.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:375,Integrability,depend,depending,375,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:97,Security,hash,hash,97,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:180,Security,Hash,Hash,180,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:231,Security,Hash,Hash,231,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:292,Security,Hash,Hash,292,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:359,Security,hash,hash,359,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:465,Security,hash,hashes,465,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:426,Usability,simpl,simple,426,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:21,Security,hash,hash,21,"// simple, superfast hash for pointers and alike",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:3,Usability,simpl,simple,3,"// simple, superfast hash for pointers and alike",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:3,Safety,Avoid,Avoid,3,"// Avoid a dereference w dumb compiler",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:3,Safety,Avoid,Avoid,3,"// Avoid a dereference w dumb compiler",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear string without changing its capacity.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:232,Energy Efficiency,allocate,allocated,232,"////////////////////////////////////////////////////////////////////////////////; /// Clear string and make sure it has a capacity of nc.; /// \warning If nc > MaxSize(), then Fatal() is raised, and only MaxSize(); /// elements are allocated if Fatal does not abort; /// \return Resulting allocated capacity (after clamping, if needed)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:289,Energy Efficiency,allocate,allocated,289,"////////////////////////////////////////////////////////////////////////////////; /// Clear string and make sure it has a capacity of nc.; /// \warning If nc > MaxSize(), then Fatal() is raised, and only MaxSize(); /// elements are allocated if Fatal does not abort; /// \return Resulting allocated capacity (after clamping, if needed)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:260,Safety,abort,abort,260,"////////////////////////////////////////////////////////////////////////////////; /// Clear string and make sure it has a capacity of nc.; /// \warning If nc > MaxSize(), then Fatal() is raised, and only MaxSize(); /// elements are allocated if Fatal does not abort; /// \return Resulting allocated capacity (after clamping, if needed)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear string and make sure it has a capacity of nc.; /// \warning If nc > MaxSize(), then Fatal() is raised, and only MaxSize(); /// elements are allocated if Fatal does not abort; /// \return Resulting allocated capacity (after clamping, if needed)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:41,Safety,abort,abort,41,"// In the rare case where Fatal does not abort, we erase, clamp and continue",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:30,Safety,avoid,avoid,30,"// Clamping after deleting to avoid corruption",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:318,Energy Efficiency,allocate,allocated,318,"////////////////////////////////////////////////////////////////////////////////; /// Make self a distinct copy with capacity of at least tot, where tot cannot; /// be smaller than the current length. Preserve previous contents.; /// \warning If tot > MaxSize(), then Fatal() is raised and only MaxSize() elements are allocated",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:119,Usability,Simpl,Simplified,119,"////////////////////////////////////////////////////////////////////////////////; /// Read TString object from buffer. Simplified version of; /// TBuffer::ReadObject (does not keep track of multiple; /// references to same string). We need to have it here; /// because TBuffer::ReadObject can only handle descendant; /// of TObject.",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:118,Usability,Simpl,Simplified,118,"////////////////////////////////////////////////////////////////////////////////; /// Write TString object to buffer. Simplified version of; /// TBuffer::WriteObject (does not keep track of multiple; /// references to the same string). We need to have it here; /// because TBuffer::ReadObject can only handle descendant; /// of TObject",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:2,Testability,test,test,2,"//test if it is now uniquely composed of numbers",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:7,Energy Efficiency,allocate,allocate,7,"// Pre-allocate enough space (35=kMaxDigits)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:7,Energy Efficiency,allocate,allocate,7,"// Pre-allocate enough space (35=kMaxDigits)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:7,Energy Efficiency,allocate,allocate,7,"// Pre-allocate enough space (35=kMaxDigits)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:7,Energy Efficiency,allocate,allocate,7,"// Pre-allocate enough space (35=kMaxDigits)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:16,Safety,avoid,avoid,16,"// !isSigned to avoid strings beginning with ""-+""",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:3,Deployability,Update,Update,3,"// Update buflen, as Clobber clamps length to MaxSize (if Fatal does not abort)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:73,Safety,abort,abort,73,"// Update buflen, as Clobber clamps length to MaxSize (if Fatal does not abort)",MatchSource.CODE_COMMENT,core/base/src/TString.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStringLong.cxx:13,Safety,avoid,avoid,13,"// Remove to avoid deprecation warnings during root build; //ClassImp(TStringLong);; ////////////////////////////////////////////////////////////////////////////////; ///constructor",MatchSource.CODE_COMMENT,core/base/src/TStringLong.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStringLong.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:442,Modifiability,inherit,inherit,442,"/** \class TStyle; \ingroup Base; \ingroup GraphicsAtt. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes; like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their; default attributes are taken from the current style. The current style is an object; of the class[TStyle](https://root.cern/doc/master/classTStyle.html) and can be; referenced via the global variable `gStyle` (in TStyle.h). ROOT provides two styles called ""Default"" and ""Plain"". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:761,Modifiability,variab,variable,761,"/** \class TStyle; \ingroup Base; \ingroup GraphicsAtt. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes; like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their; default attributes are taken from the current style. The current style is an object; of the class[TStyle](https://root.cern/doc/master/classTStyle.html) and can be; referenced via the global variable `gStyle` (in TStyle.h). ROOT provides two styles called ""Default"" and ""Plain"". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:2811,Modifiability,extend,extended,2811,"r to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.2);; gStyle->SetLabelFont(72);; ```. Note that when an object is created, its attributes are taken from the current; style. For example, you may have created an histogram in a previous session,; saved it in a file. Meanwhile, if you have changed the style, the histogram will; be drawn with the old attributes. You can force the current style attributes to; be set when you read an object from a file by calling:. ```; gROOT->ForceStyle();; ```. before reading the objects from the file. Let's assume you have a canvas or pad with your histogram or any other object,; you can force these objects to get the attributes of the current style via:. ```; canvas->UseCurrentStyle();; ```. The description of the style functions should be clear from the name of the; TStyle Setters or Getters. Some functions have an extended description, in particular:. - TStyle:SetLabelFont.; - TStyle:SetLineStyleString, to set the format of dashed lines.; - TStyle:SetOptStat.; - TStyle:SetPalette to change the colors palette.; - TStyle:SetTitleOffset. */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:165,Security,access,accessed,165,"/** \class TStyle; \ingroup Base; \ingroup GraphicsAtt. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes; like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their; default attributes are taken from the current style. The current style is an object; of the class[TStyle](https://root.cern/doc/master/classTStyle.html) and can be; referenced via the global variable `gStyle` (in TStyle.h). ROOT provides two styles called ""Default"" and ""Plain"". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:1844,Testability,log,log,1844,""". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.2);; gStyle->SetLabelFont(72);; ```. Note that when an object is created, its attributes are taken from the current; style. For example, you may have created an histogram in a previous session,; saved it in a file. Meanwhile, if you have changed the style, the histogram will; be drawn with the old attributes. You can force the current style attributes to; be set when you read an object from a file by calling:. ```; gROOT->ForceStyle();; ```. before reading the objects from the file. Let's assume you have a canvas or pad with your histogram or any other object,; you can force these objects to get the attributes of the current style via:. ```; canvas->UseCurrentStyle();; ```. The description of the style functions should be clear from the name of the; TStyle Setters or Getters. Some functions have an extended description, in particular",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:881,Usability,simpl,simply,881,"/** \class TStyle; \ingroup Base; \ingroup GraphicsAtt. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes; like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their; default attributes are taken from the current style. The current style is an object; of the class[TStyle](https://root.cern/doc/master/classTStyle.html) and can be; referenced via the global variable `gStyle` (in TStyle.h). ROOT provides two styles called ""Default"" and ""Plain"". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:2733,Usability,clear,clear,2733,"r to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.2);; gStyle->SetLabelFont(72);; ```. Note that when an object is created, its attributes are taken from the current; style. For example, you may have created an histogram in a previous session,; saved it in a file. Meanwhile, if you have changed the style, the histogram will; be drawn with the old attributes. You can force the current style attributes to; be set when you read an object from a file by calling:. ```; gROOT->ForceStyle();; ```. before reading the objects from the file. Let's assume you have a canvas or pad with your histogram or any other object,; you can force these objects to get the attributes of the current style via:. ```; canvas->UseCurrentStyle();; ```. The description of the style functions should be clear from the name of the; TStyle Setters or Getters. Some functions have an extended description, in particular:. - TStyle:SetLabelFont.; - TStyle:SetLineStyleString, to set the format of dashed lines.; - TStyle:SetOptStat.; - TStyle:SetPalette to change the colors palette.; - TStyle:SetTitleOffset. */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:14,Availability,error,error,14,"// get rid of error bar caps",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:38,Availability,error,error,38,"// postscript dashes; // get rid of X error bars",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:14,Availability,error,error,14,"// get rid of error bar caps",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:536,Energy Efficiency,Green,Green,536,"////////////////////////////////////////////////////////////////////////////////; /// Define the color model used by TPostScript and TPDF (RGB or CMYK).; /// CMY and CMYK models are subtractive color models unlike RGB which is; /// additive. They are mainly used for printing purposes. CMY means Cyan Magenta; /// Yellow. To convert RGB to CMY it is enough to do: C=1-R, M=1-G and Y=1-B.; /// CMYK has one more component K (black). The conversion from RGB to CMYK is:; /// ~~~ {.cpp}; /// Double_t Black = TMath::Min(TMath::Min(1-Red,1-Green),1-Blue);; /// Double_t Cyan = (1-Red-Black)/(1-Black);; /// Double_t Magenta = (1-Green-Black)/(1-Black);; /// Double_t Yellow = (1-Blue-Black)/(1-Black);; /// ~~~; /// CMYK adds the black component which allows better quality for black; /// printing. PostScript and PDF support the CMYK model.; ///; /// - c = 0 means TPostScript and TPDF will use RGB color model (default); /// - c = 1 means TPostScript and TPDF will use CMYK color model",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:625,Energy Efficiency,Green,Green-Black,625,"////////////////////////////////////////////////////////////////////////////////; /// Define the color model used by TPostScript and TPDF (RGB or CMYK).; /// CMY and CMYK models are subtractive color models unlike RGB which is; /// additive. They are mainly used for printing purposes. CMY means Cyan Magenta; /// Yellow. To convert RGB to CMY it is enough to do: C=1-R, M=1-G and Y=1-B.; /// CMYK has one more component K (black). The conversion from RGB to CMYK is:; /// ~~~ {.cpp}; /// Double_t Black = TMath::Min(TMath::Min(1-Red,1-Green),1-Blue);; /// Double_t Cyan = (1-Red-Black)/(1-Black);; /// Double_t Magenta = (1-Green-Black)/(1-Black);; /// Double_t Yellow = (1-Blue-Black)/(1-Black);; /// ~~~; /// CMYK adds the black component which allows better quality for black; /// printing. PostScript and PDF support the CMYK model.; ///; /// - c = 0 means TPostScript and TPDF will use RGB color model (default); /// - c = 1 means TPostScript and TPDF will use CMYK color model",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:159,Availability,error,error,159,"////////////////////////////////////////////////////////////////////////////////; /// Set the size (in pixels) of the small lines drawn at the; /// end of the error bars (TH1 or TGraphErrors).; ///; /// The default value is 2 pixels.; /// Set np=0 to remove these lines",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:312,Performance,scalab,scalable,312,"////////////////////////////////////////////////////////////////////////////////; /// Set font number used to draw axis labels.; /// - font : Text font code = 10*fontnumber + precision; /// - Font numbers must be between 1 and 14; /// - precision = 1 fast hardware fonts (steps in the size); /// - precision = 2 scalable and rotatable hardware fonts; /// The default font number is 62.; /// axis specifies which axis (""x"",""y"",""z""), default = ""x""; /// if axis=""xyz"" set all 3 axes",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:370,Availability,error,errors,370,"////////////////////////////////////////////////////////////////////////////////; /// The type of information about fit parameters printed in the histogram; /// statistics box can be selected via the parameter `mode`.; /// The parameter mode can be = `pcev`:; /// - p = 1; print Probability; /// - c = 1; print Chisquare/Number of degrees of freedom; /// - e = 1; print errors (if e=1, v must be 1); /// - v = 1; print name/values of parameters; /// Example: `gStyle->SetOptFit(1011);`; /// print fit probability, parameter names/values and errors.; /// - When ""v""=1 is specified, only the non-fixed parameters are shown.; /// - When ""v""=2 all parameters are shown.; ///; /// #### Notes:; ///; /// - never call `SetOptFit(000111);` but `SetOptFit(111)`, 000111 will; /// be taken as an octal number !!; /// - `gStyle->SetOptFit(1)` is a shortcut allowing to set the most common; /// case and is equivalent to `gStyle->SetOptFit(111)`; /// - At ROOT startup the option fit is set to `0`. So, to see the fit parameters; /// on all plot resulting from a fit, a call to `gStyle->SetOptFit()` with a; /// non null value should be done. One can put it in the `rootlogon.C` file to; /// always have it.; ///; /// see also SetOptStat below.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:541,Availability,error,errors,541,"////////////////////////////////////////////////////////////////////////////////; /// The type of information about fit parameters printed in the histogram; /// statistics box can be selected via the parameter `mode`.; /// The parameter mode can be = `pcev`:; /// - p = 1; print Probability; /// - c = 1; print Chisquare/Number of degrees of freedom; /// - e = 1; print errors (if e=1, v must be 1); /// - v = 1; print name/values of parameters; /// Example: `gStyle->SetOptFit(1011);`; /// print fit probability, parameter names/values and errors.; /// - When ""v""=1 is specified, only the non-fixed parameters are shown.; /// - When ""v""=2 all parameters are shown.; ///; /// #### Notes:; ///; /// - never call `SetOptFit(000111);` but `SetOptFit(111)`, 000111 will; /// be taken as an octal number !!; /// - `gStyle->SetOptFit(1)` is a shortcut allowing to set the most common; /// case and is equivalent to `gStyle->SetOptFit(111)`; /// - At ROOT startup the option fit is set to `0`. So, to see the fit parameters; /// on all plot resulting from a fit, a call to `gStyle->SetOptFit()` with a; /// non null value should be done. One can put it in the `rootlogon.C` file to; /// always have it.; ///; /// see also SetOptStat below.",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:307,Availability,error,error,307,"////////////////////////////////////////////////////////////////////////////////; /// The type of information printed in the histogram statistics box; /// can be selected via the parameter mode.; /// The parameter mode can be = `ksiourmen`; /// - k = 1; kurtosis printed; /// - k = 2; kurtosis and kurtosis error printed; /// - s = 1; skewness printed; /// - s = 2; skewness and skewness error printed; /// - i = 1; integral of bins printed; /// - i = 2; integral of bins with option ""width"" printed; /// - o = 1; number of overflows printed; /// - u = 1; number of underflows printed; /// - r = 1; rms printed; /// - r = 2; rms and rms error printed; /// - m = 1; mean value printed; /// - m = 2; mean and mean error values printed; /// - e = 1; number of entries printed; /// - n = 1; name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(11);`; /// print only name of histogram and number of entries.; /// `gStyle->SetOptStat(1101);` displays the name of histogram, mean value and RMS.; ///; /// #### Notes:; ///; /// - never call `SetOptStat(000111);` but `SetOptStat(111)`, 000111 will; /// be taken as an octal number !!; /// - `SetOptStat(1)` is s shortcut allowing to set the most common case, and is; /// taken as `SetOptStat(1111)` (for backward compatibility with older versions.; /// If you want to print only the name of the histogram call `SetOptStat(1000000001)`.; /// - that in case of 2-D histograms, when selecting just underflow (10000); /// or overflow (100000), the stats box will show all combinations; /// of underflow/overflows and not just one single number!",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:388,Availability,error,error,388,"////////////////////////////////////////////////////////////////////////////////; /// The type of information printed in the histogram statistics box; /// can be selected via the parameter mode.; /// The parameter mode can be = `ksiourmen`; /// - k = 1; kurtosis printed; /// - k = 2; kurtosis and kurtosis error printed; /// - s = 1; skewness printed; /// - s = 2; skewness and skewness error printed; /// - i = 1; integral of bins printed; /// - i = 2; integral of bins with option ""width"" printed; /// - o = 1; number of overflows printed; /// - u = 1; number of underflows printed; /// - r = 1; rms printed; /// - r = 2; rms and rms error printed; /// - m = 1; mean value printed; /// - m = 2; mean and mean error values printed; /// - e = 1; number of entries printed; /// - n = 1; name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(11);`; /// print only name of histogram and number of entries.; /// `gStyle->SetOptStat(1101);` displays the name of histogram, mean value and RMS.; ///; /// #### Notes:; ///; /// - never call `SetOptStat(000111);` but `SetOptStat(111)`, 000111 will; /// be taken as an octal number !!; /// - `SetOptStat(1)` is s shortcut allowing to set the most common case, and is; /// taken as `SetOptStat(1111)` (for backward compatibility with older versions.; /// If you want to print only the name of the histogram call `SetOptStat(1000000001)`.; /// - that in case of 2-D histograms, when selecting just underflow (10000); /// or overflow (100000), the stats box will show all combinations; /// of underflow/overflows and not just one single number!",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:637,Availability,error,error,637,"////////////////////////////////////////////////////////////////////////////////; /// The type of information printed in the histogram statistics box; /// can be selected via the parameter mode.; /// The parameter mode can be = `ksiourmen`; /// - k = 1; kurtosis printed; /// - k = 2; kurtosis and kurtosis error printed; /// - s = 1; skewness printed; /// - s = 2; skewness and skewness error printed; /// - i = 1; integral of bins printed; /// - i = 2; integral of bins with option ""width"" printed; /// - o = 1; number of overflows printed; /// - u = 1; number of underflows printed; /// - r = 1; rms printed; /// - r = 2; rms and rms error printed; /// - m = 1; mean value printed; /// - m = 2; mean and mean error values printed; /// - e = 1; number of entries printed; /// - n = 1; name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(11);`; /// print only name of histogram and number of entries.; /// `gStyle->SetOptStat(1101);` displays the name of histogram, mean value and RMS.; ///; /// #### Notes:; ///; /// - never call `SetOptStat(000111);` but `SetOptStat(111)`, 000111 will; /// be taken as an octal number !!; /// - `SetOptStat(1)` is s shortcut allowing to set the most common case, and is; /// taken as `SetOptStat(1111)` (for backward compatibility with older versions.; /// If you want to print only the name of the histogram call `SetOptStat(1000000001)`.; /// - that in case of 2-D histograms, when selecting just underflow (10000); /// or overflow (100000), the stats box will show all combinations; /// of underflow/overflows and not just one single number!",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:712,Availability,error,error,712,"////////////////////////////////////////////////////////////////////////////////; /// The type of information printed in the histogram statistics box; /// can be selected via the parameter mode.; /// The parameter mode can be = `ksiourmen`; /// - k = 1; kurtosis printed; /// - k = 2; kurtosis and kurtosis error printed; /// - s = 1; skewness printed; /// - s = 2; skewness and skewness error printed; /// - i = 1; integral of bins printed; /// - i = 2; integral of bins with option ""width"" printed; /// - o = 1; number of overflows printed; /// - u = 1; number of underflows printed; /// - r = 1; rms printed; /// - r = 2; rms and rms error printed; /// - m = 1; mean value printed; /// - m = 2; mean and mean error values printed; /// - e = 1; number of entries printed; /// - n = 1; name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(11);`; /// print only name of histogram and number of entries.; /// `gStyle->SetOptStat(1101);` displays the name of histogram, mean value and RMS.; ///; /// #### Notes:; ///; /// - never call `SetOptStat(000111);` but `SetOptStat(111)`, 000111 will; /// be taken as an octal number !!; /// - `SetOptStat(1)` is s shortcut allowing to set the most common case, and is; /// taken as `SetOptStat(1111)` (for backward compatibility with older versions.; /// If you want to print only the name of the histogram call `SetOptStat(1000000001)`.; /// - that in case of 2-D histograms, when selecting just underflow (10000); /// or overflow (100000), the stats box will show all combinations; /// of underflow/overflows and not just one single number!",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:206,Availability,error,error,206,"////////////////////////////////////////////////////////////////////////////////; /// The parameter mode can be any combination of kKsSiourRmMen; /// - k : kurtosis printed; /// - K : kurtosis and kurtosis error printed; /// - s : skewness printed; /// - S : skewness and skewness error printed; /// - i : integral of bins printed; /// - I : integral of bins with option ""width"" printed; /// - o : number of overflows printed; /// - u : number of underflows printed; /// - r : rms printed; /// - R : rms and rms error printed; /// - m : mean value printed; /// - M : mean value mean error values printed; /// - e : number of entries printed; /// - n : name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(""ne"");`; /// print only name of histogram and number of entries.; ///; /// - `gStyle->SetOptStat(""n"")` print only the name of the histogram; /// - `gStyle->SetOptStat(""nemr"")` is the default",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:281,Availability,error,error,281,"////////////////////////////////////////////////////////////////////////////////; /// The parameter mode can be any combination of kKsSiourRmMen; /// - k : kurtosis printed; /// - K : kurtosis and kurtosis error printed; /// - s : skewness printed; /// - S : skewness and skewness error printed; /// - i : integral of bins printed; /// - I : integral of bins with option ""width"" printed; /// - o : number of overflows printed; /// - u : number of underflows printed; /// - r : rms printed; /// - R : rms and rms error printed; /// - m : mean value printed; /// - M : mean value mean error values printed; /// - e : number of entries printed; /// - n : name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(""ne"");`; /// print only name of histogram and number of entries.; ///; /// - `gStyle->SetOptStat(""n"")` print only the name of the histogram; /// - `gStyle->SetOptStat(""nemr"")` is the default",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:512,Availability,error,error,512,"////////////////////////////////////////////////////////////////////////////////; /// The parameter mode can be any combination of kKsSiourRmMen; /// - k : kurtosis printed; /// - K : kurtosis and kurtosis error printed; /// - s : skewness printed; /// - S : skewness and skewness error printed; /// - i : integral of bins printed; /// - I : integral of bins with option ""width"" printed; /// - o : number of overflows printed; /// - u : number of underflows printed; /// - r : rms printed; /// - R : rms and rms error printed; /// - m : mean value printed; /// - M : mean value mean error values printed; /// - e : number of entries printed; /// - n : name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(""ne"");`; /// print only name of histogram and number of entries.; ///; /// - `gStyle->SetOptStat(""n"")` print only the name of the histogram; /// - `gStyle->SetOptStat(""nemr"")` is the default",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:583,Availability,error,error,583,"////////////////////////////////////////////////////////////////////////////////; /// The parameter mode can be any combination of kKsSiourRmMen; /// - k : kurtosis printed; /// - K : kurtosis and kurtosis error printed; /// - s : skewness printed; /// - S : skewness and skewness error printed; /// - i : integral of bins printed; /// - I : integral of bins with option ""width"" printed; /// - o : number of overflows printed; /// - u : number of underflows printed; /// - r : rms printed; /// - R : rms and rms error printed; /// - m : mean value printed; /// - M : mean value mean error values printed; /// - e : number of entries printed; /// - n : name of histogram is printed; ///; /// Example: `gStyle->SetOptStat(""ne"");`; /// print only name of histogram and number of entries.; ///; /// - `gStyle->SetOptStat(""n"")` print only the name of the histogram; /// - `gStyle->SetOptStat(""nemr"")` is the default",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:3,Modifiability,Inherit,Inheritance,3,"// Inheritance :; // TAttLine :",MatchSource.CODE_COMMENT,core/base/src/TStyle.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:186,Safety,avoid,avoid,186,"////////////////////////////////////////////////////////////////////////////////; /// De-activate a system event handler. Use this method to temporarily; /// disable an event handler to avoid it from being recursively called.; /// Use DeActivate() / Activate() instead of Remove() / Add() for this; /// purpose, since the Add() will add the handler back to the end of; /// the list of handlers and cause it to be called again for the same,; /// already handled, event.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:129,Availability,mask,mask,129,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:201,Availability,mask,mask,201,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:267,Availability,mask,mask,267,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:161,Energy Efficiency,monitor,monitor,161,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:226,Energy Efficiency,monitor,monitor,226,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:298,Energy Efficiency,monitor,monitor,298,"////////////////////////////////////////////////////////////////////////////////; /// Create a file descriptor event handler. If mask=kRead then we; /// want to monitor the file for read readiness, if mask=kWrite; /// then we monitor the file for write readiness, if mask=kRead|kWrite; /// then we monitor both read and write readiness.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:99,Availability,mask,mask,99,"////////////////////////////////////////////////////////////////////////////////; /// Set interest mask to 'mask'.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:108,Availability,mask,mask,108,"////////////////////////////////////////////////////////////////////////////////; /// Set interest mask to 'mask'.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:597,Safety,Abort,Abort,597,"////////////////////////////////////////////////////////////////////////////////; /// Handle standard C++ exceptions intercepted by the TSystem::Run().; ///; /// Virtual method EStatus Handle(std::exception& exc) is called on the; /// collection of handlers registered to TSystem. The return value of; /// each handler influences the continuation of handling procedure:; /// - kSEProceed - Proceed with passing of the exception to other; /// handlers, the exception has not been handled.; /// - kSEHandled - The exception has been handled, do not pass it to; /// other handlers.; /// - kSEAbort - Abort application.; /// If all handlers return kSEProceed TSystem::Run() rethrows the; /// exception, possibly resulting in process abortion.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx:729,Safety,abort,abortion,729,"////////////////////////////////////////////////////////////////////////////////; /// Handle standard C++ exceptions intercepted by the TSystem::Run().; ///; /// Virtual method EStatus Handle(std::exception& exc) is called on the; /// collection of handlers registered to TSystem. The return value of; /// each handler influences the continuation of handling procedure:; /// - kSEProceed - Proceed with passing of the exception to other; /// handlers, the exception has not been handled.; /// - kSEHandled - The exception has been handled, do not pass it to; /// other handlers.; /// - kSEAbort - Abort application.; /// If all handlers return kSEProceed TSystem::Run() rethrows the; /// exception, possibly resulting in process abortion.",MatchSource.CODE_COMMENT,core/base/src/TSysEvtHandler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSysEvtHandler.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:535,Integrability,interface,interface,535,"// @(#)root/base:$Id: 8944840ba34631ec28efc779647618db43c0eee5 $; // Author: Fons Rademakers 15/09/95; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TSystem; \ingroup Base. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es.; */",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:849,Usability,simpl,simple,849,"// @(#)root/base:$Id: 8944840ba34631ec28efc779647618db43c0eee5 $; // Author: Fons Rademakers 15/09/95; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TSystem; \ingroup Base. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es.; */",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:33,Performance,Load,Load,33,"// Set in TVersionCheck, used in Load()",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:33,Performance,Load,Load,33,"// Set in TVersionCheck, used in Load()",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:96,Integrability,protocol,protocol,96,"////////////////////////////////////////////////////////////////////////////////; /// Strip off protocol string from specified path",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:102,Integrability,interface,interface,102,"////////////////////////////////////////////////////////////////////////////////; /// Create a new OS interface.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:100,Integrability,interface,interface,100,"////////////////////////////////////////////////////////////////////////////////; /// Delete the OS interface.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:104,Integrability,interface,interface,104,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the OS interface.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:110,Modifiability,variab,variable,110,"////////////////////////////////////////////////////////////////////////////////; /// Set DISPLAY environment variable based on utmp entry. Only for UNIX.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// Set the system error string. This string will be used by GetError().; /// To be used in case one does not want or can use the system error; /// string (e.g. because error is generated by a third party POSIX like; /// library that does not use standard errno).",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:219,Availability,error,error,219,"////////////////////////////////////////////////////////////////////////////////; /// Set the system error string. This string will be used by GetError().; /// To be used in case one does not want or can use the system error; /// string (e.g. because error is generated by a third party POSIX like; /// library that does not use standard errno).",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:251,Availability,error,error,251,"////////////////////////////////////////////////////////////////////////////////; /// Set the system error string. This string will be used by GetError().; /// To be used in case one does not want or can use the system error; /// string (e.g. because error is generated by a third party POSIX like; /// library that does not use standard errno).",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:100,Availability,error,error,100,"////////////////////////////////////////////////////////////////////////////////; /// Return system error string.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:230,Availability,error,error,230,"////////////////////////////////////////////////////////////////////////////////; /// Return cryptographic random number; /// Fill provided buffer with random values; /// Returns number of bytes written to buffer or -1 in case of error",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:119,Availability,error,error,119,"////////////////////////////////////////////////////////////////////////////////; /// Static function returning system error number.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:119,Availability,error,error,119,"////////////////////////////////////////////////////////////////////////////////; /// Static function resetting system error number.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:135,Integrability,interface,interface,135,"////////////////////////////////////////////////////////////////////////////////; /// Objects that should be deleted on exit of the OS interface.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:35,Integrability,interface,interface,35,"// Currently needed only for WinNT interface.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:389,Integrability,depend,depending,389,"////////////////////////////////////////////////////////////////////////////////; /// Process pending events (GUI, timers, sockets). Returns the result of; /// TROOT::IsInterrupted(). The interrupt flag (TROOT::SetInterrupt()); /// can be set during the handling of the events. This mechanism allows; /// macros running in tight calculating loops to be interrupted by some; /// GUI event (depending on the interval with which this method is; /// called). For example hitting ctrl-c in a canvas will set the; /// interrupt flag.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:86,Safety,Abort,Abort,86,"////////////////////////////////////////////////////////////////////////////////; /// Abort the application.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:273,Security,access,access,273,"//---- Directories -------------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Create helper TSystem to handle file and directory operations that; /// might be special for remote file access.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:78,Safety,avoid,avoid,78,"// well we should not have to make the root of the file system!; // (and this avoid infinite recursions!)",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:592,Availability,error,error,592,"//---- Paths & Files -----------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; /// environment variables in a pathname. If compatibility is not an issue; /// you can use on Unix directly $XXX. This is a protected function called; /// from the OS specific system classes, like TUnixSystem and TWinNTSystem.; /// Returns the expanded filename or 0 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:330,Modifiability,variab,variables,330,"//---- Paths & Files -----------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; /// environment variables in a pathname. If compatibility is not an issue; /// you can use on Unix directly $XXX. This is a protected function called; /// from the OS specific system classes, like TUnixSystem and TWinNTSystem.; /// Returns the expanded filename or 0 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:333,Availability,error,error,333,"//////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// This function is analogous to ExpandFileName(const char *), except that; /// it receives a TString reference of the pathname to be expanded.; /// Returns kTRUE in case of error and kFALSE otherwise.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:151,Availability,error,error,151,"////////////////////////////////////////////////////////////////////////////; /// Private method for pathname expansion.; /// Returns kTRUE in case of error and kFALSE otherwise.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:10,Usability,simpl,simple,10,"// not $, simple copy",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:248,Modifiability,variab,variables,248,"////////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; /// environment variables in a pathname. If compatibility is not an issue; /// you can use on Unix directly $XXX.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:248,Modifiability,variab,variables,248,"////////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; /// environment variables in a pathname. If compatibility is not an issue; /// you can use on Unix directly $XXX. The user must delete returned string.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:111,Security,access,access,111,"////////////////////////////////////////////////////////////////////////////////; /// Returns FALSE if one can access a file using the specified access mode.; /// The file name must not contain any special shell characters line ~ or $,; /// in those cases first call ExpandPathName().; /// Attention, bizarre convention of return value!!",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:145,Security,access,access,145,"////////////////////////////////////////////////////////////////////////////////; /// Returns FALSE if one can access a file using the specified access mode.; /// The file name must not contain any special shell characters line ~ or $,; /// in those cases first call ExpandPathName().; /// Attention, bizarre convention of return value!!",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:174,Safety,avoid,avoid,174,"////////////////////////////////////////////////////////////////////////////////; /// Returns TRUE if the url in 'path' points to the local file system.; /// This is used to avoid going through the NIC card for local operations.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:235,Availability,failure,failure,235,"////////////////////////////////////////////////////////////////////////////////; /// Copy a file. If overwrite is true and file already exists the; /// file will be overwritten. Returns 0 when successful, -1 in case; /// of file open failure, -2 in case the file already exists and overwrite; /// was false and -3 in case of error during copy.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:326,Availability,error,error,326,"////////////////////////////////////////////////////////////////////////////////; /// Copy a file. If overwrite is true and file already exists the; /// file will be overwritten. Returns 0 when successful, -1 in case; /// of file open failure, -2 in case the file already exists and overwrite; /// was false and -3 in case of error during copy.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:100,Modifiability,config,configured,100,"////////////////////////////////////////////////////////////////////////////////; /// Return a user configured or systemwide directory to create; /// temporary files in.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:555,Availability,error,error,555,"////////////////////////////////////////////////////////////////////////////////; /// Create a secure temporary file by appending a unique; /// 6 letter string to base. The file will be created in; /// a standard (system) directory or in the directory; /// provided in dir. Optionally one can provide suffix; /// append to the final name - like extension "".txt"" or "".html"".; /// The full filename is returned in base; /// and a filepointer is returned for safely writing to the file; /// (this avoids certain security problems). Returns 0 in case; /// of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:456,Safety,safe,safely,456,"////////////////////////////////////////////////////////////////////////////////; /// Create a secure temporary file by appending a unique; /// 6 letter string to base. The file will be created in; /// a standard (system) directory or in the directory; /// provided in dir. Optionally one can provide suffix; /// append to the final name - like extension "".txt"" or "".html"".; /// The full filename is returned in base; /// and a filepointer is returned for safely writing to the file; /// (this avoids certain security problems). Returns 0 in case; /// of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:494,Safety,avoid,avoids,494,"////////////////////////////////////////////////////////////////////////////////; /// Create a secure temporary file by appending a unique; /// 6 letter string to base. The file will be created in; /// a standard (system) directory or in the directory; /// provided in dir. Optionally one can provide suffix; /// append to the final name - like extension "".txt"" or "".html"".; /// The full filename is returned in base; /// and a filepointer is returned for safely writing to the file; /// (this avoids certain security problems). Returns 0 in case; /// of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:95,Security,secur,secure,95,"////////////////////////////////////////////////////////////////////////////////; /// Create a secure temporary file by appending a unique; /// 6 letter string to base. The file will be created in; /// a standard (system) directory or in the directory; /// provided in dir. Optionally one can provide suffix; /// append to the final name - like extension "".txt"" or "".html"".; /// The full filename is returned in base; /// and a filepointer is returned for safely writing to the file; /// (this avoids certain security problems). Returns 0 in case; /// of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:509,Security,secur,security,509,"////////////////////////////////////////////////////////////////////////////////; /// Create a secure temporary file by appending a unique; /// 6 letter string to base. The file will be created in; /// a standard (system) directory or in the directory; /// provided in dir. Optionally one can provide suffix; /// append to the final name - like extension "".txt"" or "".html"".; /// The full filename is returned in base; /// and a filepointer is returned for safely writing to the file; /// (this avoids certain security problems). Returns 0 in case; /// of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:138,Availability,error,error,138,"////////////////////////////////////////////////////////////////////////////////; /// Set the file permission bits. Returns -1 in case or error, 0 otherwise.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:121,Availability,mask,mask,121,"////////////////////////////////////////////////////////////////////////////////; /// Set the process file creation mode mask.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:222,Availability,error,error,222,"////////////////////////////////////////////////////////////////////////////////; /// Set the a files modification and access times. If actime = 0 it will be; /// set to the modtime. Returns 0 on success and -1 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:119,Security,access,access,119,"////////////////////////////////////////////////////////////////////////////////; /// Set the a files modification and access times. If actime = 0 it will be; /// set to the modtime. Returns 0 on success and -1 in case of error.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:206,Availability,error,error,206,"////////////////////////////////////////////////////////////////////////////////; /// Returns all user info in the UserGroup_t structure. The returned; /// structure must be deleted by the user. In case of error 0 is returned.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:256,Availability,error,error,256,"////////////////////////////////////////////////////////////////////////////////; /// Returns all user info in the UserGroup_t structure. If user = 0, returns; /// current user's id info. The returned structure must be deleted by the; /// user. In case of error 0 is returned.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:311,Availability,error,error,311,"////////////////////////////////////////////////////////////////////////////////; /// Returns all group info in the UserGroup_t structure. The only active; /// fields in the UserGroup_t structure for this call are:; /// - fGid and fGroup; /// The returned structure must be deleted by the user. In case of; /// error 0 is returned.",MatchSource.CODE_COMMENT,core/base/src/TSystem.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx
